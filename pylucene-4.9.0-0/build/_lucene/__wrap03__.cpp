#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupsCollector.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupsCollector::class$ = NULL;
            jmethodID *TermAllGroupsCollector::mids$ = NULL;
            bool TermAllGroupsCollector::live$ = false;

            jclass TermAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            void TermAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection TermAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void TermAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args);
            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data);
            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_TermAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupsCollector, t_TermAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, TermAllGroupsCollector, t_TermAllGroupsCollector_init_, 0, 0, t_TermAllGroupsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupsCollector::wrap_Object(const TermAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupsCollector), module, "TermAllGroupsCollector", 0);
            }

            void t_TermAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "class_", make_descriptor(TermAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupsCollector::wrap_Object(TermAllGroupsCollector(((t_TermAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0, a1));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopAnalyzer::class$ = NULL;
          jmethodID *StopAnalyzer::mids$ = NULL;
          bool StopAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *StopAnalyzer::ENGLISH_STOP_WORDS_SET = NULL;

          jclass StopAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_f88c7fb6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/File;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ENGLISH_STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "ENGLISH_STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::File & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f88c7fb6, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_StopAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StopAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopAnalyzer, t_StopAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StopAnalyzer, t_StopAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_StopAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StopAnalyzer), module, "StopAnalyzer", 0);
          }

          void t_StopAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "class_", make_descriptor(StopAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StopAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "ENGLISH_STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StopAnalyzer::ENGLISH_STOP_WORDS_SET)));
          }

          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StopAnalyzer::wrap_Object(StopAnalyzer(((t_StopAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::File a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestMode::class$ = NULL;
          jmethodID *SuggestMode::mids$ = NULL;
          bool SuggestMode::live$ = false;
          SuggestMode *SuggestMode::SUGGEST_ALWAYS = NULL;
          SuggestMode *SuggestMode::SUGGEST_MORE_POPULAR = NULL;
          SuggestMode *SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX = NULL;

          jclass SuggestMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_ca4a62d8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/SuggestMode;");
              mids$[mid_values_1d9d8b36] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/SuggestMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SUGGEST_ALWAYS = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_ALWAYS", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_MORE_POPULAR = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_MORE_POPULAR", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_WHEN_NOT_IN_INDEX = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_WHEN_NOT_IN_INDEX", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestMode SuggestMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SuggestMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ca4a62d8], a0.this$));
          }

          JArray< SuggestMode > SuggestMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SuggestMode >(env->callStaticObjectMethod(cls, mids$[mid_values_1d9d8b36]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args);
          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SuggestMode_values(PyTypeObject *type);
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data);
          static PyGetSetDef t_SuggestMode__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestMode__methods_[] = {
            DECLARE_METHOD(t_SuggestMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_SuggestMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestMode, t_SuggestMode, ::java::lang::Enum, SuggestMode, abstract_init, 0, 0, t_SuggestMode__fields_, 0, 0);
          PyObject *t_SuggestMode::wrap_Object(const SuggestMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestMode::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestMode), module, "SuggestMode", 0);
          }

          void t_SuggestMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "class_", make_descriptor(SuggestMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "wrapfn_", make_descriptor(t_SuggestMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_ALWAYS", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_ALWAYS)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_MORE_POPULAR", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_MORE_POPULAR)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_WHEN_NOT_IN_INDEX", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX)));
          }

          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestMode::initializeClass, 1)))
              return NULL;
            return t_SuggestMode::wrap_Object(SuggestMode(((t_SuggestMode *) arg)->object.this$));
          }
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SuggestMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::valueOf(a0));
              return t_SuggestMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SuggestMode_values(PyTypeObject *type)
          {
            JArray< SuggestMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::values());
            return JArray<jobject>(result.this$).wrap(t_SuggestMode::wrap_jobject);
          }
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemmer::class$ = NULL;
          jmethodID *PortugueseLightStemmer::mids$ = NULL;
          bool PortugueseLightStemmer::live$ = false;

          jclass PortugueseLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemmer::PortugueseLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemmer, t_PortugueseLightStemmer, ::java::lang::Object, PortugueseLightStemmer, t_PortugueseLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemmer), module, "PortugueseLightStemmer", 0);
          }

          void t_PortugueseLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "class_", make_descriptor(PortugueseLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemmer::wrap_Object(PortugueseLightStemmer(((t_PortugueseLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseLightStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *RangeFilterBuilder::class$ = NULL;
            jmethodID *RangeFilterBuilder::mids$ = NULL;
            bool RangeFilterBuilder::live$ = false;

            jclass RangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeFilterBuilder::RangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_RangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeFilterBuilder, t_RangeFilterBuilder, ::java::lang::Object, RangeFilterBuilder, t_RangeFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_RangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeFilterBuilder), module, "RangeFilterBuilder", 0);
            }

            void t_RangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "class_", make_descriptor(RangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_RangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_RangeFilterBuilder::wrap_Object(RangeFilterBuilder(((t_RangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              RangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = RangeFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Number.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field::class$ = NULL;
        jmethodID *Field::mids$ = NULL;
        bool Field::live$ = false;

        jclass Field::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_65c4643a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_36a37f8e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_4a37b91f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BLorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_3af3ec14] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_406439e8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_7ccdd79c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_9c27c9b4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_5c377d43] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");
            mids$[mid_init$_596be1b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)V");
            mids$[mid_init$_b94bfb2f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BIILorg/apache/lucene/document/FieldType;)V");
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_a2615189] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/document/FieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");
            mids$[mid_setBytesValue_49b4f12b] = env->getMethodID(cls, "setBytesValue", "([B)V");
            mids$[mid_setBytesValue_7bc03dc4] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");
            mids$[mid_setReaderValue_cf2e3c10] = env->getMethodID(cls, "setReaderValue", "(Ljava/io/Reader;)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");
            mids$[mid_setStringValue_5fdc3f48] = env->getMethodID(cls, "setStringValue", "(Ljava/lang/String;)V");
            mids$[mid_setTokenStream_c7c794dc] = env->getMethodID(cls, "setTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStreamValue_71f550c9] = env->getMethodID(cls, "tokenStreamValue", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_translateFieldType_2095598c] = env->getStaticMethodID(cls, "translateFieldType", "(Lorg/apache/lucene/document/Field$Store;Lorg/apache/lucene/document/Field$Index;Lorg/apache/lucene/document/Field$TermVector;)Lorg/apache/lucene/document/FieldType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_65c4643a, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::Field$TermVector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_36a37f8e, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a37b91f, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3af3ec14, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_406439e8, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7ccdd79c, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::document::FieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c27c9b4, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5c377d43, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2, const ::org::apache::lucene::document::Field$Index & a3, const ::org::apache::lucene::document::Field$TermVector & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_596be1b9, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3, const ::org::apache::lucene::document::FieldType & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b94bfb2f, a0.this$, a1.this$, a2, a3, a4.this$)) {}

        ::org::apache::lucene::util::BytesRef Field::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat Field::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::document::FieldType Field::fieldType() const
        {
          return ::org::apache::lucene::document::FieldType(env->callObjectMethod(this$, mids$[mid_fieldType_a2615189]));
        }

        ::java::lang::String Field::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number Field::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader Field::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        void Field::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void Field::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }

        void Field::setBytesValue(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_49b4f12b], a0.this$);
        }

        void Field::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_7bc03dc4], a0.this$);
        }

        void Field::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void Field::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void Field::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }

        void Field::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }

        void Field::setReaderValue(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReaderValue_cf2e3c10], a0.this$);
        }

        void Field::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }

        void Field::setStringValue(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStringValue_5fdc3f48], a0.this$);
        }

        void Field::setTokenStream(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenStream_c7c794dc], a0.this$);
        }

        ::java::lang::String Field::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::java::lang::String Field::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStreamValue() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStreamValue_71f550c9]));
        }

        ::org::apache::lucene::document::FieldType Field::translateFieldType(const ::org::apache::lucene::document::Field$Store & a0, const ::org::apache::lucene::document::Field$Index & a1, const ::org::apache::lucene::document::Field$TermVector & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::document::FieldType(env->callStaticObjectMethod(cls, mids$[mid_translateFieldType_2095598c], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Field_binaryValue(t_Field *self);
        static PyObject *t_Field_boost(t_Field *self);
        static PyObject *t_Field_fieldType(t_Field *self);
        static PyObject *t_Field_name(t_Field *self);
        static PyObject *t_Field_numericValue(t_Field *self);
        static PyObject *t_Field_readerValue(t_Field *self);
        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args);
        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg);
        static PyObject *t_Field_stringValue(t_Field *self);
        static PyObject *t_Field_toString(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStreamValue(t_Field *self);
        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args);
        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data);
        static PyGetSetDef t_Field__fields_[] = {
          DECLARE_SET_FIELD(t_Field, byteValue),
          DECLARE_SET_FIELD(t_Field, bytesValue),
          DECLARE_SET_FIELD(t_Field, doubleValue),
          DECLARE_SET_FIELD(t_Field, floatValue),
          DECLARE_SET_FIELD(t_Field, intValue),
          DECLARE_SET_FIELD(t_Field, longValue),
          DECLARE_SET_FIELD(t_Field, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field__methods_[] = {
          DECLARE_METHOD(t_Field, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, boost, METH_NOARGS),
          DECLARE_METHOD(t_Field, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_Field, name, METH_NOARGS),
          DECLARE_METHOD(t_Field, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, setBoost, METH_O),
          DECLARE_METHOD(t_Field, setByteValue, METH_O),
          DECLARE_METHOD(t_Field, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_Field, setDoubleValue, METH_O),
          DECLARE_METHOD(t_Field, setFloatValue, METH_O),
          DECLARE_METHOD(t_Field, setIntValue, METH_O),
          DECLARE_METHOD(t_Field, setLongValue, METH_O),
          DECLARE_METHOD(t_Field, setReaderValue, METH_O),
          DECLARE_METHOD(t_Field, setShortValue, METH_O),
          DECLARE_METHOD(t_Field, setStringValue, METH_O),
          DECLARE_METHOD(t_Field, setTokenStream, METH_O),
          DECLARE_METHOD(t_Field, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, toString, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStream, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStreamValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, translateFieldType, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field, t_Field, ::java::lang::Object, Field, t_Field_init_, 0, 0, t_Field__fields_, 0, 0);

        void t_Field::install(PyObject *module)
        {
          installType(&PY_TYPE(Field), module, "Field", 0);
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "TermVector", make_descriptor(&PY_TYPE(Field$TermVector)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Index", make_descriptor(&PY_TYPE(Field$Index)));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "Store", make_descriptor(&PY_TYPE(Field$Store)));
        }

        void t_Field::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "class_", make_descriptor(Field::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "wrapfn_", make_descriptor(t_Field::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field::initializeClass, 1)))
            return NULL;
          return t_Field::wrap_Object(Field(((t_Field *) arg)->object.this$));
        }
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = Field(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
              PyTypeObject **p2;
              Field object((jobject) NULL);

              if (!parseArgs(args, "skK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[Bk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::java::io::Reader::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Field(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::document::Field$Index a3((jobject) NULL);
              PyTypeObject **p3;
              ::org::apache::lucene::document::Field$TermVector a4((jobject) NULL);
              PyTypeObject **p4;
              Field object((jobject) NULL);

              if (!parseArgs(args, "ssKKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_, &a3, &p3, ::org::apache::lucene::document::t_Field$Index::parameters_, &a4, &p4, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::document::FieldType a4((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BIIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Field_binaryValue(t_Field *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Field_boost(t_Field *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Field_fieldType(t_Field *self)
        {
          ::org::apache::lucene::document::FieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
        }

        static PyObject *t_Field_name(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_Field_numericValue(t_Field *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_Field_readerValue(t_Field *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_Field_setBoost(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesValue", args);
          return NULL;
        }

        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReaderValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShortValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setStringValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStringValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTokenStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenStream", arg);
          return NULL;
        }

        static PyObject *t_Field_stringValue(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_Field_toString(t_Field *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Field), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Field_tokenStreamValue(t_Field *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.tokenStreamValue());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Field_translateFieldType(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::document::Field$Store a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::document::Field$Index a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Field$TermVector a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::document::FieldType result((jobject) NULL);

          if (!parseArgs(args, "KKK", ::org::apache::lucene::document::Field$Store::initializeClass, ::org::apache::lucene::document::Field$Index::initializeClass, ::org::apache::lucene::document::Field$TermVector::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_Field$Store::parameters_, &a1, &p1, ::org::apache::lucene::document::t_Field$Index::parameters_, &a2, &p2, ::org::apache::lucene::document::t_Field$TermVector::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field::translateFieldType(a0, a1, a2));
            return ::org::apache::lucene::document::t_FieldType::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "translateFieldType", args);
          return NULL;
        }

        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }

        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            JArray< jbyte > value((jobject) NULL);
            if (!parseArg(arg, "[B", &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$ApplyDeletesResult::class$ = NULL;
        jmethodID *BufferedUpdatesStream$ApplyDeletesResult::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$ApplyDeletesResult::fids$ = NULL;
        bool BufferedUpdatesStream$ApplyDeletesResult::live$ = false;

        jclass BufferedUpdatesStream$ApplyDeletesResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult");

            fids$ = new jfieldID[max_fid];
            fids$[fid_allDeleted] = env->getFieldID(cls, "allDeleted", "Ljava/util/List;");
            fids$[fid_anyDeletes] = env->getFieldID(cls, "anyDeletes", "Z");
            fids$[fid_gen] = env->getFieldID(cls, "gen", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List BufferedUpdatesStream$ApplyDeletesResult::_get_allDeleted() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_allDeleted]));
        }

        jboolean BufferedUpdatesStream$ApplyDeletesResult::_get_anyDeletes() const
        {
          return env->getBooleanField(this$, fids$[fid_anyDeletes]);
        }

        jlong BufferedUpdatesStream$ApplyDeletesResult::_get_gen() const
        {
          return env->getLongField(this$, fids$[fid_gen]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$ApplyDeletesResult__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, allDeleted),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, anyDeletes),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, gen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$ApplyDeletesResult__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$ApplyDeletesResult, t_BufferedUpdatesStream$ApplyDeletesResult, ::java::lang::Object, BufferedUpdatesStream$ApplyDeletesResult, abstract_init, 0, 0, t_BufferedUpdatesStream$ApplyDeletesResult__fields_, 0, 0);

        void t_BufferedUpdatesStream$ApplyDeletesResult::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult), module, "BufferedUpdatesStream$ApplyDeletesResult", 0);
        }

        void t_BufferedUpdatesStream$ApplyDeletesResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$ApplyDeletesResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$ApplyDeletesResult::wrap_Object(BufferedUpdatesStream$ApplyDeletesResult(((t_BufferedUpdatesStream$ApplyDeletesResult *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_allDeleted());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_anyDeletes());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_gen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupHeadsCollector::class$ = NULL;
            jmethodID *TermAllGroupHeadsCollector::mids$ = NULL;
            bool TermAllGroupHeadsCollector::live$ = false;

            jclass TermAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_create_3e5305de] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");
                mids$[mid_create_cf6bc864] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_3e5305de], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_cf6bc864], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupHeadsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, create, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupHeadsCollector, t_TermAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, TermAllGroupHeadsCollector, abstract_init, 0, 0, t_TermAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupHeadsCollector::wrap_Object(const TermAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupHeadsCollector), module, "TermAllGroupHeadsCollector", 0);
            }

            void t_TermAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(TermAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupHeadsCollector::wrap_Object(TermAllGroupHeadsCollector(((t_TermAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  jint a2;
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1, a2));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "create", args);
              return NULL;
            }
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Iterator::class$ = NULL;
    jmethodID *Iterator::mids$ = NULL;
    bool Iterator::live$ = false;

    jclass Iterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Iterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
        mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
        mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Iterator::hasNext() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
    }

    ::java::lang::Object Iterator::next() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
    }

    void Iterator::remove() const
    {
      env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args);
    static PyObject *t_Iterator_hasNext(t_Iterator *self);
    static PyObject *t_Iterator_next(t_Iterator *self);
    static PyObject *t_Iterator_remove(t_Iterator *self);
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data);
    static PyGetSetDef t_Iterator__fields_[] = {
      DECLARE_GET_FIELD(t_Iterator, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Iterator__methods_[] = {
      DECLARE_METHOD(t_Iterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, of_, METH_VARARGS),
      DECLARE_METHOD(t_Iterator, hasNext, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, next, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, remove, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Iterator, t_Iterator, ::java::lang::Object, Iterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_Iterator__fields_, 0, 0);
    PyObject *t_Iterator::wrap_Object(const Iterator& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Iterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Iterator::install(PyObject *module)
    {
      installType(&PY_TYPE(Iterator), module, "Iterator", 0);
    }

    void t_Iterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "class_", make_descriptor(Iterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "wrapfn_", make_descriptor(t_Iterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Iterator::initializeClass, 1)))
        return NULL;
      return t_Iterator::wrap_Object(Iterator(((t_Iterator *) arg)->object.this$));
    }
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Iterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Iterator_hasNext(t_Iterator *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasNext());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Iterator_next(t_Iterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.next());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Iterator_remove(t_Iterator *self)
    {
      OBJ_CALL(self->object.remove());
      Py_RETURN_NONE;
    }
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils::class$ = NULL;
        jmethodID *IOUtils::mids$ = NULL;
        bool IOUtils::live$ = false;
        ::java::lang::String *IOUtils::UTF_8 = NULL;

        jclass IOUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_d1cac205] = env->getStaticMethodID(cls, "close", "(Ljava/lang/Iterable;)V");
            mids$[mid_close_ddf1c8f2] = env->getStaticMethodID(cls, "close", "([Ljava/io/Closeable;)V");
            mids$[mid_closeWhileHandlingException_d1cac205] = env->getStaticMethodID(cls, "closeWhileHandlingException", "(Ljava/lang/Iterable;)V");
            mids$[mid_closeWhileHandlingException_ddf1c8f2] = env->getStaticMethodID(cls, "closeWhileHandlingException", "([Ljava/io/Closeable;)V");
            mids$[mid_copy_ffd62126] = env->getStaticMethodID(cls, "copy", "(Ljava/io/File;Ljava/io/File;)V");
            mids$[mid_deleteFilesIgnoringExceptions_d7029dd8] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Lorg/apache/lucene/store/Directory;[Ljava/lang/String;)V");
            mids$[mid_fsync_9e00f624] = env->getStaticMethodID(cls, "fsync", "(Ljava/io/File;Z)V");
            mids$[mid_reThrow_c5ec8ca4] = env->getStaticMethodID(cls, "reThrow", "(Ljava/lang/Throwable;)V");
            mids$[mid_reThrowUnchecked_c5ec8ca4] = env->getStaticMethodID(cls, "reThrowUnchecked", "(Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            UTF_8 = new ::java::lang::String(env->getStaticObjectField(cls, "UTF_8", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IOUtils::close(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_d1cac205], a0.this$);
        }

        void IOUtils::close(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_ddf1c8f2], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_d1cac205], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_ddf1c8f2], a0.this$);
        }

        void IOUtils::copy(const ::java::io::File & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_copy_ffd62126], a0.this$, a1.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::org::apache::lucene::store::Directory & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_d7029dd8], a0.this$, a1.this$);
        }

        void IOUtils::fsync(const ::java::io::File & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_fsync_9e00f624], a0.this$, a1);
        }

        void IOUtils::reThrow(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrow_c5ec8ca4], a0.this$);
        }

        void IOUtils::reThrowUnchecked(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrowUnchecked_c5ec8ca4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IOUtils__methods_[] = {
          DECLARE_METHOD(t_IOUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, close, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, closeWhileHandlingException, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, copy, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFilesIgnoringExceptions, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, fsync, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrow, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrowUnchecked, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOUtils, t_IOUtils, ::java::lang::Object, IOUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_IOUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils), module, "IOUtils", 0);
        }

        void t_IOUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "class_", make_descriptor(IOUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "wrapfn_", make_descriptor(t_IOUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOUtils).tp_dict, "UTF_8", make_descriptor(j2p(*IOUtils::UTF_8)));
        }

        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils::initializeClass, 1)))
            return NULL;
          return t_IOUtils::wrap_Object(IOUtils(((t_IOUtils *) arg)->object.this$));
        }
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "close", args);
          return NULL;
        }

        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "closeWhileHandlingException", args);
          return NULL;
        }

        static PyObject *t_IOUtils_copy(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "copy", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);

          if (!parseArgs(args, "k[s", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "deleteFilesIgnoringExceptions", args);
          return NULL;
        }

        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::fsync(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "fsync", args);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrow", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrowUnchecked(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrowUnchecked", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDouble.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDouble::class$ = NULL;
          jmethodID *MutableValueDouble::mids$ = NULL;
          jfieldID *MutableValueDouble::fids$ = NULL;
          bool MutableValueDouble::live$ = false;

          jclass MutableValueDouble::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDouble");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "D");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDouble::MutableValueDouble() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueDouble::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueDouble::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDouble::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueDouble::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueDouble::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueDouble::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jdouble MutableValueDouble::_get_value() const
          {
            return env->getDoubleField(this$, fids$[fid_value]);
          }

          void MutableValueDouble::_set_value(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data);
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueDouble__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueDouble, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueDouble__methods_[] = {
            DECLARE_METHOD(t_MutableValueDouble, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDouble, t_MutableValueDouble, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueDouble, t_MutableValueDouble_init_, 0, 0, t_MutableValueDouble__fields_, 0, 0);

          void t_MutableValueDouble::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDouble), module, "MutableValueDouble", 0);
          }

          void t_MutableValueDouble::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "class_", make_descriptor(MutableValueDouble::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDouble::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDouble).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDouble::initializeClass, 1)))
              return NULL;
            return t_MutableValueDouble::wrap_Object(MutableValueDouble(((t_MutableValueDouble *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDouble::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDouble object((jobject) NULL);

            INT_CALL(object = MutableValueDouble());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDouble), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermCollectingRewrite.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermCollectingRewrite::class$ = NULL;
        jmethodID *TermCollectingRewrite::mids$ = NULL;
        bool TermCollectingRewrite::live$ = false;

        jclass TermCollectingRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermCollectingRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addClause_6e72b6c4] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_addClause_5594f39b] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IF)V");
            mids$[mid_getTopLevelQuery_97e3851a] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args);
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data);
        static PyGetSetDef t_TermCollectingRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TermCollectingRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermCollectingRewrite__methods_[] = {
          DECLARE_METHOD(t_TermCollectingRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermCollectingRewrite, t_TermCollectingRewrite, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, TermCollectingRewrite, abstract_init, 0, 0, t_TermCollectingRewrite__fields_, 0, 0);
        PyObject *t_TermCollectingRewrite::wrap_Object(const TermCollectingRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermCollectingRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermCollectingRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TermCollectingRewrite), module, "TermCollectingRewrite", 0);
        }

        void t_TermCollectingRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "class_", make_descriptor(TermCollectingRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "wrapfn_", make_descriptor(t_TermCollectingRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermCollectingRewrite::initializeClass, 1)))
            return NULL;
          return t_TermCollectingRewrite::wrap_Object(TermCollectingRewrite(((t_TermCollectingRewrite *) arg)->object.this$));
        }
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermCollectingRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableFieldType::class$ = NULL;
        jmethodID *IndexableFieldType::mids$ = NULL;
        bool IndexableFieldType::live$ = false;

        jclass IndexableFieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableFieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType IndexableFieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions IndexableFieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean IndexableFieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jboolean IndexableFieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean IndexableFieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        jboolean IndexableFieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self);

        static PyMethodDef t_IndexableFieldType__methods_[] = {
          DECLARE_METHOD(t_IndexableFieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableFieldType, t_IndexableFieldType, ::java::lang::Object, IndexableFieldType, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableFieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableFieldType), module, "IndexableFieldType", 0);
        }

        void t_IndexableFieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "class_", make_descriptor(IndexableFieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "wrapfn_", make_descriptor(t_IndexableFieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableFieldType::initializeClass, 1)))
            return NULL;
          return t_IndexableFieldType::wrap_Object(IndexableFieldType(((t_IndexableFieldType *) arg)->object.this$));
        }
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableFieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$StemmerOverrideMap::class$ = NULL;
          jmethodID *StemmerOverrideFilter$StemmerOverrideMap::mids$ = NULL;
          bool StemmerOverrideFilter$StemmerOverrideMap::live$ = false;

          jclass StemmerOverrideFilter$StemmerOverrideMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6d8e5bb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Z)V");
              mids$[mid_get_b662c4bb] = env->getMethodID(cls, "get", "([CILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$StemmerOverrideMap::StemmerOverrideFilter$StemmerOverrideMap(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6d8e5bb9, a0.this$, a1)) {}

          ::org::apache::lucene::util::BytesRef StemmerOverrideFilter$StemmerOverrideMap::get(const JArray< jchar > & a0, jint a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b662c4bb], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::util::fst::FST$BytesReader StemmerOverrideFilter$StemmerOverrideMap::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilter$StemmerOverrideMap__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilter$StemmerOverrideMap, bytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilter$StemmerOverrideMap__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, get, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, getBytesReader, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap, ::java::lang::Object, StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap_init_, 0, 0, t_StemmerOverrideFilter$StemmerOverrideMap__fields_, 0, 0);

          void t_StemmerOverrideFilter$StemmerOverrideMap::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), module, "StemmerOverrideFilter$StemmerOverrideMap", 0);
          }

          void t_StemmerOverrideFilter$StemmerOverrideMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$StemmerOverrideMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(StemmerOverrideFilter$StemmerOverrideMap(((t_StemmerOverrideFilter$StemmerOverrideMap *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            StemmerOverrideFilter$StemmerOverrideMap object((jobject) NULL);

            if (!parseArgs(args, "KZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter$StemmerOverrideMap(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CIKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianAnalyzer::class$ = NULL;
          jmethodID *PersianAnalyzer::mids$ = NULL;
          bool PersianAnalyzer::live$ = false;
          ::java::lang::String *PersianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;
          ::java::lang::String *PersianAnalyzer::STOPWORDS_COMMENT = NULL;

          jclass PersianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              STOPWORDS_COMMENT = new ::java::lang::String(env->getStaticObjectField(cls, "STOPWORDS_COMMENT", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PersianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data);
          static PyGetSetDef t_PersianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PersianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PersianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianAnalyzer, t_PersianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PersianAnalyzer, t_PersianAnalyzer_init_, 0, 0, t_PersianAnalyzer__fields_, 0, 0);

          void t_PersianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianAnalyzer), module, "PersianAnalyzer", 0);
          }

          void t_PersianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "class_", make_descriptor(PersianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PersianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PersianAnalyzer::DEFAULT_STOPWORD_FILE)));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "STOPWORDS_COMMENT", make_descriptor(j2p(*PersianAnalyzer::STOPWORDS_COMMENT)));
          }

          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PersianAnalyzer::wrap_Object(PersianAnalyzer(((t_PersianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fa::PersianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueLong.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueLong::class$ = NULL;
          jmethodID *MutableValueLong::mids$ = NULL;
          jfieldID *MutableValueLong::fids$ = NULL;
          bool MutableValueLong::live$ = false;

          jclass MutableValueLong::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueLong");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueLong::MutableValueLong() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueLong::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueLong::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueLong::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueLong::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueLong::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueLong::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jlong MutableValueLong::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }

          void MutableValueLong::_set_value(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data);
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueLong__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueLong, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueLong__methods_[] = {
            DECLARE_METHOD(t_MutableValueLong, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueLong, t_MutableValueLong, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueLong, t_MutableValueLong_init_, 0, 0, t_MutableValueLong__fields_, 0, 0);

          void t_MutableValueLong::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueLong), module, "MutableValueLong", 0);
          }

          void t_MutableValueLong::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "class_", make_descriptor(MutableValueLong::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "wrapfn_", make_descriptor(t_MutableValueLong::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueLong::initializeClass, 1)))
              return NULL;
            return t_MutableValueLong::wrap_Object(MutableValueLong(((t_MutableValueLong *) arg)->object.this$));
          }
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueLong::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds)
          {
            MutableValueLong object((jobject) NULL);

            INT_CALL(object = MutableValueLong());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FacetLabel::class$ = NULL;
          jmethodID *FacetLabel::mids$ = NULL;
          jfieldID *FacetLabel::fids$ = NULL;
          bool FacetLabel::live$ = false;
          jint FacetLabel::MAX_CATEGORY_PATH_LENGTH = (jint) 0;

          jclass FacetLabel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FacetLabel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_compareTo_283f83f5] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_38cf071d] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_CATEGORY_PATH_LENGTH = env->getStaticIntField(cls, "MAX_CATEGORY_PATH_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FacetLabel::FacetLabel(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          FacetLabel::FacetLabel(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

          jint FacetLabel::compareTo(const FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_283f83f5], a0.this$);
          }

          jboolean FacetLabel::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FacetLabel::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong FacetLabel::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          FacetLabel FacetLabel::subpath(jint a0) const
          {
            return FacetLabel(env->callObjectMethod(this$, mids$[mid_subpath_38cf071d], a0));
          }

          ::java::lang::String FacetLabel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< ::java::lang::String > FacetLabel::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint FacetLabel::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self);
          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data);
          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data);

          static PyGetSetDef t_FacetLabel__fields_[] = {
            DECLARE_GET_FIELD(t_FacetLabel, components),
            DECLARE_GET_FIELD(t_FacetLabel, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FacetLabel__methods_[] = {
            DECLARE_METHOD(t_FacetLabel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, compareTo, METH_O),
            DECLARE_METHOD(t_FacetLabel, equals, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_FacetLabel, subpath, METH_O),
            DECLARE_METHOD(t_FacetLabel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FacetLabel, t_FacetLabel, ::java::lang::Object, FacetLabel, t_FacetLabel_init_, 0, 0, t_FacetLabel__fields_, 0, 0);

          void t_FacetLabel::install(PyObject *module)
          {
            installType(&PY_TYPE(FacetLabel), module, "FacetLabel", 0);
          }

          void t_FacetLabel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "class_", make_descriptor(FacetLabel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "wrapfn_", make_descriptor(t_FacetLabel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FacetLabel::initializeClass);
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "MAX_CATEGORY_PATH_LENGTH", make_descriptor(FacetLabel::MAX_CATEGORY_PATH_LENGTH));
          }

          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FacetLabel::initializeClass, 1)))
              return NULL;
            return t_FacetLabel::wrap_Object(FacetLabel(((t_FacetLabel *) arg)->object.this$));
          }
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FacetLabel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = FacetLabel(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  INT_CALL(object = FacetLabel(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg)
          {
            FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg)
          {
            jint a0;
            FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/VirtualMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *VirtualMethod::class$ = NULL;
        jmethodID *VirtualMethod::mids$ = NULL;
        bool VirtualMethod::live$ = false;

        jclass VirtualMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/VirtualMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a7992850] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V");
            mids$[mid_compareImplementationDistance_3e1352c7] = env->getStaticMethodID(cls, "compareImplementationDistance", "(Ljava/lang/Class;Lorg/apache/lucene/util/VirtualMethod;Lorg/apache/lucene/util/VirtualMethod;)I");
            mids$[mid_getImplementationDistance_a5deafeb] = env->getMethodID(cls, "getImplementationDistance", "(Ljava/lang/Class;)I");
            mids$[mid_isOverriddenAsOf_a5deaff8] = env->getMethodID(cls, "isOverriddenAsOf", "(Ljava/lang/Class;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VirtualMethod::VirtualMethod(const ::java::lang::Class & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Class > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7992850, a0.this$, a1.this$, a2.this$)) {}

        jint VirtualMethod::compareImplementationDistance(const ::java::lang::Class & a0, const VirtualMethod & a1, const VirtualMethod & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compareImplementationDistance_3e1352c7], a0.this$, a1.this$, a2.this$);
        }

        jint VirtualMethod::getImplementationDistance(const ::java::lang::Class & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getImplementationDistance_a5deafeb], a0.this$);
        }

        jboolean VirtualMethod::isOverriddenAsOf(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isOverriddenAsOf_a5deaff8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args);
        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data);
        static PyGetSetDef t_VirtualMethod__fields_[] = {
          DECLARE_GET_FIELD(t_VirtualMethod, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_VirtualMethod__methods_[] = {
          DECLARE_METHOD(t_VirtualMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, of_, METH_VARARGS),
          DECLARE_METHOD(t_VirtualMethod, compareImplementationDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, getImplementationDistance, METH_O),
          DECLARE_METHOD(t_VirtualMethod, isOverriddenAsOf, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VirtualMethod, t_VirtualMethod, ::java::lang::Object, VirtualMethod, t_VirtualMethod_init_, 0, 0, t_VirtualMethod__fields_, 0, 0);
        PyObject *t_VirtualMethod::wrap_Object(const VirtualMethod& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_VirtualMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_VirtualMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(VirtualMethod), module, "VirtualMethod", 0);
        }

        void t_VirtualMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "class_", make_descriptor(VirtualMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "wrapfn_", make_descriptor(t_VirtualMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VirtualMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VirtualMethod::initializeClass, 1)))
            return NULL;
          return t_VirtualMethod::wrap_Object(VirtualMethod(((t_VirtualMethod *) arg)->object.this$));
        }
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VirtualMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Class > a2((jobject) NULL);
          PyTypeObject **p2;
          VirtualMethod object((jobject) NULL);

          if (!parseArgs(args, "Ks[K", ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = VirtualMethod(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          VirtualMethod a1((jobject) NULL);
          PyTypeObject **p1;
          VirtualMethod a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KKK", ::java::lang::Class::initializeClass, VirtualMethod::initializeClass, VirtualMethod::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, t_VirtualMethod::parameters_, &a2, &p2, t_VirtualMethod::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::VirtualMethod::compareImplementationDistance(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "compareImplementationDistance", args);
          return NULL;
        }

        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jint result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getImplementationDistance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getImplementationDistance", arg);
          return NULL;
        }

        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.isOverriddenAsOf(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isOverriddenAsOf", arg);
          return NULL;
        }
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicAnalyzer::class$ = NULL;
          jmethodID *ArabicAnalyzer::mids$ = NULL;
          bool ArabicAnalyzer::live$ = false;
          ::java::lang::String *ArabicAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArabicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArabicAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data);
          static PyGetSetDef t_ArabicAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArabicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicAnalyzer, t_ArabicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArabicAnalyzer, t_ArabicAnalyzer_init_, 0, 0, t_ArabicAnalyzer__fields_, 0, 0);

          void t_ArabicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicAnalyzer), module, "ArabicAnalyzer", 0);
          }

          void t_ArabicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "class_", make_descriptor(ArabicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArabicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArabicAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArabicAnalyzer::wrap_Object(ArabicAnalyzer(((t_ArabicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ar::ArabicAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/JoinUtil.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *JoinUtil::class$ = NULL;
          jmethodID *JoinUtil::mids$ = NULL;
          bool JoinUtil::live$ = false;

          jclass JoinUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/JoinUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createJoinQuery_ef4ce860] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;ZLjava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, jboolean a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::Query & a3, const ::org::apache::lucene::search::IndexSearcher & a4, const ::org::apache::lucene::search::join::ScoreMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_ef4ce860], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_JoinUtil__methods_[] = {
            DECLARE_METHOD(t_JoinUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, createJoinQuery, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JoinUtil, t_JoinUtil, ::java::lang::Object, JoinUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_JoinUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(JoinUtil), module, "JoinUtil", 0);
          }

          void t_JoinUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "class_", make_descriptor(JoinUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "wrapfn_", make_descriptor(t_JoinUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JoinUtil::initializeClass, 1)))
              return NULL;
            return t_JoinUtil::wrap_Object(JoinUtil(((t_JoinUtil *) arg)->object.this$));
          }
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JoinUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::Query a3((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a4((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a5((jobject) NULL);
            PyTypeObject **p5;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sZskkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createJoinQuery", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenGroup::class$ = NULL;
          jmethodID *TokenGroup::mids$ = NULL;
          bool TokenGroup::live$ = false;

          jclass TokenGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNumTokens_54c6a179] = env->getMethodID(cls, "getNumTokens", "()I");
              mids$[mid_getScore_39c7bd2c] = env->getMethodID(cls, "getScore", "(I)F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getToken_2e456a21] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_getTotalScore_54c6a176] = env->getMethodID(cls, "getTotalScore", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenGroup::TokenGroup(const ::org::apache::lucene::analysis::TokenStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jint TokenGroup::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint TokenGroup::getNumTokens() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTokens_54c6a179]);
          }

          jfloat TokenGroup::getScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_39c7bd2c], a0);
          }

          jint TokenGroup::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::org::apache::lucene::analysis::Token TokenGroup::getToken(jint a0) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_2e456a21], a0));
          }

          jfloat TokenGroup::getTotalScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalScore_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self);
          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data);
          static PyGetSetDef t_TokenGroup__fields_[] = {
            DECLARE_GET_FIELD(t_TokenGroup, endOffset),
            DECLARE_GET_FIELD(t_TokenGroup, numTokens),
            DECLARE_GET_FIELD(t_TokenGroup, startOffset),
            DECLARE_GET_FIELD(t_TokenGroup, totalScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenGroup__methods_[] = {
            DECLARE_METHOD(t_TokenGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getNumTokens, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getScore, METH_O),
            DECLARE_METHOD(t_TokenGroup, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getToken, METH_O),
            DECLARE_METHOD(t_TokenGroup, getTotalScore, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenGroup, t_TokenGroup, ::java::lang::Object, TokenGroup, t_TokenGroup_init_, 0, 0, t_TokenGroup__fields_, 0, 0);

          void t_TokenGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenGroup), module, "TokenGroup", 0);
          }

          void t_TokenGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "class_", make_descriptor(TokenGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "wrapfn_", make_descriptor(t_TokenGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenGroup::initializeClass, 1)))
              return NULL;
            return t_TokenGroup::wrap_Object(TokenGroup(((t_TokenGroup *) arg)->object.this$));
          }
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenGroup object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenGroup(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumTokens());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScore", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumTokens());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue::mids$ = NULL;
        bool TopOrdAndIntQueue::live$ = false;

        jclass TopOrdAndIntQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_bb8ee210] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue::TopOrdAndIntQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args);
        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue, t_TopOrdAndIntQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndIntQueue, t_TopOrdAndIntQueue_init_, 0, 0, t_TopOrdAndIntQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue::wrap_Object(const TopOrdAndIntQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue), module, "TopOrdAndIntQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue)));
        }

        void t_TopOrdAndIntQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue::wrap_Object(TopOrdAndIntQueue(((t_TopOrdAndIntQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndIntQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndIntQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHitCountCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHitCountCollector::class$ = NULL;
        jmethodID *TotalHitCountCollector::mids$ = NULL;
        bool TotalHitCountCollector::live$ = false;

        jclass TotalHitCountCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHitCountCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHitCountCollector::TotalHitCountCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TotalHitCountCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TotalHitCountCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jint TotalHitCountCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        void TotalHitCountCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TotalHitCountCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self);
        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args);
        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data);
        static PyGetSetDef t_TotalHitCountCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TotalHitCountCollector, nextReader),
          DECLARE_SET_FIELD(t_TotalHitCountCollector, scorer),
          DECLARE_GET_FIELD(t_TotalHitCountCollector, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHitCountCollector__methods_[] = {
          DECLARE_METHOD(t_TotalHitCountCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TotalHitCountCollector, t_TotalHitCountCollector, ::org::apache::lucene::search::Collector, TotalHitCountCollector, t_TotalHitCountCollector_init_, 0, 0, t_TotalHitCountCollector__fields_, 0, 0);

        void t_TotalHitCountCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHitCountCollector), module, "TotalHitCountCollector", 0);
        }

        void t_TotalHitCountCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "class_", make_descriptor(TotalHitCountCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "wrapfn_", make_descriptor(t_TotalHitCountCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHitCountCollector::initializeClass, 1)))
            return NULL;
          return t_TotalHitCountCollector::wrap_Object(TotalHitCountCollector(((t_TotalHitCountCollector *) arg)->object.this$));
        }
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHitCountCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds)
        {
          TotalHitCountCollector object((jobject) NULL);

          INT_CALL(object = TotalHitCountCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *WordnetSynonymParser::class$ = NULL;
          jmethodID *WordnetSynonymParser::mids$ = NULL;
          bool WordnetSynonymParser::live$ = false;

          jclass WordnetSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/WordnetSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordnetSynonymParser::WordnetSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void WordnetSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args);

          static PyMethodDef t_WordnetSynonymParser__methods_[] = {
            DECLARE_METHOD(t_WordnetSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordnetSynonymParser, t_WordnetSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, WordnetSynonymParser, t_WordnetSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_WordnetSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(WordnetSynonymParser), module, "WordnetSynonymParser", 0);
          }

          void t_WordnetSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "class_", make_descriptor(WordnetSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_WordnetSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordnetSynonymParser::initializeClass, 1)))
              return NULL;
            return t_WordnetSynonymParser::wrap_Object(WordnetSynonymParser(((t_WordnetSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordnetSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            WordnetSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = WordnetSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordnetSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemmer::class$ = NULL;
          jmethodID *GermanMinimalStemmer::mids$ = NULL;
          bool GermanMinimalStemmer::live$ = false;

          jclass GermanMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemmer::GermanMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemmer, t_GermanMinimalStemmer, ::java::lang::Object, GermanMinimalStemmer, t_GermanMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemmer), module, "GermanMinimalStemmer", 0);
          }

          void t_GermanMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "class_", make_descriptor(GermanMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemmer::wrap_Object(GermanMinimalStemmer(((t_GermanMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GermanMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsWriter::class$ = NULL;
          jmethodID *Lucene40StoredFieldsWriter::mids$ = NULL;
          bool Lucene40StoredFieldsWriter::live$ = false;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_EXTENSION = NULL;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION = NULL;

          jclass Lucene40StoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addRawDocuments_9a4782ba] = env->getMethodID(cls, "addRawDocuments", "(Lorg/apache/lucene/store/IndexInput;[II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FIELDS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_EXTENSION", "Ljava/lang/String;"));
              FIELDS_INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_INDEX_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsWriter::Lucene40StoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40StoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::addRawDocuments(const ::org::apache::lucene::store::IndexInput & a0, const JArray< jint > & a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addRawDocuments_9a4782ba], a0.this$, a1.this$, a2);
          }

          void Lucene40StoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40StoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint Lucene40StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40StoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, addRawDocuments, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsWriter), module, "Lucene40StoredFieldsWriter", 0);
          }

          void t_Lucene40StoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40StoredFieldsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_INDEX_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION)));
          }

          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsWriter::wrap_Object(Lucene40StoredFieldsWriter(((t_Lucene40StoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40StoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40StoredFieldsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            jint a2;

            if (!parseArgs(args, "k[II", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addRawDocuments(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addRawDocuments", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilter::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilter::mids$ = NULL;
          bool DelimitedPayloadTokenFilter::live$ = false;
          jchar DelimitedPayloadTokenFilter::DEFAULT_DELIMITER = (jchar) 0;

          jclass DelimitedPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_037fe9e9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;CLorg/apache/lucene/analysis/payloads/PayloadEncoder;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilter::DelimitedPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1, const ::org::apache::lucene::analysis::payloads::PayloadEncoder & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_037fe9e9, a0.this$, a1, a2.this$)) {}

          jboolean DelimitedPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilter), module, "DelimitedPayloadTokenFilter", 0);
          }

          void t_DelimitedPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "DEFAULT_DELIMITER", make_descriptor(DelimitedPayloadTokenFilter::DEFAULT_DELIMITER));
          }

          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilter::wrap_Object(DelimitedPayloadTokenFilter(((t_DelimitedPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jchar a1;
            ::org::apache::lucene::analysis::payloads::PayloadEncoder a2((jobject) NULL);
            DelimitedPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kCk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::payloads::PayloadEncoder::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DelimitedPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermExtractor.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermExtractor::class$ = NULL;
          jmethodID *QueryTermExtractor::mids$ = NULL;
          bool QueryTermExtractor::live$ = false;

          jclass QueryTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIdfWeightedTerms_90fb48ad] = env->getStaticMethodID(cls, "getIdfWeightedTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ec0cbfa8] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_6d5da3e1] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;Z)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ac3fa253] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;ZLjava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermExtractor::QueryTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getIdfWeightedTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getIdfWeightedTerms_90fb48ad], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ec0cbfa8], a0.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_6d5da3e1], a0.this$, a1));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ac3fa253], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTermExtractor__methods_[] = {
            DECLARE_METHOD(t_QueryTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getIdfWeightedTerms, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getTerms, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermExtractor, t_QueryTermExtractor, ::java::lang::Object, QueryTermExtractor, t_QueryTermExtractor_init_, 0, 0, 0, 0, 0);

          void t_QueryTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermExtractor), module, "QueryTermExtractor", 0);
          }

          void t_QueryTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "class_", make_descriptor(QueryTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_QueryTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermExtractor::initializeClass, 1)))
              return NULL;
            return t_QueryTermExtractor::wrap_Object(QueryTermExtractor(((t_QueryTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            QueryTermExtractor object((jobject) NULL);

            INT_CALL(object = QueryTermExtractor());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

            if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getIdfWeightedTerms(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
            }

            PyErr_SetArgsError(type, "getIdfWeightedTerms", args);
            return NULL;
          }

          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZs", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError(type, "getTerms", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumIntAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumIntAssociations::mids$ = NULL;
          bool TaxonomyFacetSumIntAssociations::live$ = false;

          jclass TaxonomyFacetSumIntAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumIntAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumIntAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumIntAssociations), module, "TaxonomyFacetSumIntAssociations", 0);
          }

          void t_TaxonomyFacetSumIntAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumIntAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumIntAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumIntAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumIntAssociations::wrap_Object(TaxonomyFacetSumIntAssociations(((t_TaxonomyFacetSumIntAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizerFactory::class$ = NULL;
          jmethodID *NGramTokenizerFactory::mids$ = NULL;
          bool NGramTokenizerFactory::live$ = false;

          jclass NGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizerFactory::NGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer NGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_NGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizerFactory, t_NGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, NGramTokenizerFactory, t_NGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizerFactory), module, "NGramTokenizerFactory", 0);
          }

          void t_NGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "class_", make_descriptor(NGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizerFactory::wrap_Object(NGramTokenizerFactory(((t_NGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FastTaxonomyFacetCounts::class$ = NULL;
          jmethodID *FastTaxonomyFacetCounts::mids$ = NULL;
          bool FastTaxonomyFacetCounts::live$ = false;

          jclass FastTaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FastTaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_FastTaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(FastTaxonomyFacetCounts), module, "FastTaxonomyFacetCounts", 0);
          }

          void t_FastTaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "class_", make_descriptor(FastTaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_FastTaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_FastTaxonomyFacetCounts::wrap_Object(FastTaxonomyFacetCounts(((t_FastTaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizerFactory::class$ = NULL;
          jmethodID *PathHierarchyTokenizerFactory::mids$ = NULL;
          bool PathHierarchyTokenizerFactory::live$ = false;

          jclass PathHierarchyTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizerFactory::PathHierarchyTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer PathHierarchyTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizerFactory), module, "PathHierarchyTokenizerFactory", 0);
          }

          void t_PathHierarchyTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "class_", make_descriptor(PathHierarchyTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizerFactory::wrap_Object(PathHierarchyTokenizerFactory(((t_PathHierarchyTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PathHierarchyTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PathHierarchyTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedMutable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedMutable::class$ = NULL;
          jmethodID *PagedMutable::mids$ = NULL;
          bool PagedMutable::live$ = false;

          jclass PagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_newUnfilledCopy_79c554c1] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedMutable;");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedMutable::PagedMutable(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args);
          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data);
          static PyGetSetDef t_PagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_PagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedMutable__methods_[] = {
            DECLARE_METHOD(t_PagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedMutable, t_PagedMutable, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedMutable, t_PagedMutable_init_, 0, 0, t_PagedMutable__fields_, 0, 0);
          PyObject *t_PagedMutable::wrap_Object(const PagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedMutable), module, "PagedMutable", 0);
          }

          void t_PagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "class_", make_descriptor(PagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "wrapfn_", make_descriptor(t_PagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedMutable::initializeClass, 1)))
              return NULL;
            return t_PagedMutable::wrap_Object(PagedMutable(((t_PagedMutable *) arg)->object.this$));
          }
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedMutable object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedMutable(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedMutable);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/PrintTaxonomyStats.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *PrintTaxonomyStats::class$ = NULL;
          jmethodID *PrintTaxonomyStats::mids$ = NULL;
          bool PrintTaxonomyStats::live$ = false;

          jclass PrintTaxonomyStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/PrintTaxonomyStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
              mids$[mid_printStats_aafb31cf] = env->getStaticMethodID(cls, "printStats", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Ljava/io/PrintStream;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrintTaxonomyStats::PrintTaxonomyStats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PrintTaxonomyStats::main(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
          }

          void PrintTaxonomyStats::printStats(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_printStats_aafb31cf], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PrintTaxonomyStats__methods_[] = {
            DECLARE_METHOD(t_PrintTaxonomyStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, main, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, printStats, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrintTaxonomyStats, t_PrintTaxonomyStats, ::java::lang::Object, PrintTaxonomyStats, t_PrintTaxonomyStats_init_, 0, 0, 0, 0, 0);

          void t_PrintTaxonomyStats::install(PyObject *module)
          {
            installType(&PY_TYPE(PrintTaxonomyStats), module, "PrintTaxonomyStats", 0);
          }

          void t_PrintTaxonomyStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "class_", make_descriptor(PrintTaxonomyStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "wrapfn_", make_descriptor(t_PrintTaxonomyStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrintTaxonomyStats::initializeClass, 1)))
              return NULL;
            return t_PrintTaxonomyStats::wrap_Object(PrintTaxonomyStats(((t_PrintTaxonomyStats *) arg)->object.this$));
          }
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrintTaxonomyStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds)
          {
            PrintTaxonomyStats object((jobject) NULL);

            INT_CALL(object = PrintTaxonomyStats());
            self->object = object;

            return 0;
          }

          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::main(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "main", arg);
            return NULL;
          }

          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
            ::java::io::PrintStream a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::printStats(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "printStats", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/IntDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *IntDocValues::class$ = NULL;
            jmethodID *IntDocValues::mids$ = NULL;
            bool IntDocValues::live$ = false;

            jclass IntDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/IntDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntDocValues::IntDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte IntDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble IntDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat IntDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer IntDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller IntDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint IntDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong IntDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object IntDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort IntDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String IntDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String IntDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data);
            static PyGetSetDef t_IntDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_IntDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_IntDocValues__methods_[] = {
              DECLARE_METHOD(t_IntDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntDocValues, t_IntDocValues, ::org::apache::lucene::queries::function::FunctionValues, IntDocValues, t_IntDocValues_init_, 0, 0, t_IntDocValues__fields_, 0, 0);

            void t_IntDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(IntDocValues), module, "IntDocValues", 0);
            }

            void t_IntDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "class_", make_descriptor(IntDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "wrapfn_", make_descriptor(t_IntDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntDocValues::initializeClass, 1)))
                return NULL;
              return t_IntDocValues::wrap_Object(IntDocValues(((t_IntDocValues *) arg)->object.this$));
            }
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              IntDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = IntDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndQuery::class$ = NULL;
            jmethodID *SrndQuery::mids$ = NULL;
            bool SrndQuery::live$ = false;
            ::org::apache::lucene::search::Query *SrndQuery::theEmptyLcnQuery = NULL;

            jclass SrndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clone_26528772] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
                mids$[mid_getWeightOperator_14c7b5c5] = env->getMethodID(cls, "getWeightOperator", "()Ljava/lang/String;");
                mids$[mid_getWeightString_14c7b5c5] = env->getMethodID(cls, "getWeightString", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isWeighted_54c6a16a] = env->getMethodID(cls, "isWeighted", "()Z");
                mids$[mid_makeLuceneQueryField_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_weightToString_9f94ae34] = env->getMethodID(cls, "weightToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                theEmptyLcnQuery = new ::org::apache::lucene::search::Query(env->getStaticObjectField(cls, "theEmptyLcnQuery", "Lorg/apache/lucene/search/Query;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndQuery::SrndQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            SrndQuery SrndQuery::clone() const
            {
              return SrndQuery(env->callObjectMethod(this$, mids$[mid_clone_26528772]));
            }

            jboolean SrndQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat SrndQuery::getWeight() const
            {
              return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
            }

            ::java::lang::String SrndQuery::getWeightOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightOperator_14c7b5c5]));
            }

            ::java::lang::String SrndQuery::getWeightString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightString_14c7b5c5]));
            }

            jint SrndQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            jboolean SrndQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean SrndQuery::isWeighted() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isWeighted_54c6a16a]);
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryField_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            void SrndQuery::setWeight(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
            }

            ::java::lang::String SrndQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndQuery_clone(t_SrndQuery *self);
            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self);
            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self);
            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self);
            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg);
            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data);
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data);
            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data);
            static PyGetSetDef t_SrndQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndQuery, fieldsSubQueryAcceptable),
              DECLARE_GETSET_FIELD(t_SrndQuery, weight),
              DECLARE_GET_FIELD(t_SrndQuery, weightOperator),
              DECLARE_GET_FIELD(t_SrndQuery, weightString),
              DECLARE_GET_FIELD(t_SrndQuery, weighted),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndQuery__methods_[] = {
              DECLARE_METHOD(t_SrndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, clone, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, getWeight, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightString, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, isFieldsSubQueryAcceptable, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, isWeighted, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryField, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, setWeight, METH_O),
              DECLARE_METHOD(t_SrndQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndQuery, t_SrndQuery, ::java::lang::Object, SrndQuery, t_SrndQuery_init_, 0, 0, t_SrndQuery__fields_, 0, 0);

            void t_SrndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndQuery), module, "SrndQuery", 0);
            }

            void t_SrndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "class_", make_descriptor(SrndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(SrndQuery::initializeClass);
              PyDict_SetItemString(PY_TYPE(SrndQuery).tp_dict, "theEmptyLcnQuery", make_descriptor(::org::apache::lucene::search::t_Query::wrap_Object(*SrndQuery::theEmptyLcnQuery)));
            }

            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndQuery::initializeClass, 1)))
                return NULL;
              return t_SrndQuery::wrap_Object(SrndQuery(((t_SrndQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds)
            {
              SrndQuery object((jobject) NULL);

              INT_CALL(object = SrndQuery());
              self->object = object;

              return 0;
            }

            static PyObject *t_SrndQuery_clone(t_SrndQuery *self)
            {
              SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getWeight());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightOperator());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightString());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isWeighted());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryField(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryField", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryFieldNoBoost", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setWeight(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
              return NULL;
            }

            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getWeight());
              return PyFloat_FromDouble((double) value);
            }
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setWeight(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "weight", arg);
              return -1;
            }

            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightOperator());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightString());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isWeighted());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceQuery::class$ = NULL;
            jmethodID *DistanceQuery::mids$ = NULL;
            bool DistanceQuery::live$ = false;

            jclass DistanceQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6c38956d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZILjava/lang/String;Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getOpDistance_54c6a179] = env->getMethodID(cls, "getOpDistance", "()I");
                mids$[mid_getSpanNearQuery_b440d198] = env->getMethodID(cls, "getSpanNearQuery", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;FLorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_subQueriesOrdered_54c6a16a] = env->getMethodID(cls, "subQueriesOrdered", "()Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DistanceQuery::DistanceQuery(const ::java::util::List & a0, jboolean a1, jint a2, const ::java::lang::String & a3, jboolean a4) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_6c38956d, a0.this$, a1, a2, a3.this$, a4)) {}

            void DistanceQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            jint DistanceQuery::getOpDistance() const
            {
              return env->callIntMethod(this$, mids$[mid_getOpDistance_54c6a179]);
            }

            ::org::apache::lucene::search::Query DistanceQuery::getSpanNearQuery(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a3) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSpanNearQuery_b440d198], a0.this$, a1.this$, a2, a3.this$));
            }

            ::org::apache::lucene::search::Query DistanceQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            jboolean DistanceQuery::subQueriesOrdered() const
            {
              return env->callBooleanMethod(this$, mids$[mid_subQueriesOrdered_54c6a16a]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg);
            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data);
            static PyGetSetDef t_DistanceQuery__fields_[] = {
              DECLARE_GET_FIELD(t_DistanceQuery, opDistance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DistanceQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getOpDistance, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getSpanNearQuery, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, subQueriesOrdered, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceQuery, t_DistanceQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, DistanceQuery, t_DistanceQuery_init_, 0, 0, t_DistanceQuery__fields_, 0, 0);

            void t_DistanceQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceQuery), module, "DistanceQuery", 0);
            }

            void t_DistanceQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "class_", make_descriptor(DistanceQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceQuery::wrap_Object(DistanceQuery(((t_DistanceQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              DistanceQuery object((jobject) NULL);

              if (!parseArgs(args, "KZIsZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DistanceQuery(a0, a1, a2, a3, a4));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getOpDistance());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a3((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ksFk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getSpanNearQuery(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSpanNearQuery", args);
              return NULL;
            }

            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DistanceQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.subQueriesOrdered());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getOpDistance());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$Arc::class$ = NULL;
          jmethodID *FST$Arc::mids$ = NULL;
          jfieldID *FST$Arc::fids$ = NULL;
          bool FST$Arc::live$ = false;

          jclass FST$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_copyFrom_8c07e6cb] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_isFinal_54c6a16a] = env->getMethodID(cls, "isFinal", "()Z");
              mids$[mid_isLast_54c6a16a] = env->getMethodID(cls, "isLast", "()Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");
              fids$[fid_target] = env->getFieldID(cls, "target", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$Arc::FST$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FST$Arc FST$Arc::copyFrom(const FST$Arc & a0) const
          {
            return FST$Arc(env->callObjectMethod(this$, mids$[mid_copyFrom_8c07e6cb], a0.this$));
          }

          jboolean FST$Arc::isFinal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFinal_54c6a16a]);
          }

          jboolean FST$Arc::isLast() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLast_54c6a16a]);
          }

          ::java::lang::String FST$Arc::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint FST$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void FST$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object FST$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void FST$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object FST$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void FST$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }

          jlong FST$Arc::_get_target() const
          {
            return env->getLongField(this$, fids$[fid_target]);
          }

          void FST$Arc::_set_target(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_target], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args);
          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg);
          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self);
          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self);
          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args);
          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data);

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data);
          static PyGetSetDef t_FST$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$Arc, label),
            DECLARE_GETSET_FIELD(t_FST$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_FST$Arc, output),
            DECLARE_GETSET_FIELD(t_FST$Arc, target),
            DECLARE_GET_FIELD(t_FST$Arc, final),
            DECLARE_GET_FIELD(t_FST$Arc, last),
            DECLARE_GET_FIELD(t_FST$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$Arc__methods_[] = {
            DECLARE_METHOD(t_FST$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$Arc, copyFrom, METH_O),
            DECLARE_METHOD(t_FST$Arc, isFinal, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, isLast, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$Arc, t_FST$Arc, ::java::lang::Object, FST$Arc, t_FST$Arc_init_, 0, 0, t_FST$Arc__fields_, 0, 0);
          PyObject *t_FST$Arc::wrap_Object(const FST$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$Arc), module, "FST$Arc", 0);
          }

          void t_FST$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "class_", make_descriptor(FST$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "wrapfn_", make_descriptor(t_FST$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$Arc::initializeClass, 1)))
              return NULL;
            return t_FST$Arc::wrap_Object(FST$Arc(((t_FST$Arc *) arg)->object.this$));
          }
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds)
          {
            FST$Arc object((jobject) NULL);

            INT_CALL(object = FST$Arc());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg)
          {
            FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", FST$Arc::initializeClass, &a0, &p0, t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.copyFrom(a0));
              return t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
            return NULL;
          }

          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFinal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isLast());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FST$Arc), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_target());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_target(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "target", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFinal());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isLast());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet$FixedBitSetIterator::class$ = NULL;
        jmethodID *FixedBitSet$FixedBitSetIterator::mids$ = NULL;
        bool FixedBitSet$FixedBitSetIterator::live$ = false;

        jclass FixedBitSet$FixedBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet$FixedBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ef674644] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const ::org::apache::lucene::util::FixedBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ef674644, a0.this$)) {}

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const JArray< jlong > & a0, jint a1, jint a2) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        jint FixedBitSet$FixedBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FixedBitSet$FixedBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FixedBitSet$FixedBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FixedBitSet$FixedBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);

        static PyMethodDef t_FixedBitSet$FixedBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FixedBitSet$FixedBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet$FixedBitSetIterator), module, "FixedBitSet$FixedBitSetIterator", 0);
        }

        void t_FixedBitSet$FixedBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "class_", make_descriptor(FixedBitSet$FixedBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet$FixedBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet$FixedBitSetIterator::wrap_Object(FixedBitSet$FixedBitSetIterator(((t_FixedBitSet$FixedBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::FixedBitSet a0((jobject) NULL);
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DocFreqValueSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DocFreqValueSource::class$ = NULL;
            jmethodID *DocFreqValueSource::mids$ = NULL;
            bool DocFreqValueSource::live$ = false;

            jclass DocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocFreqValueSource::DocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void DocFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String DocFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self);

            static PyMethodDef t_DocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_DocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocFreqValueSource, t_DocFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, DocFreqValueSource, t_DocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_DocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DocFreqValueSource), module, "DocFreqValueSource", 0);
            }

            void t_DocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "class_", make_descriptor(DocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_DocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_DocFreqValueSource::wrap_Object(DocFreqValueSource(((t_DocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PriorityQueue::class$ = NULL;
        jmethodID *PriorityQueue::mids$ = NULL;
        bool PriorityQueue::live$ = false;

        jclass PriorityQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PriorityQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
            mids$[mid_add_a932a95f] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_insertWithOverflow_a932a95f] = env->getMethodID(cls, "insertWithOverflow", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_pop_846352c3] = env->getMethodID(cls, "pop", "()Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_top_846352c3] = env->getMethodID(cls, "top", "()Ljava/lang/Object;");
            mids$[mid_updateTop_846352c3] = env->getMethodID(cls, "updateTop", "()Ljava/lang/Object;");
            mids$[mid_lessThan_466982fe] = env->getMethodID(cls, "lessThan", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
            mids$[mid_getSentinelObject_846352c3] = env->getMethodID(cls, "getSentinelObject", "()Ljava/lang/Object;");
            mids$[mid_getHeapArray_94e49c77] = env->getMethodID(cls, "getHeapArray", "()[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PriorityQueue::PriorityQueue(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        PriorityQueue::PriorityQueue(jint a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

        ::java::lang::Object PriorityQueue::add(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_a932a95f], a0.this$));
        }

        void PriorityQueue::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object PriorityQueue::insertWithOverflow(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_insertWithOverflow_a932a95f], a0.this$));
        }

        ::java::lang::Object PriorityQueue::pop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pop_846352c3]));
        }

        jint PriorityQueue::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::Object PriorityQueue::top() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_top_846352c3]));
        }

        ::java::lang::Object PriorityQueue::updateTop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_updateTop_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args);
        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data);
        static PyGetSetDef t_PriorityQueue__fields_[] = {
          DECLARE_GET_FIELD(t_PriorityQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PriorityQueue__methods_[] = {
          DECLARE_METHOD(t_PriorityQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_PriorityQueue, add, METH_O),
          DECLARE_METHOD(t_PriorityQueue, clear, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, insertWithOverflow, METH_O),
          DECLARE_METHOD(t_PriorityQueue, pop, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, size, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, top, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, updateTop, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PriorityQueue, t_PriorityQueue, ::java::lang::Object, PriorityQueue, t_PriorityQueue_init_, 0, 0, t_PriorityQueue__fields_, 0, 0);
        PyObject *t_PriorityQueue::wrap_Object(const PriorityQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PriorityQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(PriorityQueue), module, "PriorityQueue", 0);
        }

        void t_PriorityQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "class_", make_descriptor(PriorityQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_PriorityQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PriorityQueue::initializeClass, 1)))
            return NULL;
          return t_PriorityQueue::wrap_Object(PriorityQueue(((t_PriorityQueue *) arg)->object.this$));
        }
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PriorityQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = PriorityQueue(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jboolean a1;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = PriorityQueue(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.insertWithOverflow(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "insertWithOverflow", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.pop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.top());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.updateTop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *FastCharStream::class$ = NULL;
          jmethodID *FastCharStream::mids$ = NULL;
          bool FastCharStream::live$ = false;

          jclass FastCharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/FastCharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jchar FastCharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void FastCharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String FastCharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > FastCharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void FastCharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint FastCharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint FastCharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint FastCharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint FastCharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint FastCharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint FastCharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar FastCharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
          static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
          static PyGetSetDef t_FastCharStream__fields_[] = {
            DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
            DECLARE_GET_FIELD(t_FastCharStream, beginLine),
            DECLARE_GET_FIELD(t_FastCharStream, column),
            DECLARE_GET_FIELD(t_FastCharStream, endColumn),
            DECLARE_GET_FIELD(t_FastCharStream, endLine),
            DECLARE_GET_FIELD(t_FastCharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastCharStream__methods_[] = {
            DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_FastCharStream, backup, METH_O),
            DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

          void t_FastCharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
          }

          void t_FastCharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
              return NULL;
            return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
          }
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastCharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            FastCharStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = FastCharStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *TurkishLowerCaseFilterFactory::mids$ = NULL;
          bool TurkishLowerCaseFilterFactory::live$ = false;

          jclass TurkishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilterFactory::TurkishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TurkishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory TurkishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self);
          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_TurkishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory_init_, 0, 0, t_TurkishLowerCaseFilterFactory__fields_, 0, 0);

          void t_TurkishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilterFactory), module, "TurkishLowerCaseFilterFactory", 0);
          }

          void t_TurkishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilterFactory::wrap_Object(TurkishLowerCaseFilterFactory(((t_TurkishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TurkishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TurkishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_getMultiTermComponent(t_TurkishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_get__multiTermComponent(t_TurkishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNotQuery::class$ = NULL;
          jmethodID *SpanNotQuery::mids$ = NULL;
          bool SpanNotQuery::live$ = false;

          jclass SpanNotQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNotQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c77562f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_init$_2606b720] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_init$_0c3ef6ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_4b6f9500] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNotQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getExclude_d3aa0332] = env->getMethodID(cls, "getExclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getInclude_d3aa0332] = env->getMethodID(cls, "getInclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_c77562f2, a0.this$, a1.this$)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_2606b720, a0.this$, a1.this$, a2)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2, jint a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_0c3ef6ba, a0.this$, a1.this$, a2, a3)) {}

          SpanNotQuery SpanNotQuery::clone() const
          {
            return SpanNotQuery(env->callObjectMethod(this$, mids$[mid_clone_4b6f9500]));
          }

          jboolean SpanNotQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNotQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getExclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getExclude_d3aa0332]));
          }

          ::java::lang::String SpanNotQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getInclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getInclude_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanNotQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNotQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanNotQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNotQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data);
          static PyGetSetDef t_SpanNotQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNotQuery, exclude),
            DECLARE_GET_FIELD(t_SpanNotQuery, field),
            DECLARE_GET_FIELD(t_SpanNotQuery, include),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNotQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNotQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getExclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getInclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNotQuery, t_SpanNotQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNotQuery, t_SpanNotQuery_init_, 0, 0, t_SpanNotQuery__fields_, 0, 0);

          void t_SpanNotQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNotQuery), module, "SpanNotQuery", 0);
          }

          void t_SpanNotQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "class_", make_descriptor(SpanNotQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNotQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNotQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNotQuery::wrap_Object(SpanNotQuery(((t_SpanNotQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNotQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                jint a3;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args)
          {
            SpanNotQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNotQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }

          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/util/Map.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/TimeZone.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$ConfigurationKeys::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$ConfigurationKeys::mids$ = NULL;
              bool StandardQueryConfigHandler$ConfigurationKeys::live$ = false;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ANALYZER = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::BOOST = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOCALE = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE = NULL;

              jclass StandardQueryConfigHandler$ConfigurationKeys::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  ALLOW_LEADING_WILDCARD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ALLOW_LEADING_WILDCARD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ANALYZER = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ANALYZER", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  BOOST = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "BOOST", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DATE_RESOLUTION = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DATE_RESOLUTION", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DEFAULT_OPERATOR = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DEFAULT_OPERATOR", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ENABLE_POSITION_INCREMENTS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ENABLE_POSITION_INCREMENTS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_BOOST_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_BOOST_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_DATE_RESOLUTION_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_DATE_RESOLUTION_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FUZZY_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FUZZY_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOCALE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOCALE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOWERCASE_EXPANDED_TERMS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOWERCASE_EXPANDED_TERMS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_FIELDS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_FIELDS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_TERM_REWRITE_METHOD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_TERM_REWRITE_METHOD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  PHRASE_SLOP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "PHRASE_SLOP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  TIMEZONE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "TIMEZONE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$ConfigurationKeys::StandardQueryConfigHandler$ConfigurationKeys() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler$ConfigurationKeys__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys, ::java::lang::Object, StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler$ConfigurationKeys::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), module, "StandardQueryConfigHandler$ConfigurationKeys", 0);
              }

              void t_StandardQueryConfigHandler$ConfigurationKeys::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$ConfigurationKeys::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$ConfigurationKeys::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ALLOW_LEADING_WILDCARD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ANALYZER", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ANALYZER)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "BOOST", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::BOOST)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DATE_RESOLUTION", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DEFAULT_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ENABLE_POSITION_INCREMENTS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_BOOST_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_DATE_RESOLUTION_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FUZZY_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOCALE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOCALE)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOWERCASE_EXPANDED_TERMS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_FIELDS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_TERM_REWRITE_METHOD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "PHRASE_SLOP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "TIMEZONE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE)));
              }

              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$ConfigurationKeys::wrap_Object(StandardQueryConfigHandler$ConfigurationKeys(((t_StandardQueryConfigHandler$ConfigurationKeys *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler$ConfigurationKeys object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler$ConfigurationKeys());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonCharTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonCharTokenizer::class$ = NULL;
        jmethodID *PythonCharTokenizer::mids$ = NULL;
        bool PythonCharTokenizer::live$ = false;

        jclass PythonCharTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonCharTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");
            mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCharTokenizer::PythonCharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

        void PythonCharTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonCharTokenizer::normalize(jint a0) const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::analysis::util::CharTokenizer::class$->this$, ::org::apache::lucene::analysis::util::CharTokenizer::mids$[::org::apache::lucene::analysis::util::CharTokenizer::mid_normalize_39c7bd23], a0);
        }

        jlong PythonCharTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCharTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self);
        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data);
        static PyGetSetDef t_PythonCharTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonCharTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCharTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonCharTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCharTokenizer, normalize, METH_O),
          DECLARE_METHOD(t_PythonCharTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCharTokenizer, t_PythonCharTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, PythonCharTokenizer, t_PythonCharTokenizer_init_, 0, 0, t_PythonCharTokenizer__fields_, 0, 0);

        void t_PythonCharTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCharTokenizer), module, "PythonCharTokenizer", 1);
        }

        void t_PythonCharTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "class_", make_descriptor(PythonCharTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonCharTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCharTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "isTokenChar", "(I)Z", (void *) t_PythonCharTokenizer_isTokenChar0 },
            { "normalize", "(I)I", (void *) t_PythonCharTokenizer_normalize1 },
            { "pythonDecRef", "()V", (void *) t_PythonCharTokenizer_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCharTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonCharTokenizer::wrap_Object(PythonCharTokenizer(((t_PythonCharTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCharTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::io::Reader a1((jobject) NULL);
          PythonCharTokenizer object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = PythonCharTokenizer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.normalize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", arg);
          return NULL;
        }

        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isTokenChar", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isTokenChar", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "normalize", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("normalize", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl34::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl34::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl34::live$ = false;
            jint UAX29URLEmailTokenizerImpl34::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl34::UAX29URLEmailTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl34__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34, ::java::lang::Object, UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34_init_, 0, 0, t_UAX29URLEmailTokenizerImpl34__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl34), module, "UAX29URLEmailTokenizerImpl34", 0);
            }

            void t_UAX29URLEmailTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl34::wrap_Object(UAX29URLEmailTokenizerImpl34(((t_UAX29URLEmailTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *FuzzyLikeThisQuery::class$ = NULL;
          jmethodID *FuzzyLikeThisQuery::mids$ = NULL;
          bool FuzzyLikeThisQuery::live$ = false;

          jclass FuzzyLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_374e0216] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addTerms_7066f4ef] = env->getMethodID(cls, "addTerms", "(Ljava/lang/String;Ljava/lang/String;FI)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isIgnoreTF_54c6a16a] = env->getMethodID(cls, "isIgnoreTF", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setIgnoreTF_bb0c767f] = env->getMethodID(cls, "setIgnoreTF", "(Z)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FuzzyLikeThisQuery::FuzzyLikeThisQuery(jint a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_374e0216, a0, a1.this$)) {}

          void FuzzyLikeThisQuery::addTerms(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTerms_7066f4ef], a0.this$, a1.this$, a2, a3);
          }

          jboolean FuzzyLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FuzzyLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FuzzyLikeThisQuery::isIgnoreTF() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreTF_54c6a16a]);
          }

          ::org::apache::lucene::search::Query FuzzyLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void FuzzyLikeThisQuery::setIgnoreTF(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setIgnoreTF_bb0c767f], a0);
          }

          ::java::lang::String FuzzyLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self);
          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data);
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_FuzzyLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_FuzzyLikeThisQuery, ignoreTF),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzyLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_FuzzyLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, addTerms, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, isIgnoreTF, METH_NOARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, setIgnoreTF, METH_O),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FuzzyLikeThisQuery, t_FuzzyLikeThisQuery, ::org::apache::lucene::search::Query, FuzzyLikeThisQuery, t_FuzzyLikeThisQuery_init_, 0, 0, t_FuzzyLikeThisQuery__fields_, 0, 0);

          void t_FuzzyLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzyLikeThisQuery), module, "FuzzyLikeThisQuery", 0);
          }

          void t_FuzzyLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "class_", make_descriptor(FuzzyLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzyLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_FuzzyLikeThisQuery::wrap_Object(FuzzyLikeThisQuery(((t_FuzzyLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzyLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            FuzzyLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FuzzyLikeThisQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            jint a3;

            if (!parseArgs(args, "ssFI", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addTerms(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTerms", args);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreTF());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setIgnoreTF(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setIgnoreTF", arg);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreTF());
            Py_RETURN_BOOL(value);
          }
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIgnoreTF(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "ignoreTF", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager::class$ = NULL;
        jmethodID *SearcherLifetimeManager::mids$ = NULL;
        bool SearcherLifetimeManager::live$ = false;

        jclass SearcherLifetimeManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_fc8f2eae] = env->getMethodID(cls, "acquire", "(J)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_prune_da315acb] = env->getMethodID(cls, "prune", "(Lorg/apache/lucene/search/SearcherLifetimeManager$Pruner;)V");
            mids$[mid_record_474fe500] = env->getMethodID(cls, "record", "(Lorg/apache/lucene/search/IndexSearcher;)J");
            mids$[mid_release_474fe51c] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/search/IndexSearcher;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager::SearcherLifetimeManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherLifetimeManager::acquire(jlong a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_acquire_fc8f2eae], a0));
        }

        void SearcherLifetimeManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SearcherLifetimeManager::prune(const ::org::apache::lucene::search::SearcherLifetimeManager$Pruner & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_prune_da315acb], a0.this$);
        }

        jlong SearcherLifetimeManager::record(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_record_474fe500], a0.this$);
        }

        void SearcherLifetimeManager::release(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_474fe51c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self);
        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg);

        static PyMethodDef t_SearcherLifetimeManager__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, acquire, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, close, METH_NOARGS),
          DECLARE_METHOD(t_SearcherLifetimeManager, prune, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, record, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, release, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager, t_SearcherLifetimeManager, ::java::lang::Object, SearcherLifetimeManager, t_SearcherLifetimeManager_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager), module, "SearcherLifetimeManager", 0);
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "PruneByAge", make_descriptor(&PY_TYPE(SearcherLifetimeManager$PruneByAge)));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "Pruner", make_descriptor(&PY_TYPE(SearcherLifetimeManager$Pruner)));
        }

        void t_SearcherLifetimeManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "class_", make_descriptor(SearcherLifetimeManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager::wrap_Object(SearcherLifetimeManager(((t_SearcherLifetimeManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds)
        {
          SearcherLifetimeManager object((jobject) NULL);

          INT_CALL(object = SearcherLifetimeManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.acquire(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "acquire", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::SearcherLifetimeManager$Pruner a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::SearcherLifetimeManager$Pruner::initializeClass, &a0))
          {
            OBJ_CALL(self->object.prune(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "prune", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.record(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "record", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldCollector::class$ = NULL;
        jmethodID *TopFieldCollector::mids$ = NULL;
        bool TopFieldCollector::live$ = false;

        jclass TopFieldCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_ea5994c0] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;IZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_create_be0959c2] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;ILorg/apache/lucene/search/FieldDoc;ZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean TopFieldCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ea5994c0], a0.this$, a1, a2, a3, a4, a5));
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, const ::org::apache::lucene::search::FieldDoc & a2, jboolean a3, jboolean a4, jboolean a5, jboolean a6)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_be0959c2], a0.this$, a1, a2.this$, a3, a4, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data);
        static PyGetSetDef t_TopFieldCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopFieldCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldCollector__methods_[] = {
          DECLARE_METHOD(t_TopFieldCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, create, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldCollector, t_TopFieldCollector, ::org::apache::lucene::search::TopDocsCollector, TopFieldCollector, abstract_init, 0, 0, t_TopFieldCollector__fields_, 0, 0);
        PyObject *t_TopFieldCollector::wrap_Object(const TopFieldCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopFieldCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopFieldCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldCollector), module, "TopFieldCollector", 0);
        }

        void t_TopFieldCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "class_", make_descriptor(TopFieldCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "wrapfn_", make_descriptor(t_TopFieldCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldCollector::initializeClass, 1)))
            return NULL;
          return t_TopFieldCollector::wrap_Object(TopFieldCollector(((t_TopFieldCollector *) arg)->object.this$));
        }
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopFieldCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jboolean a2;
              jboolean a3;
              jboolean a4;
              jboolean a5;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIZZZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIkZZZZ", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5, a6));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemmer::class$ = NULL;
          jmethodID *SpanishLightStemmer::mids$ = NULL;
          bool SpanishLightStemmer::live$ = false;

          jclass SpanishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemmer::SpanishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SpanishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemmer, t_SpanishLightStemmer, ::java::lang::Object, SpanishLightStemmer, t_SpanishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemmer), module, "SpanishLightStemmer", 0);
          }

          void t_SpanishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "class_", make_descriptor(SpanishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemmer::wrap_Object(SpanishLightStemmer(((t_SpanishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SpanishLightStemmer object((jobject) NULL);

            INT_CALL(object = SpanishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache::mids$ = NULL;
        bool DoubleBarrelLRUCache::live$ = false;

        jclass DoubleBarrelLRUCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_08c4f70e] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;)Ljava/lang/Object;");
            mids$[mid_put_49de5bfd] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache::DoubleBarrelLRUCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        ::java::lang::Object DoubleBarrelLRUCache::get(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_08c4f70e], a0.this$));
        }

        void DoubleBarrelLRUCache::put(const ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_put_49de5bfd], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args);
        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args);
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, get, METH_O),
          DECLARE_METHOD(t_DoubleBarrelLRUCache, put, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache, t_DoubleBarrelLRUCache, ::java::lang::Object, DoubleBarrelLRUCache, t_DoubleBarrelLRUCache_init_, 0, 0, t_DoubleBarrelLRUCache__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache::wrap_Object(const DoubleBarrelLRUCache& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache *self = (t_DoubleBarrelLRUCache *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache), module, "DoubleBarrelLRUCache", 0);
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "CloneableKey", make_descriptor(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey)));
        }

        void t_DoubleBarrelLRUCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache::wrap_Object(DoubleBarrelLRUCache(((t_DoubleBarrelLRUCache *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache_of_(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache_init_(t_DoubleBarrelLRUCache *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          DoubleBarrelLRUCache object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = DoubleBarrelLRUCache(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache_get(t_DoubleBarrelLRUCache *self, PyObject *arg)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DoubleBarrelLRUCache_put(t_DoubleBarrelLRUCache *self, PyObject *args)
        {
          ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "KO", ::org::apache::lucene::util::DoubleBarrelLRUCache$CloneableKey::initializeClass, self->parameters[1], &a0, &p0, ::org::apache::lucene::util::t_DoubleBarrelLRUCache$CloneableKey::parameters_, &a1))
          {
            OBJ_CALL(self->object.put(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }
        static PyObject *t_DoubleBarrelLRUCache_get__parameters_(t_DoubleBarrelLRUCache *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hy/ArmenianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {

          ::java::lang::Class *ArmenianAnalyzer::class$ = NULL;
          jmethodID *ArmenianAnalyzer::mids$ = NULL;
          bool ArmenianAnalyzer::live$ = false;
          ::java::lang::String *ArmenianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArmenianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hy/ArmenianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArmenianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {
          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data);
          static PyGetSetDef t_ArmenianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArmenianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArmenianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArmenianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArmenianAnalyzer, t_ArmenianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArmenianAnalyzer, t_ArmenianAnalyzer_init_, 0, 0, t_ArmenianAnalyzer__fields_, 0, 0);

          void t_ArmenianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArmenianAnalyzer), module, "ArmenianAnalyzer", 0);
          }

          void t_ArmenianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "class_", make_descriptor(ArmenianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArmenianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArmenianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArmenianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArmenianAnalyzer::wrap_Object(ArmenianAnalyzer(((t_ArmenianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArmenianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hy::ArmenianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoFormat::mids$ = NULL;
          bool Lucene3xSegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_NAME_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_OFFSET_KEY = NULL;
          jint Lucene3xSegmentInfoFormat::FORMAT_3_1 = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS = (jint) 0;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_PREFIX = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION = NULL;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT = (jint) 0;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START = (jint) 0;

          jclass Lucene3xSegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDocStoreIsCompoundFile_196ca35f] = env->getStaticMethodID(cls, "getDocStoreIsCompoundFile", "(Lorg/apache/lucene/index/SegmentInfo;)Z");
              mids$[mid_getDocStoreOffset_196ca34c] = env->getStaticMethodID(cls, "getDocStoreOffset", "(Lorg/apache/lucene/index/SegmentInfo;)I");
              mids$[mid_getDocStoreSegment_44869e72] = env->getStaticMethodID(cls, "getDocStoreSegment", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/lang/String;");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DS_COMPOUND_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_COMPOUND_KEY", "Ljava/lang/String;"));
              DS_NAME_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_NAME_KEY", "Ljava/lang/String;"));
              DS_OFFSET_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_OFFSET_KEY", "Ljava/lang/String;"));
              FORMAT_3_1 = env->getStaticIntField(cls, "FORMAT_3_1");
              FORMAT_DIAGNOSTICS = env->getStaticIntField(cls, "FORMAT_DIAGNOSTICS");
              FORMAT_HAS_VECTORS = env->getStaticIntField(cls, "FORMAT_HAS_VECTORS");
              NORMGEN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_KEY", "Ljava/lang/String;"));
              NORMGEN_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_PREFIX", "Ljava/lang/String;"));
              UPGRADED_SI_CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_CODEC_NAME", "Ljava/lang/String;"));
              UPGRADED_SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_EXTENSION", "Ljava/lang/String;"));
              UPGRADED_SI_VERSION_CURRENT = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_CURRENT");
              UPGRADED_SI_VERSION_START = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoFormat::Lucene3xSegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_getDocStoreIsCompoundFile_196ca35f], a0.this$);
          }

          jint Lucene3xSegmentInfoFormat::getDocStoreOffset(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getDocStoreOffset_196ca34c], a0.this$);
          }

          ::java::lang::String Lucene3xSegmentInfoFormat::getDocStoreSegment(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreSegment_44869e72], a0.this$));
          }

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene3xSegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene3xSegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene3xSegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene3xSegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreIsCompoundFile, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreOffset, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreSegment, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat_init_, 0, 0, t_Lucene3xSegmentInfoFormat__fields_, 0, 0);

          void t_Lucene3xSegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoFormat), module, "Lucene3xSegmentInfoFormat", 0);
          }

          void t_Lucene3xSegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene3xSegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_COMPOUND_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_NAME_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_NAME_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_OFFSET_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_OFFSET_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_3_1", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_3_1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_DIAGNOSTICS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_HAS_VECTORS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_PREFIX", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_PREFIX)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_CODEC_NAME", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_EXTENSION", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_CURRENT", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_START", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START));
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoFormat::wrap_Object(Lucene3xSegmentInfoFormat(((t_Lucene3xSegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "getDocStoreIsCompoundFile", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreOffset(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getDocStoreOffset", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreSegment(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getDocStoreSegment", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST::class$ = NULL;
          jmethodID *FST::mids$ = NULL;
          jfieldID *FST::fids$ = NULL;
          bool FST::live$ = false;
          jint FST::DEFAULT_MAX_BLOCK_BITS = (jint) 0;
          jint FST::END_LABEL = (jint) 0;

          jclass FST::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed0a14d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_f8dfeffa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;I)V");
              mids$[mid_findTargetArc_12322441] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getArcCount_54c6a17a] = env->getMethodID(cls, "getArcCount", "()J");
              mids$[mid_getArcWithOutputCount_54c6a17a] = env->getMethodID(cls, "getArcWithOutputCount", "()J");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_getEmptyOutput_846352c3] = env->getMethodID(cls, "getEmptyOutput", "()Ljava/lang/Object;");
              mids$[mid_getFirstArc_8c07e6cb] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getInputType_ae922153] = env->getMethodID(cls, "getInputType", "()Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_getNodeCount_54c6a17a] = env->getMethodID(cls, "getNodeCount", "()J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_read_fd85abc1] = env->getStaticMethodID(cls, "read", "(Ljava/io/File;Lorg/apache/lucene/util/fst/Outputs;)Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_readFirstRealTargetArc_e3f5aada] = env->getMethodID(cls, "readFirstRealTargetArc", "(JLorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readFirstTargetArc_ec7dd60b] = env->getMethodID(cls, "readFirstTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readLastTargetArc_ec7dd60b] = env->getMethodID(cls, "readLastTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArc_1deb4fc1] = env->getMethodID(cls, "readNextArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArcLabel_614f52e1] = env->getMethodID(cls, "readNextArcLabel", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)I");
              mids$[mid_readNextRealArc_1deb4fc1] = env->getMethodID(cls, "readNextRealArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readRootArcs_a2b77668] = env->getMethodID(cls, "readRootArcs", "([Lorg/apache/lucene/util/fst/FST$Arc;)V");
              mids$[mid_save_c3dacf57] = env->getMethodID(cls, "save", "(Ljava/io/File;)V");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_targetHasArcs_0c8cc6dc] = env->getStaticMethodID(cls, "targetHasArcs", "(Lorg/apache/lucene/util/fst/FST$Arc;)Z");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcCount] = env->getFieldID(cls, "arcCount", "J");
              fids$[fid_arcWithOutputCount] = env->getFieldID(cls, "arcWithOutputCount", "J");
              fids$[fid_inputType] = env->getFieldID(cls, "inputType", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              fids$[fid_nodeCount] = env->getFieldID(cls, "nodeCount", "J");
              fids$[fid_outputs] = env->getFieldID(cls, "outputs", "Lorg/apache/lucene/util/fst/Outputs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_BITS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_BITS");
              END_LABEL = env->getStaticIntField(cls, "END_LABEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed0a14d8, a0.this$, a1.this$)) {}

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8dfeffa, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST$Arc FST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_12322441], a0, a1.this$, a2.this$, a3.this$));
          }

          jlong FST::getArcCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcCount_54c6a17a]);
          }

          jlong FST::getArcWithOutputCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcWithOutputCount_54c6a17a]);
          }

          ::org::apache::lucene::util::fst::FST$BytesReader FST::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }

          ::java::lang::Object FST::getEmptyOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getEmptyOutput_846352c3]));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_8c07e6cb], a0.this$));
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::getInputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->callObjectMethod(this$, mids$[mid_getInputType_ae922153]));
          }

          jlong FST::getNodeCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getNodeCount_54c6a17a]);
          }

          jlong FST::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          FST FST::read(const ::java::io::File & a0, const ::org::apache::lucene::util::fst::Outputs & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FST(env->callStaticObjectMethod(cls, mids$[mid_read_fd85abc1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstRealTargetArc(jlong a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstRealTargetArc_e3f5aada], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readLastTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readLastTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextArc_1deb4fc1], a0.this$, a1.this$));
          }

          jint FST::readNextArcLabel(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_readNextArcLabel_614f52e1], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextRealArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextRealArc_1deb4fc1], a0.this$, a1.this$));
          }

          void FST::readRootArcs(const JArray< ::org::apache::lucene::util::fst::FST$Arc > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_readRootArcs_a2b77668], a0.this$);
          }

          void FST::save(const ::java::io::File & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_c3dacf57], a0.this$);
          }

          void FST::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          jboolean FST::targetHasArcs(const ::org::apache::lucene::util::fst::FST$Arc & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_targetHasArcs_0c8cc6dc], a0.this$);
          }

          jlong FST::_get_arcCount() const
          {
            return env->getLongField(this$, fids$[fid_arcCount]);
          }

          void FST::_set_arcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcCount], a0);
          }

          jlong FST::_get_arcWithOutputCount() const
          {
            return env->getLongField(this$, fids$[fid_arcWithOutputCount]);
          }

          void FST::_set_arcWithOutputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcWithOutputCount], a0);
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::_get_inputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->getObjectField(this$, fids$[fid_inputType]));
          }

          jlong FST::_get_nodeCount() const
          {
            return env->getLongField(this$, fids$[fid_nodeCount]);
          }

          void FST::_set_nodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_nodeCount], a0);
          }

          ::org::apache::lucene::util::fst::Outputs FST::_get_outputs() const
          {
            return ::org::apache::lucene::util::fst::Outputs(env->getObjectField(this$, fids$[fid_outputs]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_of_(t_FST *self, PyObject *args);
          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_getArcCount(t_FST *self);
          static PyObject *t_FST_getArcWithOutputCount(t_FST *self);
          static PyObject *t_FST_getBytesReader(t_FST *self);
          static PyObject *t_FST_getEmptyOutput(t_FST *self);
          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg);
          static PyObject *t_FST_getInputType(t_FST *self);
          static PyObject *t_FST_getNodeCount(t_FST *self);
          static PyObject *t_FST_ramBytesUsed(t_FST *self);
          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg);
          static PyObject *t_FST_save(t_FST *self, PyObject *args);
          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_get__outputs(t_FST *self, void *data);

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data);
          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data);
          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data);
          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data);
          static PyObject *t_FST_get__inputType(t_FST *self, void *data);
          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data);
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data);
          static PyGetSetDef t_FST__fields_[] = {
            DECLARE_GET_FIELD(t_FST, outputs),
            DECLARE_GET_FIELD(t_FST, arcCount),
            DECLARE_GET_FIELD(t_FST, arcWithOutputCount),
            DECLARE_GET_FIELD(t_FST, bytesReader),
            DECLARE_GET_FIELD(t_FST, emptyOutput),
            DECLARE_GET_FIELD(t_FST, inputType),
            DECLARE_GET_FIELD(t_FST, nodeCount),
            DECLARE_GET_FIELD(t_FST, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST__methods_[] = {
            DECLARE_METHOD(t_FST, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST, findTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, getArcCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getArcWithOutputCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_FST, getEmptyOutput, METH_NOARGS),
            DECLARE_METHOD(t_FST, getFirstArc, METH_O),
            DECLARE_METHOD(t_FST, getInputType, METH_NOARGS),
            DECLARE_METHOD(t_FST, getNodeCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FST, read, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST, readFirstRealTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readFirstTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readLastTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArcLabel, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextRealArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readRootArcs, METH_O),
            DECLARE_METHOD(t_FST, save, METH_VARARGS),
            DECLARE_METHOD(t_FST, targetHasArcs, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST, t_FST, ::java::lang::Object, FST, t_FST_init_, 0, 0, t_FST__fields_, 0, 0);
          PyObject *t_FST::wrap_Object(const FST& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST::install(PyObject *module)
          {
            installType(&PY_TYPE(FST), module, "FST", 0);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "BytesReader", make_descriptor(&PY_TYPE(FST$BytesReader)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "Arc", make_descriptor(&PY_TYPE(FST$Arc)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "INPUT_TYPE", make_descriptor(&PY_TYPE(FST$INPUT_TYPE)));
          }

          void t_FST::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "class_", make_descriptor(FST::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "wrapfn_", make_descriptor(t_FST::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "DEFAULT_MAX_BLOCK_BITS", make_descriptor(FST::DEFAULT_MAX_BLOCK_BITS));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "END_LABEL", make_descriptor(FST::END_LABEL));
          }

          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST::initializeClass, 1)))
              return NULL;
            return t_FST::wrap_Object(FST(((t_FST *) arg)->object.this$));
          }
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST_of_(t_FST *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = FST(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a2))
                {
                  INT_CALL(object = FST(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_getArcCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getArcWithOutputCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getBytesReader(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_FST_getEmptyOutput(t_FST *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getEmptyOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.getFirstArc(a0));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
            return NULL;
          }

          static PyObject *t_FST_getInputType(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE result((jobject) NULL);
            OBJ_CALL(result = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(result);
          }

          static PyObject *t_FST_getNodeCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_ramBytesUsed(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args)
          {
            ::java::io::File a0((jobject) NULL);
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            FST result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::File::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::read(a0, a1));
              return t_FST::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "read", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "JKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstRealTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstRealTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readLastTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readLastTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            jint result;

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArcLabel(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArcLabel", args);
            return NULL;
          }

          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextRealArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextRealArc", args);
            return NULL;
          }

          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::fst::FST$Arc > a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "[K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(self->object.readRootArcs(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "readRootArcs", arg);
            return NULL;
          }

          static PyObject *t_FST_save(t_FST *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::File a0((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "save", args);
            return NULL;
          }

          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::targetHasArcs(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "targetHasArcs", arg);
            return NULL;
          }
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST_get__outputs(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::Outputs value((jobject) NULL);
            OBJ_CALL(value = self->object._get_outputs());
            return ::org::apache::lucene::util::fst::t_Outputs::wrap_Object(value);
          }

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }

          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getEmptyOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_FST_get__inputType(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(value);
          }

          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstNumberSource.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstNumberSource::class$ = NULL;
            jmethodID *ConstNumberSource::mids$ = NULL;
            bool ConstNumberSource::live$ = false;

            jclass ConstNumberSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstNumberSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstNumberSource::ConstNumberSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean ConstNumberSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstNumberSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstNumberSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstNumberSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstNumberSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstNumberSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data);
            static PyGetSetDef t_ConstNumberSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstNumberSource, bool),
              DECLARE_GET_FIELD(t_ConstNumberSource, double),
              DECLARE_GET_FIELD(t_ConstNumberSource, float),
              DECLARE_GET_FIELD(t_ConstNumberSource, int),
              DECLARE_GET_FIELD(t_ConstNumberSource, long),
              DECLARE_GET_FIELD(t_ConstNumberSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstNumberSource__methods_[] = {
              DECLARE_METHOD(t_ConstNumberSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, getBool, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getDouble, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getFloat, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getInt, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getLong, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getNumber, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstNumberSource, t_ConstNumberSource, ::org::apache::lucene::queries::function::ValueSource, ConstNumberSource, t_ConstNumberSource_init_, 0, 0, t_ConstNumberSource__fields_, 0, 0);

            void t_ConstNumberSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstNumberSource), module, "ConstNumberSource", 0);
            }

            void t_ConstNumberSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "class_", make_descriptor(ConstNumberSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "wrapfn_", make_descriptor(t_ConstNumberSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstNumberSource::initializeClass, 1)))
                return NULL;
              return t_ConstNumberSource::wrap_Object(ConstNumberSource(((t_ConstNumberSource *) arg)->object.this$));
            }
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstNumberSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds)
            {
              ConstNumberSource object((jobject) NULL);

              INT_CALL(object = ConstNumberSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getBool());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self)
            {
              jdouble result;
              OBJ_CALL(result = self->object.getDouble());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFloat());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getInt());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self)
            {
              ::java::lang::Number result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(result);
            }

            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator$JvmFeature::class$ = NULL;
        jmethodID *RamUsageEstimator$JvmFeature::mids$ = NULL;
        jfieldID *RamUsageEstimator$JvmFeature::fids$ = NULL;
        bool RamUsageEstimator$JvmFeature::live$ = false;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::FIELD_OFFSETS = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT = NULL;
        RamUsageEstimator$JvmFeature *RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE = NULL;

        jclass RamUsageEstimator$JvmFeature::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator$JvmFeature");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_435c0e75] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");
            mids$[mid_values_6bc6c637] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_description] = env->getFieldID(cls, "description", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ARRAY_HEADER_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "ARRAY_HEADER_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            FIELD_OFFSETS = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "FIELD_OFFSETS", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_ALIGNMENT = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_ALIGNMENT", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            OBJECT_REFERENCE_SIZE = new RamUsageEstimator$JvmFeature(env->getStaticObjectField(cls, "OBJECT_REFERENCE_SIZE", "Lorg/apache/lucene/util/RamUsageEstimator$JvmFeature;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        RamUsageEstimator$JvmFeature RamUsageEstimator$JvmFeature::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return RamUsageEstimator$JvmFeature(env->callStaticObjectMethod(cls, mids$[mid_valueOf_435c0e75], a0.this$));
        }

        JArray< RamUsageEstimator$JvmFeature > RamUsageEstimator$JvmFeature::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< RamUsageEstimator$JvmFeature >(env->callStaticObjectMethod(cls, mids$[mid_values_6bc6c637]));
        }

        ::java::lang::String RamUsageEstimator$JvmFeature::_get_description() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_description]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data);

        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data);
        static PyGetSetDef t_RamUsageEstimator$JvmFeature__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, description),
          DECLARE_GET_FIELD(t_RamUsageEstimator$JvmFeature, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator$JvmFeature__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, of_, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, toString, METH_VARARGS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator$JvmFeature, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator$JvmFeature, t_RamUsageEstimator$JvmFeature, ::java::lang::Enum, RamUsageEstimator$JvmFeature, abstract_init, 0, 0, t_RamUsageEstimator$JvmFeature__fields_, 0, 0);
        PyObject *t_RamUsageEstimator$JvmFeature::wrap_Object(const RamUsageEstimator$JvmFeature& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RamUsageEstimator$JvmFeature::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RamUsageEstimator$JvmFeature::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RamUsageEstimator$JvmFeature *self = (t_RamUsageEstimator$JvmFeature *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RamUsageEstimator$JvmFeature::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator$JvmFeature), module, "RamUsageEstimator$JvmFeature", 0);
        }

        void t_RamUsageEstimator$JvmFeature::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "class_", make_descriptor(RamUsageEstimator$JvmFeature::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator$JvmFeature::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "ARRAY_HEADER_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::ARRAY_HEADER_SIZE)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "FIELD_OFFSETS", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::FIELD_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_ALIGNMENT", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_ALIGNMENT)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator$JvmFeature).tp_dict, "OBJECT_REFERENCE_SIZE", make_descriptor(t_RamUsageEstimator$JvmFeature::wrap_Object(*RamUsageEstimator$JvmFeature::OBJECT_REFERENCE_SIZE)));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator$JvmFeature::wrap_Object(RamUsageEstimator$JvmFeature(((t_RamUsageEstimator$JvmFeature *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator$JvmFeature::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_of_(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_toString(t_RamUsageEstimator$JvmFeature *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RamUsageEstimator$JvmFeature), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          RamUsageEstimator$JvmFeature result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::valueOf(a0));
            return t_RamUsageEstimator$JvmFeature::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_values(PyTypeObject *type)
        {
          JArray< RamUsageEstimator$JvmFeature > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator$JvmFeature::values());
          return JArray<jobject>(result.this$).wrap(t_RamUsageEstimator$JvmFeature::wrap_jobject);
        }
        static PyObject *t_RamUsageEstimator$JvmFeature_get__parameters_(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RamUsageEstimator$JvmFeature_get__description(t_RamUsageEstimator$JvmFeature *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_description());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm$MatchingTermVisitor::class$ = NULL;
            jmethodID *SimpleTerm$MatchingTermVisitor::mids$ = NULL;
            bool SimpleTerm$MatchingTermVisitor::live$ = false;

            jclass SimpleTerm$MatchingTermVisitor::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor");

                mids$ = new jmethodID[max_mid];
                mids$[mid_visitMatchingTerm_7eca6a81] = env->getMethodID(cls, "visitMatchingTerm", "(Lorg/apache/lucene/index/Term;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void SimpleTerm$MatchingTermVisitor::visitMatchingTerm(const ::org::apache::lucene::index::Term & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerm_7eca6a81], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg);

            static PyMethodDef t_SimpleTerm$MatchingTermVisitor__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, visitMatchingTerm, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm$MatchingTermVisitor, t_SimpleTerm$MatchingTermVisitor, ::java::lang::Object, SimpleTerm$MatchingTermVisitor, abstract_init, 0, 0, 0, 0, 0);

            void t_SimpleTerm$MatchingTermVisitor::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm$MatchingTermVisitor), module, "SimpleTerm$MatchingTermVisitor", 0);
            }

            void t_SimpleTerm$MatchingTermVisitor::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "class_", make_descriptor(SimpleTerm$MatchingTermVisitor::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm$MatchingTermVisitor::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm$MatchingTermVisitor::wrap_Object(SimpleTerm$MatchingTermVisitor(((t_SimpleTerm$MatchingTermVisitor *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visitMatchingTerm(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerm", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoReader::class$ = NULL;
        jmethodID *SegmentInfoReader::mids$ = NULL;
        bool SegmentInfoReader::live$ = false;

        jclass SegmentInfoReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::SegmentInfo SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args);

        static PyMethodDef t_SegmentInfoReader__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoReader, t_SegmentInfoReader, ::java::lang::Object, SegmentInfoReader, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoReader), module, "SegmentInfoReader", 0);
        }

        void t_SegmentInfoReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "class_", make_descriptor(SegmentInfoReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoReader::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoReader::wrap_Object(SegmentInfoReader(((t_SegmentInfoReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *GroupQueryNodeBuilder::class$ = NULL;
              jmethodID *GroupQueryNodeBuilder::mids$ = NULL;
              bool GroupQueryNodeBuilder::live$ = false;

              jclass GroupQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeBuilder::GroupQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query GroupQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_GroupQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeBuilder, t_GroupQueryNodeBuilder, ::java::lang::Object, GroupQueryNodeBuilder, t_GroupQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_GroupQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeBuilder), module, "GroupQueryNodeBuilder", 0);
              }

              void t_GroupQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "class_", make_descriptor(GroupQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeBuilder::wrap_Object(GroupQueryNodeBuilder(((t_GroupQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *QueryBuilder::class$ = NULL;
        jmethodID *QueryBuilder::mids$ = NULL;
        bool QueryBuilder::live$ = false;

        jclass QueryBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/QueryBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_createBooleanQuery_38d6e77e] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createBooleanQuery_6523fcfc] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createMinShouldMatchQuery_45995161] = env->getMethodID(cls, "createMinShouldMatchQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_38d6e77e] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_c7c8d9a8] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
            mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
            mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newBooleanQuery_71c47e3e] = env->getMethodID(cls, "newBooleanQuery", "(Z)Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createFieldQuery_da240c4d] = env->getMethodID(cls, "createFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/BooleanClause$Occur;Ljava/lang/String;Ljava/lang/String;ZI)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPhraseQuery_c05a65af] = env->getMethodID(cls, "newPhraseQuery", "()Lorg/apache/lucene/search/PhraseQuery;");
            mids$[mid_newMultiPhraseQuery_4a09b2bb] = env->getMethodID(cls, "newMultiPhraseQuery", "()Lorg/apache/lucene/search/MultiPhraseQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryBuilder::QueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::BooleanClause$Occur & a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_6523fcfc], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createMinShouldMatchQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createMinShouldMatchQuery_45995161], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_38d6e77e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_c7c8d9a8], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::analysis::Analyzer QueryBuilder::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean QueryBuilder::getEnablePositionIncrements() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
        }

        void QueryBuilder::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
        }

        void QueryBuilder::setEnablePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_QueryBuilder__fields_[] = {
          DECLARE_GETSET_FIELD(t_QueryBuilder, analyzer),
          DECLARE_GETSET_FIELD(t_QueryBuilder, enablePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryBuilder__methods_[] = {
          DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, createBooleanQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createMinShouldMatchQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createPhraseQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getEnablePositionIncrements, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, setAnalyzer, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setEnablePositionIncrements, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, t_QueryBuilder_init_, 0, 0, t_QueryBuilder__fields_, 0, 0);

        void t_QueryBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
        }

        void t_QueryBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
            return NULL;
          return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
        }
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          QueryBuilder object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            INT_CALL(object = QueryBuilder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createBooleanQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createMinShouldMatchQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createMinShouldMatchQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssI", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createPhraseQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setAnalyzer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setEnablePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
            {
              INT_CALL(self->object.setAnalyzer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setEnablePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Format::class$ = NULL;
          jmethodID *PackedInts$Format::mids$ = NULL;
          jfieldID *PackedInts$Format::fids$ = NULL;
          bool PackedInts$Format::live$ = false;
          PackedInts$Format *PackedInts$Format::PACKED = NULL;
          PackedInts$Format *PackedInts$Format::PACKED_SINGLE_BLOCK = NULL;

          jclass PackedInts$Format::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Format");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byId_926ce3b1] = env->getStaticMethodID(cls, "byId", "(I)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_byteCount_d3236ab8] = env->getMethodID(cls, "byteCount", "(III)J");
              mids$[mid_getId_54c6a179] = env->getMethodID(cls, "getId", "()I");
              mids$[mid_isSupported_39c7bd30] = env->getMethodID(cls, "isSupported", "(I)Z");
              mids$[mid_longCount_d3236abb] = env->getMethodID(cls, "longCount", "(III)I");
              mids$[mid_overheadPerValue_39c7bd2c] = env->getMethodID(cls, "overheadPerValue", "(I)F");
              mids$[mid_overheadRatio_39c7bd2c] = env->getMethodID(cls, "overheadRatio", "(I)F");
              mids$[mid_valueOf_ad915ab1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_values_d84982f7] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/packed/PackedInts$Format;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_id] = env->getFieldID(cls, "id", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PACKED = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              PACKED_SINGLE_BLOCK = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED_SINGLE_BLOCK", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Format PackedInts$Format::byId(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_byId_926ce3b1], a0));
          }

          jlong PackedInts$Format::byteCount(jint a0, jint a1, jint a2) const
          {
            return env->callLongMethod(this$, mids$[mid_byteCount_d3236ab8], a0, a1, a2);
          }

          jint PackedInts$Format::getId() const
          {
            return env->callIntMethod(this$, mids$[mid_getId_54c6a179]);
          }

          jboolean PackedInts$Format::isSupported(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSupported_39c7bd30], a0);
          }

          jint PackedInts$Format::longCount(jint a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_longCount_d3236abb], a0, a1, a2);
          }

          jfloat PackedInts$Format::overheadPerValue(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadPerValue_39c7bd2c], a0);
          }

          jfloat PackedInts$Format::overheadRatio(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadRatio_39c7bd2c], a0);
          }

          PackedInts$Format PackedInts$Format::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad915ab1], a0.this$));
          }

          JArray< PackedInts$Format > PackedInts$Format::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< PackedInts$Format >(env->callStaticObjectMethod(cls, mids$[mid_values_d84982f7]));
          }

          jint PackedInts$Format::_get_id() const
          {
            return env->getIntField(this$, fids$[fid_id]);
          }

          void PackedInts$Format::_set_id(jint a0) const
          {
            env->setIntField(this$, fids$[fid_id], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self);
          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts$Format_values(PyTypeObject *type);

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data);
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data);
          static PyGetSetDef t_PackedInts$Format__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Format, id),
            DECLARE_GET_FIELD(t_PackedInts$Format, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Format__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Format, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, of_, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, byId, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, byteCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, getId, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Format, isSupported, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, longCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, overheadPerValue, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, overheadRatio, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Format, t_PackedInts$Format, ::java::lang::Enum, PackedInts$Format, abstract_init, 0, 0, t_PackedInts$Format__fields_, 0, 0);
          PyObject *t_PackedInts$Format::wrap_Object(const PackedInts$Format& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PackedInts$Format::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PackedInts$Format::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Format), module, "PackedInts$Format", 0);
          }

          void t_PackedInts$Format::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "class_", make_descriptor(PackedInts$Format::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Format::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts$Format::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED)));
            PyDict_SetItemString(PY_TYPE(PackedInts$Format).tp_dict, "PACKED_SINGLE_BLOCK", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED_SINGLE_BLOCK)));
          }

          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Format::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Format::wrap_Object(PackedInts$Format(((t_PackedInts$Format *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Format::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            PackedInts$Format result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::byId(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "byId", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jlong result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.byteCount(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "byteCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getId());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isSupported(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSupported", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.longCount(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "longCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadPerValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadPerValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadRatio(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadRatio", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            PackedInts$Format result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::valueOf(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_PackedInts$Format_values(PyTypeObject *type)
          {
            JArray< PackedInts$Format > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::values());
            return JArray<jobject>(result.this$).wrap(t_PackedInts$Format::wrap_jobject);
          }
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getId());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$RewriteMethod::class$ = NULL;
        jmethodID *MultiTermQuery$RewriteMethod::mids$ = NULL;
        bool MultiTermQuery$RewriteMethod::live$ = false;

        jclass MultiTermQuery$RewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$RewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getTermsEnum_432efaeb] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/search/MultiTermQuery;Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$RewriteMethod::MultiTermQuery$RewriteMethod() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query MultiTermQuery$RewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args);

        static PyMethodDef t_MultiTermQuery$RewriteMethod__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod, ::java::lang::Object, MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_MultiTermQuery$RewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$RewriteMethod), module, "MultiTermQuery$RewriteMethod", 0);
        }

        void t_MultiTermQuery$RewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "class_", make_descriptor(MultiTermQuery$RewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$RewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$RewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$RewriteMethod::wrap_Object(MultiTermQuery$RewriteMethod(((t_MultiTermQuery$RewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$RewriteMethod object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$RewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BoolFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BoolFunction::class$ = NULL;
            jmethodID *BoolFunction::mids$ = NULL;
            bool BoolFunction::live$ = false;

            jclass BoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolFunction::BoolFunction() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoolFunction__methods_[] = {
              DECLARE_METHOD(t_BoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolFunction, t_BoolFunction, ::org::apache::lucene::queries::function::ValueSource, BoolFunction, t_BoolFunction_init_, 0, 0, 0, 0, 0);

            void t_BoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolFunction), module, "BoolFunction", 0);
            }

            void t_BoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "class_", make_descriptor(BoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "wrapfn_", make_descriptor(t_BoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolFunction::initializeClass, 1)))
                return NULL;
              return t_BoolFunction::wrap_Object(BoolFunction(((t_BoolFunction *) arg)->object.this$));
            }
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds)
            {
              BoolFunction object((jobject) NULL);

              INT_CALL(object = BoolFunction());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$Operator::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$Operator::mids$ = NULL;
              bool StandardQueryConfigHandler$Operator::live$ = false;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::AND = NULL;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::OR = NULL;

              jclass StandardQueryConfigHandler$Operator::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_5228e32d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                  mids$[mid_values_6f704b93] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  OR = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$Operator StandardQueryConfigHandler$Operator::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return StandardQueryConfigHandler$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5228e32d], a0.this$));
              }

              JArray< StandardQueryConfigHandler$Operator > StandardQueryConfigHandler$Operator::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< StandardQueryConfigHandler$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6f704b93]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type);
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data);
              static PyGetSetDef t_StandardQueryConfigHandler$Operator__fields_[] = {
                DECLARE_GET_FIELD(t_StandardQueryConfigHandler$Operator, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardQueryConfigHandler$Operator__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, of_, METH_VARARGS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$Operator, t_StandardQueryConfigHandler$Operator, ::java::lang::Enum, StandardQueryConfigHandler$Operator, abstract_init, 0, 0, t_StandardQueryConfigHandler$Operator__fields_, 0, 0);
              PyObject *t_StandardQueryConfigHandler$Operator::wrap_Object(const StandardQueryConfigHandler$Operator& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_StandardQueryConfigHandler$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_StandardQueryConfigHandler$Operator::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$Operator), module, "StandardQueryConfigHandler$Operator", 0);
              }

              void t_StandardQueryConfigHandler$Operator::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$Operator::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$Operator::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "AND", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::AND)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "OR", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::OR)));
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$Operator::wrap_Object(StandardQueryConfigHandler$Operator(((t_StandardQueryConfigHandler$Operator *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                StandardQueryConfigHandler$Operator result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::valueOf(a0));
                  return t_StandardQueryConfigHandler$Operator::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type)
              {
                JArray< StandardQueryConfigHandler$Operator > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::values());
                return JArray<jobject>(result.this$).wrap(t_StandardQueryConfigHandler$Operator::wrap_jobject);
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizer::class$ = NULL;
          jmethodID *LetterTokenizer::mids$ = NULL;
          bool LetterTokenizer::live$ = false;

          jclass LetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizer, t_LetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, LetterTokenizer, t_LetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizer), module, "LetterTokenizer", 0);
          }

          void t_LetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "class_", make_descriptor(LetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizer::wrap_Object(LetterTokenizer(((t_LetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanTermQuery::class$ = NULL;
          jmethodID *SpanTermQuery::mids$ = NULL;
          bool SpanTermQuery::live$ = false;

          jclass SpanTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanTermQuery::SpanTermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          jboolean SpanTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanTermQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanTermQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanTermQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::index::Term SpanTermQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SpanTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanTermQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self);
          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data);
          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data);
          static PyGetSetDef t_SpanTermQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanTermQuery, field),
            DECLARE_GET_FIELD(t_SpanTermQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanTermQuery__methods_[] = {
            DECLARE_METHOD(t_SpanTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SpanTermQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanTermQuery, t_SpanTermQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanTermQuery, t_SpanTermQuery_init_, 0, 0, t_SpanTermQuery__fields_, 0, 0);

          void t_SpanTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanTermQuery), module, "SpanTermQuery", 0);
          }

          void t_SpanTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "class_", make_descriptor(SpanTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanTermQuery::initializeClass, 1)))
              return NULL;
            return t_SpanTermQuery::wrap_Object(SpanTermQuery(((t_SpanTermQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            SpanTermQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              INT_CALL(object = SpanTermQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilter::class$ = NULL;
          jmethodID *GreekStemFilter::mids$ = NULL;
          bool GreekStemFilter::live$ = false;

          jclass GreekStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilter::GreekStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GreekStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args);

          static PyMethodDef t_GreekStemFilter__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilter, t_GreekStemFilter, ::org::apache::lucene::analysis::TokenFilter, GreekStemFilter, t_GreekStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilter), module, "GreekStemFilter", 0);
          }

          void t_GreekStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "class_", make_descriptor(GreekStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilter::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilter::wrap_Object(GreekStemFilter(((t_GreekStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GreekStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GreekStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder$ScoreComparator::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder$ScoreComparator::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder$ScoreComparator::live$ = false;

          jclass ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_79a08e77] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder$ScoreComparator::ScoreOrderFragmentsBuilder$ScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ScoreOrderFragmentsBuilder$ScoreComparator::compare(const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a0, const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_79a08e77], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder$ScoreComparator__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator, ::java::lang::Object, ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), module, "ScoreOrderFragmentsBuilder$ScoreComparator", 0);
          }

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_Object(ScoreOrderFragmentsBuilder$ScoreComparator(((t_ScoreOrderFragmentsBuilder$ScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            ScoreOrderFragmentsBuilder$ScoreComparator object((jobject) NULL);

            INT_CALL(object = ScoreOrderFragmentsBuilder$ScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a0((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballAnalyzer::class$ = NULL;
          jmethodID *SnowballAnalyzer::mids$ = NULL;
          bool SnowballAnalyzer::live$ = false;

          jclass SnowballAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1d68b8f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)V");
              mids$[mid_init$_df6e5eaa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_1d68b8f5, a0.this$, a1.this$)) {}

          SnowballAnalyzer::SnowballAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_df6e5eaa, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents SnowballAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args);

          static PyMethodDef t_SnowballAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SnowballAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballAnalyzer, createComponents, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballAnalyzer, t_SnowballAnalyzer, ::org::apache::lucene::analysis::Analyzer, SnowballAnalyzer, t_SnowballAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SnowballAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballAnalyzer), module, "SnowballAnalyzer", 0);
          }

          void t_SnowballAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "class_", make_descriptor(SnowballAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SnowballAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SnowballAnalyzer::wrap_Object(SnowballAnalyzer(((t_SnowballAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SnowballAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballAnalyzer_init_(t_SnowballAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SnowballAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KsK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SnowballAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballAnalyzer_createComponents(t_SnowballAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilterFactory::class$ = NULL;
          jmethodID *StandardFilterFactory::mids$ = NULL;
          bool StandardFilterFactory::live$ = false;

          jclass StandardFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2a39d447] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/standard/StandardFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilterFactory::StandardFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardFilter StandardFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::standard::StandardFilter(env->callObjectMethod(this$, mids$[mid_create_2a39d447], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args);

          static PyMethodDef t_StandardFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StandardFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilterFactory, t_StandardFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StandardFilterFactory, t_StandardFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilterFactory), module, "StandardFilterFactory", 0);
          }

          void t_StandardFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "class_", make_descriptor(StandardFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StandardFilterFactory::wrap_Object(StandardFilterFactory(((t_StandardFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_StandardFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonShortParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonShortParser::class$ = NULL;
        jmethodID *PythonShortParser::mids$ = NULL;
        bool PythonShortParser::live$ = false;

        jclass PythonShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonShortParser::PythonShortParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonShortParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonShortParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonShortParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self);
        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args);
        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data);
        static PyGetSetDef t_PythonShortParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonShortParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonShortParser__methods_[] = {
          DECLARE_METHOD(t_PythonShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonShortParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonShortParser, t_PythonShortParser, ::java::lang::Object, PythonShortParser, t_PythonShortParser_init_, 0, 0, t_PythonShortParser__fields_, 0, 0);

        void t_PythonShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonShortParser), module, "PythonShortParser", 1);
        }

        void t_PythonShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "class_", make_descriptor(PythonShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "wrapfn_", make_descriptor(t_PythonShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonShortParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S", (void *) t_PythonShortParser_parseShort0 },
            { "pythonDecRef", "()V", (void *) t_PythonShortParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonShortParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonShortParser::initializeClass, 1)))
            return NULL;
          return t_PythonShortParser::wrap_Object(PythonShortParser(((t_PythonShortParser *) arg)->object.this$));
        }
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds)
        {
          PythonShortParser object((jobject) NULL);

          INT_CALL(object = PythonShortParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jshort value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseShort", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "S", &value))
          {
            throwTypeError("parseShort", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jshort) 0;
        }

        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTermsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTermsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterTermsEnum::live$ = false;

        jclass FilterAtomicReader$FilterTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTermsEnum::FilterAtomicReader$FilterTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilterAtomicReader$FilterTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilterAtomicReader$FilterTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilterAtomicReader$FilterTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilterAtomicReader$FilterTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilterAtomicReader$FilterTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        void FilterAtomicReader$FilterTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum, ::org::apache::lucene::index::TermsEnum, FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilterAtomicReader$FilterTermsEnum *)) get_next< t_FilterAtomicReader$FilterTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilterAtomicReader$FilterTermsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), module, "FilterAtomicReader$FilterTermsEnum", 0);
        }

        void t_FilterAtomicReader$FilterTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTermsEnum::wrap_Object(FilterAtomicReader$FilterTermsEnum(((t_FilterAtomicReader$FilterTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seekExact(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstValueSource.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstValueSource::class$ = NULL;
            jmethodID *ConstValueSource::mids$ = NULL;
            bool ConstValueSource::live$ = false;

            jclass ConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstValueSource::ConstValueSource(jfloat a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

            ::java::lang::String ConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean ConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues ConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data);
            static PyGetSetDef t_ConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstValueSource, bool),
              DECLARE_GET_FIELD(t_ConstValueSource, double),
              DECLARE_GET_FIELD(t_ConstValueSource, float),
              DECLARE_GET_FIELD(t_ConstValueSource, int),
              DECLARE_GET_FIELD(t_ConstValueSource, long),
              DECLARE_GET_FIELD(t_ConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstValueSource__methods_[] = {
              DECLARE_METHOD(t_ConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstValueSource, t_ConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, ConstValueSource, t_ConstValueSource_init_, 0, 0, t_ConstValueSource__fields_, 0, 0);

            void t_ConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstValueSource), module, "ConstValueSource", 0);
            }

            void t_ConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "class_", make_descriptor(ConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_ConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstValueSource::initializeClass, 1)))
                return NULL;
              return t_ConstValueSource::wrap_Object(ConstValueSource(((t_ConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jfloat a0;
              ConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = ConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum::class$ = NULL;
        jmethodID *MultiDocsEnum::mids$ = NULL;
        bool MultiDocsEnum::live$ = false;

        jclass MultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsEnum::MultiDocsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        ::java::lang::String MultiDocsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data);
        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum, t_MultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MultiDocsEnum, t_MultiDocsEnum_init_, 0, 0, t_MultiDocsEnum__fields_, 0, 0);

        void t_MultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum), module, "MultiDocsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsEnum$EnumWithSlice)));
        }

        void t_MultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "class_", make_descriptor(MultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum::wrap_Object(MultiDocsEnum(((t_MultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemmer::class$ = NULL;
          jmethodID *FinnishLightStemmer::mids$ = NULL;
          bool FinnishLightStemmer::live$ = false;

          jclass FinnishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemmer::FinnishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FinnishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemmer, t_FinnishLightStemmer, ::java::lang::Object, FinnishLightStemmer, t_FinnishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemmer), module, "FinnishLightStemmer", 0);
          }

          void t_FinnishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "class_", make_descriptor(FinnishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemmer::wrap_Object(FinnishLightStemmer(((t_FinnishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FinnishLightStemmer object((jobject) NULL);

            INT_CALL(object = FinnishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermFilter::class$ = NULL;
        jmethodID *TermFilter::mids$ = NULL;
        bool TermFilter::live$ = false;

        jclass TermFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermFilter::TermFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean TermFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::Term TermFilter::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getTerm(t_TermFilter *self);
        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data);
        static PyGetSetDef t_TermFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermFilter, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermFilter__methods_[] = {
          DECLARE_METHOD(t_TermFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermFilter, t_TermFilter, ::org::apache::lucene::search::Filter, TermFilter, t_TermFilter_init_, 0, 0, t_TermFilter__fields_, 0, 0);

        void t_TermFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermFilter), module, "TermFilter", 0);
        }

        void t_TermFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "class_", make_descriptor(TermFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "wrapfn_", make_descriptor(t_TermFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermFilter::initializeClass, 1)))
            return NULL;
          return t_TermFilter::wrap_Object(TermFilter(((t_TermFilter *) arg)->object.this$));
        }
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          TermFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = TermFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermFilter_getTerm(t_TermFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum::class$ = NULL;
          jmethodID *BytesRefFSTEnum::mids$ = NULL;
          bool BytesRefFSTEnum::live$ = false;

          jclass BytesRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_6016cb55] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_next_6016cb55] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_ec56792b] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_ec56792b] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_ec56792b] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum::BytesRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekFloor(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_ec56792b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args);
          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_BytesRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum, t_BytesRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, BytesRefFSTEnum, t_BytesRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefFSTEnum *)) get_generic_next< t_BytesRefFSTEnum,::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput >), t_BytesRefFSTEnum__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum::wrap_Object(const BytesRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum), module, "BytesRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(BytesRefFSTEnum$InputOutput)));
          }

          void t_BytesRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "class_", make_descriptor(BytesRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum::wrap_Object(BytesRefFSTEnum(((t_BytesRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            BytesRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = BytesRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilterFactory::class$ = NULL;
          jmethodID *HindiNormalizationFilterFactory::mids$ = NULL;
          bool HindiNormalizationFilterFactory::live$ = false;

          jclass HindiNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilterFactory::HindiNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory HindiNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self);
          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_HindiNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_HindiNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory_init_, 0, 0, t_HindiNormalizationFilterFactory__fields_, 0, 0);

          void t_HindiNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilterFactory), module, "HindiNormalizationFilterFactory", 0);
          }

          void t_HindiNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "class_", make_descriptor(HindiNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilterFactory::wrap_Object(HindiNormalizationFilterFactory(((t_HindiNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingQueryBuilder::class$ = NULL;
            jmethodID *BoostingQueryBuilder::mids$ = NULL;
            bool BoostingQueryBuilder::live$ = false;

            jclass BoostingQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingQueryBuilder::BoostingQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingQueryBuilder, t_BoostingQueryBuilder, ::java::lang::Object, BoostingQueryBuilder, t_BoostingQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingQueryBuilder), module, "BoostingQueryBuilder", 0);
            }

            void t_BoostingQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "class_", make_descriptor(BoostingQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingQueryBuilder::wrap_Object(BoostingQueryBuilder(((t_BoostingQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BoostingQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BoostingQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/NorwegianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *NorwegianStemmer::class$ = NULL;
        jmethodID *NorwegianStemmer::mids$ = NULL;
        bool NorwegianStemmer::live$ = false;

        jclass NorwegianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/NorwegianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NorwegianStemmer::NorwegianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean NorwegianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NorwegianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NorwegianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args);

        static PyMethodDef t_NorwegianStemmer__methods_[] = {
          DECLARE_METHOD(t_NorwegianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NorwegianStemmer, t_NorwegianStemmer, ::org::tartarus::snowball::SnowballProgram, NorwegianStemmer, t_NorwegianStemmer_init_, 0, 0, 0, 0, 0);

        void t_NorwegianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(NorwegianStemmer), module, "NorwegianStemmer", 0);
        }

        void t_NorwegianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "class_", make_descriptor(NorwegianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NorwegianStemmer::initializeClass, 1)))
            return NULL;
          return t_NorwegianStemmer::wrap_Object(NorwegianStemmer(((t_NorwegianStemmer *) arg)->object.this$));
        }
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NorwegianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds)
        {
          NorwegianStemmer object((jobject) NULL);

          INT_CALL(object = NorwegianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/EnumFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *EnumFieldSource::class$ = NULL;
            jmethodID *EnumFieldSource::mids$ = NULL;
            bool EnumFieldSource::live$ = false;

            jclass EnumFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/EnumFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c567ecd0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/util/Map;Ljava/util/Map;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            EnumFieldSource::EnumFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::util::Map & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_c567ecd0, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::java::lang::String EnumFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean EnumFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues EnumFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint EnumFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args);

            static PyMethodDef t_EnumFieldSource__methods_[] = {
              DECLARE_METHOD(t_EnumFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(EnumFieldSource, t_EnumFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, EnumFieldSource, t_EnumFieldSource_init_, 0, 0, 0, 0, 0);

            void t_EnumFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(EnumFieldSource), module, "EnumFieldSource", 0);
            }

            void t_EnumFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "class_", make_descriptor(EnumFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "wrapfn_", make_descriptor(t_EnumFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(EnumFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, EnumFieldSource::initializeClass, 1)))
                return NULL;
              return t_EnumFieldSource::wrap_Object(EnumFieldSource(((t_EnumFieldSource *) arg)->object.this$));
            }
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, EnumFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::util::Map a2((jobject) NULL);
              PyTypeObject **p2;
              ::java::util::Map a3((jobject) NULL);
              PyTypeObject **p3;
              EnumFieldSource object((jobject) NULL);

              if (!parseArgs(args, "skKK", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &p3, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = EnumFieldSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(EnumFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ItalianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ItalianStemmer::class$ = NULL;
        jmethodID *ItalianStemmer::mids$ = NULL;
        bool ItalianStemmer::live$ = false;

        jclass ItalianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ItalianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ItalianStemmer::ItalianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ItalianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ItalianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ItalianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args);

        static PyMethodDef t_ItalianStemmer__methods_[] = {
          DECLARE_METHOD(t_ItalianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ItalianStemmer, t_ItalianStemmer, ::org::tartarus::snowball::SnowballProgram, ItalianStemmer, t_ItalianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ItalianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ItalianStemmer), module, "ItalianStemmer", 0);
        }

        void t_ItalianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "class_", make_descriptor(ItalianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ItalianStemmer::initializeClass, 1)))
            return NULL;
          return t_ItalianStemmer::wrap_Object(ItalianStemmer(((t_ItalianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ItalianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ItalianStemmer object((jobject) NULL);

          INT_CALL(object = ItalianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttributeImpl::class$ = NULL;
          jmethodID *PositionIncrementAttributeImpl::mids$ = NULL;
          bool PositionIncrementAttributeImpl::live$ = false;

          jclass PositionIncrementAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionIncrementAttributeImpl::PositionIncrementAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionIncrementAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionIncrementAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionIncrementAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionIncrementAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PositionIncrementAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionIncrementAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self);
          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data);
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttributeImpl, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl_init_, 0, 0, t_PositionIncrementAttributeImpl__fields_, 0, 0);

          void t_PositionIncrementAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttributeImpl), module, "PositionIncrementAttributeImpl", 0);
          }

          void t_PositionIncrementAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "class_", make_descriptor(PositionIncrementAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttributeImpl::wrap_Object(PositionIncrementAttributeImpl(((t_PositionIncrementAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionIncrementAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionIncrementAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$BytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$BytesStartArray::mids$ = NULL;
        bool BytesRefHash$BytesStartArray::live$ = false;

        jclass BytesRefHash$BytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$BytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$BytesStartArray::BytesRefHash$BytesStartArray() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$BytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self);

        static PyMethodDef t_BytesRefHash$BytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, grow, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, init, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray, ::java::lang::Object, BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$BytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$BytesStartArray), module, "BytesRefHash$BytesStartArray", 0);
        }

        void t_BytesRefHash$BytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$BytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$BytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$BytesStartArray::wrap_Object(BytesRefHash$BytesStartArray(((t_BytesRefHash$BytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          BytesRefHash$BytesStartArray object((jobject) NULL);

          INT_CALL(object = BytesRefHash$BytesStartArray());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = self->object.bytesUsed());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.clear());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.grow());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.init());
          return result.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/MultiSimilarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *MultiSimilarity::class$ = NULL;
          jmethodID *MultiSimilarity::mids$ = NULL;
          bool MultiSimilarity::live$ = false;

          jclass MultiSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/MultiSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_82c64346] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/similarities/Similarity;)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiSimilarity::MultiSimilarity(const JArray< ::org::apache::lucene::search::similarities::Similarity > & a0) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_82c64346, a0.this$)) {}

          jlong MultiSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight MultiSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer MultiSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args);

          static PyMethodDef t_MultiSimilarity__methods_[] = {
            DECLARE_METHOD(t_MultiSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiSimilarity, t_MultiSimilarity, ::org::apache::lucene::search::similarities::Similarity, MultiSimilarity, t_MultiSimilarity_init_, 0, 0, 0, 0, 0);

          void t_MultiSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiSimilarity), module, "MultiSimilarity", 0);
          }

          void t_MultiSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "class_", make_descriptor(MultiSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "wrapfn_", make_descriptor(t_MultiSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiSimilarity::initializeClass, 1)))
              return NULL;
            return t_MultiSimilarity::wrap_Object(MultiSimilarity(((t_MultiSimilarity *) arg)->object.this$));
          }
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::similarities::Similarity > a0((jobject) NULL);
            MultiSimilarity object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
            {
              INT_CALL(object = MultiSimilarity(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_MultiSimilarity_computeWeight(t_MultiSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_MultiSimilarity_simScorer(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MultiSimilarity), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneDictionary.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneDictionary::class$ = NULL;
          jmethodID *LuceneDictionary::mids$ = NULL;
          bool LuceneDictionary::live$ = false;

          jclass LuceneDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneDictionary::LuceneDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator LuceneDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self);
          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data);
          static PyGetSetDef t_LuceneDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_LuceneDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LuceneDictionary__methods_[] = {
            DECLARE_METHOD(t_LuceneDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneDictionary, t_LuceneDictionary, ::java::lang::Object, LuceneDictionary, t_LuceneDictionary_init_, 0, 0, t_LuceneDictionary__fields_, 0, 0);

          void t_LuceneDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneDictionary), module, "LuceneDictionary", 0);
          }

          void t_LuceneDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "class_", make_descriptor(LuceneDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "wrapfn_", make_descriptor(t_LuceneDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneDictionary::initializeClass, 1)))
              return NULL;
            return t_LuceneDictionary::wrap_Object(LuceneDictionary(((t_LuceneDictionary *) arg)->object.this$));
          }
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            LuceneDictionary object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LuceneDictionary(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTruncQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTruncQuery::class$ = NULL;
            jmethodID *SrndTruncQuery::mids$ = NULL;
            bool SrndTruncQuery::live$ = false;

            jclass SrndTruncQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTruncQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9707974] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;CC)V");
                mids$[mid_getTruncated_14c7b5c5] = env->getMethodID(cls, "getTruncated", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_matchingChar_87fd5456] = env->getMethodID(cls, "matchingChar", "(C)Z");
                mids$[mid_appendRegExpForChar_1dca1640] = env->getMethodID(cls, "appendRegExpForChar", "(CLjava/lang/StringBuilder;)V");
                mids$[mid_truncatedToPrefixAndPattern_54c6a166] = env->getMethodID(cls, "truncatedToPrefixAndPattern", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTruncQuery::SrndTruncQuery(const ::java::lang::String & a0, jchar a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_d9707974, a0.this$, a1, a2)) {}

            ::java::lang::String SrndTruncQuery::getTruncated() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTruncated_14c7b5c5]));
            }

            ::java::lang::String SrndTruncQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTruncQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self);
            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data);
            static PyGetSetDef t_SrndTruncQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTruncQuery, truncated),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTruncQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTruncQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, getTruncated, METH_NOARGS),
              DECLARE_METHOD(t_SrndTruncQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTruncQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTruncQuery, t_SrndTruncQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTruncQuery, t_SrndTruncQuery_init_, 0, 0, t_SrndTruncQuery__fields_, 0, 0);

            void t_SrndTruncQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTruncQuery), module, "SrndTruncQuery", 0);
            }

            void t_SrndTruncQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "class_", make_descriptor(SrndTruncQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTruncQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTruncQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTruncQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTruncQuery::wrap_Object(SrndTruncQuery(((t_SrndTruncQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTruncQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jchar a1;
              jchar a2;
              SrndTruncQuery object((jobject) NULL);

              if (!parseArgs(args, "sCC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndTruncQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTruncated());
              return j2p(result);
            }

            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTruncQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTruncated());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/PowFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *PowFloatFunction::class$ = NULL;
            jmethodID *PowFloatFunction::mids$ = NULL;
            bool PowFloatFunction::live$ = false;

            jclass PowFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/PowFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PowFloatFunction::PowFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PowFloatFunction__methods_[] = {
              DECLARE_METHOD(t_PowFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PowFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PowFloatFunction, t_PowFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, PowFloatFunction, t_PowFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_PowFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(PowFloatFunction), module, "PowFloatFunction", 0);
            }

            void t_PowFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "class_", make_descriptor(PowFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_PowFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PowFloatFunction::initializeClass, 1)))
                return NULL;
              return t_PowFloatFunction::wrap_Object(PowFloatFunction(((t_PowFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PowFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              PowFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PowFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphen.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphen::class$ = NULL;
            jmethodID *Hyphen::mids$ = NULL;
            jfieldID *Hyphen::fids$ = NULL;
            bool Hyphen::live$ = false;

            jclass Hyphen::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphen");

                mids$ = new jmethodID[max_mid];
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_noBreak] = env->getFieldID(cls, "noBreak", "Ljava/lang/String;");
                fids$[fid_postBreak] = env->getFieldID(cls, "postBreak", "Ljava/lang/String;");
                fids$[fid_preBreak] = env->getFieldID(cls, "preBreak", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String Hyphen::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String Hyphen::_get_noBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_noBreak]));
            }

            void Hyphen::_set_noBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_noBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_postBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_postBreak]));
            }

            void Hyphen::_set_postBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_postBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_preBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_preBreak]));
            }

            void Hyphen::_set_preBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_preBreak], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args);
            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data);

            static PyGetSetDef t_Hyphen__fields_[] = {
              DECLARE_GETSET_FIELD(t_Hyphen, noBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, postBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, preBreak),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphen__methods_[] = {
              DECLARE_METHOD(t_Hyphen, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphen, t_Hyphen, ::java::lang::Object, Hyphen, abstract_init, 0, 0, t_Hyphen__fields_, 0, 0);

            void t_Hyphen::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphen), module, "Hyphen", 0);
            }

            void t_Hyphen::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "class_", make_descriptor(Hyphen::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "wrapfn_", make_descriptor(t_Hyphen::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphen).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphen::initializeClass, 1)))
                return NULL;
              return t_Hyphen::wrap_Object(Hyphen(((t_Hyphen *) arg)->object.this$));
            }
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphen::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Hyphen), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_noBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_noBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "noBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_postBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_postBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "postBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_preBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_preBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "preBreak", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizer::class$ = NULL;
          jmethodID *HindiNormalizer::mids$ = NULL;
          bool HindiNormalizer::live$ = false;

          jclass HindiNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizer::HindiNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args);

          static PyMethodDef t_HindiNormalizer__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizer, t_HindiNormalizer, ::java::lang::Object, HindiNormalizer, t_HindiNormalizer_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizer), module, "HindiNormalizer", 0);
          }

          void t_HindiNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "class_", make_descriptor(HindiNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizer::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizer::wrap_Object(HindiNormalizer(((t_HindiNormalizer *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds)
          {
            HindiNormalizer object((jobject) NULL);

            INT_CALL(object = HindiNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FloatFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FloatFieldSource::class$ = NULL;
            jmethodID *FloatFieldSource::mids$ = NULL;
            bool FloatFieldSource::live$ = false;

            jclass FloatFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FloatFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_971bf26d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_971bf26d, a0.this$, a1.this$)) {}

            ::java::lang::String FloatFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FloatFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues FloatFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint FloatFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args);

            static PyMethodDef t_FloatFieldSource__methods_[] = {
              DECLARE_METHOD(t_FloatFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatFieldSource, t_FloatFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, FloatFieldSource, t_FloatFieldSource_init_, 0, 0, 0, 0, 0);

            void t_FloatFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatFieldSource), module, "FloatFieldSource", 0);
            }

            void t_FloatFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "class_", make_descriptor(FloatFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "wrapfn_", make_descriptor(t_FloatFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatFieldSource::initializeClass, 1)))
                return NULL;
              return t_FloatFieldSource::wrap_Object(FloatFieldSource(((t_FloatFieldSource *) arg)->object.this$));
            }
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = FloatFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
                  FloatFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FloatFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/DirectSpellChecker.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *DirectSpellChecker::class$ = NULL;
          jmethodID *DirectSpellChecker::mids$ = NULL;
          bool DirectSpellChecker::live$ = false;
          ::org::apache::lucene::search::spell::StringDistance *DirectSpellChecker::INTERNAL_LEVENSHTEIN = NULL;

          jclass DirectSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/DirectSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDistance_a5face5e] = env->getMethodID(cls, "getDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_getLowerCaseTerms_54c6a16a] = env->getMethodID(cls, "getLowerCaseTerms", "()Z");
              mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
              mids$[mid_getMaxInspections_54c6a179] = env->getMethodID(cls, "getMaxInspections", "()I");
              mids$[mid_getMaxQueryFrequency_54c6a176] = env->getMethodID(cls, "getMaxQueryFrequency", "()F");
              mids$[mid_getMinPrefix_54c6a179] = env->getMethodID(cls, "getMinPrefix", "()I");
              mids$[mid_getMinQueryLength_54c6a179] = env->getMethodID(cls, "getMinQueryLength", "()I");
              mids$[mid_getThresholdFrequency_54c6a176] = env->getMethodID(cls, "getThresholdFrequency", "()F");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setDistance_9c934047] = env->getMethodID(cls, "setDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_setLowerCaseTerms_bb0c767f] = env->getMethodID(cls, "setLowerCaseTerms", "(Z)V");
              mids$[mid_setMaxEdits_39c7bd3c] = env->getMethodID(cls, "setMaxEdits", "(I)V");
              mids$[mid_setMaxInspections_39c7bd3c] = env->getMethodID(cls, "setMaxInspections", "(I)V");
              mids$[mid_setMaxQueryFrequency_06298cab] = env->getMethodID(cls, "setMaxQueryFrequency", "(F)V");
              mids$[mid_setMinPrefix_39c7bd3c] = env->getMethodID(cls, "setMinPrefix", "(I)V");
              mids$[mid_setMinQueryLength_39c7bd3c] = env->getMethodID(cls, "setMinQueryLength", "(I)V");
              mids$[mid_setThresholdFrequency_06298cab] = env->getMethodID(cls, "setThresholdFrequency", "(F)V");
              mids$[mid_suggestSimilar_45727077] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_cd50864e] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_96cb19cd] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;F)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_dc649c5f] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;IIFLorg/apache/lucene/util/CharsRef;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INTERNAL_LEVENSHTEIN = new ::org::apache::lucene::search::spell::StringDistance(env->getStaticObjectField(cls, "INTERNAL_LEVENSHTEIN", "Lorg/apache/lucene/search/spell/StringDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectSpellChecker::DirectSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DirectSpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator DirectSpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance DirectSpellChecker::getDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getDistance_a5face5e]));
          }

          jboolean DirectSpellChecker::getLowerCaseTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowerCaseTerms_54c6a16a]);
          }

          jint DirectSpellChecker::getMaxEdits() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
          }

          jint DirectSpellChecker::getMaxInspections() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxInspections_54c6a179]);
          }

          jfloat DirectSpellChecker::getMaxQueryFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxQueryFrequency_54c6a176]);
          }

          jint DirectSpellChecker::getMinPrefix() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinPrefix_54c6a179]);
          }

          jint DirectSpellChecker::getMinQueryLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinQueryLength_54c6a179]);
          }

          jfloat DirectSpellChecker::getThresholdFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThresholdFrequency_54c6a176]);
          }

          void DirectSpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void DirectSpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void DirectSpellChecker::setDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDistance_9c934047], a0.this$);
          }

          void DirectSpellChecker::setLowerCaseTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowerCaseTerms_bb0c767f], a0);
          }

          void DirectSpellChecker::setMaxEdits(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEdits_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxInspections(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxInspections_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMaxQueryFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryFrequency_06298cab], a0);
          }

          void DirectSpellChecker::setMinPrefix(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinPrefix_39c7bd3c], a0);
          }

          void DirectSpellChecker::setMinQueryLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinQueryLength_39c7bd3c], a0);
          }

          void DirectSpellChecker::setThresholdFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThresholdFrequency_06298cab], a0);
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_45727077], a0.this$, a1, a2.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_cd50864e], a0.this$, a1, a2.this$, a3.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, jfloat a4) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_96cb19cd], a0.this$, a1, a2.this$, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args);
          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_DirectSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, comparator),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, distance),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, lowerCaseTerms),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxEdits),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxInspections),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxQueryFrequency),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minPrefix),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minQueryLength),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, thresholdFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DirectSpellChecker__methods_[] = {
            DECLARE_METHOD(t_DirectSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getDistance, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getLowerCaseTerms, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxEdits, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxInspections, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxQueryFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinPrefix, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinQueryLength, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getThresholdFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setDistance, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setLowerCaseTerms, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxEdits, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxInspections, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxQueryFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinPrefix, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinQueryLength, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setThresholdFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectSpellChecker, t_DirectSpellChecker, ::java::lang::Object, DirectSpellChecker, t_DirectSpellChecker_init_, 0, 0, t_DirectSpellChecker__fields_, 0, 0);

          void t_DirectSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectSpellChecker), module, "DirectSpellChecker", 0);
          }

          void t_DirectSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "class_", make_descriptor(DirectSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_DirectSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(DirectSpellChecker).tp_dict, "INTERNAL_LEVENSHTEIN", make_descriptor(::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(*DirectSpellChecker::INTERNAL_LEVENSHTEIN)));
          }

          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectSpellChecker::initializeClass, 1)))
              return NULL;
            return t_DirectSpellChecker::wrap_Object(DirectSpellChecker(((t_DirectSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            DirectSpellChecker object((jobject) NULL);

            INT_CALL(object = DirectSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEdits());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxInspections());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinPrefix());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinQueryLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDistance", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowerCaseTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowerCaseTerms", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEdits(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEdits", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxInspections(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxInspections", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinPrefix", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinQueryLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinQueryLength", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThresholdFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThresholdFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkKF", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "distance", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowerCaseTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowerCaseTerms", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEdits());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEdits(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEdits", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxInspections());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxInspections(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxInspections", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setMaxQueryFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryFrequency", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinPrefix());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minPrefix", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinQueryLength());
            return PyInt_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinQueryLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minQueryLength", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThresholdFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "thresholdFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49Codec::class$ = NULL;
          jmethodID *Lucene49Codec::mids$ = NULL;
          bool Lucene49Codec::live$ = false;

          jclass Lucene49Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49Codec::Lucene49Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene49Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene49Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene49Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene49Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene49Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene49Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene49Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene49Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg);
          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args);
          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args);

          static PyMethodDef t_Lucene49Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene49Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene49Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49Codec, t_Lucene49Codec, ::org::apache::lucene::codecs::Codec, Lucene49Codec, t_Lucene49Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene49Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49Codec), module, "Lucene49Codec", 0);
          }

          void t_Lucene49Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "class_", make_descriptor(Lucene49Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene49Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene49Codec::wrap_Object(Lucene49Codec(((t_Lucene49Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene49Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49Codec_init_(t_Lucene49Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene49Codec object((jobject) NULL);

            INT_CALL(object = Lucene49Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49Codec_docValuesFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_fieldInfosFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_getDocValuesFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_getPostingsFormatForField(t_Lucene49Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene49Codec_liveDocsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_normsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_postingsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_segmentInfoFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_storedFieldsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene49Codec_termVectorsFormat(t_Lucene49Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/SegmentingTokenizerBase.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/text/BreakIterator.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *SegmentingTokenizerBase::class$ = NULL;
          jmethodID *SegmentingTokenizerBase::mids$ = NULL;
          bool SegmentingTokenizerBase::live$ = false;

          jclass SegmentingTokenizerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/SegmentingTokenizerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_42e90ef8] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_init$_441b2340] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");
              mids$[mid_isSafeEnd_87fd5456] = env->getMethodID(cls, "isSafeEnd", "(C)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::java::io::Reader & a0, const ::java::text::BreakIterator & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_42e90ef8, a0.this$, a1.this$)) {}

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::text::BreakIterator & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_441b2340, a0.this$, a1.this$, a2.this$)) {}

          void SegmentingTokenizerBase::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean SegmentingTokenizerBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SegmentingTokenizerBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args);

          static PyMethodDef t_SegmentingTokenizerBase__methods_[] = {
            DECLARE_METHOD(t_SegmentingTokenizerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, end, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SegmentingTokenizerBase, t_SegmentingTokenizerBase, ::org::apache::lucene::analysis::Tokenizer, SegmentingTokenizerBase, t_SegmentingTokenizerBase_init_, 0, 0, 0, 0, 0);

          void t_SegmentingTokenizerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SegmentingTokenizerBase), module, "SegmentingTokenizerBase", 0);
          }

          void t_SegmentingTokenizerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "class_", make_descriptor(SegmentingTokenizerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "wrapfn_", make_descriptor(t_SegmentingTokenizerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SegmentingTokenizerBase::initializeClass, 1)))
              return NULL;
            return t_SegmentingTokenizerBase::wrap_Object(SegmentingTokenizerBase(((t_SegmentingTokenizerBase *) arg)->object.this$));
          }
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SegmentingTokenizerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::text::BreakIterator a1((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::text::BreakIterator a2((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilesystemResourceLoader.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilesystemResourceLoader::class$ = NULL;
          jmethodID *FilesystemResourceLoader::mids$ = NULL;
          bool FilesystemResourceLoader::live$ = false;

          jclass FilesystemResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilesystemResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_init$_002bf8fe] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilesystemResourceLoader::FilesystemResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::io::File & a0, const ::org::apache::lucene::analysis::util::ResourceLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_002bf8fe, a0.this$, a1.this$)) {}

          ::java::lang::Class FilesystemResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object FilesystemResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream FilesystemResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg);

          static PyMethodDef t_FilesystemResourceLoader__methods_[] = {
            DECLARE_METHOD(t_FilesystemResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilesystemResourceLoader, t_FilesystemResourceLoader, ::java::lang::Object, FilesystemResourceLoader, t_FilesystemResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_FilesystemResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(FilesystemResourceLoader), module, "FilesystemResourceLoader", 0);
          }

          void t_FilesystemResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "class_", make_descriptor(FilesystemResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_FilesystemResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilesystemResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilesystemResourceLoader::initializeClass, 1)))
              return NULL;
            return t_FilesystemResourceLoader::wrap_Object(FilesystemResourceLoader(((t_FilesystemResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilesystemResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FilesystemResourceLoader object((jobject) NULL);

                INT_CALL(object = FilesystemResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::File a0((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::ResourceLoader a1((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchAnalyzer::class$ = NULL;
          jmethodID *FrenchAnalyzer::mids$ = NULL;
          bool FrenchAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *FrenchAnalyzer::DEFAULT_ARTICLES = NULL;
          ::java::lang::String *FrenchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FrenchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ARTICLES = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "DEFAULT_ARTICLES", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FrenchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data);
          static PyGetSetDef t_FrenchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FrenchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FrenchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchAnalyzer, t_FrenchAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FrenchAnalyzer, t_FrenchAnalyzer_init_, 0, 0, t_FrenchAnalyzer__fields_, 0, 0);

          void t_FrenchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchAnalyzer), module, "FrenchAnalyzer", 0);
          }

          void t_FrenchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "class_", make_descriptor(FrenchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FrenchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_ARTICLES", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*FrenchAnalyzer::DEFAULT_ARTICLES)));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FrenchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FrenchAnalyzer::wrap_Object(FrenchAnalyzer(((t_FrenchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fr::FrenchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollector::class$ = NULL;
        jmethodID *MultiCollector::mids$ = NULL;
        bool MultiCollector::live$ = false;

        jclass MultiCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_wrap_e0c58317] = env->getStaticMethodID(cls, "wrap", "([Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/Collector;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void MultiCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void MultiCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void MultiCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        ::org::apache::lucene::search::Collector MultiCollector::wrap(const JArray< ::org::apache::lucene::search::Collector > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Collector(env->callStaticObjectMethod(cls, mids$[mid_wrap_e0c58317], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg);
        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data);
        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiCollector__fields_[] = {
          DECLARE_SET_FIELD(t_MultiCollector, nextReader),
          DECLARE_SET_FIELD(t_MultiCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiCollector__methods_[] = {
          DECLARE_METHOD(t_MultiCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiCollector, t_MultiCollector, ::org::apache::lucene::search::Collector, MultiCollector, abstract_init, 0, 0, t_MultiCollector__fields_, 0, 0);

        void t_MultiCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollector), module, "MultiCollector", 0);
        }

        void t_MultiCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "class_", make_descriptor(MultiCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "wrapfn_", make_descriptor(t_MultiCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollector::initializeClass, 1)))
            return NULL;
          return t_MultiCollector::wrap_Object(MultiCollector(((t_MultiCollector *) arg)->object.this$));
        }
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::Collector > a0((jobject) NULL);
          ::org::apache::lucene::search::Collector result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::MultiCollector::wrap(a0));
            return ::org::apache::lucene::search::t_Collector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooNewException::class$ = NULL;
        jmethodID *IndexFormatTooNewException::mids$ = NULL;
        bool IndexFormatTooNewException::live$ = false;

        jclass IndexFormatTooNewException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooNewException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooNewException::IndexFormatTooNewException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        IndexFormatTooNewException::IndexFormatTooNewException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooNewException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooNewException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooNewException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooNewException, t_IndexFormatTooNewException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooNewException, t_IndexFormatTooNewException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooNewException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooNewException), module, "IndexFormatTooNewException", 0);
        }

        void t_IndexFormatTooNewException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "class_", make_descriptor(IndexFormatTooNewException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooNewException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooNewException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooNewException::wrap_Object(IndexFormatTooNewException(((t_IndexFormatTooNewException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooNewException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader$ChildrenIterator::class$ = NULL;
          jmethodID *TaxonomyReader$ChildrenIterator::mids$ = NULL;
          bool TaxonomyReader$ChildrenIterator::live$ = false;

          jclass TaxonomyReader$ChildrenIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyReader$ChildrenIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self);

          static PyMethodDef t_TaxonomyReader$ChildrenIterator__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader$ChildrenIterator, t_TaxonomyReader$ChildrenIterator, ::java::lang::Object, TaxonomyReader$ChildrenIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyReader$ChildrenIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader$ChildrenIterator), module, "TaxonomyReader$ChildrenIterator", 0);
          }

          void t_TaxonomyReader$ChildrenIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "class_", make_descriptor(TaxonomyReader$ChildrenIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader$ChildrenIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader$ChildrenIterator::wrap_Object(TaxonomyReader$ChildrenIterator(((t_TaxonomyReader$ChildrenIterator *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.next());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PositionSpan::class$ = NULL;
          jmethodID *PositionSpan::mids$ = NULL;
          bool PositionSpan::live$ = false;

          jclass PositionSpan::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/PositionSpan");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionSpan::PositionSpan(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PositionSpan__methods_[] = {
            DECLARE_METHOD(t_PositionSpan, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionSpan, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionSpan, t_PositionSpan, ::java::lang::Object, PositionSpan, t_PositionSpan_init_, 0, 0, 0, 0, 0);

          void t_PositionSpan::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionSpan), module, "PositionSpan", 0);
          }

          void t_PositionSpan::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "class_", make_descriptor(PositionSpan::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "wrapfn_", make_descriptor(t_PositionSpan::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionSpan::initializeClass, 1)))
              return NULL;
            return t_PositionSpan::wrap_Object(PositionSpan(((t_PositionSpan *) arg)->object.this$));
          }
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionSpan::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            PositionSpan object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = PositionSpan(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FilteredQueryBuilder::class$ = NULL;
            jmethodID *FilteredQueryBuilder::mids$ = NULL;
            bool FilteredQueryBuilder::live$ = false;

            jclass FilteredQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FilteredQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_60b0c0b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FilteredQueryBuilder::FilteredQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_60b0c0b9, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FilteredQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FilteredQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FilteredQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FilteredQueryBuilder, t_FilteredQueryBuilder, ::java::lang::Object, FilteredQueryBuilder, t_FilteredQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FilteredQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FilteredQueryBuilder), module, "FilteredQueryBuilder", 0);
            }

            void t_FilteredQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "class_", make_descriptor(FilteredQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilteredQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FilteredQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FilteredQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FilteredQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FilteredQueryBuilder::wrap_Object(FilteredQueryBuilder(((t_FilteredQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FilteredQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FilteredQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FilteredQueryBuilder_init_(t_FilteredQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);
              FilteredQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilterFactory::class$ = NULL;
          jmethodID *LimitTokenCountFilterFactory::mids$ = NULL;
          bool LimitTokenCountFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY = NULL;

          jclass LimitTokenCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_COUNT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_COUNT_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilterFactory::LimitTokenCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilterFactory), module, "LimitTokenCountFilterFactory", 0);
          }

          void t_LimitTokenCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "MAX_TOKEN_COUNT_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY)));
          }

          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilterFactory::wrap_Object(LimitTokenCountFilterFactory(((t_LimitTokenCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene46SegmentInfoFormat::mids$ = NULL;
          bool Lucene46SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene46SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene46SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoFormat::Lucene46SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene46SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene46SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene46SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat_init_, 0, 0, t_Lucene46SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene46SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoFormat), module, "Lucene46SegmentInfoFormat", 0);
          }

          void t_Lucene46SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene46SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene46SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoFormat::wrap_Object(Lucene46SegmentInfoFormat(((t_Lucene46SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FieldMaskingSpanQuery::class$ = NULL;
          jmethodID *FieldMaskingSpanQuery::mids$ = NULL;
          bool FieldMaskingSpanQuery::live$ = false;

          jclass FieldMaskingSpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FieldMaskingSpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_58455a11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/lang/String;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMaskedQuery_d3aa0332] = env->getMethodID(cls, "getMaskedQuery", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMaskingSpanQuery::FieldMaskingSpanQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_58455a11, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight FieldMaskingSpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FieldMaskingSpanQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FieldMaskingSpanQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String FieldMaskingSpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery FieldMaskingSpanQuery::getMaskedQuery() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMaskedQuery_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans FieldMaskingSpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint FieldMaskingSpanQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FieldMaskingSpanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FieldMaskingSpanQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self);
          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data);
          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data);
          static PyGetSetDef t_FieldMaskingSpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, field),
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, maskedQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldMaskingSpanQuery__methods_[] = {
            DECLARE_METHOD(t_FieldMaskingSpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getMaskedQuery, METH_NOARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldMaskingSpanQuery, t_FieldMaskingSpanQuery, ::org::apache::lucene::search::spans::SpanQuery, FieldMaskingSpanQuery, t_FieldMaskingSpanQuery_init_, 0, 0, t_FieldMaskingSpanQuery__fields_, 0, 0);

          void t_FieldMaskingSpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMaskingSpanQuery), module, "FieldMaskingSpanQuery", 0);
          }

          void t_FieldMaskingSpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "class_", make_descriptor(FieldMaskingSpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldMaskingSpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMaskingSpanQuery::initializeClass, 1)))
              return NULL;
            return t_FieldMaskingSpanQuery::wrap_Object(FieldMaskingSpanQuery(((t_FieldMaskingSpanQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMaskingSpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            FieldMaskingSpanQuery object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FieldMaskingSpanQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilter::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilter::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilter::live$ = false;

          jclass TokenOffsetPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilter::TokenOffsetPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TokenOffsetPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilter), module, "TokenOffsetPayloadTokenFilter", 0);
          }

          void t_TokenOffsetPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilter::wrap_Object(TokenOffsetPayloadTokenFilter(((t_TokenOffsetPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenOffsetPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$additive_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$additive_return::class$ = NULL;
          jmethodID *JavascriptParser$additive_return::mids$ = NULL;
          bool JavascriptParser$additive_return::live$ = false;

          jclass JavascriptParser$additive_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$additive_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$additive_return::JavascriptParser$additive_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$additive_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$additive_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$additive_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$additive_return, t_JavascriptParser$additive_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$additive_return, t_JavascriptParser$additive_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$additive_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$additive_return), module, "JavascriptParser$additive_return", 0);
          }

          void t_JavascriptParser$additive_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "class_", make_descriptor(JavascriptParser$additive_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$additive_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$additive_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$additive_return::wrap_Object(JavascriptParser$additive_return(((t_JavascriptParser$additive_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$additive_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$additive_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$additive_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40Codec::class$ = NULL;
          jmethodID *Lucene40Codec::mids$ = NULL;
          bool Lucene40Codec::live$ = false;

          jclass Lucene40Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40Codec::Lucene40Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene40Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene40Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene40Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene40Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene40Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene40Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene40Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene40Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg);
          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args);
          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args);

          static PyMethodDef t_Lucene40Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene40Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene40Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40Codec, t_Lucene40Codec, ::org::apache::lucene::codecs::Codec, Lucene40Codec, t_Lucene40Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene40Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40Codec), module, "Lucene40Codec", 0);
          }

          void t_Lucene40Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "class_", make_descriptor(Lucene40Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene40Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene40Codec::wrap_Object(Lucene40Codec(((t_Lucene40Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene40Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40Codec_init_(t_Lucene40Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene40Codec object((jobject) NULL);

            INT_CALL(object = Lucene40Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40Codec_docValuesFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_fieldInfosFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_getPostingsFormatForField(t_Lucene40Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene40Codec_liveDocsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_normsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_postingsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_segmentInfoFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_storedFieldsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene40Codec_termVectorsFormat(t_Lucene40Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42NormsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42NormsFormat::class$ = NULL;
          jmethodID *Lucene42NormsFormat::mids$ = NULL;
          bool Lucene42NormsFormat::live$ = false;

          jclass Lucene42NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42NormsFormat::Lucene42NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42NormsFormat::Lucene42NormsFormat(jfloat a0) : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42NormsFormat, t_Lucene42NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene42NormsFormat, t_Lucene42NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42NormsFormat), module, "Lucene42NormsFormat", 0);
          }

          void t_Lucene42NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "class_", make_descriptor(Lucene42NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42NormsFormat::wrap_Object(Lucene42NormsFormat(((t_Lucene42NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42NormsFormat_init_(t_Lucene42NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42NormsFormat object((jobject) NULL);

                INT_CALL(object = Lucene42NormsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42NormsFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42NormsFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42NormsFormat_normsConsumer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene42NormsFormat_normsProducer(t_Lucene42NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilter::class$ = NULL;
          jmethodID *KeywordMarkerFilter::mids$ = NULL;
          bool KeywordMarkerFilter::live$ = false;

          jclass KeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordMarkerFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args);

          static PyMethodDef t_KeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilter, t_KeywordMarkerFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordMarkerFilter, abstract_init, 0, 0, 0, 0, 0);

          void t_KeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilter), module, "KeywordMarkerFilter", 0);
          }

          void t_KeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "class_", make_descriptor(KeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilter::wrap_Object(KeywordMarkerFilter(((t_KeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyTermsEnum::class$ = NULL;
          jmethodID *SlowFuzzyTermsEnum::mids$ = NULL;
          bool SlowFuzzyTermsEnum::live$ = false;

          jclass SlowFuzzyTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_40b71111] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyTermsEnum::SlowFuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4) : ::org::apache::lucene::search::FuzzyTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_40b71111, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowFuzzyTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum, ::org::apache::lucene::search::FuzzyTermsEnum, SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowFuzzyTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyTermsEnum), module, "SlowFuzzyTermsEnum", 0);
          }

          void t_SlowFuzzyTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "class_", make_descriptor(SlowFuzzyTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyTermsEnum::wrap_Object(SlowFuzzyTermsEnum(((t_SlowFuzzyTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
            ::org::apache::lucene::index::Term a2((jobject) NULL);
            jfloat a3;
            jint a4;
            SlowFuzzyTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kkkFI", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SlowFuzzyTermsEnum(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryTemplateManager.h"
#include "java/util/Properties.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryTemplateManager::class$ = NULL;
          jmethodID *QueryTemplateManager::mids$ = NULL;
          bool QueryTemplateManager::live$ = false;

          jclass QueryTemplateManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryTemplateManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_addDefaultQueryTemplate_be2e4f90] = env->getMethodID(cls, "addDefaultQueryTemplate", "(Ljava/io/InputStream;)V");
              mids$[mid_addQueryTemplate_fc5ef09a] = env->getMethodID(cls, "addQueryTemplate", "(Ljava/lang/String;Ljava/io/InputStream;)V");
              mids$[mid_getQueryAsXmlString_8b0ed65b] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_cf43ccf5] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_02821f09] = env->getStaticMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/io/InputStream;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTemplateManager::QueryTemplateManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          QueryTemplateManager::QueryTemplateManager(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          void QueryTemplateManager::addDefaultQueryTemplate(const ::java::io::InputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addDefaultQueryTemplate_be2e4f90], a0.this$);
          }

          void QueryTemplateManager::addQueryTemplate(const ::java::lang::String & a0, const ::java::io::InputStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryTemplate_fc5ef09a], a0.this$, a1.this$);
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_8b0ed65b], a0.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_cf43ccf5], a0.this$, a1.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getQueryAsXmlString_02821f09], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg);
          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTemplateManager__methods_[] = {
            DECLARE_METHOD(t_QueryTemplateManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, addDefaultQueryTemplate, METH_O),
            DECLARE_METHOD(t_QueryTemplateManager, addQueryTemplate, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString_, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTemplateManager, t_QueryTemplateManager, ::java::lang::Object, QueryTemplateManager, t_QueryTemplateManager_init_, 0, 0, 0, 0, 0);

          void t_QueryTemplateManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTemplateManager), module, "QueryTemplateManager", 0);
          }

          void t_QueryTemplateManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "class_", make_descriptor(QueryTemplateManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "wrapfn_", make_descriptor(t_QueryTemplateManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTemplateManager::initializeClass, 1)))
              return NULL;
            return t_QueryTemplateManager::wrap_Object(QueryTemplateManager(((t_QueryTemplateManager *) arg)->object.this$));
          }
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTemplateManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                QueryTemplateManager object((jobject) NULL);

                INT_CALL(object = QueryTemplateManager());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                QueryTemplateManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTemplateManager(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addDefaultQueryTemplate(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addDefaultQueryTemplate", arg);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::InputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryTemplate(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryTemplate", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryAsXmlString", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args)
          {
            ::java::util::Properties a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::InputStream a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Properties::initializeClass, ::java::io::InputStream::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::xml::QueryTemplateManager::getQueryAsXmlString(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getQueryAsXmlString_", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonListIterator.h"
#include "java/lang/Object.h"
#include "java/util/ListIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonListIterator::class$ = NULL;
        jmethodID *PythonListIterator::mids$ = NULL;
        bool PythonListIterator::live$ = false;

        jclass PythonListIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonListIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588ee] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)V");
            mids$[mid_hasPrevious_54c6a16a] = env->getMethodID(cls, "hasPrevious", "()Z");
            mids$[mid_nextIndex_54c6a179] = env->getMethodID(cls, "nextIndex", "()I");
            mids$[mid_previous_846352c3] = env->getMethodID(cls, "previous", "()Ljava/lang/Object;");
            mids$[mid_previousIndex_54c6a179] = env->getMethodID(cls, "previousIndex", "()I");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonListIterator::PythonListIterator() : ::org::apache::pylucene::util::PythonIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonListIterator::add(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_290588ee], a0.this$);
        }

        jboolean PythonListIterator::hasPrevious() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPrevious_54c6a16a]);
        }

        jint PythonListIterator::nextIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_nextIndex_54c6a179]);
        }

        ::java::lang::Object PythonListIterator::previous() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_previous_846352c3]));
        }

        jint PythonListIterator::previousIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_previousIndex_54c6a179]);
        }

        void PythonListIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }

        void PythonListIterator::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg);
        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args);
        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg);

        static PyMethodDef t_PythonListIterator__methods_[] = {
          DECLARE_METHOD(t_PythonListIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, add, METH_O),
          DECLARE_METHOD(t_PythonListIterator, hasPrevious, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, nextIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previous, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previousIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonListIterator, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonListIterator, t_PythonListIterator, ::org::apache::pylucene::util::PythonIterator, PythonListIterator, t_PythonListIterator_init_, 0, 0, 0, 0, 0);

        void t_PythonListIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonListIterator), module, "PythonListIterator", 0);
        }

        void t_PythonListIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "class_", make_descriptor(PythonListIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonListIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonListIterator::initializeClass, 1)))
            return NULL;
          return t_PythonListIterator::wrap_Object(PythonListIterator(((t_PythonListIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonListIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonListIterator object((jobject) NULL);

          INT_CALL(object = PythonListIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPrevious());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.previous());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.previousIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonListIterator), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *ConstantScoreQueryBuilder::class$ = NULL;
            jmethodID *ConstantScoreQueryBuilder::mids$ = NULL;
            bool ConstantScoreQueryBuilder::live$ = false;

            jclass ConstantScoreQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_08e51f07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstantScoreQueryBuilder::ConstantScoreQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08e51f07, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ConstantScoreQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder, ::java::lang::Object, ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_ConstantScoreQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstantScoreQueryBuilder), module, "ConstantScoreQueryBuilder", 0);
            }

            void t_ConstantScoreQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "class_", make_descriptor(ConstantScoreQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_ConstantScoreQueryBuilder::wrap_Object(ConstantScoreQueryBuilder(((t_ConstantScoreQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a0((jobject) NULL);
              ConstantScoreQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsReader::class$ = NULL;
          jmethodID *Lucene41PostingsReader::mids$ = NULL;
          bool Lucene41PostingsReader::live$ = false;

          jclass Lucene41PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsReader::Lucene41PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene41PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene41PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene41PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene41PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene41PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene41PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene41PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsReader, t_Lucene41PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene41PostingsReader, t_Lucene41PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsReader), module, "Lucene41PostingsReader", 0);
          }

          void t_Lucene41PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "class_", make_descriptor(Lucene41PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsReader::wrap_Object(Lucene41PostingsReader(((t_Lucene41PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene41PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene41PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiReader::class$ = NULL;
        jmethodID *MultiReader::mids$ = NULL;
        bool MultiReader::live$ = false;

        jclass MultiReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a20f8ee9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_44fb5002] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;Z)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_a20f8ee9, a0.this$)) {}

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0, jboolean a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_44fb5002, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args);
        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data);
        static PyGetSetDef t_MultiReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiReader__methods_[] = {
          DECLARE_METHOD(t_MultiReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiReader, t_MultiReader, ::org::apache::lucene::index::BaseCompositeReader, MultiReader, t_MultiReader_init_, 0, 0, t_MultiReader__fields_, 0, 0);
        PyObject *t_MultiReader::wrap_Object(const MultiReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiReader), module, "MultiReader", 0);
        }

        void t_MultiReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "class_", make_descriptor(MultiReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "wrapfn_", make_descriptor(t_MultiReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiReader::initializeClass, 1)))
            return NULL;
          return t_MultiReader::wrap_Object(MultiReader(((t_MultiReader *) arg)->object.this$));
        }
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = MultiReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jboolean a1;
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[kZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilterFactory::class$ = NULL;
          jmethodID *GermanLightStemFilterFactory::mids$ = NULL;
          bool GermanLightStemFilterFactory::live$ = false;

          jclass GermanLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilterFactory::GermanLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilterFactory, t_GermanLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanLightStemFilterFactory, t_GermanLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilterFactory), module, "GermanLightStemFilterFactory", 0);
          }

          void t_GermanLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "class_", make_descriptor(GermanLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilterFactory::wrap_Object(GermanLightStemFilterFactory(((t_GermanLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntDocValuesField::class$ = NULL;
        jmethodID *IntDocValuesField::mids$ = NULL;
        bool IntDocValuesField::live$ = false;

        jclass IntDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_setIntValue_39c7bd3c] = env->getMethodID(cls, "setIntValue", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntDocValuesField::IntDocValuesField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        void IntDocValuesField::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args);
        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_IntDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_IntDocValuesField, intValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntDocValuesField__methods_[] = {
          DECLARE_METHOD(t_IntDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntDocValuesField, setIntValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntDocValuesField, t_IntDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, IntDocValuesField, t_IntDocValuesField_init_, 0, 0, t_IntDocValuesField__fields_, 0, 0);

        void t_IntDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntDocValuesField), module, "IntDocValuesField", 0);
        }

        void t_IntDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "class_", make_descriptor(IntDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_IntDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntDocValuesField::initializeClass, 1)))
            return NULL;
          return t_IntDocValuesField::wrap_Object(IntDocValuesField(((t_IntDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_IntDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntDocValuesField_init_(t_IntDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          IntDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = IntDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntDocValuesField_setIntValue(t_IntDocValuesField *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntDocValuesField), (PyObject *) self, "setIntValue", args, 2);
        }

        static int t_IntDocValuesField_set__intValue(t_IntDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MapOfSets.h"
#include "java/util/Set.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MapOfSets::class$ = NULL;
        jmethodID *MapOfSets::mids$ = NULL;
        bool MapOfSets::live$ = false;

        jclass MapOfSets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MapOfSets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_getMap_db60befd] = env->getMethodID(cls, "getMap", "()Ljava/util/Map;");
            mids$[mid_put_466982ed] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_putAll_bdc4f4b6] = env->getMethodID(cls, "putAll", "(Ljava/lang/Object;Ljava/util/Collection;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MapOfSets::MapOfSets(const ::java::util::Map & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::java::util::Map MapOfSets::getMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getMap_db60befd]));
        }

        jint MapOfSets::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_put_466982ed], a0.this$, a1.this$);
        }

        jint MapOfSets::putAll(const ::java::lang::Object & a0, const ::java::util::Collection & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_putAll_bdc4f4b6], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args);
        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self);
        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data);
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data);
        static PyGetSetDef t_MapOfSets__fields_[] = {
          DECLARE_GET_FIELD(t_MapOfSets, map),
          DECLARE_GET_FIELD(t_MapOfSets, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MapOfSets__methods_[] = {
          DECLARE_METHOD(t_MapOfSets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, of_, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, getMap, METH_NOARGS),
          DECLARE_METHOD(t_MapOfSets, put, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, putAll, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MapOfSets, t_MapOfSets, ::java::lang::Object, MapOfSets, t_MapOfSets_init_, 0, 0, t_MapOfSets__fields_, 0, 0);
        PyObject *t_MapOfSets::wrap_Object(const MapOfSets& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_MapOfSets::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_MapOfSets::install(PyObject *module)
        {
          installType(&PY_TYPE(MapOfSets), module, "MapOfSets", 0);
        }

        void t_MapOfSets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "class_", make_descriptor(MapOfSets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "wrapfn_", make_descriptor(t_MapOfSets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MapOfSets::initializeClass, 1)))
            return NULL;
          return t_MapOfSets::wrap_Object(MapOfSets(((t_MapOfSets *) arg)->object.this$));
        }
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MapOfSets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          MapOfSets object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = MapOfSets(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;
          jint result;

          if (!parseArgs(args, "OK", self->parameters[0], ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.putAll(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAll", args);
          return NULL;
        }
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Double.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Double::class$ = NULL;
    jmethodID *Double::mids$ = NULL;
    bool Double::live$ = false;
    jint Double::BYTES = (jint) 0;
    jint Double::MAX_EXPONENT = (jint) 0;
    jdouble Double::MAX_VALUE = (jdouble) 0;
    jint Double::MIN_EXPONENT = (jint) 0;
    jdouble Double::MIN_NORMAL = (jdouble) 0;
    jdouble Double::MIN_VALUE = (jdouble) 0;
    jdouble Double::NEGATIVE_INFINITY = (jdouble) 0;
    jdouble Double::NaN = (jdouble) 0;
    jdouble Double::POSITIVE_INFINITY = (jdouble) 0;
    jint Double::SIZE = (jint) 0;
    ::java::lang::Class *Double::TYPE = NULL;

    jclass Double::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Double");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_b1e28667] = env->getStaticMethodID(cls, "compare", "(DD)I");
        mids$[mid_compareTo_8baed073] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Double;)I");
        mids$[mid_doubleToLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToLongBits", "(D)J");
        mids$[mid_doubleToRawLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToRawLongBits", "(D)J");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_5d1c765a] = env->getStaticMethodID(cls, "hashCode", "(D)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isFinite_5d1c7649] = env->getStaticMethodID(cls, "isFinite", "(D)Z");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_5d1c7649] = env->getStaticMethodID(cls, "isInfinite", "(D)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_5d1c7649] = env->getStaticMethodID(cls, "isNaN", "(D)Z");
        mids$[mid_longBitsToDouble_0ee6df3d] = env->getStaticMethodID(cls, "longBitsToDouble", "(J)D");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_max_b1e2866a] = env->getStaticMethodID(cls, "max", "(DD)D");
        mids$[mid_min_b1e2866a] = env->getStaticMethodID(cls, "min", "(DD)D");
        mids$[mid_parseDouble_5fdc3f5a] = env->getStaticMethodID(cls, "parseDouble", "(Ljava/lang/String;)D");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_sum_b1e2866a] = env->getStaticMethodID(cls, "sum", "(DD)D");
        mids$[mid_toHexString_1b4624f8] = env->getStaticMethodID(cls, "toHexString", "(D)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_1b4624f8] = env->getStaticMethodID(cls, "toString", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_ad1fcbf0] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/Double;");
        mids$[mid_valueOf_16296787] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Double;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticDoubleField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticDoubleField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticDoubleField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticDoubleField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticDoubleField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticDoubleField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Double::Double(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Double::Double(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Double::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Double::compare(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_b1e28667], a0, a1);
    }

    jint Double::compareTo(const Double & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_8baed073], a0.this$);
    }

    jlong Double::doubleToLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToLongBits_5d1c7659], a0);
    }

    jlong Double::doubleToRawLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToRawLongBits_5d1c7659], a0);
    }

    jdouble Double::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Double::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Double::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Double::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Double::hashCode(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_5d1c765a], a0);
    }

    jint Double::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Double::isFinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_5d1c7649], a0);
    }

    jboolean Double::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Double::isInfinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_5d1c7649], a0);
    }

    jboolean Double::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Double::isNaN(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_5d1c7649], a0);
    }

    jdouble Double::longBitsToDouble(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_longBitsToDouble_0ee6df3d], a0);
    }

    jlong Double::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jdouble Double::max$(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_max_b1e2866a], a0, a1);
    }

    jdouble Double::min$(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_min_b1e2866a], a0, a1);
    }

    jdouble Double::parseDouble(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_parseDouble_5fdc3f5a], a0.this$);
    }

    jshort Double::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jdouble Double::sum(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_sum_b1e2866a], a0, a1);
    }

    ::java::lang::String Double::toHexString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_1b4624f8], a0));
    }

    ::java::lang::String Double::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Double::toString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_1b4624f8], a0));
    }

    Double Double::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad1fcbf0], a0));
    }

    Double Double::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_16296787], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg);
    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_equals(t_Double *self, PyObject *args);
    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_intValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_isFinite(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isInfinite(t_Double *self);
    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isNaN(t_Double *self);
    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_toString(t_Double *self, PyObject *args);
    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_get__infinite(t_Double *self, void *data);
    static PyObject *t_Double_get__naN(t_Double *self, void *data);
    static PyGetSetDef t_Double__fields_[] = {
      DECLARE_GET_FIELD(t_Double, infinite),
      DECLARE_GET_FIELD(t_Double, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Double__methods_[] = {
      DECLARE_METHOD(t_Double, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, compareTo, METH_O),
      DECLARE_METHOD(t_Double, doubleToLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleToRawLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, equals, METH_VARARGS),
      DECLARE_METHOD(t_Double, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, isFinite, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Double, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Double, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longBitsToDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, parseDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, toString, METH_VARARGS),
      DECLARE_METHOD(t_Double, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Double, t_Double, ::java::lang::Number, Double, t_Double_init_, 0, 0, t_Double__fields_, 0, 0);

    void t_Double::install(PyObject *module)
    {
      installType(&PY_TYPE(Double), module, "Double", 0);
    }

    void t_Double::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "class_", make_descriptor(Double::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "wrapfn_", make_descriptor(unboxDouble));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "boxfn_", make_descriptor(boxDouble));
      env->getClass(Double::initializeClass);
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "BYTES", make_descriptor(Double::BYTES));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_EXPONENT", make_descriptor(Double::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_VALUE", make_descriptor(Double::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_EXPONENT", make_descriptor(Double::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_NORMAL", make_descriptor(Double::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_VALUE", make_descriptor(Double::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Double::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NaN", make_descriptor(Double::NaN));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "POSITIVE_INFINITY", make_descriptor(Double::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "SIZE", make_descriptor(Double::SIZE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Double::TYPE)));
    }

    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Double::initializeClass, 1)))
        return NULL;
      return t_Double::wrap_Object(Double(((t_Double *) arg)->object.this$));
    }
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Double::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jint result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg)
    {
      Double a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToRawLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToRawLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Double_equals(t_Double *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Double_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jint result;

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Double_intValue(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Double_isFinite(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isFinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isFinite", arg);
      return NULL;
    }

    static PyObject *t_Double_isInfinite(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Double_isNaN(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jdouble result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::longBitsToDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "longBitsToDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_longValue(t_Double *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Double_max(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::max$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Double_min(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::min$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jdouble result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::parseDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Double_sum(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::sum(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Double_toString(t_Double *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Double_get__infinite(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Double_get__naN(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatField::class$ = NULL;
        jmethodID *FloatField::mids$ = NULL;
        bool FloatField::live$ = false;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_STORED = NULL;

        jclass FloatField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_866c7d94] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_49ba27a3] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_866c7d94, a0.this$, a1, a2.this$)) {}

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_49ba27a3, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_FloatField__methods_[] = {
          DECLARE_METHOD(t_FloatField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatField, t_FloatField, ::org::apache::lucene::document::Field, FloatField, t_FloatField_init_, 0, 0, 0, 0, 0);

        void t_FloatField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatField), module, "FloatField", 0);
        }

        void t_FloatField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "class_", make_descriptor(FloatField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "wrapfn_", make_descriptor(t_FloatField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FloatField::initializeClass);
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_STORED)));
        }

        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatField::initializeClass, 1)))
            return NULL;
          return t_FloatField::wrap_Object(FloatField(((t_FloatField *) arg)->object.this$));
        }
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragmentsBuilder::class$ = NULL;
          jmethodID *SimpleFragmentsBuilder::mids$ = NULL;
          bool SimpleFragmentsBuilder::live$ = false;

          jclass SimpleFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmentsBuilder::SimpleFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List SimpleFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmentsBuilder, t_SimpleFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, SimpleFragmentsBuilder, t_SimpleFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmentsBuilder), module, "SimpleFragmentsBuilder", 0);
          }

          void t_SimpleFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "class_", make_descriptor(SimpleFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmentsBuilder::wrap_Object(SimpleFragmentsBuilder(((t_SimpleFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(SimpleFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SingleFragListBuilder::class$ = NULL;
          jmethodID *SingleFragListBuilder::mids$ = NULL;
          bool SingleFragListBuilder::live$ = false;

          jclass SingleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SingleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleFragListBuilder::SingleFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SingleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SingleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SingleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleFragListBuilder, t_SingleFragListBuilder, ::java::lang::Object, SingleFragListBuilder, t_SingleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SingleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleFragListBuilder), module, "SingleFragListBuilder", 0);
          }

          void t_SingleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "class_", make_descriptor(SingleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SingleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SingleFragListBuilder::wrap_Object(SingleFragListBuilder(((t_SingleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            SingleFragListBuilder object((jobject) NULL);

            INT_CALL(object = SingleFragListBuilder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilter::class$ = NULL;
          jmethodID *SpanishLightStemFilter::mids$ = NULL;
          bool SpanishLightStemFilter::live$ = false;

          jclass SpanishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilter::SpanishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SpanishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilter, t_SpanishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SpanishLightStemFilter, t_SpanishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilter), module, "SpanishLightStemFilter", 0);
          }

          void t_SpanishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "class_", make_descriptor(SpanishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilter::wrap_Object(SpanishLightStemFilter(((t_SpanishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SpanishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SpanishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MinFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MinFloatFunction::class$ = NULL;
            jmethodID *MinFloatFunction::mids$ = NULL;
            bool MinFloatFunction::live$ = false;

            jclass MinFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MinFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MinFloatFunction::MinFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MinFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MinFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MinFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MinFloatFunction, t_MinFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MinFloatFunction, t_MinFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MinFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MinFloatFunction), module, "MinFloatFunction", 0);
            }

            void t_MinFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "class_", make_descriptor(MinFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MinFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MinFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MinFloatFunction::wrap_Object(MinFloatFunction(((t_MinFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MinFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MinFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MinFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool::class$ = NULL;
        jmethodID *ByteBlockPool::mids$ = NULL;
        jfieldID *ByteBlockPool::fids$ = NULL;
        bool ByteBlockPool::live$ = false;
        jint ByteBlockPool::BYTE_BLOCK_MASK = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SHIFT = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SIZE = (jint) 0;
        jint ByteBlockPool::FIRST_LEVEL_SIZE = (jint) 0;
        JArray< jint > *ByteBlockPool::LEVEL_SIZE_ARRAY = NULL;
        JArray< jint > *ByteBlockPool::NEXT_LEVEL_ARRAY = NULL;

        jclass ByteBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5679a66b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool$Allocator;)V");
            mids$[mid_allocSlice_b8354c5c] = env->getMethodID(cls, "allocSlice", "([BI)I");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlice_39c7bd23] = env->getMethodID(cls, "newSlice", "(I)I");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_readBytes_d6ca92d6] = env->getMethodID(cls, "readBytes", "(J[BII)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");
            mids$[mid_setBytesRef_738fc2ce] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[B");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[B");
            fids$[fid_byteOffset] = env->getFieldID(cls, "byteOffset", "I");
            fids$[fid_byteUpto] = env->getFieldID(cls, "byteUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE_BLOCK_MASK = env->getStaticIntField(cls, "BYTE_BLOCK_MASK");
            BYTE_BLOCK_SHIFT = env->getStaticIntField(cls, "BYTE_BLOCK_SHIFT");
            BYTE_BLOCK_SIZE = env->getStaticIntField(cls, "BYTE_BLOCK_SIZE");
            FIRST_LEVEL_SIZE = env->getStaticIntField(cls, "FIRST_LEVEL_SIZE");
            LEVEL_SIZE_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "LEVEL_SIZE_ARRAY", "[I"));
            NEXT_LEVEL_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "NEXT_LEVEL_ARRAY", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool::ByteBlockPool(const ::org::apache::lucene::util::ByteBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5679a66b, a0.this$)) {}

        jint ByteBlockPool::allocSlice(const JArray< jbyte > & a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_allocSlice_b8354c5c], a0.this$, a1);
        }

        void ByteBlockPool::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jint ByteBlockPool::newSlice(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_newSlice_39c7bd23], a0);
        }

        void ByteBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void ByteBlockPool::readBytes(jlong a0, const JArray< jbyte > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_d6ca92d6], a0, a1.this$, a2, a3);
        }

        void ByteBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void ByteBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        void ByteBlockPool::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesRef_738fc2ce], a0.this$, a1);
        }

        JArray< jbyte > ByteBlockPool::_get_buffer() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void ByteBlockPool::_set_buffer(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jbyte > > ByteBlockPool::_get_buffers() const
        {
          return JArray< JArray< jbyte > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void ByteBlockPool::_set_buffers(const JArray< JArray< jbyte > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint ByteBlockPool::_get_byteOffset() const
        {
          return env->getIntField(this$, fids$[fid_byteOffset]);
        }

        void ByteBlockPool::_set_byteOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteOffset], a0);
        }

        jint ByteBlockPool::_get_byteUpto() const
        {
          return env->getIntField(this$, fids$[fid_byteUpto]);
        }

        void ByteBlockPool::_set_byteUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self);
        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_ByteBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteOffset),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, allocSlice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, append, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, newSlice, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, setBytesRef, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool, t_ByteBlockPool, ::java::lang::Object, ByteBlockPool, t_ByteBlockPool_init_, 0, 0, t_ByteBlockPool__fields_, 0, 0);

        void t_ByteBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool), module, "ByteBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectTrackingAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(ByteBlockPool$Allocator)));
        }

        void t_ByteBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "class_", make_descriptor(ByteBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_MASK", make_descriptor(ByteBlockPool::BYTE_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SHIFT", make_descriptor(ByteBlockPool::BYTE_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SIZE", make_descriptor(ByteBlockPool::BYTE_BLOCK_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "FIRST_LEVEL_SIZE", make_descriptor(ByteBlockPool::FIRST_LEVEL_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "LEVEL_SIZE_ARRAY", make_descriptor(ByteBlockPool::LEVEL_SIZE_ARRAY->wrap()));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "NEXT_LEVEL_ARRAY", make_descriptor(ByteBlockPool::NEXT_LEVEL_ARRAY->wrap()));
        }

        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool::wrap_Object(ByteBlockPool(((t_ByteBlockPool *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::ByteBlockPool$Allocator a0((jobject) NULL);
          ByteBlockPool object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool$Allocator::initializeClass, &a0))
          {
            INT_CALL(object = ByteBlockPool(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.allocSlice(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "allocSlice", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.newSlice(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSlice", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "J[BII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.setBytesRef(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesRef", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          if (!parseArg(arg, "[[B", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteOffset", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogByteSizeMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogByteSizeMergePolicy::class$ = NULL;
        jmethodID *LogByteSizeMergePolicy::mids$ = NULL;
        bool LogByteSizeMergePolicy::live$ = false;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB = (jdouble) 0;

        jclass LogByteSizeMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogByteSizeMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMaxMergeMB_54c6a174] = env->getMethodID(cls, "getMaxMergeMB", "()D");
            mids$[mid_getMaxMergeMBForForcedMerge_54c6a174] = env->getMethodID(cls, "getMaxMergeMBForForcedMerge", "()D");
            mids$[mid_getMinMergeMB_54c6a174] = env->getMethodID(cls, "getMinMergeMB", "()D");
            mids$[mid_setMaxMergeMB_5d1c7645] = env->getMethodID(cls, "setMaxMergeMB", "(D)V");
            mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645] = env->getMethodID(cls, "setMaxMergeMBForForcedMerge", "(D)V");
            mids$[mid_setMinMergeMB_5d1c7645] = env->getMethodID(cls, "setMinMergeMB", "(D)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB");
            DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE");
            DEFAULT_MIN_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MIN_MERGE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogByteSizeMergePolicy::LogByteSizeMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble LogByteSizeMergePolicy::getMaxMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMB_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMaxMergeMBForForcedMerge() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMBForForcedMerge_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMinMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinMergeMB_54c6a174]);
        }

        void LogByteSizeMergePolicy::setMaxMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMB_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMaxMergeMBForForcedMerge(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMinMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeMB_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogByteSizeMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMB),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMBForForcedMerge),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, minMergeMB),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogByteSizeMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogByteSizeMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMBForForcedMerge, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMinMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMB, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMBForForcedMerge, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMinMergeMB, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogByteSizeMergePolicy, t_LogByteSizeMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogByteSizeMergePolicy, t_LogByteSizeMergePolicy_init_, 0, 0, t_LogByteSizeMergePolicy__fields_, 0, 0);

        void t_LogByteSizeMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogByteSizeMergePolicy), module, "LogByteSizeMergePolicy", 0);
        }

        void t_LogByteSizeMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "class_", make_descriptor(LogByteSizeMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogByteSizeMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogByteSizeMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB));
        }

        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogByteSizeMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogByteSizeMergePolicy::wrap_Object(LogByteSizeMergePolicy(((t_LogByteSizeMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogByteSizeMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogByteSizeMergePolicy object((jobject) NULL);

          INT_CALL(object = LogByteSizeMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMBForForcedMerge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMBForForcedMerge", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMinMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMB", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMBForForcedMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMBForForcedMerge", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMinMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeMB", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsReader::class$ = NULL;
        jmethodID *StoredFieldsReader::mids$ = NULL;
        bool StoredFieldsReader::live$ = false;

        jclass StoredFieldsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        StoredFieldsReader StoredFieldsReader::clone() const
        {
          return StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
        }

        void StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args);

        static PyMethodDef t_StoredFieldsReader__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, visitDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsReader, t_StoredFieldsReader, ::java::lang::Object, StoredFieldsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsReader), module, "StoredFieldsReader", 0);
        }

        void t_StoredFieldsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "class_", make_descriptor(StoredFieldsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsReader::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsReader::wrap_Object(StoredFieldsReader(((t_StoredFieldsReader *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self)
        {
          StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.visitDocument(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visitDocument", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *StatePair::class$ = NULL;
          jmethodID *StatePair::mids$ = NULL;
          bool StatePair::live$ = false;

          jclass StatePair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/StatePair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e6e20846] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFirstState_0b46b0b2] = env->getMethodID(cls, "getFirstState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getSecondState_0b46b0b2] = env->getMethodID(cls, "getSecondState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StatePair::StatePair(const ::org::apache::lucene::util::automaton::State & a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e6e20846, a0.this$, a1.this$)) {}

          jboolean StatePair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::automaton::State StatePair::getFirstState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getFirstState_0b46b0b2]));
          }

          ::org::apache::lucene::util::automaton::State StatePair::getSecondState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getSecondState_0b46b0b2]));
          }

          jint StatePair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_getFirstState(t_StatePair *self);
          static PyObject *t_StatePair_getSecondState(t_StatePair *self);
          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_get__firstState(t_StatePair *self, void *data);
          static PyObject *t_StatePair_get__secondState(t_StatePair *self, void *data);
          static PyGetSetDef t_StatePair__fields_[] = {
            DECLARE_GET_FIELD(t_StatePair, firstState),
            DECLARE_GET_FIELD(t_StatePair, secondState),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StatePair__methods_[] = {
            DECLARE_METHOD(t_StatePair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, equals, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, getFirstState, METH_NOARGS),
            DECLARE_METHOD(t_StatePair, getSecondState, METH_NOARGS),
            DECLARE_METHOD(t_StatePair, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StatePair, t_StatePair, ::java::lang::Object, StatePair, t_StatePair_init_, 0, 0, t_StatePair__fields_, 0, 0);

          void t_StatePair::install(PyObject *module)
          {
            installType(&PY_TYPE(StatePair), module, "StatePair", 0);
          }

          void t_StatePair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "class_", make_descriptor(StatePair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "wrapfn_", make_descriptor(t_StatePair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StatePair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StatePair::initializeClass, 1)))
              return NULL;
            return t_StatePair::wrap_Object(StatePair(((t_StatePair *) arg)->object.this$));
          }
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StatePair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
            StatePair object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::State::initializeClass, ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StatePair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_StatePair_getFirstState(t_StatePair *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getFirstState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_StatePair_getSecondState(t_StatePair *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getSecondState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StatePair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_StatePair_get__firstState(t_StatePair *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getFirstState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static PyObject *t_StatePair_get__secondState(t_StatePair *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getSecondState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *StringDistance::class$ = NULL;
          jmethodID *StringDistance::mids$ = NULL;
          bool StringDistance::live$ = false;

          jclass StringDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/StringDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat StringDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args);

          static PyMethodDef t_StringDistance__methods_[] = {
            DECLARE_METHOD(t_StringDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StringDistance, t_StringDistance, ::java::lang::Object, StringDistance, abstract_init, 0, 0, 0, 0, 0);

          void t_StringDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(StringDistance), module, "StringDistance", 0);
          }

          void t_StringDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "class_", make_descriptor(StringDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "wrapfn_", make_descriptor(t_StringDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StringDistance::initializeClass, 1)))
              return NULL;
            return t_StringDistance::wrap_Object(StringDistance(((t_StringDistance *) arg)->object.this$));
          }
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StringDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *Message::class$ = NULL;
            jmethodID *Message::mids$ = NULL;
            bool Message::live$ = false;

            jclass Message::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/Message");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::Object > Message::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String Message::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_getArguments(t_Message *self);
            static PyObject *t_Message_getKey(t_Message *self);
            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args);
            static PyObject *t_Message_get__arguments(t_Message *self, void *data);
            static PyObject *t_Message_get__key(t_Message *self, void *data);
            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data);
            static PyGetSetDef t_Message__fields_[] = {
              DECLARE_GET_FIELD(t_Message, arguments),
              DECLARE_GET_FIELD(t_Message, key),
              DECLARE_GET_FIELD(t_Message, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Message__methods_[] = {
              DECLARE_METHOD(t_Message, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_Message, getKey, METH_NOARGS),
              DECLARE_METHOD(t_Message, getLocalizedMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Message, t_Message, ::java::lang::Object, Message, abstract_init, 0, 0, t_Message__fields_, 0, 0);

            void t_Message::install(PyObject *module)
            {
              installType(&PY_TYPE(Message), module, "Message", 0);
            }

            void t_Message::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "class_", make_descriptor(Message::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "wrapfn_", make_descriptor(t_Message::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Message::initializeClass, 1)))
                return NULL;
              return t_Message::wrap_Object(Message(((t_Message *) arg)->object.this$));
            }
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Message::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Message_getArguments(t_Message *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_getKey(t_Message *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_Message_get__arguments(t_Message *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_get__key(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *IntsRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *IntsRefFSTEnum$InputOutput::fids$ = NULL;
          bool IntsRefFSTEnum$InputOutput::live$ = false;

          jclass IntsRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum$InputOutput::IntsRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::IntsRef IntsRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void IntsRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object IntsRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void IntsRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_IntsRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput, ::java::lang::Object, IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput_init_, 0, 0, t_IntsRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_Object(const IntsRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum$InputOutput), module, "IntsRefFSTEnum$InputOutput", 0);
          }

          void t_IntsRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(IntsRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum$InputOutput::wrap_Object(IntsRefFSTEnum$InputOutput(((t_IntsRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            IntsRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = IntsRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemmer::class$ = NULL;
          jmethodID *NorwegianLightStemmer::mids$ = NULL;
          bool NorwegianLightStemmer::live$ = false;
          jint NorwegianLightStemmer::BOKMAAL = (jint) 0;
          jint NorwegianLightStemmer::NYNORSK = (jint) 0;

          jclass NorwegianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BOKMAAL = env->getStaticIntField(cls, "BOKMAAL");
              NYNORSK = env->getStaticIntField(cls, "NYNORSK");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemmer::NorwegianLightStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemmer, t_NorwegianLightStemmer, ::java::lang::Object, NorwegianLightStemmer, t_NorwegianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemmer), module, "NorwegianLightStemmer", 0);
          }

          void t_NorwegianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "class_", make_descriptor(NorwegianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianLightStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "BOKMAAL", make_descriptor(NorwegianLightStemmer::BOKMAAL));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "NYNORSK", make_descriptor(NorwegianLightStemmer::NYNORSK));
          }

          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemmer::wrap_Object(NorwegianLightStemmer(((t_NorwegianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianLightStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianLightStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/WholeBreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *WholeBreakIterator::class$ = NULL;
          jmethodID *WholeBreakIterator::mids$ = NULL;
          bool WholeBreakIterator::live$ = false;

          jclass WholeBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/WholeBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WholeBreakIterator::WholeBreakIterator() : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WholeBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
          }

          jint WholeBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
          }

          jint WholeBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
          }

          jint WholeBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
          }

          jint WholeBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }

          jint WholeBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
          }

          jint WholeBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
          }

          jint WholeBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args);

          static PyMethodDef t_WholeBreakIterator__methods_[] = {
            DECLARE_METHOD(t_WholeBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, previous, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WholeBreakIterator, t_WholeBreakIterator, ::java::text::BreakIterator, WholeBreakIterator, t_WholeBreakIterator_init_, 0, 0, 0, 0, 0);

          void t_WholeBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WholeBreakIterator), module, "WholeBreakIterator", 0);
          }

          void t_WholeBreakIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "class_", make_descriptor(WholeBreakIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "wrapfn_", make_descriptor(t_WholeBreakIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WholeBreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WholeBreakIterator::initializeClass, 1)))
              return NULL;
            return t_WholeBreakIterator::wrap_Object(WholeBreakIterator(((t_WholeBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WholeBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            WholeBreakIterator object((jobject) NULL);

            INT_CALL(object = WholeBreakIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyInt_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(WholeBreakIterator), (PyObject *) self, "previous", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BooleanQueryNode::class$ = NULL;
              jmethodID *BooleanQueryNode::mids$ = NULL;
              bool BooleanQueryNode::live$ = false;

              jclass BooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNode::BooleanQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence BooleanQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BooleanQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args);

              static PyMethodDef t_BooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNode, t_BooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BooleanQueryNode, t_BooleanQueryNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNode), module, "BooleanQueryNode", 0);
              }

              void t_BooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "class_", make_descriptor(BooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNode::wrap_Object(BooleanQueryNode(((t_BooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                BooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = BooleanQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupDocs::class$ = NULL;
          jmethodID *GroupDocs::mids$ = NULL;
          jfieldID *GroupDocs::fids$ = NULL;
          bool GroupDocs::live$ = false;

          jclass GroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4916722] = env->getMethodID(cls, "<init>", "(FFI[Lorg/apache/lucene/search/ScoreDoc;Ljava/lang/Object;[Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSortValues] = env->getFieldID(cls, "groupSortValues", "[Ljava/lang/Object;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
              fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupDocs::GroupDocs(jfloat a0, jfloat a1, jint a2, const JArray< ::org::apache::lucene::search::ScoreDoc > & a3, const ::java::lang::Object & a4, const JArray< ::java::lang::Object > & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e4916722, a0, a1, a2, a3.this$, a4.this$, a5.this$)) {}

          JArray< ::java::lang::Object > GroupDocs::_get_groupSortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_groupSortValues]));
          }

          ::java::lang::Object GroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          jfloat GroupDocs::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          jfloat GroupDocs::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          JArray< ::org::apache::lucene::search::ScoreDoc > GroupDocs::_get_scoreDocs() const
          {
            return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
          }

          jint GroupDocs::_get_totalHits() const
          {
            return env->getIntField(this$, fids$[fid_totalHits]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args);
          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data);

          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data);
          static PyGetSetDef t_GroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_GroupDocs, groupSortValues),
            DECLARE_GET_FIELD(t_GroupDocs, groupValue),
            DECLARE_GET_FIELD(t_GroupDocs, maxScore),
            DECLARE_GET_FIELD(t_GroupDocs, score),
            DECLARE_GET_FIELD(t_GroupDocs, scoreDocs),
            DECLARE_GET_FIELD(t_GroupDocs, totalHits),
            DECLARE_GET_FIELD(t_GroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupDocs__methods_[] = {
            DECLARE_METHOD(t_GroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupDocs, t_GroupDocs, ::java::lang::Object, GroupDocs, t_GroupDocs_init_, 0, 0, t_GroupDocs__fields_, 0, 0);
          PyObject *t_GroupDocs::wrap_Object(const GroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupDocs), module, "GroupDocs", 0);
          }

          void t_GroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "class_", make_descriptor(GroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "wrapfn_", make_descriptor(t_GroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupDocs::initializeClass, 1)))
              return NULL;
            return t_GroupDocs::wrap_Object(GroupDocs(((t_GroupDocs *) arg)->object.this$));
          }
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            jfloat a1;
            jint a2;
            JArray< ::org::apache::lucene::search::ScoreDoc > a3((jobject) NULL);
            ::java::lang::Object a4((jobject) NULL);
            JArray< ::java::lang::Object > a5((jobject) NULL);
            GroupDocs object((jobject) NULL);

            if (!parseArgs(args, "FFI[ko[o", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = GroupDocs(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data)
          {
            JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_scoreDocs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHits());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntTaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntTaxonomyFacets::class$ = NULL;
          jmethodID *IntTaxonomyFacets::mids$ = NULL;
          bool IntTaxonomyFacets::live$ = false;

          jclass IntTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number IntTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult IntTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args);
          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_IntTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_IntTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntTaxonomyFacets, t_IntTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, IntTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_IntTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(IntTaxonomyFacets), module, "IntTaxonomyFacets", 0);
          }

          void t_IntTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "class_", make_descriptor(IntTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_IntTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_IntTaxonomyFacets::wrap_Object(IntTaxonomyFacets(((t_IntTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FuzzyLikeThisQueryBuilder::class$ = NULL;
            jmethodID *FuzzyLikeThisQueryBuilder::mids$ = NULL;
            bool FuzzyLikeThisQueryBuilder::live$ = false;

            jclass FuzzyLikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzyLikeThisQueryBuilder::FuzzyLikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzyLikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder, ::java::lang::Object, FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FuzzyLikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzyLikeThisQueryBuilder), module, "FuzzyLikeThisQueryBuilder", 0);
            }

            void t_FuzzyLikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "class_", make_descriptor(FuzzyLikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FuzzyLikeThisQueryBuilder::wrap_Object(FuzzyLikeThisQueryBuilder(((t_FuzzyLikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              FuzzyLikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyLikeThisQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiPhraseQuery::class$ = NULL;
        jmethodID *MultiPhraseQuery::mids$ = NULL;
        bool MultiPhraseQuery::live$ = false;

        jclass MultiPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_c9f85e01] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_8f4de701] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTermArrays_87851566] = env->getMethodID(cls, "getTermArrays", "()Ljava/util/List;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPhraseQuery::MultiPhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_c9f85e01], a0.this$);
        }

        void MultiPhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_8f4de701], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight MultiPhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MultiPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MultiPhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > MultiPhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint MultiPhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        ::java::util::List MultiPhraseQuery::getTermArrays() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermArrays_87851566]));
        }

        jint MultiPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiPhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String MultiPhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data);
        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data);
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data);
        static PyGetSetDef t_MultiPhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiPhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_MultiPhraseQuery, slop),
          DECLARE_GET_FIELD(t_MultiPhraseQuery, termArrays),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_MultiPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getTermArrays, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_MultiPhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiPhraseQuery, t_MultiPhraseQuery, ::org::apache::lucene::search::Query, MultiPhraseQuery, t_MultiPhraseQuery_init_, 0, 0, t_MultiPhraseQuery__fields_, 0, 0);

        void t_MultiPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPhraseQuery), module, "MultiPhraseQuery", 0);
        }

        void t_MultiPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "class_", make_descriptor(MultiPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_MultiPhraseQuery::wrap_Object(MultiPhraseQuery(((t_MultiPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          MultiPhraseQuery object((jobject) NULL);

          INT_CALL(object = MultiPhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(Object));
        }

        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector::mids$ = NULL;
            bool FunctionDistinctValuesCollector::live$ = false;

            jclass FunctionDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_86fd8007] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionDistinctValuesCollector::FunctionDistinctValuesCollector(const ::java::util::Map & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::util::Collection & a3) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_86fd8007, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void FunctionDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List FunctionDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void FunctionDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data);
            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_FunctionDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector_init_, 0, 0, t_FunctionDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector::wrap_Object(const FunctionDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector), module, "FunctionDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount)));
            }

            void t_FunctionDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector::wrap_Object(FunctionDistinctValuesCollector(((t_FunctionDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              ::java::util::Collection a3((jobject) NULL);
              PyTypeObject **p3;
              FunctionDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkK", ::java::util::Map::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = FunctionDistinctValuesCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicTokenizer::class$ = NULL;
          jmethodID *IndicTokenizer::mids$ = NULL;
          bool IndicTokenizer::live$ = false;

          jclass IndicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_IndicTokenizer__methods_[] = {
            DECLARE_METHOD(t_IndicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicTokenizer, t_IndicTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, IndicTokenizer, t_IndicTokenizer_init_, 0, 0, 0, 0, 0);

          void t_IndicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicTokenizer), module, "IndicTokenizer", 0);
          }

          void t_IndicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "class_", make_descriptor(IndicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_IndicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicTokenizer::initializeClass, 1)))
              return NULL;
            return t_IndicTokenizer::wrap_Object(IndicTokenizer(((t_IndicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SerialMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SerialMergeScheduler::class$ = NULL;
        jmethodID *SerialMergeScheduler::mids$ = NULL;
        bool SerialMergeScheduler::live$ = false;

        jclass SerialMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SerialMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SerialMergeScheduler::SerialMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SerialMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SerialMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args);
        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args);

        static PyMethodDef t_SerialMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_SerialMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_SerialMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SerialMergeScheduler, t_SerialMergeScheduler, ::org::apache::lucene::index::MergeScheduler, SerialMergeScheduler, t_SerialMergeScheduler_init_, 0, 0, 0, 0, 0);

        void t_SerialMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(SerialMergeScheduler), module, "SerialMergeScheduler", 0);
        }

        void t_SerialMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "class_", make_descriptor(SerialMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_SerialMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SerialMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SerialMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_SerialMergeScheduler::wrap_Object(SerialMergeScheduler(((t_SerialMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SerialMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          SerialMergeScheduler object((jobject) NULL);

          INT_CALL(object = SerialMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SerialMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SloppyMath.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SloppyMath::class$ = NULL;
        jmethodID *SloppyMath::mids$ = NULL;
        bool SloppyMath::live$ = false;

        jclass SloppyMath::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SloppyMath");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_asin_5d1c7657] = env->getStaticMethodID(cls, "asin", "(D)D");
            mids$[mid_cos_5d1c7657] = env->getStaticMethodID(cls, "cos", "(D)D");
            mids$[mid_earthDiameter_5d1c7657] = env->getStaticMethodID(cls, "earthDiameter", "(D)D");
            mids$[mid_haversin_143b6dc0] = env->getStaticMethodID(cls, "haversin", "(DDDD)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SloppyMath::SloppyMath() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble SloppyMath::asin(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asin_5d1c7657], a0);
        }

        jdouble SloppyMath::cos(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_cos_5d1c7657], a0);
        }

        jdouble SloppyMath::earthDiameter(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_earthDiameter_5d1c7657], a0);
        }

        jdouble SloppyMath::haversin(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversin_143b6dc0], a0, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SloppyMath__methods_[] = {
          DECLARE_METHOD(t_SloppyMath, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, asin, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, cos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, earthDiameter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversin, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SloppyMath, t_SloppyMath, ::java::lang::Object, SloppyMath, t_SloppyMath_init_, 0, 0, 0, 0, 0);

        void t_SloppyMath::install(PyObject *module)
        {
          installType(&PY_TYPE(SloppyMath), module, "SloppyMath", 0);
        }

        void t_SloppyMath::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "class_", make_descriptor(SloppyMath::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "wrapfn_", make_descriptor(t_SloppyMath::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SloppyMath::initializeClass, 1)))
            return NULL;
          return t_SloppyMath::wrap_Object(SloppyMath(((t_SloppyMath *) arg)->object.this$));
        }
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SloppyMath::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds)
        {
          SloppyMath object((jobject) NULL);

          INT_CALL(object = SloppyMath());
          self->object = object;

          return 0;
        }

        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::asin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asin", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::cos(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "cos", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::earthDiameter(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "earthDiameter", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble result;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversin(a0, a1, a2, a3));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "haversin", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanFirstBuilder::class$ = NULL;
            jmethodID *SpanFirstBuilder::mids$ = NULL;
            bool SpanFirstBuilder::live$ = false;

            jclass SpanFirstBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanFirstBuilder::SpanFirstBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanFirstBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanFirstBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanFirstBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanFirstBuilder, t_SpanFirstBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanFirstBuilder, t_SpanFirstBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanFirstBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanFirstBuilder), module, "SpanFirstBuilder", 0);
            }

            void t_SpanFirstBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "class_", make_descriptor(SpanFirstBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanFirstBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanFirstBuilder::wrap_Object(SpanFirstBuilder(((t_SpanFirstBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanFirstBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanFirstBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanFirstBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SlowCompositeReaderWrapper.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SlowCompositeReaderWrapper::class$ = NULL;
        jmethodID *SlowCompositeReaderWrapper::mids$ = NULL;
        bool SlowCompositeReaderWrapper::live$ = false;

        jclass SlowCompositeReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SlowCompositeReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrap_b2ba15f1] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SlowCompositeReaderWrapper::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SlowCompositeReaderWrapper::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void SlowCompositeReaderWrapper::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SlowCompositeReaderWrapper::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SlowCompositeReaderWrapper::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SlowCompositeReaderWrapper::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits SlowCompositeReaderWrapper::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SlowCompositeReaderWrapper::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues SlowCompositeReaderWrapper::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SlowCompositeReaderWrapper::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SlowCompositeReaderWrapper::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields SlowCompositeReaderWrapper::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint SlowCompositeReaderWrapper::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SlowCompositeReaderWrapper::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void SlowCompositeReaderWrapper::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SlowCompositeReaderWrapper::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader SlowCompositeReaderWrapper::wrap(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_b2ba15f1], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args);
        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data);
        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data);
        static PyGetSetDef t_SlowCompositeReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, coreCacheKey),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, fieldInfos),
          DECLARE_GET_FIELD(t_SlowCompositeReaderWrapper, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SlowCompositeReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, document, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, fields, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, toString, METH_VARARGS),
          DECLARE_METHOD(t_SlowCompositeReaderWrapper, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SlowCompositeReaderWrapper, t_SlowCompositeReaderWrapper, ::org::apache::lucene::index::AtomicReader, SlowCompositeReaderWrapper, abstract_init, 0, 0, t_SlowCompositeReaderWrapper__fields_, 0, 0);

        void t_SlowCompositeReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SlowCompositeReaderWrapper), module, "SlowCompositeReaderWrapper", 0);
        }

        void t_SlowCompositeReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "class_", make_descriptor(SlowCompositeReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_SlowCompositeReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SlowCompositeReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SlowCompositeReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_SlowCompositeReaderWrapper::wrap_Object(SlowCompositeReaderWrapper(((t_SlowCompositeReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_SlowCompositeReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SlowCompositeReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SlowCompositeReaderWrapper_addCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_checkIntegrity(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_document(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_fields(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getBinaryDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCombinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getCoreCacheKey(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getDocsWithField(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getFieldInfos(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getLiveDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNormValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedNumericDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getSortedSetDocValues(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_getTermVectors(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_maxDoc(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_numDocs(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_removeCoreClosedListener(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_toString(t_SlowCompositeReaderWrapper *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SlowCompositeReaderWrapper), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SlowCompositeReaderWrapper_wrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SlowCompositeReaderWrapper::wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__combinedCoreAndDeletesKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__coreCacheKey(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__fieldInfos(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SlowCompositeReaderWrapper_get__liveDocs(t_SlowCompositeReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Class.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "JArray.h"

namespace java {
  namespace util {
    namespace concurrent {

      ::java::lang::Class *Executors::class$ = NULL;
      jmethodID *Executors::mids$ = NULL;
      bool Executors::live$ = false;

      jclass Executors::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/util/concurrent/Executors");

          mids$ = new jmethodID[max_mid];
          mids$[mid_callable_a93e49d5] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;");
          mids$[mid_callable_27f60351] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;");
          mids$[mid_defaultThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_newCachedThreadPool_7959084a] = env->getStaticMethodID(cls, "newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newCachedThreadPool_ef1f74b9] = env->getStaticMethodID(cls, "newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_8e681bb4] = env->getStaticMethodID(cls, "newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_366a7197] = env->getStaticMethodID(cls, "newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newScheduledThreadPool_86106422] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newScheduledThreadPool_6380c25f] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadExecutor_7959084a] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadExecutor_ef1f74b9] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_e92dd26d] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newWorkStealingPool_7959084a] = env->getStaticMethodID(cls, "newWorkStealingPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newWorkStealingPool_8e681bb4] = env->getStaticMethodID(cls, "newWorkStealingPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_privilegedCallable_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_unconfigurableExecutorService_d4c55b25] = env->getStaticMethodID(cls, "unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3] = env->getStaticMethodID(cls, "unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_a93e49d5], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0, const ::java::lang::Object & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_27f60351], a0.this$, a1.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::defaultThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_defaultThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_8e681bb4], a0));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_366a7197], a0, a1.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_86106422], a0));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_6380c25f], a0, a1.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0]));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_e92dd26d], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newWorkStealingPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newWorkStealingPool_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newWorkStealingPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newWorkStealingPool_8e681bb4], a0));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallable(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallable_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallableUsingCurrentClassLoader(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::privilegedThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_privilegedThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::unconfigurableExecutorService(const ::java::util::concurrent::ExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableExecutorService_d4c55b25], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::unconfigurableScheduledExecutorService(const ::java::util::concurrent::ScheduledExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    namespace concurrent {
      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newWorkStealingPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Executors__methods_[] = {
        DECLARE_METHOD(t_Executors, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, callable, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, defaultThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newCachedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newFixedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newScheduledThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadScheduledExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newWorkStealingPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallableUsingCurrentClassLoader, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableExecutorService, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableScheduledExecutorService, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Executors, t_Executors, ::java::lang::Object, Executors, abstract_init, 0, 0, 0, 0, 0);

      void t_Executors::install(PyObject *module)
      {
        installType(&PY_TYPE(Executors), module, "Executors", 0);
      }

      void t_Executors::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "class_", make_descriptor(Executors::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "wrapfn_", make_descriptor(t_Executors::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Executors::initializeClass, 1)))
          return NULL;
        return t_Executors::wrap_Object(Executors(((t_Executors *) arg)->object.this$));
      }
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Executors::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0));
              return ::java::util::concurrent::t_Callable::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }
          }
          break;
         case 2:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "ko", ::java::lang::Runnable::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0, a1));
              return ::java::util::concurrent::t_Callable::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "callable", args);
        return NULL;
      }

      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::defaultThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newCachedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0, a1));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newFixedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0, a1));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newScheduledThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor());
            return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadScheduledExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newWorkStealingPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newWorkStealingPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newWorkStealingPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newWorkStealingPool", args);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallable(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallable", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallableUsingCurrentClassLoader(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallableUsingCurrentClassLoader", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableExecutorService(a0));
          return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableExecutorService", arg);
        return NULL;
      }

      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ScheduledExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ScheduledExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableScheduledExecutorService(a0));
          return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableScheduledExecutorService", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongValues::class$ = NULL;
        jmethodID *LongValues::mids$ = NULL;
        bool LongValues::live$ = false;
        LongValues *LongValues::IDENTITY = NULL;

        jclass LongValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            IDENTITY = new LongValues(env->getStaticObjectField(cls, "IDENTITY", "Lorg/apache/lucene/util/LongValues;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValues::LongValues() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong LongValues::get(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
        }

        jlong LongValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args);

        static PyMethodDef t_LongValues__methods_[] = {
          DECLARE_METHOD(t_LongValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, get, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongValues, t_LongValues, ::org::apache::lucene::index::NumericDocValues, LongValues, t_LongValues_init_, 0, 0, 0, 0, 0);

        void t_LongValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValues), module, "LongValues", 0);
        }

        void t_LongValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "class_", make_descriptor(LongValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "wrapfn_", make_descriptor(t_LongValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "IDENTITY", make_descriptor(t_LongValues::wrap_Object(*LongValues::IDENTITY)));
        }

        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValues::initializeClass, 1)))
            return NULL;
          return t_LongValues::wrap_Object(LongValues(((t_LongValues *) arg)->object.this$));
        }
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds)
        {
          LongValues object((jobject) NULL);

          INT_CALL(object = LongValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(LongValues), (PyObject *) self, "get", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *RegexpQueryNodeBuilder::class$ = NULL;
              jmethodID *RegexpQueryNodeBuilder::mids$ = NULL;
              bool RegexpQueryNodeBuilder::live$ = false;

              jclass RegexpQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_261cecb0] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/RegexpQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNodeBuilder::RegexpQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::RegexpQuery RegexpQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::RegexpQuery(env->callObjectMethod(this$, mids$[mid_build_261cecb0], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_RegexpQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder, ::java::lang::Object, RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_RegexpQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNodeBuilder), module, "RegexpQueryNodeBuilder", 0);
              }

              void t_RegexpQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "class_", make_descriptor(RegexpQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNodeBuilder::wrap_Object(RegexpQueryNodeBuilder(((t_RegexpQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                RegexpQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = RegexpQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::RegexpQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_RegexpQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianAnalyzer::class$ = NULL;
          jmethodID *HungarianAnalyzer::mids$ = NULL;
          bool HungarianAnalyzer::live$ = false;
          ::java::lang::String *HungarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HungarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HungarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data);
          static PyGetSetDef t_HungarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HungarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HungarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HungarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianAnalyzer, t_HungarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HungarianAnalyzer, t_HungarianAnalyzer_init_, 0, 0, t_HungarianAnalyzer__fields_, 0, 0);

          void t_HungarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianAnalyzer), module, "HungarianAnalyzer", 0);
          }

          void t_HungarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "class_", make_descriptor(HungarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HungarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HungarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HungarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HungarianAnalyzer::wrap_Object(HungarianAnalyzer(((t_HungarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hu::HungarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilterFactory.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilterFactory::class$ = NULL;
          jmethodID *ArabicStemFilterFactory::mids$ = NULL;
          bool ArabicStemFilterFactory::live$ = false;

          jclass ArabicStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f95e0269] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilterFactory::ArabicStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicStemFilter ArabicStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicStemFilter(env->callObjectMethod(this$, mids$[mid_create_f95e0269], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilterFactory, t_ArabicStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicStemFilterFactory, t_ArabicStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilterFactory), module, "ArabicStemFilterFactory", 0);
          }

          void t_ArabicStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "class_", make_descriptor(ArabicStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilterFactory::wrap_Object(ArabicStemFilterFactory(((t_ArabicStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueInt.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueInt::class$ = NULL;
          jmethodID *MutableValueInt::mids$ = NULL;
          jfieldID *MutableValueInt::fids$ = NULL;
          bool MutableValueInt::live$ = false;

          jclass MutableValueInt::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueInt");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueInt::MutableValueInt() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueInt::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueInt::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueInt::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueInt::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueInt::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueInt::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jint MutableValueInt::_get_value() const
          {
            return env->getIntField(this$, fids$[fid_value]);
          }

          void MutableValueInt::_set_value(jint a0) const
          {
            env->setIntField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data);
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueInt__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueInt, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueInt__methods_[] = {
            DECLARE_METHOD(t_MutableValueInt, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueInt, t_MutableValueInt, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueInt, t_MutableValueInt_init_, 0, 0, t_MutableValueInt__fields_, 0, 0);

          void t_MutableValueInt::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueInt), module, "MutableValueInt", 0);
          }

          void t_MutableValueInt::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "class_", make_descriptor(MutableValueInt::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "wrapfn_", make_descriptor(t_MutableValueInt::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueInt::initializeClass, 1)))
              return NULL;
            return t_MutableValueInt::wrap_Object(MutableValueInt(((t_MutableValueInt *) arg)->object.this$));
          }
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueInt::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds)
          {
            MutableValueInt object((jobject) NULL);

            INT_CALL(object = MutableValueInt());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_value());
            return PyInt_FromLong((long) value);
          }
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMDirectory::class$ = NULL;
        jmethodID *RAMDirectory::mids$ = NULL;
        bool RAMDirectory::live$ = false;

        jclass RAMDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_7b526946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_newRAMFile_a5af5448] = env->getMethodID(cls, "newRAMFile", "()Lorg/apache/lucene/store/RAMFile;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMDirectory::RAMDirectory() : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMDirectory::RAMDirectory(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_7b526946, a0.this$, a1.this$)) {}

        void RAMDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput RAMDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void RAMDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean RAMDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong RAMDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String RAMDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > RAMDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput RAMDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        jlong RAMDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self);
        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data);
        static PyGetSetDef t_RAMDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_RAMDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMDirectory__methods_[] = {
          DECLARE_METHOD(t_RAMDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMDirectory, t_RAMDirectory, ::org::apache::lucene::store::BaseDirectory, RAMDirectory, t_RAMDirectory_init_, 0, 0, t_RAMDirectory__fields_, 0, 0);

        void t_RAMDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMDirectory), module, "RAMDirectory", 0);
        }

        void t_RAMDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "class_", make_descriptor(RAMDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "wrapfn_", make_descriptor(t_RAMDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMDirectory::initializeClass, 1)))
            return NULL;
          return t_RAMDirectory::wrap_Object(RAMDirectory(((t_RAMDirectory *) arg)->object.this$));
        }
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMDirectory object((jobject) NULL);

              INT_CALL(object = RAMDirectory());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              RAMDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanScorer::class$ = NULL;
          jmethodID *SpanScorer::mids$ = NULL;
          bool SpanScorer::live$ = false;

          jclass SpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_sloppyFreq_54c6a176] = env->getMethodID(cls, "sloppyFreq", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint SpanScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong SpanScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint SpanScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint SpanScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          jint SpanScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat SpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          jfloat SpanScorer::sloppyFreq() const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self);

          static PyMethodDef t_SpanScorer__methods_[] = {
            DECLARE_METHOD(t_SpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, sloppyFreq, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanScorer, t_SpanScorer, ::org::apache::lucene::search::Scorer, SpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_SpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanScorer), module, "SpanScorer", 0);
          }

          void t_SpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "class_", make_descriptor(SpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "wrapfn_", make_descriptor(t_SpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanScorer::initializeClass, 1)))
              return NULL;
            return t_SpanScorer::wrap_Object(SpanScorer(((t_SpanScorer *) arg)->object.this$));
          }
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.sloppyFreq());
            return PyFloat_FromDouble((double) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanScorer::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanScorer::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanScorer::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayloads_a306eb3e] = env->getMethodID(cls, "getPayloads", "([Lorg/apache/lucene/search/spans/Spans;)V");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");
              mids$[mid_processPayloads_c09a1e75] = env->getMethodID(cls, "processPayloads", "(Ljava/util/Collection;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PayloadNearQuery$PayloadNearSpanScorer::getPayloads(const JArray< ::org::apache::lucene::search::spans::Spans > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getPayloads_a306eb3e], a0.this$);
          }

          jfloat PayloadNearQuery$PayloadNearSpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanScorer__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, getPayloads, METH_O),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanScorer, t_PayloadNearQuery$PayloadNearSpanScorer, ::org::apache::lucene::search::spans::SpanScorer, PayloadNearQuery$PayloadNearSpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), module, "PayloadNearQuery$PayloadNearSpanScorer", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanScorer::wrap_Object(PayloadNearQuery$PayloadNearSpanScorer(((t_PayloadNearQuery$PayloadNearSpanScorer *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::search::spans::Spans::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getPayloads(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloads", arg);
            return NULL;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), (PyObject *) self, "score", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilterFactory::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilterFactory::mids$ = NULL;
          bool RemoveDuplicatesTokenFilterFactory::live$ = false;

          jclass RemoveDuplicatesTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f366c0be] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilterFactory::RemoveDuplicatesTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter RemoveDuplicatesTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f366c0be], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), module, "RemoveDuplicatesTokenFilterFactory", 0);
          }

          void t_RemoveDuplicatesTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilterFactory::wrap_Object(RemoveDuplicatesTokenFilterFactory(((t_RemoveDuplicatesTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RemoveDuplicatesTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_RemoveDuplicatesTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingInfixSuggester::class$ = NULL;
            jmethodID *AnalyzingInfixSuggester::mids$ = NULL;
            bool AnalyzingInfixSuggester::live$ = false;
            jint AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS = (jint) 0;

            jclass AnalyzingInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_3b9404b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_add_2d27343d] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_3273017a] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;IZZ)Ljava/util/List;");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_refresh_54c6a166] = env->getMethodID(cls, "refresh", "()V");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_update_2d27343d] = env->getMethodID(cls, "update", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getDirectory_c34cda9e] = env->getMethodID(cls, "getDirectory", "(Ljava/io/File;)Lorg/apache/lucene/store/Directory;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_highlight_6b3f1693] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_getIndexWriterConfig_04dea876] = env->getMethodID(cls, "getIndexWriterConfig", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_getLastTokenQuery_fbed2634] = env->getMethodID(cls, "getLastTokenQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_finishQuery_4a287f5d] = env->getMethodID(cls, "finishQuery", "(Lorg/apache/lucene/search/BooleanQuery;Z)Lorg/apache/lucene/search/Query;");
                mids$[mid_addNonMatch_2e1c61a6] = env->getMethodID(cls, "addNonMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V");
                mids$[mid_addWholeMatch_55a79f28] = env->getMethodID(cls, "addWholeMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_addPrefixMatch_539c241a] = env->getMethodID(cls, "addPrefixMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MIN_PREFIX_CHARS = env->getStaticIntField(cls, "DEFAULT_MIN_PREFIX_CHARS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_3b9404b5, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

            void AnalyzingInfixSuggester::add(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_add_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }

            void AnalyzingInfixSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void AnalyzingInfixSuggester::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jlong AnalyzingInfixSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingInfixSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1, jboolean a2, jboolean a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_3273017a], a0.this$, a1, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }

            jlong AnalyzingInfixSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void AnalyzingInfixSuggester::refresh() const
            {
              env->callVoidMethod(this$, mids$[mid_refresh_54c6a166]);
            }

            jboolean AnalyzingInfixSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }

            void AnalyzingInfixSuggester::update(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_update_2d27343d], a0.this$, a1.this$, a2, a3.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingInfixSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingInfixSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, add, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, close, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, refresh, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, store, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, update, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingInfixSuggester, t_AnalyzingInfixSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingInfixSuggester, t_AnalyzingInfixSuggester_init_, 0, 0, t_AnalyzingInfixSuggester__fields_, 0, 0);

            void t_AnalyzingInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingInfixSuggester), module, "AnalyzingInfixSuggester", 0);
            }

            void t_AnalyzingInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "class_", make_descriptor(AnalyzingInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingInfixSuggester).tp_dict, "DEFAULT_MIN_PREFIX_CHARS", make_descriptor(AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS));
            }

            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingInfixSuggester::wrap_Object(AnalyzingInfixSuggester(((t_AnalyzingInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 5:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "KkkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.add(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  jboolean a2;
                  jboolean a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OIZZ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.refresh());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.update(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "update", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *GroupQueryNodeProcessor::class$ = NULL;
              jmethodID *GroupQueryNodeProcessor::mids$ = NULL;
              bool GroupQueryNodeProcessor::live$ = false;

              jclass GroupQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeProcessor::GroupQueryNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler GroupQueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void GroupQueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self);
              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data);
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeProcessor, t_GroupQueryNodeProcessor, ::java::lang::Object, GroupQueryNodeProcessor, t_GroupQueryNodeProcessor_init_, 0, 0, t_GroupQueryNodeProcessor__fields_, 0, 0);

              void t_GroupQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeProcessor), module, "GroupQueryNodeProcessor", 0);
              }

              void t_GroupQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "class_", make_descriptor(GroupQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeProcessor::wrap_Object(GroupQueryNodeProcessor(((t_GroupQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonIterator::class$ = NULL;
        jmethodID *PythonIterator::mids$ = NULL;
        bool PythonIterator::live$ = false;

        jclass PythonIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIterator::PythonIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIterator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIterator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIterator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self);
        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args);
        static PyObject *t_PythonIterator_remove(t_PythonIterator *self);
        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data);
        static PyGetSetDef t_PythonIterator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIterator, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIterator__methods_[] = {
          DECLARE_METHOD(t_PythonIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIterator, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIterator, t_PythonIterator, ::java::lang::Object, PythonIterator, t_PythonIterator_init_, PyObject_SelfIter, get_extension_next, t_PythonIterator__fields_, 0, 0);

        void t_PythonIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIterator), module, "PythonIterator", 1);
        }

        void t_PythonIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "class_", make_descriptor(PythonIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIterator::initializeClass);
          JNINativeMethod methods[] = {
            { "hasNext", "()Z", (void *) t_PythonIterator_hasNext0 },
            { "next", "()Ljava/lang/Object;", (void *) t_PythonIterator_next1 },
            { "pythonDecRef", "()V", (void *) t_PythonIterator_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIterator::initializeClass, 1)))
            return NULL;
          return t_PythonIterator::wrap_Object(PythonIterator(((t_PythonIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonIterator object((jobject) NULL);

          INT_CALL(object = PythonIterator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIterator_remove(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }

        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "hasNext", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("hasNext", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "next", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("next", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermQueryBuilder::class$ = NULL;
            jmethodID *TermQueryBuilder::mids$ = NULL;
            bool TermQueryBuilder::live$ = false;

            jclass TermQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermQueryBuilder::TermQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermQueryBuilder, t_TermQueryBuilder, ::java::lang::Object, TermQueryBuilder, t_TermQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermQueryBuilder), module, "TermQueryBuilder", 0);
            }

            void t_TermQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "class_", make_descriptor(TermQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermQueryBuilder::wrap_Object(TermQueryBuilder(((t_TermQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              TermQueryBuilder object((jobject) NULL);

              INT_CALL(object = TermQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Class.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Package.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Class::class$ = NULL;
    jmethodID *Class::mids$ = NULL;
    bool Class::live$ = false;

    jclass Class::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Class");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asSubclass_ecb22eb3] = env->getMethodID(cls, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
        mids$[mid_cast_a932a95f] = env->getMethodID(cls, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_desiredAssertionStatus_54c6a16a] = env->getMethodID(cls, "desiredAssertionStatus", "()Z");
        mids$[mid_forName_7d663d97] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
        mids$[mid_forName_4c5c10fb] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
        mids$[mid_getCanonicalName_14c7b5c5] = env->getMethodID(cls, "getCanonicalName", "()Ljava/lang/String;");
        mids$[mid_getClassLoader_8d2f11fc] = env->getMethodID(cls, "getClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getClasses_ffb25e7d] = env->getMethodID(cls, "getClasses", "()[Ljava/lang/Class;");
        mids$[mid_getComponentType_44a5f2c9] = env->getMethodID(cls, "getComponentType", "()Ljava/lang/Class;");
        mids$[mid_getDeclaredClasses_ffb25e7d] = env->getMethodID(cls, "getDeclaredClasses", "()[Ljava/lang/Class;");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_getEnclosingClass_44a5f2c9] = env->getMethodID(cls, "getEnclosingClass", "()Ljava/lang/Class;");
        mids$[mid_getEnumConstants_94e49c77] = env->getMethodID(cls, "getEnumConstants", "()[Ljava/lang/Object;");
        mids$[mid_getInterfaces_ffb25e7d] = env->getMethodID(cls, "getInterfaces", "()[Ljava/lang/Class;");
        mids$[mid_getModifiers_54c6a179] = env->getMethodID(cls, "getModifiers", "()I");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPackage_b0f2f7bb] = env->getMethodID(cls, "getPackage", "()Ljava/lang/Package;");
        mids$[mid_getResourceAsStream_222e59eb] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
        mids$[mid_getSigners_94e49c77] = env->getMethodID(cls, "getSigners", "()[Ljava/lang/Object;");
        mids$[mid_getSimpleName_14c7b5c5] = env->getMethodID(cls, "getSimpleName", "()Ljava/lang/String;");
        mids$[mid_getSuperclass_44a5f2c9] = env->getMethodID(cls, "getSuperclass", "()Ljava/lang/Class;");
        mids$[mid_getTypeName_14c7b5c5] = env->getMethodID(cls, "getTypeName", "()Ljava/lang/String;");
        mids$[mid_isAnnotation_54c6a16a] = env->getMethodID(cls, "isAnnotation", "()Z");
        mids$[mid_isAnonymousClass_54c6a16a] = env->getMethodID(cls, "isAnonymousClass", "()Z");
        mids$[mid_isArray_54c6a16a] = env->getMethodID(cls, "isArray", "()Z");
        mids$[mid_isAssignableFrom_a5deaff8] = env->getMethodID(cls, "isAssignableFrom", "(Ljava/lang/Class;)Z");
        mids$[mid_isEnum_54c6a16a] = env->getMethodID(cls, "isEnum", "()Z");
        mids$[mid_isInstance_290588e2] = env->getMethodID(cls, "isInstance", "(Ljava/lang/Object;)Z");
        mids$[mid_isInterface_54c6a16a] = env->getMethodID(cls, "isInterface", "()Z");
        mids$[mid_isLocalClass_54c6a16a] = env->getMethodID(cls, "isLocalClass", "()Z");
        mids$[mid_isMemberClass_54c6a16a] = env->getMethodID(cls, "isMemberClass", "()Z");
        mids$[mid_isPrimitive_54c6a16a] = env->getMethodID(cls, "isPrimitive", "()Z");
        mids$[mid_isSynthetic_54c6a16a] = env->getMethodID(cls, "isSynthetic", "()Z");
        mids$[mid_newInstance_846352c3] = env->getMethodID(cls, "newInstance", "()Ljava/lang/Object;");
        mids$[mid_toGenericString_14c7b5c5] = env->getMethodID(cls, "toGenericString", "()Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Class Class::asSubclass(const Class & a0) const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_asSubclass_ecb22eb3], a0.this$));
    }

    ::java::lang::Object Class::cast(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_cast_a932a95f], a0.this$));
    }

    jboolean Class::desiredAssertionStatus() const
    {
      return env->callBooleanMethod(this$, mids$[mid_desiredAssertionStatus_54c6a16a]);
    }

    Class Class::forName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_7d663d97], a0.this$));
    }

    Class Class::forName(const ::java::lang::String & a0, jboolean a1, const ::java::lang::ClassLoader & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_4c5c10fb], a0.this$, a1, a2.this$));
    }

    ::java::lang::String Class::getCanonicalName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalName_14c7b5c5]));
    }

    ::java::lang::ClassLoader Class::getClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getClassLoader_8d2f11fc]));
    }

    JArray< Class > Class::getClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getClasses_ffb25e7d]));
    }

    Class Class::getComponentType() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getComponentType_44a5f2c9]));
    }

    JArray< Class > Class::getDeclaredClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getDeclaredClasses_ffb25e7d]));
    }

    Class Class::getDeclaringClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    Class Class::getEnclosingClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getEnclosingClass_44a5f2c9]));
    }

    JArray< ::java::lang::Object > Class::getEnumConstants() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getEnumConstants_94e49c77]));
    }

    JArray< Class > Class::getInterfaces() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getInterfaces_ffb25e7d]));
    }

    jint Class::getModifiers() const
    {
      return env->callIntMethod(this$, mids$[mid_getModifiers_54c6a179]);
    }

    ::java::lang::String Class::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    ::java::lang::Package Class::getPackage() const
    {
      return ::java::lang::Package(env->callObjectMethod(this$, mids$[mid_getPackage_b0f2f7bb]));
    }

    ::java::io::InputStream Class::getResourceAsStream(const ::java::lang::String & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_222e59eb], a0.this$));
    }

    JArray< ::java::lang::Object > Class::getSigners() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getSigners_94e49c77]));
    }

    ::java::lang::String Class::getSimpleName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSimpleName_14c7b5c5]));
    }

    Class Class::getSuperclass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getSuperclass_44a5f2c9]));
    }

    ::java::lang::String Class::getTypeName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTypeName_14c7b5c5]));
    }

    jboolean Class::isAnnotation() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnnotation_54c6a16a]);
    }

    jboolean Class::isAnonymousClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnonymousClass_54c6a16a]);
    }

    jboolean Class::isArray() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isArray_54c6a16a]);
    }

    jboolean Class::isAssignableFrom(const Class & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAssignableFrom_a5deaff8], a0.this$);
    }

    jboolean Class::isEnum() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEnum_54c6a16a]);
    }

    jboolean Class::isInstance(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInstance_290588e2], a0.this$);
    }

    jboolean Class::isInterface() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterface_54c6a16a]);
    }

    jboolean Class::isLocalClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLocalClass_54c6a16a]);
    }

    jboolean Class::isMemberClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isMemberClass_54c6a16a]);
    }

    jboolean Class::isPrimitive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isPrimitive_54c6a16a]);
    }

    jboolean Class::isSynthetic() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isSynthetic_54c6a16a]);
    }

    ::java::lang::Object Class::newInstance() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_846352c3]));
    }

    ::java::lang::String Class::toGenericString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toGenericString_14c7b5c5]));
    }

    ::java::lang::String Class::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_of_(t_Class *self, PyObject *args);
    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg);
    static PyObject *t_Class_cast(t_Class *self, PyObject *arg);
    static PyObject *t_Class_desiredAssertionStatus(t_Class *self);
    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args);
    static PyObject *t_Class_getCanonicalName(t_Class *self);
    static PyObject *t_Class_getClassLoader(t_Class *self);
    static PyObject *t_Class_getClasses(t_Class *self);
    static PyObject *t_Class_getComponentType(t_Class *self);
    static PyObject *t_Class_getDeclaredClasses(t_Class *self);
    static PyObject *t_Class_getDeclaringClass(t_Class *self);
    static PyObject *t_Class_getEnclosingClass(t_Class *self);
    static PyObject *t_Class_getEnumConstants(t_Class *self);
    static PyObject *t_Class_getInterfaces(t_Class *self);
    static PyObject *t_Class_getModifiers(t_Class *self);
    static PyObject *t_Class_getName(t_Class *self);
    static PyObject *t_Class_getPackage(t_Class *self);
    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg);
    static PyObject *t_Class_getSigners(t_Class *self);
    static PyObject *t_Class_getSimpleName(t_Class *self);
    static PyObject *t_Class_getSuperclass(t_Class *self);
    static PyObject *t_Class_getTypeName(t_Class *self);
    static PyObject *t_Class_isAnnotation(t_Class *self);
    static PyObject *t_Class_isAnonymousClass(t_Class *self);
    static PyObject *t_Class_isArray(t_Class *self);
    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isEnum(t_Class *self);
    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isInterface(t_Class *self);
    static PyObject *t_Class_isLocalClass(t_Class *self);
    static PyObject *t_Class_isMemberClass(t_Class *self);
    static PyObject *t_Class_isPrimitive(t_Class *self);
    static PyObject *t_Class_isSynthetic(t_Class *self);
    static PyObject *t_Class_newInstance(t_Class *self);
    static PyObject *t_Class_toGenericString(t_Class *self);
    static PyObject *t_Class_toString(t_Class *self, PyObject *args);
    static PyObject *t_Class_get__annotation(t_Class *self, void *data);
    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data);
    static PyObject *t_Class_get__array(t_Class *self, void *data);
    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data);
    static PyObject *t_Class_get__classLoader(t_Class *self, void *data);
    static PyObject *t_Class_get__classes(t_Class *self, void *data);
    static PyObject *t_Class_get__componentType(t_Class *self, void *data);
    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data);
    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enum(t_Class *self, void *data);
    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data);
    static PyObject *t_Class_get__interface(t_Class *self, void *data);
    static PyObject *t_Class_get__interfaces(t_Class *self, void *data);
    static PyObject *t_Class_get__localClass(t_Class *self, void *data);
    static PyObject *t_Class_get__memberClass(t_Class *self, void *data);
    static PyObject *t_Class_get__modifiers(t_Class *self, void *data);
    static PyObject *t_Class_get__name(t_Class *self, void *data);
    static PyObject *t_Class_get__package(t_Class *self, void *data);
    static PyObject *t_Class_get__primitive(t_Class *self, void *data);
    static PyObject *t_Class_get__signers(t_Class *self, void *data);
    static PyObject *t_Class_get__simpleName(t_Class *self, void *data);
    static PyObject *t_Class_get__superclass(t_Class *self, void *data);
    static PyObject *t_Class_get__synthetic(t_Class *self, void *data);
    static PyObject *t_Class_get__typeName(t_Class *self, void *data);
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data);
    static PyGetSetDef t_Class__fields_[] = {
      DECLARE_GET_FIELD(t_Class, annotation),
      DECLARE_GET_FIELD(t_Class, anonymousClass),
      DECLARE_GET_FIELD(t_Class, array),
      DECLARE_GET_FIELD(t_Class, canonicalName),
      DECLARE_GET_FIELD(t_Class, classLoader),
      DECLARE_GET_FIELD(t_Class, classes),
      DECLARE_GET_FIELD(t_Class, componentType),
      DECLARE_GET_FIELD(t_Class, declaredClasses),
      DECLARE_GET_FIELD(t_Class, declaringClass),
      DECLARE_GET_FIELD(t_Class, enclosingClass),
      DECLARE_GET_FIELD(t_Class, enum),
      DECLARE_GET_FIELD(t_Class, enumConstants),
      DECLARE_GET_FIELD(t_Class, interface),
      DECLARE_GET_FIELD(t_Class, interfaces),
      DECLARE_GET_FIELD(t_Class, localClass),
      DECLARE_GET_FIELD(t_Class, memberClass),
      DECLARE_GET_FIELD(t_Class, modifiers),
      DECLARE_GET_FIELD(t_Class, name),
      DECLARE_GET_FIELD(t_Class, package),
      DECLARE_GET_FIELD(t_Class, primitive),
      DECLARE_GET_FIELD(t_Class, signers),
      DECLARE_GET_FIELD(t_Class, simpleName),
      DECLARE_GET_FIELD(t_Class, superclass),
      DECLARE_GET_FIELD(t_Class, synthetic),
      DECLARE_GET_FIELD(t_Class, typeName),
      DECLARE_GET_FIELD(t_Class, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Class__methods_[] = {
      DECLARE_METHOD(t_Class, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, of_, METH_VARARGS),
      DECLARE_METHOD(t_Class, asSubclass, METH_O),
      DECLARE_METHOD(t_Class, cast, METH_O),
      DECLARE_METHOD(t_Class, desiredAssertionStatus, METH_NOARGS),
      DECLARE_METHOD(t_Class, forName, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Class, getCanonicalName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getComponentType, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaredClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnclosingClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnumConstants, METH_NOARGS),
      DECLARE_METHOD(t_Class, getInterfaces, METH_NOARGS),
      DECLARE_METHOD(t_Class, getModifiers, METH_NOARGS),
      DECLARE_METHOD(t_Class, getName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getPackage, METH_NOARGS),
      DECLARE_METHOD(t_Class, getResourceAsStream, METH_O),
      DECLARE_METHOD(t_Class, getSigners, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSimpleName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSuperclass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getTypeName, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnnotation, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnonymousClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isArray, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAssignableFrom, METH_O),
      DECLARE_METHOD(t_Class, isEnum, METH_NOARGS),
      DECLARE_METHOD(t_Class, isInstance, METH_O),
      DECLARE_METHOD(t_Class, isInterface, METH_NOARGS),
      DECLARE_METHOD(t_Class, isLocalClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isMemberClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isPrimitive, METH_NOARGS),
      DECLARE_METHOD(t_Class, isSynthetic, METH_NOARGS),
      DECLARE_METHOD(t_Class, newInstance, METH_NOARGS),
      DECLARE_METHOD(t_Class, toGenericString, METH_NOARGS),
      DECLARE_METHOD(t_Class, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Class, t_Class, ::java::lang::Object, Class, abstract_init, 0, 0, t_Class__fields_, 0, 0);
    PyObject *t_Class::wrap_Object(const Class& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Class::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Class::install(PyObject *module)
    {
      installType(&PY_TYPE(Class), module, "Class", 0);
    }

    void t_Class::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "class_", make_descriptor(Class::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "wrapfn_", make_descriptor(t_Class::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Class::initializeClass, 1)))
        return NULL;
      return t_Class::wrap_Object(Class(((t_Class *) arg)->object.this$));
    }
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Class::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Class_of_(t_Class *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      Class result((jobject) NULL);

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.asSubclass(a0));
        return t_Class::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "asSubclass", arg);
      return NULL;
    }

    static PyObject *t_Class_cast(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.cast(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "cast", arg);
      return NULL;
    }

    static PyObject *t_Class_desiredAssertionStatus(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.desiredAssertionStatus());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0));
            return t_Class::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          ::java::lang::ClassLoader a2((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "sZk", ::java::lang::ClassLoader::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0, a1, a2));
            return t_Class::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "forName", args);
      return NULL;
    }

    static PyObject *t_Class_getCanonicalName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getCanonicalName());
      return j2p(result);
    }

    static PyObject *t_Class_getClassLoader(t_Class *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Class_getClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getComponentType(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getComponentType());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getDeclaredClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaredClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getDeclaringClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnclosingClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnclosingClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnumConstants(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnumConstants());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getInterfaces(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getInterfaces());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getModifiers(t_Class *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getModifiers());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Class_getName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Class_getPackage(t_Class *self)
    {
      ::java::lang::Package result((jobject) NULL);
      OBJ_CALL(result = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(result);
    }

    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.getResourceAsStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
      return NULL;
    }

    static PyObject *t_Class_getSigners(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSigners());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getSimpleName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getSimpleName());
      return j2p(result);
    }

    static PyObject *t_Class_getSuperclass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuperclass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getTypeName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getTypeName());
      return j2p(result);
    }

    static PyObject *t_Class_isAnnotation(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnnotation());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAnonymousClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnonymousClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isArray(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isArray());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.isAssignableFrom(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isAssignableFrom", arg);
      return NULL;
    }

    static PyObject *t_Class_isEnum(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEnum());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.isInstance(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isInstance", arg);
      return NULL;
    }

    static PyObject *t_Class_isInterface(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterface());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isLocalClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLocalClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isMemberClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isMemberClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isPrimitive(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isPrimitive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isSynthetic(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isSynthetic());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_newInstance(t_Class *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.newInstance());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Class_toGenericString(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toGenericString());
      return j2p(result);
    }

    static PyObject *t_Class_toString(t_Class *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Class), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Class_get__annotation(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnnotation());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnonymousClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__array(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isArray());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getCanonicalName());
      return j2p(value);
    }

    static PyObject *t_Class_get__classLoader(t_Class *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }

    static PyObject *t_Class_get__classes(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__componentType(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getComponentType());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaredClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnclosingClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enum(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEnum());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnumConstants());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__interface(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInterface());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__interfaces(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getInterfaces());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__localClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLocalClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__memberClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isMemberClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__modifiers(t_Class *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getModifiers());
      return PyInt_FromLong((long) value);
    }

    static PyObject *t_Class_get__name(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }

    static PyObject *t_Class_get__package(t_Class *self, void *data)
    {
      ::java::lang::Package value((jobject) NULL);
      OBJ_CALL(value = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(value);
    }

    static PyObject *t_Class_get__primitive(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isPrimitive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__signers(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSigners());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__simpleName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getSimpleName());
      return j2p(value);
    }

    static PyObject *t_Class_get__superclass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuperclass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__synthetic(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isSynthetic());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__typeName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getTypeName());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntaxImpl::class$ = NULL;
              jmethodID *EscapeQuerySyntaxImpl::mids$ = NULL;
              bool EscapeQuerySyntaxImpl::live$ = false;

              jclass EscapeQuerySyntaxImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_discardEscapeChar_31714ed7] = env->getStaticMethodID(cls, "discardEscapeChar", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence;");
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntaxImpl::EscapeQuerySyntaxImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence EscapeQuerySyntaxImpl::discardEscapeChar(const ::java::lang::CharSequence & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence(env->callStaticObjectMethod(cls, mids$[mid_discardEscapeChar_31714ed7], a0.this$));
              }

              ::java::lang::CharSequence EscapeQuerySyntaxImpl::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntaxImpl__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, discardEscapeChar, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl, ::java::lang::Object, EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl_init_, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntaxImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntaxImpl), module, "EscapeQuerySyntaxImpl", 0);
              }

              void t_EscapeQuerySyntaxImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "class_", make_descriptor(EscapeQuerySyntaxImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntaxImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntaxImpl::wrap_Object(EscapeQuerySyntaxImpl(((t_EscapeQuerySyntaxImpl *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds)
              {
                EscapeQuerySyntaxImpl object((jobject) NULL);

                INT_CALL(object = EscapeQuerySyntaxImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::EscapeQuerySyntaxImpl::discardEscapeChar(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::util::t_UnescapedCharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "discardEscapeChar", arg);
                return NULL;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$BufferSize::class$ = NULL;
        jmethodID *OfflineSorter$BufferSize::mids$ = NULL;
        bool OfflineSorter$BufferSize::live$ = false;

        jclass OfflineSorter$BufferSize::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$BufferSize");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automatic_c261dc62] = env->getStaticMethodID(cls, "automatic", "()Lorg/apache/lucene/util/OfflineSorter$BufferSize;");
            mids$[mid_megabytes_80c67993] = env->getStaticMethodID(cls, "megabytes", "(J)Lorg/apache/lucene/util/OfflineSorter$BufferSize;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::automatic()
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_automatic_c261dc62]));
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::megabytes(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_megabytes_80c67993], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type);
        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_OfflineSorter$BufferSize__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$BufferSize, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, automatic, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, megabytes, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$BufferSize, t_OfflineSorter$BufferSize, ::java::lang::Object, OfflineSorter$BufferSize, abstract_init, 0, 0, 0, 0, 0);

        void t_OfflineSorter$BufferSize::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$BufferSize), module, "OfflineSorter$BufferSize", 0);
        }

        void t_OfflineSorter$BufferSize::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "class_", make_descriptor(OfflineSorter$BufferSize::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$BufferSize::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$BufferSize::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$BufferSize::wrap_Object(OfflineSorter$BufferSize(((t_OfflineSorter$BufferSize *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$BufferSize::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type)
        {
          OfflineSorter$BufferSize result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::automatic());
          return t_OfflineSorter$BufferSize::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          OfflineSorter$BufferSize result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::megabytes(a0));
            return t_OfflineSorter$BufferSize::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "megabytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene46SegmentInfoWriter::mids$ = NULL;
          bool Lucene46SegmentInfoWriter::live$ = false;

          jclass Lucene46SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoWriter::Lucene46SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene46SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene46SegmentInfoWriter, t_Lucene46SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoWriter), module, "Lucene46SegmentInfoWriter", 0);
          }

          void t_Lucene46SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoWriter::wrap_Object(Lucene46SegmentInfoWriter(((t_Lucene46SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoWriter_init_(t_Lucene46SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoWriter_write(t_Lucene46SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilterFactory::class$ = NULL;
          jmethodID *RussianLightStemFilterFactory::mids$ = NULL;
          bool RussianLightStemFilterFactory::live$ = false;

          jclass RussianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilterFactory::RussianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream RussianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilterFactory, t_RussianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RussianLightStemFilterFactory, t_RussianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilterFactory), module, "RussianLightStemFilterFactory", 0);
          }

          void t_RussianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "class_", make_descriptor(RussianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilterFactory::wrap_Object(RussianLightStemFilterFactory(((t_RussianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer::class$ = NULL;
        jmethodID *Scorer::mids$ = NULL;
        bool Scorer::live$ = false;

        jclass Scorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_getWeight_add28ea1] = env->getMethodID(cls, "getWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Collection Scorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        ::org::apache::lucene::search::Weight Scorer::getWeight() const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_getWeight_add28ea1]));
        }

        jfloat Scorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_getChildren(t_Scorer *self);
        static PyObject *t_Scorer_getWeight(t_Scorer *self);
        static PyObject *t_Scorer_score(t_Scorer *self);
        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data);
        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data);
        static PyGetSetDef t_Scorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer, children),
          DECLARE_GET_FIELD(t_Scorer, weight),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer__methods_[] = {
          DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, getChildren, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, getWeight, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, score, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer, t_Scorer, ::org::apache::lucene::index::DocsEnum, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

        void t_Scorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "ChildScorer", make_descriptor(&PY_TYPE(Scorer$ChildScorer)));
        }

        void t_Scorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
            return NULL;
          return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Scorer_getChildren(t_Scorer *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
        }

        static PyObject *t_Scorer_getWeight(t_Scorer *self)
        {
          ::org::apache::lucene::search::Weight result((jobject) NULL);
          OBJ_CALL(result = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
        }

        static PyObject *t_Scorer_score(t_Scorer *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.score());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Scorer_get__children(t_Scorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data)
        {
          ::org::apache::lucene::search::Weight value((jobject) NULL);
          OBJ_CALL(value = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilterFactory::class$ = NULL;
          jmethodID *LowerCaseFilterFactory::mids$ = NULL;
          bool LowerCaseFilterFactory::live$ = false;

          jclass LowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_40083866] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/LowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilterFactory::LowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseFilter LowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_40083866], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self);
          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_LowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilterFactory, t_LowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LowerCaseFilterFactory, t_LowerCaseFilterFactory_init_, 0, 0, t_LowerCaseFilterFactory__fields_, 0, 0);

          void t_LowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilterFactory), module, "LowerCaseFilterFactory", 0);
          }

          void t_LowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "class_", make_descriptor(LowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilterFactory::wrap_Object(LowerCaseFilterFactory(((t_LowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_LowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Lift.h"
#include "org/egothor/stemmer/Row.h"
#include "java/util/List.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Lift::class$ = NULL;
      jmethodID *Lift::mids$ = NULL;
      bool Lift::live$ = false;

      jclass Lift::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Lift");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_liftUp_1357655d] = env->getMethodID(cls, "liftUp", "(Lorg/egothor/stemmer/Row;Ljava/util/List;)V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Lift::Lift(jboolean a0) : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void Lift::liftUp(const ::org::egothor::stemmer::Row & a0, const ::java::util::List & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_liftUp_1357655d], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Lift::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args);
      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args);

      static PyMethodDef t_Lift__methods_[] = {
        DECLARE_METHOD(t_Lift, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, liftUp, METH_VARARGS),
        DECLARE_METHOD(t_Lift, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Lift, t_Lift, ::org::egothor::stemmer::Reduce, Lift, t_Lift_init_, 0, 0, 0, 0, 0);

      void t_Lift::install(PyObject *module)
      {
        installType(&PY_TYPE(Lift), module, "Lift", 0);
      }

      void t_Lift::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "class_", make_descriptor(Lift::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "wrapfn_", make_descriptor(t_Lift::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Lift::initializeClass, 1)))
          return NULL;
        return t_Lift::wrap_Object(Lift(((t_Lift *) arg)->object.this$));
      }
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Lift::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds)
      {
        jboolean a0;
        Lift object((jobject) NULL);

        if (!parseArgs(args, "Z", &a0))
        {
          INT_CALL(object = Lift(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::java::util::List a1((jobject) NULL);
        PyTypeObject **p1;

        if (!parseArgs(args, "kK", ::org::egothor::stemmer::Row::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
        {
          OBJ_CALL(self->object.liftUp(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "liftUp", args);
        return NULL;
      }

      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Lift), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase::class$ = NULL;
          jmethodID *QueryParserBase::mids$ = NULL;
          bool QueryParserBase::live$ = false;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::AND_OPERATOR = NULL;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::OR_OPERATOR = NULL;

          jclass QueryParserBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
              mids$[mid_getAnalyzeRangeTerms_54c6a16a] = env->getMethodID(cls, "getAnalyzeRangeTerms", "()Z");
              mids$[mid_getAutoGeneratePhraseQueries_54c6a16a] = env->getMethodID(cls, "getAutoGeneratePhraseQueries", "()Z");
              mids$[mid_getDateResolution_65edc44f] = env->getMethodID(cls, "getDateResolution", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
              mids$[mid_getDefaultOperator_cb1232dd] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
              mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
              mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
              mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
              mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
              mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
              mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
              mids$[mid_init_504c192d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
              mids$[mid_setAnalyzeRangeTerms_bb0c767f] = env->getMethodID(cls, "setAnalyzeRangeTerms", "(Z)V");
              mids$[mid_setAutoGeneratePhraseQueries_bb0c767f] = env->getMethodID(cls, "setAutoGeneratePhraseQueries", "(Z)V");
              mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDateResolution_04dea022] = env->getMethodID(cls, "setDateResolution", "(Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDefaultOperator_67ef4614] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;)V");
              mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
              mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
              mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
              mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
              mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
              mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
              mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_addClause_fea8e09e] = env->getMethodID(cls, "addClause", "(Ljava/util/List;IILorg/apache/lucene/search/Query;)V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getBooleanQuery_bdd36d85] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFieldQuery_1840ef4b] = env->getMethodID(cls, "newFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_newBooleanClause_e4ef4efe] = env->getMethodID(cls, "newBooleanClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/BooleanClause;");
              mids$[mid_newPrefixQuery_c8bbbdc7] = env->getMethodID(cls, "newPrefixQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRegexpQuery_c8bbbdc7] = env->getMethodID(cls, "newRegexpQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_6ce03264] = env->getMethodID(cls, "newFuzzyQuery", "(Lorg/apache/lucene/index/Term;FI)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeMultitermTerm_e6160577] = env->getMethodID(cls, "analyzeMultitermTerm", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_newMatchAllDocsQuery_97e3851a] = env->getMethodID(cls, "newMatchAllDocsQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_newWildcardQuery_c8bbbdc7] = env->getMethodID(cls, "newWildcardQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "AND_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "OR_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void QueryParserBase::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          ::java::lang::String QueryParserBase::escape(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
          }

          jboolean QueryParserBase::getAllowLeadingWildcard() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
          }

          jboolean QueryParserBase::getAnalyzeRangeTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAnalyzeRangeTerms_54c6a16a]);
          }

          jboolean QueryParserBase::getAutoGeneratePhraseQueries() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAutoGeneratePhraseQueries_54c6a16a]);
          }

          ::org::apache::lucene::document::DateTools$Resolution QueryParserBase::getDateResolution(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_65edc44f], a0.this$));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser$Operator QueryParserBase::getDefaultOperator() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_cb1232dd]));
          }

          ::java::lang::String QueryParserBase::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jfloat QueryParserBase::getFuzzyMinSim() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
          }

          jint QueryParserBase::getFuzzyPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
          }

          ::java::util::Locale QueryParserBase::getLocale() const
          {
            return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
          }

          jboolean QueryParserBase::getLowercaseExpandedTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
          }

          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod QueryParserBase::getMultiTermRewriteMethod() const
          {
            return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
          }

          jint QueryParserBase::getPhraseSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
          }

          ::java::util::TimeZone QueryParserBase::getTimeZone() const
          {
            return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
          }

          void QueryParserBase::init(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_init_504c192d], a0.this$, a1.this$, a2.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void QueryParserBase::setAllowLeadingWildcard(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
          }

          void QueryParserBase::setAnalyzeRangeTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzeRangeTerms_bb0c767f], a0);
          }

          void QueryParserBase::setAutoGeneratePhraseQueries(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAutoGeneratePhraseQueries_bb0c767f], a0);
          }

          void QueryParserBase::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
          }

          void QueryParserBase::setDateResolution(const ::java::lang::String & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_04dea022], a0.this$, a1.this$);
          }

          void QueryParserBase::setDefaultOperator(const ::org::apache::lucene::queryparser::classic::QueryParser$Operator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_67ef4614], a0.this$);
          }

          void QueryParserBase::setFuzzyMinSim(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
          }

          void QueryParserBase::setFuzzyPrefixLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
          }

          void QueryParserBase::setLocale(const ::java::util::Locale & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
          }

          void QueryParserBase::setLowercaseExpandedTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
          }

          void QueryParserBase::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
          }

          void QueryParserBase::setPhraseSlop(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
          }

          void QueryParserBase::setTimeZone(const ::java::util::TimeZone & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data);
          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryParserBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParserBase, allowLeadingWildcard),
            DECLARE_GETSET_FIELD(t_QueryParserBase, analyzeRangeTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, autoGeneratePhraseQueries),
            DECLARE_SET_FIELD(t_QueryParserBase, dateResolution),
            DECLARE_GETSET_FIELD(t_QueryParserBase, defaultOperator),
            DECLARE_GET_FIELD(t_QueryParserBase, field),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyMinSim),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyPrefixLength),
            DECLARE_GETSET_FIELD(t_QueryParserBase, locale),
            DECLARE_GETSET_FIELD(t_QueryParserBase, lowercaseExpandedTerms),
            DECLARE_GETSET_FIELD(t_QueryParserBase, multiTermRewriteMethod),
            DECLARE_GETSET_FIELD(t_QueryParserBase, phraseSlop),
            DECLARE_GETSET_FIELD(t_QueryParserBase, timeZone),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserBase__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, ReInit, METH_O),
            DECLARE_METHOD(t_QueryParserBase, TopLevelQuery, METH_O),
            DECLARE_METHOD(t_QueryParserBase, escape, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, getAllowLeadingWildcard, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAnalyzeRangeTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAutoGeneratePhraseQueries, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getDateResolution, METH_O),
            DECLARE_METHOD(t_QueryParserBase, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getField, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyMinSim, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLocale, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLowercaseExpandedTerms, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getMultiTermRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getPhraseSlop, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getTimeZone, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, init, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, parse, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAllowLeadingWildcard, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAnalyzeRangeTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAutoGeneratePhraseQueries, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setDateResolution, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, setDefaultOperator, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyMinSim, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyPrefixLength, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLocale, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLowercaseExpandedTerms, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setMultiTermRewriteMethod, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setPhraseSlop, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setTimeZone, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase, t_QueryParserBase, ::org::apache::lucene::util::QueryBuilder, QueryParserBase, abstract_init, 0, 0, t_QueryParserBase__fields_, 0, 0);

          void t_QueryParserBase::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase), module, "QueryParserBase", 0);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "MethodRemovedUseAnother", make_descriptor(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother)));
          }

          void t_QueryParserBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "class_", make_descriptor(QueryParserBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "AND_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::AND_OPERATOR)));
            PyDict_SetItemString(PY_TYPE(QueryParserBase).tp_dict, "OR_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::OR_OPERATOR)));
          }

          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase::wrap_Object(QueryParserBase(((t_QueryParserBase *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.ReInit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParserBase::escape(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "escape", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAnalyzeRangeTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDateResolution(a0));
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDateResolution", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self)
          {
            ::java::util::Locale result((jobject) NULL);
            OBJ_CALL(result = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getLowercaseExpandedTerms(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self)
          {
            ::java::util::TimeZone result((jobject) NULL);
            OBJ_CALL(result = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              OBJ_CALL(self->object.init(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAnalyzeRangeTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAnalyzeRangeTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzeRangeTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAutoGeneratePhraseQueries(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAutoGeneratePhraseQueries", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "sK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setFuzzyMinSim(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::Locale a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setLocale(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseSlop(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::TimeZone a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTimeZone(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowLeadingWildcard(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__analyzeRangeTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAnalyzeRangeTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__analyzeRangeTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAnalyzeRangeTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzeRangeTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAutoGeneratePhraseQueries(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "autoGeneratePhraseQueries", arg);
            return -1;
          }

          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
              {
                INT_CALL(self->object.setDateResolution(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(value);
          }
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) value);
          }
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setFuzzyMinSim(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFuzzyPrefixLength());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFuzzyPrefixLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data)
          {
            ::java::util::Locale value((jobject) NULL);
            OBJ_CALL(value = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(value);
          }
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Locale value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
              {
                INT_CALL(self->object.setLocale(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "locale", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__lowercaseExpandedTerms(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__lowercaseExpandedTerms(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowercaseExpandedTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
          }
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setMultiTermRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseSlop());
            return PyInt_FromLong((long) value);
          }
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseSlop(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data)
          {
            ::java::util::TimeZone value((jobject) NULL);
            OBJ_CALL(value = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(value);
          }
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::TimeZone value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
              {
                INT_CALL(self->object.setTimeZone(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelCompositeReader.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelCompositeReader::class$ = NULL;
        jmethodID *ParallelCompositeReader::mids$ = NULL;
        bool ParallelCompositeReader::live$ = false;

        jclass ParallelCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0cab4ef6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_24b17b53] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_9dc0978b] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelCompositeReader::ParallelCompositeReader(const JArray< ::org::apache::lucene::index::CompositeReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_0cab4ef6, a0.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_24b17b53, a0, a1.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1, const JArray< ::org::apache::lucene::index::CompositeReader > & a2) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_9dc0978b, a0, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args);
        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data);
        static PyGetSetDef t_ParallelCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelCompositeReader__methods_[] = {
          DECLARE_METHOD(t_ParallelCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelCompositeReader, t_ParallelCompositeReader, ::org::apache::lucene::index::BaseCompositeReader, ParallelCompositeReader, t_ParallelCompositeReader_init_, 0, 0, t_ParallelCompositeReader__fields_, 0, 0);
        PyObject *t_ParallelCompositeReader::wrap_Object(const ParallelCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ParallelCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ParallelCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelCompositeReader), module, "ParallelCompositeReader", 0);
        }

        void t_ParallelCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "class_", make_descriptor(ParallelCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelCompositeReader::initializeClass, 1)))
            return NULL;
          return t_ParallelCompositeReader::wrap_Object(ParallelCompositeReader(((t_ParallelCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::CompositeReader > a0((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelCompositeReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::CompositeReader > a2((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::CompositeReader::initializeClass, ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilter::class$ = NULL;
          jmethodID *GalicianMinimalStemFilter::mids$ = NULL;
          bool GalicianMinimalStemFilter::live$ = false;

          jclass GalicianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilter::GalicianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilter, t_GalicianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianMinimalStemFilter, t_GalicianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilter), module, "GalicianMinimalStemFilter", 0);
          }

          void t_GalicianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilter::wrap_Object(GalicianMinimalStemFilter(((t_GalicianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMInputStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMInputStream::class$ = NULL;
        jmethodID *RAMInputStream::mids$ = NULL;
        bool RAMInputStream::live$ = false;

        jclass RAMInputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMInputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4d2db83b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMInputStream::RAMInputStream(const ::java::lang::String & a0, const ::org::apache::lucene::store::RAMFile & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_4d2db83b, a0.this$, a1.this$)) {}

        void RAMInputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong RAMInputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMInputStream::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte RAMInputStream::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void RAMInputStream::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMInputStream::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        ::org::apache::lucene::store::IndexInput RAMInputStream::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data);
        static PyGetSetDef t_RAMInputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMInputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMInputStream__methods_[] = {
          DECLARE_METHOD(t_RAMInputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, length, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, seek, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMInputStream, t_RAMInputStream, ::org::apache::lucene::store::IndexInput, RAMInputStream, t_RAMInputStream_init_, 0, 0, t_RAMInputStream__fields_, 0, 0);

        void t_RAMInputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMInputStream), module, "RAMInputStream", 0);
        }

        void t_RAMInputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "class_", make_descriptor(RAMInputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMInputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMInputStream::initializeClass, 1)))
            return NULL;
          return t_RAMInputStream::wrap_Object(RAMInputStream(((t_RAMInputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMInputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::RAMFile a1((jobject) NULL);
          RAMInputStream object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RAMInputStream(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttributeImpl::class$ = NULL;
          jmethodID *FlagsAttributeImpl::mids$ = NULL;
          bool FlagsAttributeImpl::live$ = false;

          jclass FlagsAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlagsAttributeImpl::FlagsAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FlagsAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void FlagsAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean FlagsAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FlagsAttributeImpl::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          jint FlagsAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FlagsAttributeImpl::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self);
          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data);
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttributeImpl, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_FlagsAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttributeImpl, t_FlagsAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FlagsAttributeImpl, t_FlagsAttributeImpl_init_, 0, 0, t_FlagsAttributeImpl__fields_, 0, 0);

          void t_FlagsAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttributeImpl), module, "FlagsAttributeImpl", 0);
          }

          void t_FlagsAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "class_", make_descriptor(FlagsAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_FlagsAttributeImpl::wrap_Object(FlagsAttributeImpl(((t_FlagsAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            FlagsAttributeImpl object((jobject) NULL);

            INT_CALL(object = FlagsAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter$IndexReaderWarmer::class$ = NULL;
        jmethodID *IndexWriter$IndexReaderWarmer::mids$ = NULL;
        bool IndexWriter$IndexReaderWarmer::live$ = false;

        jclass IndexWriter$IndexReaderWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter$IndexReaderWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexWriter$IndexReaderWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg);

        static PyMethodDef t_IndexWriter$IndexReaderWarmer__methods_[] = {
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, warm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter$IndexReaderWarmer, t_IndexWriter$IndexReaderWarmer, ::java::lang::Object, IndexWriter$IndexReaderWarmer, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexWriter$IndexReaderWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter$IndexReaderWarmer), module, "IndexWriter$IndexReaderWarmer", 0);
        }

        void t_IndexWriter$IndexReaderWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "class_", make_descriptor(IndexWriter$IndexReaderWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter$IndexReaderWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 1)))
            return NULL;
          return t_IndexWriter$IndexReaderWarmer::wrap_Object(IndexWriter$IndexReaderWarmer(((t_IndexWriter$IndexReaderWarmer *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "warm", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilter::class$ = NULL;
          jmethodID *ShingleFilter::mids$ = NULL;
          bool ShingleFilter::live$ = false;
          ::java::lang::String *ShingleFilter::DEFAULT_FILLER_TOKEN = NULL;
          jint ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE = (jint) 0;
          jint ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE = (jint) 0;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_SEPARATOR = NULL;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_TYPE = NULL;

          jclass ShingleFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setFillerToken_5fdc3f48] = env->getMethodID(cls, "setFillerToken", "(Ljava/lang/String;)V");
              mids$[mid_setMaxShingleSize_39c7bd3c] = env->getMethodID(cls, "setMaxShingleSize", "(I)V");
              mids$[mid_setMinShingleSize_39c7bd3c] = env->getMethodID(cls, "setMinShingleSize", "(I)V");
              mids$[mid_setOutputUnigrams_bb0c767f] = env->getMethodID(cls, "setOutputUnigrams", "(Z)V");
              mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f] = env->getMethodID(cls, "setOutputUnigramsIfNoShingles", "(Z)V");
              mids$[mid_setTokenSeparator_5fdc3f48] = env->getMethodID(cls, "setTokenSeparator", "(Ljava/lang/String;)V");
              mids$[mid_setTokenType_5fdc3f48] = env->getMethodID(cls, "setTokenType", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FILLER_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FILLER_TOKEN", "Ljava/lang/String;"));
              DEFAULT_MAX_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SHINGLE_SIZE");
              DEFAULT_MIN_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SHINGLE_SIZE");
              DEFAULT_TOKEN_SEPARATOR = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_SEPARATOR", "Ljava/lang/String;"));
              DEFAULT_TOKEN_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          void ShingleFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ShingleFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ShingleFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ShingleFilter::setFillerToken(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFillerToken_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setMaxShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setMinShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setOutputUnigrams(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigrams_bb0c767f], a0);
          }

          void ShingleFilter::setOutputUnigramsIfNoShingles(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f], a0);
          }

          void ShingleFilter::setTokenSeparator(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenSeparator_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setTokenType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenType_5fdc3f48], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg);
          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_ShingleFilter__fields_[] = {
            DECLARE_SET_FIELD(t_ShingleFilter, fillerToken),
            DECLARE_SET_FIELD(t_ShingleFilter, maxShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, minShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigrams),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigramsIfNoShingles),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenSeparator),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleFilter__methods_[] = {
            DECLARE_METHOD(t_ShingleFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, setFillerToken, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMaxShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMinShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigrams, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigramsIfNoShingles, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenSeparator, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenType, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilter, t_ShingleFilter, ::org::apache::lucene::analysis::TokenFilter, ShingleFilter, t_ShingleFilter_init_, 0, 0, t_ShingleFilter__fields_, 0, 0);

          void t_ShingleFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilter), module, "ShingleFilter", 0);
          }

          void t_ShingleFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "class_", make_descriptor(ShingleFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ShingleFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_FILLER_TOKEN", make_descriptor(j2p(*ShingleFilter::DEFAULT_FILLER_TOKEN)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MAX_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MIN_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_SEPARATOR", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_SEPARATOR)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_TYPE", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_TYPE)));
          }

          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilter::initializeClass, 1)))
              return NULL;
            return t_ShingleFilter::wrap_Object(ShingleFilter(((t_ShingleFilter *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFillerToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFillerToken", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigrams(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigrams", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigramsIfNoShingles(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigramsIfNoShingles", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenSeparator", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenType", arg);
            return NULL;
          }

          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFillerToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillerToken", arg);
            return -1;
          }

          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigrams(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigrams", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigramsIfNoShingles(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigramsIfNoShingles", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenSeparator", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenType(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenType", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker::class$ = NULL;
          jmethodID *WordBreakSpellChecker::mids$ = NULL;
          bool WordBreakSpellChecker::live$ = false;
          ::org::apache::lucene::index::Term *WordBreakSpellChecker::SEPARATOR_TERM = NULL;

          jclass WordBreakSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getMaxChanges_54c6a179] = env->getMethodID(cls, "getMaxChanges", "()I");
              mids$[mid_getMaxCombineWordLength_54c6a179] = env->getMethodID(cls, "getMaxCombineWordLength", "()I");
              mids$[mid_getMaxEvaluations_54c6a179] = env->getMethodID(cls, "getMaxEvaluations", "()I");
              mids$[mid_getMinBreakWordLength_54c6a179] = env->getMethodID(cls, "getMinBreakWordLength", "()I");
              mids$[mid_getMinSuggestionFrequency_54c6a179] = env->getMethodID(cls, "getMinSuggestionFrequency", "()I");
              mids$[mid_setMaxChanges_39c7bd3c] = env->getMethodID(cls, "setMaxChanges", "(I)V");
              mids$[mid_setMaxCombineWordLength_39c7bd3c] = env->getMethodID(cls, "setMaxCombineWordLength", "(I)V");
              mids$[mid_setMaxEvaluations_39c7bd3c] = env->getMethodID(cls, "setMaxEvaluations", "(I)V");
              mids$[mid_setMinBreakWordLength_39c7bd3c] = env->getMethodID(cls, "setMinBreakWordLength", "(I)V");
              mids$[mid_setMinSuggestionFrequency_39c7bd3c] = env->getMethodID(cls, "setMinSuggestionFrequency", "(I)V");
              mids$[mid_suggestWordBreaks_50deeffc] = env->getMethodID(cls, "suggestWordBreaks", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;)[[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestWordCombinations_6d229e7f] = env->getMethodID(cls, "suggestWordCombinations", "([Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/CombineSuggestion;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SEPARATOR_TERM = new ::org::apache::lucene::index::Term(env->getStaticObjectField(cls, "SEPARATOR_TERM", "Lorg/apache/lucene/index/Term;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker::WordBreakSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WordBreakSpellChecker::getMaxChanges() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxChanges_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxCombineWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxCombineWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxEvaluations() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEvaluations_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinBreakWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinBreakWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinSuggestionFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinSuggestionFrequency_54c6a179]);
          }

          void WordBreakSpellChecker::setMaxChanges(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxChanges_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxCombineWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxCombineWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxEvaluations(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEvaluations_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinBreakWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinBreakWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinSuggestionFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinSuggestionFrequency_39c7bd3c], a0);
          }

          JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > WordBreakSpellChecker::suggestWordBreaks(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, const ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod & a4) const
          {
            return JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > >(env->callObjectMethod(this$, mids$[mid_suggestWordBreaks_50deeffc], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::org::apache::lucene::search::spell::CombineSuggestion > WordBreakSpellChecker::suggestWordCombinations(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::CombineSuggestion >(env->callObjectMethod(this$, mids$[mid_suggestWordCombinations_6d229e7f], a0.this$, a1, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_WordBreakSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxChanges),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxCombineWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxEvaluations),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minBreakWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minSuggestionFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxChanges, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxCombineWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxEvaluations, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinBreakWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinSuggestionFrequency, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxChanges, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxCombineWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxEvaluations, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinBreakWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinSuggestionFrequency, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordBreaks, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordCombinations, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker, t_WordBreakSpellChecker, ::java::lang::Object, WordBreakSpellChecker, t_WordBreakSpellChecker_init_, 0, 0, t_WordBreakSpellChecker__fields_, 0, 0);

          void t_WordBreakSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker), module, "WordBreakSpellChecker", 0);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "BreakSuggestionSortMethod", make_descriptor(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod)));
          }

          void t_WordBreakSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "class_", make_descriptor(WordBreakSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "SEPARATOR_TERM", make_descriptor(::org::apache::lucene::index::t_Term::wrap_Object(*WordBreakSpellChecker::SEPARATOR_TERM)));
          }

          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker::wrap_Object(WordBreakSpellChecker(((t_WordBreakSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            WordBreakSpellChecker object((jobject) NULL);

            INT_CALL(object = WordBreakSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxChanges());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxChanges(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxChanges", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxCombineWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxCombineWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEvaluations(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEvaluations", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinBreakWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinBreakWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinSuggestionFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinSuggestionFrequency", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod a4((jobject) NULL);
            PyTypeObject **p4;
            JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > result((jobject) NULL);

            if (!parseArgs(args, "kIkKK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4, &p4, ::org::apache::lucene::search::spell::t_WordBreakSpellChecker$BreakSuggestionSortMethod::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordBreaks(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(NULL);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordBreaks", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            JArray< ::org::apache::lucene::search::spell::CombineSuggestion > result((jobject) NULL);

            if (!parseArgs(args, "[kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordCombinations(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_CombineSuggestion::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordCombinations", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxChanges());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxChanges(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxChanges", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxCombineWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxCombineWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEvaluations(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEvaluations", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinBreakWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minBreakWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinSuggestionFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minSuggestionFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsFormat.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionPostingsFormat::class$ = NULL;
          jmethodID *IDVersionPostingsFormat::mids$ = NULL;
          bool IDVersionPostingsFormat::live$ = false;
          jlong IDVersionPostingsFormat::MAX_VERSION = (jlong) 0;
          jlong IDVersionPostingsFormat::MIN_VERSION = (jlong) 0;

          jclass IDVersionPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_bytesToLong_7bc03dd8] = env->getStaticMethodID(cls, "bytesToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_longToBytes_57875143] = env->getStaticMethodID(cls, "longToBytes", "(JLorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_VERSION = env->getStaticLongField(cls, "MAX_VERSION");
              MIN_VERSION = env->getStaticLongField(cls, "MIN_VERSION");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IDVersionPostingsFormat::IDVersionPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          IDVersionPostingsFormat::IDVersionPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jlong IDVersionPostingsFormat::bytesToLong(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_bytesToLong_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::codecs::FieldsConsumer IDVersionPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer IDVersionPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          void IDVersionPostingsFormat::longToBytes(jlong a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_longToBytes_57875143], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_IDVersionPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_IDVersionPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, bytesToLong, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, longToBytes, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionPostingsFormat, t_IDVersionPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, IDVersionPostingsFormat, t_IDVersionPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_IDVersionPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionPostingsFormat), module, "IDVersionPostingsFormat", 0);
          }

          void t_IDVersionPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "class_", make_descriptor(IDVersionPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_IDVersionPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IDVersionPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MAX_VERSION", make_descriptor(IDVersionPostingsFormat::MAX_VERSION));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MIN_VERSION", make_descriptor(IDVersionPostingsFormat::MIN_VERSION));
          }

          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_IDVersionPostingsFormat::wrap_Object(IDVersionPostingsFormat(((t_IDVersionPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IDVersionPostingsFormat object((jobject) NULL);

                INT_CALL(object = IDVersionPostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                IDVersionPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = IDVersionPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::bytesToLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "bytesToLong", arg);
            return NULL;
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

            if (!parseArgs(args, "Jk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::longToBytes(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "longToBytes", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermStatistics::class$ = NULL;
        jmethodID *TermStatistics::mids$ = NULL;
        bool TermStatistics::live$ = false;

        jclass TermStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b78af156] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;JJ)V");
            mids$[mid_docFreq_54c6a17a] = env->getMethodID(cls, "docFreq", "()J");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStatistics::TermStatistics(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b78af156, a0.this$, a1, a2)) {}

        jlong TermStatistics::docFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_docFreq_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef TermStatistics::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong TermStatistics::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self);
        static PyObject *t_TermStatistics_term(t_TermStatistics *self);
        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self);

        static PyMethodDef t_TermStatistics__methods_[] = {
          DECLARE_METHOD(t_TermStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, term, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStatistics, t_TermStatistics, ::java::lang::Object, TermStatistics, t_TermStatistics_init_, 0, 0, 0, 0, 0);

        void t_TermStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStatistics), module, "TermStatistics", 0);
        }

        void t_TermStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "class_", make_descriptor(TermStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "wrapfn_", make_descriptor(t_TermStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStatistics::initializeClass, 1)))
            return NULL;
          return t_TermStatistics::wrap_Object(TermStatistics(((t_TermStatistics *) arg)->object.this$));
        }
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jlong a2;
          TermStatistics object((jobject) NULL);

          if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TermStatistics(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermStatistics_term(t_TermStatistics *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *TermRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *TermRangeQueryNodeProcessor::mids$ = NULL;
              bool TermRangeQueryNodeProcessor::live$ = false;

              jclass TermRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeProcessor::TermRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_TermRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeProcessor), module, "TermRangeQueryNodeProcessor", 0);
              }

              void t_TermRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(TermRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeProcessor::wrap_Object(TermRangeQueryNodeProcessor(((t_TermRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Map.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNodeImpl::class$ = NULL;
              jmethodID *QueryNodeImpl::mids$ = NULL;
              bool QueryNodeImpl::live$ = false;
              ::java::lang::String *QueryNodeImpl::PLAINTEXT_FIELD_NAME = NULL;

              jclass QueryNodeImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_clone_b387c5e6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");
                  mids$[mid_allocate_54c6a166] = env->getMethodID(cls, "allocate", "()V");
                  mids$[mid_setLeaf_bb0c767f] = env->getMethodID(cls, "setLeaf", "(Z)V");
                  mids$[mid_isRoot_54c6a16a] = env->getMethodID(cls, "isRoot", "()Z");
                  mids$[mid_isDefaultField_a8afc646] = env->getMethodID(cls, "isDefaultField", "(Ljava/lang/CharSequence;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  PLAINTEXT_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PLAINTEXT_FIELD_NAME", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeImpl::QueryNodeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryNodeImpl::add(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNodeImpl::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::clone() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_clone_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNodeImpl::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNodeImpl::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::getParent() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNodeImpl::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNodeImpl::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNodeImpl::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNodeImpl::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNodeImpl::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNodeImpl::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::String QueryNodeImpl::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNodeImpl::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data);
              static PyGetSetDef t_QueryNodeImpl__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeImpl, children),
                DECLARE_GET_FIELD(t_QueryNodeImpl, leaf),
                DECLARE_GET_FIELD(t_QueryNodeImpl, parent),
                DECLARE_GET_FIELD(t_QueryNodeImpl, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, clone, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, set, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeImpl, t_QueryNodeImpl, ::java::lang::Object, QueryNodeImpl, t_QueryNodeImpl_init_, 0, 0, t_QueryNodeImpl__fields_, 0, 0);

              void t_QueryNodeImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeImpl), module, "QueryNodeImpl", 0);
              }

              void t_QueryNodeImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "class_", make_descriptor(QueryNodeImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryNodeImpl::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "PLAINTEXT_FIELD_NAME", make_descriptor(j2p(*QueryNodeImpl::PLAINTEXT_FIELD_NAME)));
              }

              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeImpl::wrap_Object(QueryNodeImpl(((t_QueryNodeImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds)
              {
                QueryNodeImpl object((jobject) NULL);

                INT_CALL(object = QueryNodeImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNodeImpl), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilterFactory::class$ = NULL;
          jmethodID *FinnishLightStemFilterFactory::mids$ = NULL;
          bool FinnishLightStemFilterFactory::live$ = false;

          jclass FinnishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilterFactory::FinnishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FinnishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilterFactory), module, "FinnishLightStemFilterFactory", 0);
          }

          void t_FinnishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "class_", make_descriptor(FinnishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilterFactory::wrap_Object(FinnishLightStemFilterFactory(((t_FinnishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FinnishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FinnishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap::class$ = NULL;
          jmethodID *NormalizeCharMap::mids$ = NULL;
          bool NormalizeCharMap::live$ = false;

          jclass NormalizeCharMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_NormalizeCharMap__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap, t_NormalizeCharMap, ::java::lang::Object, NormalizeCharMap, abstract_init, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap), module, "NormalizeCharMap", 0);
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(NormalizeCharMap$Builder)));
          }

          void t_NormalizeCharMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "class_", make_descriptor(NormalizeCharMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap::wrap_Object(NormalizeCharMap(((t_NormalizeCharMap *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *PhraseQueryNodeBuilder::mids$ = NULL;
              bool PhraseQueryNodeBuilder::live$ = false;

              jclass PhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_20a87818] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseQueryNodeBuilder::PhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PhraseQuery PhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PhraseQuery(env->callObjectMethod(this$, mids$[mid_build_20a87818], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder, ::java::lang::Object, PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseQueryNodeBuilder), module, "PhraseQueryNodeBuilder", 0);
              }

              void t_PhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(PhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PhraseQueryNodeBuilder::wrap_Object(PhraseQueryNodeBuilder(((t_PhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermStats::class$ = NULL;
        jmethodID *TermStats::mids$ = NULL;
        jfieldID *TermStats::fids$ = NULL;
        bool TermStats::live$ = false;

        jclass TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStats::TermStats(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jint TermStats::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        jlong TermStats::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data);
        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data);

        static PyGetSetDef t_TermStats__fields_[] = {
          DECLARE_GET_FIELD(t_TermStats, docFreq),
          DECLARE_GET_FIELD(t_TermStats, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermStats__methods_[] = {
          DECLARE_METHOD(t_TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermStats, t_TermStats, ::java::lang::Object, TermStats, t_TermStats_init_, 0, 0, t_TermStats__fields_, 0, 0);

        void t_TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStats), module, "TermStats", 0);
        }

        void t_TermStats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "class_", make_descriptor(TermStats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "wrapfn_", make_descriptor(t_TermStats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermStats).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStats::initializeClass, 1)))
            return NULL;
          return t_TermStats::wrap_Object(TermStats(((t_TermStats *) arg)->object.this$));
        }
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          TermStats object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = TermStats(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BaseCompositeReader::class$ = NULL;
        jmethodID *BaseCompositeReader::mids$ = NULL;
        bool BaseCompositeReader::live$ = false;

        jclass BaseCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BaseCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_readerIndex_39c7bd23] = env->getMethodID(cls, "readerIndex", "(I)I");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");
            mids$[mid_readerBase_39c7bd23] = env->getMethodID(cls, "readerBase", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BaseCompositeReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        void BaseCompositeReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jint BaseCompositeReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jlong BaseCompositeReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong BaseCompositeReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Fields BaseCompositeReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint BaseCompositeReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint BaseCompositeReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong BaseCompositeReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data);
        static PyGetSetDef t_BaseCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_BaseCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseCompositeReader__methods_[] = {
          DECLARE_METHOD(t_BaseCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, document, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseCompositeReader, t_BaseCompositeReader, ::org::apache::lucene::index::CompositeReader, BaseCompositeReader, abstract_init, 0, 0, t_BaseCompositeReader__fields_, 0, 0);
        PyObject *t_BaseCompositeReader::wrap_Object(const BaseCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BaseCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BaseCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseCompositeReader), module, "BaseCompositeReader", 0);
        }

        void t_BaseCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "class_", make_descriptor(BaseCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_BaseCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseCompositeReader::initializeClass, 1)))
            return NULL;
          return t_BaseCompositeReader::wrap_Object(BaseCompositeReader(((t_BaseCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "totalTermFreq", args, 2);
        }
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *SlopQueryNodeBuilder::class$ = NULL;
              jmethodID *SlopQueryNodeBuilder::mids$ = NULL;
              bool SlopQueryNodeBuilder::live$ = false;

              jclass SlopQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNodeBuilder::SlopQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query SlopQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_SlopQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNodeBuilder, t_SlopQueryNodeBuilder, ::java::lang::Object, SlopQueryNodeBuilder, t_SlopQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_SlopQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNodeBuilder), module, "SlopQueryNodeBuilder", 0);
              }

              void t_SlopQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "class_", make_descriptor(SlopQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNodeBuilder::wrap_Object(SlopQueryNodeBuilder(((t_SlopQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                SlopQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = SlopQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLock.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLock::class$ = NULL;
        jmethodID *PythonLock::mids$ = NULL;
        bool PythonLock::live$ = false;

        jclass PythonLock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLock::PythonLock() : ::org::apache::lucene::store::Lock(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLock::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLock::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLock::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLock_finalize(t_PythonLock *self);
        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args);
        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data);
        static PyGetSetDef t_PythonLock__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLock, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLock__methods_[] = {
          DECLARE_METHOD(t_PythonLock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLock, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLock, t_PythonLock, ::org::apache::lucene::store::Lock, PythonLock, t_PythonLock_init_, 0, 0, t_PythonLock__fields_, 0, 0);

        void t_PythonLock::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLock), module, "PythonLock", 1);
        }

        void t_PythonLock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "class_", make_descriptor(PythonLock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "wrapfn_", make_descriptor(t_PythonLock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLock::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonLock_close0 },
            { "isLocked", "()Z", (void *) t_PythonLock_isLocked1 },
            { "obtain", "()Z", (void *) t_PythonLock_obtain2 },
            { "pythonDecRef", "()V", (void *) t_PythonLock_pythonDecRef3 },
            { "release", "()V", (void *) t_PythonLock_release4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLock::initializeClass, 1)))
            return NULL;
          return t_PythonLock::wrap_Object(PythonLock(((t_PythonLock *) arg)->object.this$));
        }
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds)
        {
          PythonLock object((jobject) NULL);

          INT_CALL(object = PythonLock());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLock_finalize(t_PythonLock *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isLocked", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isLocked", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "obtain", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("obtain", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "release", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce::class$ = NULL;
        jmethodID *SetOnce::mids$ = NULL;
        bool SetOnce::live$ = false;

        jclass SetOnce::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce::SetOnce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SetOnce::SetOnce(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        ::java::lang::Object SetOnce::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void SetOnce::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args);
        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce_get(t_SetOnce *self);
        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg);
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data);
        static PyGetSetDef t_SetOnce__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce__methods_[] = {
          DECLARE_METHOD(t_SetOnce, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, of_, METH_VARARGS),
          DECLARE_METHOD(t_SetOnce, get, METH_NOARGS),
          DECLARE_METHOD(t_SetOnce, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce, t_SetOnce, ::java::lang::Object, SetOnce, t_SetOnce_init_, 0, 0, t_SetOnce__fields_, 0, 0);
        PyObject *t_SetOnce::wrap_Object(const SetOnce& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce), module, "SetOnce", 0);
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "AlreadySetException", make_descriptor(&PY_TYPE(SetOnce$AlreadySetException)));
        }

        void t_SetOnce::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "class_", make_descriptor(SetOnce::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "wrapfn_", make_descriptor(t_SetOnce::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce::initializeClass, 1)))
            return NULL;
          return t_SetOnce::wrap_Object(SetOnce(((t_SetOnce *) arg)->object.this$));
        }
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SetOnce object((jobject) NULL);

              INT_CALL(object = SetOnce());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              SetOnce object((jobject) NULL);

              if (!parseArgs(args, "o", &a0))
              {
                INT_CALL(object = SetOnce(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SetOnce_get(t_SetOnce *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$DirectBytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$DirectBytesStartArray::mids$ = NULL;
        bool BytesRefHash$DirectBytesStartArray::live$ = false;

        jclass BytesRefHash$DirectBytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$DirectBytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$DirectBytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);

        static PyMethodDef t_BytesRefHash$DirectBytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, bytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, grow, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, init, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray, ::org::apache::lucene::util::BytesRefHash$BytesStartArray, BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$DirectBytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$DirectBytesStartArray), module, "BytesRefHash$DirectBytesStartArray", 0);
        }

        void t_BytesRefHash$DirectBytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$DirectBytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$DirectBytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$DirectBytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$DirectBytesStartArray::wrap_Object(BytesRefHash$DirectBytesStartArray(((t_BytesRefHash$DirectBytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bytesUsed());
            return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "bytesUsed", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clear());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.grow());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "grow", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.init());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "init", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *ReversePathHierarchyTokenizer::class$ = NULL;
          jmethodID *ReversePathHierarchyTokenizer::mids$ = NULL;
          bool ReversePathHierarchyTokenizer::live$ = false;
          jchar ReversePathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint ReversePathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass ReversePathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_e27d22ca] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CI)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_132ff91e] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICC)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_e27d22ca, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_132ff91e, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void ReversePathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ReversePathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReversePathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_ReversePathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ReversePathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ReversePathHierarchyTokenizer), module, "ReversePathHierarchyTokenizer", 0);
          }

          void t_ReversePathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "class_", make_descriptor(ReversePathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ReversePathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReversePathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(ReversePathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_ReversePathHierarchyTokenizer::wrap_Object(ReversePathHierarchyTokenizer(((t_ReversePathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jint a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICC", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TextableQueryNode::class$ = NULL;
              jmethodID *TextableQueryNode::mids$ = NULL;
              bool TextableQueryNode::live$ = false;

              jclass TextableQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence TextableQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void TextableQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self);
              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg);
              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data);
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TextableQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TextableQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TextableQueryNode__methods_[] = {
                DECLARE_METHOD(t_TextableQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_TextableQueryNode, setText, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TextableQueryNode, t_TextableQueryNode, ::java::lang::Object, TextableQueryNode, abstract_init, 0, 0, t_TextableQueryNode__fields_, 0, 0);

              void t_TextableQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TextableQueryNode), module, "TextableQueryNode", 0);
              }

              void t_TextableQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "class_", make_descriptor(TextableQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TextableQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TextableQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TextableQueryNode::wrap_Object(TextableQueryNode(((t_TextableQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TextableQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanFilterBuilder::class$ = NULL;
            jmethodID *BooleanFilterBuilder::mids$ = NULL;
            bool BooleanFilterBuilder::live$ = false;

            jclass BooleanFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_26bb3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanFilterBuilder::BooleanFilterBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_26bb3a92, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanFilterBuilder, t_BooleanFilterBuilder, ::java::lang::Object, BooleanFilterBuilder, t_BooleanFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanFilterBuilder), module, "BooleanFilterBuilder", 0);
            }

            void t_BooleanFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "class_", make_descriptor(BooleanFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanFilterBuilder::wrap_Object(BooleanFilterBuilder(((t_BooleanFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              BooleanFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSource::class$ = NULL;
          jmethodID *ValueSource::mids$ = NULL;
          bool ValueSource::live$ = false;

          jclass ValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSortField_6e3d2211] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_newContext_f71e04af] = env->getStaticMethodID(cls, "newContext", "(Lorg/apache/lucene/search/IndexSearcher;)Ljava/util/Map;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ValueSource::ValueSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void ValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
          }

          ::java::lang::String ValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean ValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::SortField ValueSource::getSortField(jboolean a0) const
          {
            return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_6e3d2211], a0));
          }

          ::org::apache::lucene::queries::function::FunctionValues ValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint ValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Map ValueSource::newContext(const ::org::apache::lucene::search::IndexSearcher & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_newContext_f71e04af], a0.this$));
          }

          ::java::lang::String ValueSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_description(t_ValueSource *self);
          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg);
          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args);

          static PyMethodDef t_ValueSource__methods_[] = {
            DECLARE_METHOD(t_ValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, description, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, getSortField, METH_O),
            DECLARE_METHOD(t_ValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, newContext, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSource, t_ValueSource, ::java::lang::Object, ValueSource, t_ValueSource_init_, 0, 0, 0, 0, 0);

          void t_ValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSource), module, "ValueSource", 0);
          }

          void t_ValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "class_", make_descriptor(ValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "wrapfn_", make_descriptor(t_ValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSource::initializeClass, 1)))
              return NULL;
            return t_ValueSource::wrap_Object(ValueSource(((t_ValueSource *) arg)->object.this$));
          }
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds)
          {
            ValueSource object((jobject) NULL);

            INT_CALL(object = ValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(self->object.createWeight(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "createWeight", args);
            return NULL;
          }

          static PyObject *t_ValueSource_description(t_ValueSource *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.description());
            return j2p(result);
          }

          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg)
          {
            jboolean a0;
            ::org::apache::lucene::search::SortField result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.getSortField(a0));
              return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getValues", args);
            return NULL;
          }

          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::ValueSource::newContext(a0));
              return ::java::util::t_Map::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newContext", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Comparator.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRef::class$ = NULL;
        jmethodID *BytesRef::mids$ = NULL;
        jfieldID *BytesRef::fids$ = NULL;
        bool BytesRef::live$ = false;
        JArray< jbyte > *BytesRef::EMPTY_BYTES = NULL;

        jclass BytesRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytesEquals_7bc03dc8] = env->getMethodID(cls, "bytesEquals", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_clone_4ae19461] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7bc03ddb] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copyBytes_7bc03dc4] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyChars_a8afc64a] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;)V");
            mids$[mid_deepCopyOf_21e43cb7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUTF16Comparator", "()Ljava/util/Comparator;");
            mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUnicodeComparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_utf8ToString_14c7b5c5] = env->getMethodID(cls, "utf8ToString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_BYTES = new JArray< jbyte >(env->getStaticObjectField(cls, "EMPTY_BYTES", "[B"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRef::BytesRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRef::BytesRef(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

        BytesRef::BytesRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        void BytesRef::append(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jboolean BytesRef::bytesEquals(const BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_bytesEquals_7bc03dc8], a0.this$);
        }

        BytesRef BytesRef::clone() const
        {
          return BytesRef(env->callObjectMethod(this$, mids$[mid_clone_4ae19461]));
        }

        jint BytesRef::compareTo(const BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7bc03ddb], a0.this$);
        }

        void BytesRef::copyBytes(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_7bc03dc4], a0.this$);
        }

        void BytesRef::copyChars(const ::java::lang::CharSequence & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_a8afc64a], a0.this$);
        }

        BytesRef BytesRef::deepCopyOf(const BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BytesRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_21e43cb7], a0.this$));
        }

        jboolean BytesRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUTF16Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc]));
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUnicodeComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc]));
        }

        void BytesRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint BytesRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BytesRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String BytesRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String BytesRef::utf8ToString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_utf8ToString_14c7b5c5]));
        }

        JArray< jbyte > BytesRef::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void BytesRef::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint BytesRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void BytesRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint BytesRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void BytesRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_clone(t_BytesRef *self);
        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type);
        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type);
        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_isValid(t_BytesRef *self);
        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self);
        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data);
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data);
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data);
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data);

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data);
        static PyGetSetDef t_BytesRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_BytesRef, bytes),
          DECLARE_GETSET_FIELD(t_BytesRef, length),
          DECLARE_GETSET_FIELD(t_BytesRef, offset),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUTF16Comparator),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUnicodeComparator),
          DECLARE_GET_FIELD(t_BytesRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRef__methods_[] = {
          DECLARE_METHOD(t_BytesRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, append, METH_O),
          DECLARE_METHOD(t_BytesRef, bytesEquals, METH_O),
          DECLARE_METHOD(t_BytesRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, compareTo, METH_O),
          DECLARE_METHOD(t_BytesRef, copyBytes, METH_O),
          DECLARE_METHOD(t_BytesRef, copyChars, METH_O),
          DECLARE_METHOD(t_BytesRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUTF16Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUnicodeComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, grow, METH_O),
          DECLARE_METHOD(t_BytesRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, toString, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, utf8ToString, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRef, t_BytesRef, ::java::lang::Object, BytesRef, t_BytesRef_init_, 0, 0, t_BytesRef__fields_, 0, 0);

        void t_BytesRef::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRef), module, "BytesRef", 0);
        }

        void t_BytesRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "class_", make_descriptor(BytesRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "wrapfn_", make_descriptor(t_BytesRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "EMPTY_BYTES", make_descriptor(BytesRef::EMPTY_BYTES->wrap()));
        }

        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRef::initializeClass, 1)))
            return NULL;
          return t_BytesRef::wrap_Object(BytesRef(((t_BytesRef *) arg)->object.this$));
        }
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRef object((jobject) NULL);

              INT_CALL(object = BytesRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bytesEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bytesEquals", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_clone(t_BytesRef *self)
        {
          BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg)
        {
          ::java::lang::CharSequence a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(self->object.copyChars(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          BytesRef result((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::deepCopyOf(a0));
            return t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRef_isValid(t_BytesRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.utf8ToString());
          return j2p(result);
        }

        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerInterface::class$ = NULL;
          jmethodID *StandardTokenizerInterface::mids$ = NULL;
          bool StandardTokenizerInterface::live$ = false;
          jint StandardTokenizerInterface::YYEOF = (jint) 0;

          jclass StandardTokenizerInterface::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerInterface");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              YYEOF = env->getStaticIntField(cls, "YYEOF");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StandardTokenizerInterface::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerInterface::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          jint StandardTokenizerInterface::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jint StandardTokenizerInterface::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerInterface::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data);
          static PyGetSetDef t_StandardTokenizerInterface__fields_[] = {
            DECLARE_GET_FIELD(t_StandardTokenizerInterface, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerInterface__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerInterface, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerInterface, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yyreset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerInterface, t_StandardTokenizerInterface, ::java::lang::Object, StandardTokenizerInterface, abstract_init, 0, 0, t_StandardTokenizerInterface__fields_, 0, 0);

          void t_StandardTokenizerInterface::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerInterface), module, "StandardTokenizerInterface", 0);
          }

          void t_StandardTokenizerInterface::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "class_", make_descriptor(StandardTokenizerInterface::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerInterface::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerInterface::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "YYEOF", make_descriptor(StandardTokenizerInterface::YYEOF));
          }

          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerInterface::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerInterface::wrap_Object(StandardTokenizerInterface(((t_StandardTokenizerInterface *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerInterface::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH2.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH2::class$ = NULL;
          jmethodID *NormalizationH2::mids$ = NULL;
          bool NormalizationH2::live$ = false;

          jclass NormalizationH2::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH2");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH2::NormalizationH2() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH2::NormalizationH2(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH2::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH2::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH2::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self);
          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data);
          static PyGetSetDef t_NormalizationH2__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH2, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH2__methods_[] = {
            DECLARE_METHOD(t_NormalizationH2, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH2, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH2, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH2, t_NormalizationH2, ::org::apache::lucene::search::similarities::Normalization, NormalizationH2, t_NormalizationH2_init_, 0, 0, t_NormalizationH2__fields_, 0, 0);

          void t_NormalizationH2::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH2), module, "NormalizationH2", 0);
          }

          void t_NormalizationH2::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "class_", make_descriptor(NormalizationH2::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH2::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH2::initializeClass, 1)))
              return NULL;
            return t_NormalizationH2::wrap_Object(NormalizationH2(((t_NormalizationH2 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH2::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH2 object((jobject) NULL);

                INT_CALL(object = NormalizationH2());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH2 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH2(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternAnalyzer::class$ = NULL;
          jmethodID *PatternAnalyzer::mids$ = NULL;
          bool PatternAnalyzer::live$ = false;
          PatternAnalyzer *PatternAnalyzer::DEFAULT_ANALYZER = NULL;
          PatternAnalyzer *PatternAnalyzer::EXTENDED_ANALYZER = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::NON_WORD_PATTERN = NULL;
          ::java::util::regex::Pattern *PatternAnalyzer::WHITESPACE_PATTERN = NULL;

          jclass PatternAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed1ef6b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/regex/Pattern;ZLorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_createComponents_317b7f84] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "DEFAULT_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              EXTENDED_ANALYZER = new PatternAnalyzer(env->getStaticObjectField(cls, "EXTENDED_ANALYZER", "Lorg/apache/lucene/analysis/miscellaneous/PatternAnalyzer;"));
              NON_WORD_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "NON_WORD_PATTERN", "Ljava/util/regex/Pattern;"));
              WHITESPACE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "WHITESPACE_PATTERN", "Ljava/util/regex/Pattern;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternAnalyzer::PatternAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::util::regex::Pattern & a1, jboolean a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_ed1ef6b5, a0.this$, a1.this$, a2, a3.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents PatternAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_317b7f84], a0.this$, a1.this$, a2.this$));
          }

          jboolean PatternAnalyzer::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PatternAnalyzer::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args);
          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args);

          static PyMethodDef t_PatternAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PatternAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, equals, METH_VARARGS),
            DECLARE_METHOD(t_PatternAnalyzer, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternAnalyzer, t_PatternAnalyzer, ::org::apache::lucene::analysis::Analyzer, PatternAnalyzer, t_PatternAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_PatternAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternAnalyzer), module, "PatternAnalyzer", 0);
          }

          void t_PatternAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "class_", make_descriptor(PatternAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PatternAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "DEFAULT_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::DEFAULT_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "EXTENDED_ANALYZER", make_descriptor(t_PatternAnalyzer::wrap_Object(*PatternAnalyzer::EXTENDED_ANALYZER)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "NON_WORD_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::NON_WORD_PATTERN)));
            PyDict_SetItemString(PY_TYPE(PatternAnalyzer).tp_dict, "WHITESPACE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*PatternAnalyzer::WHITESPACE_PATTERN)));
          }

          static PyObject *t_PatternAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PatternAnalyzer::wrap_Object(PatternAnalyzer(((t_PatternAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PatternAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternAnalyzer_init_(t_PatternAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::regex::Pattern a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
            PyTypeObject **p3;
            PatternAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "KkZK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::regex::Pattern::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = PatternAnalyzer(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternAnalyzer_createComponents(t_PatternAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

                if (!parseArgs(args, "sks", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.createComponents(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_PatternAnalyzer_equals(t_PatternAnalyzer *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PatternAnalyzer_hashCode(t_PatternAnalyzer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PatternAnalyzer), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedDocValuesField::class$ = NULL;
        jmethodID *SortedDocValuesField::mids$ = NULL;
        bool SortedDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedDocValuesField::TYPE = NULL;

        jclass SortedDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedDocValuesField::SortedDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValuesField, t_SortedDocValuesField, ::org::apache::lucene::document::Field, SortedDocValuesField, t_SortedDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValuesField), module, "SortedDocValuesField", 0);
        }

        void t_SortedDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "class_", make_descriptor(SortedDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedDocValuesField::TYPE)));
        }

        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedDocValuesField::wrap_Object(SortedDocValuesField(((t_SortedDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause::class$ = NULL;
        jmethodID *BooleanClause::mids$ = NULL;
        bool BooleanClause::live$ = false;

        jclass BooleanClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_827be425] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isProhibited_54c6a16a] = env->getMethodID(cls, "isProhibited", "()Z");
            mids$[mid_isRequired_54c6a16a] = env->getMethodID(cls, "isRequired", "()Z");
            mids$[mid_setOccur_23bdc104] = env->getMethodID(cls, "setOccur", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_setQuery_6e301113] = env->getMethodID(cls, "setQuery", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause::BooleanClause(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_827be425, a0.this$, a1.this$)) {}

        jboolean BooleanClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::BooleanClause$Occur BooleanClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        ::org::apache::lucene::search::Query BooleanClause::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint BooleanClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanClause::isProhibited() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isProhibited_54c6a16a]);
        }

        jboolean BooleanClause::isRequired() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isRequired_54c6a16a]);
        }

        void BooleanClause::setOccur(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOccur_23bdc104], a0.this$);
        }

        void BooleanClause::setQuery(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setQuery_6e301113], a0.this$);
        }

        ::java::lang::String BooleanClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self);
        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self);
        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self);
        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self);
        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg);
        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data);
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data);
        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data);
        static PyGetSetDef t_BooleanClause__fields_[] = {
          DECLARE_GETSET_FIELD(t_BooleanClause, occur),
          DECLARE_GET_FIELD(t_BooleanClause, prohibited),
          DECLARE_GETSET_FIELD(t_BooleanClause, query),
          DECLARE_GET_FIELD(t_BooleanClause, required),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause__methods_[] = {
          DECLARE_METHOD(t_BooleanClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, isProhibited, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, isRequired, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, setOccur, METH_O),
          DECLARE_METHOD(t_BooleanClause, setQuery, METH_O),
          DECLARE_METHOD(t_BooleanClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause, t_BooleanClause, ::java::lang::Object, BooleanClause, t_BooleanClause_init_, 0, 0, t_BooleanClause__fields_, 0, 0);

        void t_BooleanClause::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause), module, "BooleanClause", 0);
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "Occur", make_descriptor(&PY_TYPE(BooleanClause$Occur)));
        }

        void t_BooleanClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "class_", make_descriptor(BooleanClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause::initializeClass, 1)))
            return NULL;
          return t_BooleanClause::wrap_Object(BooleanClause(((t_BooleanClause *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          BooleanClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = BooleanClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isProhibited());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isRequired());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_setOccur(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            OBJ_CALL(self->object.setOccur(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOccur", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_setQuery(t_BooleanClause *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setQuery(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
          return NULL;
        }

        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
        static int t_BooleanClause_set__occur(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
            {
              INT_CALL(self->object.setOccur(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "occur", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isProhibited());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
        static int t_BooleanClause_set__query(t_BooleanClause *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              INT_CALL(self->object.setQuery(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "query", arg);
          return -1;
        }

        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isRequired());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryTreeBuilder::class$ = NULL;
              jmethodID *QueryTreeBuilder::mids$ = NULL;
              bool QueryTreeBuilder::live$ = false;
              ::java::lang::String *QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID = NULL;

              jclass QueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");
                  mids$[mid_setBuilder_868de661] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                  mids$[mid_setBuilder_ba566e4f] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/Class;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  QUERY_TREE_BUILDER_TAGID = new ::java::lang::String(env->getStaticObjectField(cls, "QUERY_TREE_BUILDER_TAGID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryTreeBuilder::QueryTreeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::Object QueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_868de661], a0.this$, a1.this$);
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::Class & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_ba566e4f], a0.this$, a1.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_QueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, build, METH_O),
                DECLARE_METHOD(t_QueryTreeBuilder, setBuilder, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryTreeBuilder, t_QueryTreeBuilder, ::java::lang::Object, QueryTreeBuilder, t_QueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_QueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryTreeBuilder), module, "QueryTreeBuilder", 0);
              }

              void t_QueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "class_", make_descriptor(QueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryTreeBuilder::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "QUERY_TREE_BUILDER_TAGID", make_descriptor(j2p(*QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID)));
              }

              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryTreeBuilder::wrap_Object(QueryTreeBuilder(((t_QueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                QueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = QueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }

              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 2:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::lang::Class a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "setBuilder", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeQuery::class$ = NULL;
          jmethodID *SlowCollatedTermRangeQuery::mids$ = NULL;
          bool SlowCollatedTermRangeQuery::live$ = false;

          jclass SlowCollatedTermRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeQuery::SlowCollatedTermRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          jboolean SlowCollatedTermRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::field() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
          }

          ::java::text::Collator SlowCollatedTermRangeQuery::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeQuery::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jint SlowCollatedTermRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SlowCollatedTermRangeQuery::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeQuery::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }

          ::java::lang::String SlowCollatedTermRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self);
          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args);
          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeQuery, upperTerm),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, field, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, includesUpper, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, SlowCollatedTermRangeQuery, t_SlowCollatedTermRangeQuery_init_, 0, 0, t_SlowCollatedTermRangeQuery__fields_, 0, 0);

          void t_SlowCollatedTermRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeQuery), module, "SlowCollatedTermRangeQuery", 0);
          }

          void t_SlowCollatedTermRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeQuery::wrap_Object(SlowCollatedTermRangeQuery(((t_SlowCollatedTermRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeQuery_init_(t_SlowCollatedTermRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeQuery(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeQuery_equals(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_field(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.field());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getCollator(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getLowerTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_getUpperTerm(t_SlowCollatedTermRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_hashCode(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesLower(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_includesUpper(t_SlowCollatedTermRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_toString(t_SlowCollatedTermRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedTermRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__collator(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__lowerTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeQuery_get__upperTerm(t_SlowCollatedTermRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenFilter::class$ = NULL;
        jmethodID *PythonTokenFilter::mids$ = NULL;
        bool PythonTokenFilter::live$ = false;

        jclass PythonTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenFilter::PythonTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void PythonTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self);
        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data);
        static PyGetSetDef t_PythonTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenFilter, t_PythonTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PythonTokenFilter, t_PythonTokenFilter_init_, 0, 0, t_PythonTokenFilter__fields_, 0, 0);

        void t_PythonTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenFilter), module, "PythonTokenFilter", 1);
        }

        void t_PythonTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "class_", make_descriptor(PythonTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenFilter_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonTokenFilter::wrap_Object(PythonTokenFilter(((t_PythonTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          PythonTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Throwable.h"
#include "java/io/PrintWriter.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Throwable::class$ = NULL;
    jmethodID *Throwable::mids$ = NULL;
    bool Throwable::live$ = false;

    jclass Throwable::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Throwable");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
        mids$[mid_addSuppressed_c5ec8ca4] = env->getMethodID(cls, "addSuppressed", "(Ljava/lang/Throwable;)V");
        mids$[mid_fillInStackTrace_9a29189d] = env->getMethodID(cls, "fillInStackTrace", "()Ljava/lang/Throwable;");
        mids$[mid_getCause_9a29189d] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
        mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
        mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getSuppressed_f4efa455] = env->getMethodID(cls, "getSuppressed", "()[Ljava/lang/Throwable;");
        mids$[mid_initCause_dabad90f] = env->getMethodID(cls, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
        mids$[mid_printStackTrace_54c6a166] = env->getMethodID(cls, "printStackTrace", "()V");
        mids$[mid_printStackTrace_1b7c898b] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintStream;)V");
        mids$[mid_printStackTrace_82fffd94] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintWriter;)V");
        mids$[mid_setStackTrace_3d8798bf] = env->getMethodID(cls, "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Throwable::Throwable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Throwable::Throwable(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Throwable::Throwable(const ::java::lang::String & a0, const Throwable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}

    void Throwable::addSuppressed(const Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addSuppressed_c5ec8ca4], a0.this$);
    }

    Throwable Throwable::fillInStackTrace() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_fillInStackTrace_9a29189d]));
    }

    Throwable Throwable::getCause() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_getCause_9a29189d]));
    }

    ::java::lang::String Throwable::getLocalizedMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
    }

    ::java::lang::String Throwable::getMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
    }

    JArray< ::java::lang::StackTraceElement > Throwable::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    JArray< Throwable > Throwable::getSuppressed() const
    {
      return JArray< Throwable >(env->callObjectMethod(this$, mids$[mid_getSuppressed_f4efa455]));
    }

    Throwable Throwable::initCause(const Throwable & a0) const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_initCause_dabad90f], a0.this$));
    }

    void Throwable::printStackTrace() const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_54c6a166]);
    }

    void Throwable::printStackTrace(const ::java::io::PrintStream & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_1b7c898b], a0.this$);
    }

    void Throwable::printStackTrace(const ::java::io::PrintWriter & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_82fffd94], a0.this$);
    }

    void Throwable::setStackTrace(const JArray< ::java::lang::StackTraceElement > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStackTrace_3d8798bf], a0.this$);
    }

    ::java::lang::String Throwable::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getCause(t_Throwable *self);
    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self);
    static PyObject *t_Throwable_getMessage(t_Throwable *self);
    static PyObject *t_Throwable_getStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getSuppressed(t_Throwable *self);
    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data);
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data);
    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data);
    static PyGetSetDef t_Throwable__fields_[] = {
      DECLARE_GET_FIELD(t_Throwable, cause),
      DECLARE_GET_FIELD(t_Throwable, localizedMessage),
      DECLARE_GET_FIELD(t_Throwable, message),
      DECLARE_GETSET_FIELD(t_Throwable, stackTrace),
      DECLARE_GET_FIELD(t_Throwable, suppressed),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Throwable__methods_[] = {
      DECLARE_METHOD(t_Throwable, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, addSuppressed, METH_O),
      DECLARE_METHOD(t_Throwable, fillInStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getCause, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getLocalizedMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getSuppressed, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, initCause, METH_O),
      DECLARE_METHOD(t_Throwable, printStackTrace, METH_VARARGS),
      DECLARE_METHOD(t_Throwable, setStackTrace, METH_O),
      DECLARE_METHOD(t_Throwable, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Throwable, t_Throwable, ::java::lang::Object, Throwable, t_Throwable_init_, 0, 0, t_Throwable__fields_, 0, 0);

    void t_Throwable::install(PyObject *module)
    {
      installType(&PY_TYPE(Throwable), module, "Throwable", 0);
    }

    void t_Throwable::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "class_", make_descriptor(Throwable::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "wrapfn_", make_descriptor(t_Throwable::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Throwable::initializeClass, 1)))
        return NULL;
      return t_Throwable::wrap_Object(Throwable(((t_Throwable *) arg)->object.this$));
    }
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Throwable::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Throwable object((jobject) NULL);

          INT_CALL(object = Throwable());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Throwable(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable a1((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "sk", Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Throwable(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addSuppressed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addSuppressed", arg);
      return NULL;
    }

    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.fillInStackTrace());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getCause(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.getCause());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getLocalizedMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getStackTrace(t_Throwable *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Throwable_getSuppressed(t_Throwable *self)
    {
      JArray< Throwable > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuppressed());
      return JArray<jobject>(result.this$).wrap(t_Throwable::wrap_jobject);
    }

    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);
      Throwable result((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.initCause(a0));
        return t_Throwable::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "initCause", arg);
      return NULL;
    }

    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.printStackTrace());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::io::PrintWriter a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printStackTrace", args);
      return NULL;
    }

    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg)
    {
      JArray< ::java::lang::StackTraceElement > a0((jobject) NULL);

      if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setStackTrace(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStackTrace", arg);
      return NULL;
    }

    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Throwable), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data)
    {
      Throwable value((jobject) NULL);
      OBJ_CALL(value = self->object.getCause());
      return t_Throwable::wrap_Object(value);
    }

    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getLocalizedMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data)
    {
      {
        JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
        if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &value))
        {
          INT_CALL(self->object.setStackTrace(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "stackTrace", arg);
      return -1;
    }

    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data)
    {
      JArray< Throwable > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuppressed());
      return JArray<jobject>(value.this$).wrap(t_Throwable::wrap_jobject);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *RemoveEmptyNonLeafQueryNodeProcessor::class$ = NULL;
              jmethodID *RemoveEmptyNonLeafQueryNodeProcessor::mids$ = NULL;
              bool RemoveEmptyNonLeafQueryNodeProcessor::live$ = false;

              jclass RemoveEmptyNonLeafQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveEmptyNonLeafQueryNodeProcessor::RemoveEmptyNonLeafQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveEmptyNonLeafQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveEmptyNonLeafQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveEmptyNonLeafQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), module, "RemoveEmptyNonLeafQueryNodeProcessor", 0);
              }

              void t_RemoveEmptyNonLeafQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "class_", make_descriptor(RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_Object(RemoveEmptyNonLeafQueryNodeProcessor(((t_RemoveEmptyNonLeafQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveEmptyNonLeafQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = RemoveEmptyNonLeafQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$multiplicative_return::class$ = NULL;
          jmethodID *JavascriptParser$multiplicative_return::mids$ = NULL;
          bool JavascriptParser$multiplicative_return::live$ = false;

          jclass JavascriptParser$multiplicative_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$multiplicative_return::JavascriptParser$multiplicative_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$multiplicative_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$multiplicative_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$multiplicative_return), module, "JavascriptParser$multiplicative_return", 0);
          }

          void t_JavascriptParser$multiplicative_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "class_", make_descriptor(JavascriptParser$multiplicative_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$multiplicative_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$multiplicative_return::wrap_Object(JavascriptParser$multiplicative_return(((t_JavascriptParser$multiplicative_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$multiplicative_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$multiplicative_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiFields::class$ = NULL;
        jmethodID *MultiFields::mids$ = NULL;
        bool MultiFields::live$ = false;

        jclass MultiFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4836fcd7] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Fields;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getFields_450c502c] = env->getStaticMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getIndexedFields_c7983645] = env->getStaticMethodID(cls, "getIndexedFields", "(Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection;");
            mids$[mid_getLiveDocs_38e907ca] = env->getStaticMethodID(cls, "getLiveDocs", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMergedFieldInfos_27fb8e4c] = env->getStaticMethodID(cls, "getMergedFieldInfos", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getTermDocsEnum_0566f0df] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermDocsEnum_dd660923] = env->getStaticMethodID(cls, "getTermDocsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_getTermPositionsEnum_b8773540] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTermPositionsEnum_79e6ab0c] = env->getStaticMethodID(cls, "getTermPositionsEnum", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getTerms_4d5aa19b] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFields::MultiFields(const JArray< ::org::apache::lucene::index::Fields > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_4836fcd7, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::Fields MultiFields::getFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Fields(env->callStaticObjectMethod(cls, mids$[mid_getFields_450c502c], a0.this$));
        }

        ::java::util::Collection MultiFields::getIndexedFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_getIndexedFields_c7983645], a0.this$));
        }

        ::org::apache::lucene::util::Bits MultiFields::getLiveDocs(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getLiveDocs_38e907ca], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos MultiFields::getMergedFieldInfos(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::FieldInfos(env->callStaticObjectMethod(cls, mids$[mid_getMergedFieldInfos_27fb8e4c], a0.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_0566f0df], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsEnum MultiFields::getTermDocsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermDocsEnum_dd660923], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_b8773540], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiFields::getTermPositionsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPositionsEnum_79e6ab0c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::Terms MultiFields::getTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Terms(env->callStaticObjectMethod(cls, mids$[mid_getTerms_4d5aa19b], a0.this$, a1.this$));
        }

        ::java::util::Iterator MultiFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint MultiFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms MultiFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args);

        static PyMethodDef t_MultiFields__methods_[] = {
          DECLARE_METHOD(t_MultiFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getIndexedFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getLiveDocs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getMergedFieldInfos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermDocsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTermPositionsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, getTerms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, size, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFields, t_MultiFields, ::org::apache::lucene::index::Fields, MultiFields, t_MultiFields_init_, ((PyObject *(*)(t_MultiFields *)) get_iterator< t_MultiFields >), 0, 0, 0, 0);

        void t_MultiFields::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFields), module, "MultiFields", 0);
        }

        void t_MultiFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "class_", make_descriptor(MultiFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "wrapfn_", make_descriptor(t_MultiFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFields::initializeClass, 1)))
            return NULL;
          return t_MultiFields::wrap_Object(MultiFields(((t_MultiFields *) arg)->object.this$));
        }
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Fields > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiFields object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiFields(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFields_getFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getFields(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getIndexedFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getIndexedFields(a0));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "getIndexedFields", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getLiveDocs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getLiveDocs(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getLiveDocs", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getMergedFieldInfos(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getMergedFieldInfos(a0));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getMergedFieldInfos", arg);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermDocsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermDocsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermDocsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTermPositionsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTermPositionsEnum(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermPositionsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiFields_getTerms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiFields::getTerms(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTerms", args);
          return NULL;
        }

        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/PackedLongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *PackedLongDocValuesField::class$ = NULL;
        jmethodID *PackedLongDocValuesField::mids$ = NULL;
        bool PackedLongDocValuesField::live$ = false;

        jclass PackedLongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/PackedLongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PackedLongDocValuesField::PackedLongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PackedLongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_PackedLongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PackedLongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PackedLongDocValuesField, t_PackedLongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, PackedLongDocValuesField, t_PackedLongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_PackedLongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(PackedLongDocValuesField), module, "PackedLongDocValuesField", 0);
        }

        void t_PackedLongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "class_", make_descriptor(PackedLongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_PackedLongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PackedLongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PackedLongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PackedLongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_PackedLongDocValuesField::wrap_Object(PackedLongDocValuesField(((t_PackedLongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_PackedLongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PackedLongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PackedLongDocValuesField_init_(t_PackedLongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          PackedLongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = PackedLongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$Reader::class$ = NULL;
        jmethodID *PagedBytes$Reader::mids$ = NULL;
        bool PagedBytes$Reader::live$ = false;

        jclass PagedBytes$Reader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$Reader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fill_9e70a0dd] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/util/BytesRef;J)V");
            mids$[mid_fillSlice_8caa1345] = env->getMethodID(cls, "fillSlice", "(Lorg/apache/lucene/util/BytesRef;JI)V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PagedBytes$Reader::fill(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_fill_9e70a0dd], a0.this$, a1);
        }

        void PagedBytes$Reader::fillSlice(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_fillSlice_8caa1345], a0.this$, a1, a2);
        }

        jlong PagedBytes$Reader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self);

        static PyMethodDef t_PagedBytes$Reader__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$Reader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, fill, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, fillSlice, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$Reader, t_PagedBytes$Reader, ::java::lang::Object, PagedBytes$Reader, abstract_init, 0, 0, 0, 0, 0);

        void t_PagedBytes$Reader::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$Reader), module, "PagedBytes$Reader", 0);
        }

        void t_PagedBytes$Reader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "class_", make_descriptor(PagedBytes$Reader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$Reader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$Reader::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$Reader::wrap_Object(PagedBytes$Reader(((t_PagedBytes$Reader *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$Reader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.fill(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fill", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jint a2;

          if (!parseArgs(args, "kJI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.fillSlice(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fillSlice", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermState::class$ = NULL;
        jmethodID *TermState::mids$ = NULL;
        bool TermState::live$ = false;

        jclass TermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_3e41fede] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermState TermState::clone() const
        {
          return TermState(env->callObjectMethod(this$, mids$[mid_clone_3e41fede]));
        }

        void TermState::copyFrom(const TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String TermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_clone(t_TermState *self);
        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg);
        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args);

        static PyMethodDef t_TermState__methods_[] = {
          DECLARE_METHOD(t_TermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermState, copyFrom, METH_O),
          DECLARE_METHOD(t_TermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermState, t_TermState, ::java::lang::Object, TermState, abstract_init, 0, 0, 0, 0, 0);

        void t_TermState::install(PyObject *module)
        {
          installType(&PY_TYPE(TermState), module, "TermState", 0);
        }

        void t_TermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "class_", make_descriptor(TermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "wrapfn_", make_descriptor(t_TermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermState::initializeClass, 1)))
            return NULL;
          return t_TermState::wrap_Object(TermState(((t_TermState *) arg)->object.this$));
        }
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermState_clone(t_TermState *self)
        {
          TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg)
        {
          TermState a0((jobject) NULL);

          if (!parseArg(arg, "k", TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
          return NULL;
        }

        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizer::class$ = NULL;
          jmethodID *KeywordTokenizer::mids$ = NULL;
          bool KeywordTokenizer::live$ = false;
          jint KeywordTokenizer::DEFAULT_BUFFER_SIZE = (jint) 0;

          jclass KeywordTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_338c3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          KeywordTokenizer::KeywordTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_338c3a92, a0.this$, a1.this$, a2)) {}

          void KeywordTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean KeywordTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizer__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizer, t_KeywordTokenizer, ::org::apache::lucene::analysis::Tokenizer, KeywordTokenizer, t_KeywordTokenizer_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizer), module, "KeywordTokenizer", 0);
          }

          void t_KeywordTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "class_", make_descriptor(KeywordTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(KeywordTokenizer::DEFAULT_BUFFER_SIZE));
          }

          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizer::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizer::wrap_Object(KeywordTokenizer(((t_KeywordTokenizer *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = KeywordTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizerFactory.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizerFactory::class$ = NULL;
          jmethodID *CJKTokenizerFactory::mids$ = NULL;
          bool CJKTokenizerFactory::live$ = false;

          jclass CJKTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_277e6a01] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cjk/CJKTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizerFactory::CJKTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cjk::CJKTokenizer CJKTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cjk::CJKTokenizer(env->callObjectMethod(this$, mids$[mid_create_277e6a01], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_CJKTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizerFactory, t_CJKTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, CJKTokenizerFactory, t_CJKTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizerFactory), module, "CJKTokenizerFactory", 0);
          }

          void t_CJKTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "class_", make_descriptor(CJKTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizerFactory::wrap_Object(CJKTokenizerFactory(((t_CJKTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cjk::CJKTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cjk::t_CJKTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchAllDocsQueryNode::class$ = NULL;
              jmethodID *MatchAllDocsQueryNode::mids$ = NULL;
              bool MatchAllDocsQueryNode::live$ = false;

              jclass MatchAllDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_54ec1c5f] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNode::MatchAllDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              MatchAllDocsQueryNode MatchAllDocsQueryNode::cloneTree() const
              {
                return MatchAllDocsQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_54ec1c5f]));
              }

              ::java::lang::CharSequence MatchAllDocsQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MatchAllDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchAllDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNode, t_MatchAllDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MatchAllDocsQueryNode, t_MatchAllDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNode), module, "MatchAllDocsQueryNode", 0);
              }

              void t_MatchAllDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNode::wrap_Object(MatchAllDocsQueryNode(((t_MatchAllDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                MatchAllDocsQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_MatchAllDocsQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CommonTermsQuery::class$ = NULL;
        jmethodID *CommonTermsQuery::mids$ = NULL;
        bool CommonTermsQuery::live$ = false;

        jclass CommonTermsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CommonTermsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_689325ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;F)V");
            mids$[mid_init$_5975764c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;FZ)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_collectTermContext_ca4f0fd0] = env->getMethodID(cls, "collectTermContext", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/List;[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getHighFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getLowFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setHighFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setLowFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_newTermQuery_516e731e] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/Query;");
            mids$[mid_calcHighFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcHighFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_buildQuery_4123263c] = env->getMethodID(cls, "buildQuery", "(I[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
            mids$[mid_calcLowFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcLowFreqMinimumNumberShouldMatch", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_689325ef, a0.this$, a1.this$, a2)) {}

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2, jboolean a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5975764c, a0.this$, a1.this$, a2, a3)) {}

        void CommonTermsQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void CommonTermsQuery::collectTermContext(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::List & a1, const JArray< ::org::apache::lucene::index::TermContext > & a2, const JArray< ::org::apache::lucene::index::Term > & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_collectTermContext_ca4f0fd0], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean CommonTermsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CommonTermsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat CommonTermsQuery::getHighFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jfloat CommonTermsQuery::getLowFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jint CommonTermsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CommonTermsQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::org::apache::lucene::search::Query CommonTermsQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CommonTermsQuery::setHighFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        void CommonTermsQuery::setLowFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        ::java::lang::String CommonTermsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_CommonTermsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CommonTermsQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, highFreqMinimumNumberShouldMatch),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, lowFreqMinimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CommonTermsQuery__methods_[] = {
          DECLARE_METHOD(t_CommonTermsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, add, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, collectTermContext, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, setHighFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, setLowFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommonTermsQuery, t_CommonTermsQuery, ::org::apache::lucene::search::Query, CommonTermsQuery, t_CommonTermsQuery_init_, 0, 0, t_CommonTermsQuery__fields_, 0, 0);

        void t_CommonTermsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CommonTermsQuery), module, "CommonTermsQuery", 0);
        }

        void t_CommonTermsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "class_", make_descriptor(CommonTermsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "wrapfn_", make_descriptor(t_CommonTermsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommonTermsQuery::initializeClass, 1)))
            return NULL;
          return t_CommonTermsQuery::wrap_Object(CommonTermsQuery(((t_CommonTermsQuery *) arg)->object.this$));
        }
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommonTermsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKF", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              jboolean a3;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKFZ", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2, &a3))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::List a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::index::TermContext > a2((jobject) NULL);
          JArray< ::org::apache::lucene::index::Term > a3((jobject) NULL);

          if (!parseArgs(args, "kK[k[k", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
          {
            OBJ_CALL(self->object.collectTermContext(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collectTermContext", args);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setHighFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHighFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setLowFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLowFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setHighFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "highFreqMinimumNumberShouldMatch", arg);
          return -1;
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setLowFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lowFreqMinimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *KeepOnlyLastCommitDeletionPolicy::class$ = NULL;
        jmethodID *KeepOnlyLastCommitDeletionPolicy::mids$ = NULL;
        bool KeepOnlyLastCommitDeletionPolicy::live$ = false;

        jclass KeepOnlyLastCommitDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KeepOnlyLastCommitDeletionPolicy::KeepOnlyLastCommitDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void KeepOnlyLastCommitDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void KeepOnlyLastCommitDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_KeepOnlyLastCommitDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy_init_, 0, 0, 0, 0, 0);

        void t_KeepOnlyLastCommitDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), module, "KeepOnlyLastCommitDeletionPolicy", 0);
        }

        void t_KeepOnlyLastCommitDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "class_", make_descriptor(KeepOnlyLastCommitDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_KeepOnlyLastCommitDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_KeepOnlyLastCommitDeletionPolicy::wrap_Object(KeepOnlyLastCommitDeletionPolicy(((t_KeepOnlyLastCommitDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          KeepOnlyLastCommitDeletionPolicy object((jobject) NULL);

          INT_CALL(object = KeepOnlyLastCommitDeletionPolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil$Path::class$ = NULL;
            jmethodID *FSTUtil$Path::mids$ = NULL;
            jfieldID *FSTUtil$Path::fids$ = NULL;
            bool FSTUtil$Path::live$ = false;

            jclass FSTUtil$Path::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil$Path");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f5d3d1ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Lorg/apache/lucene/util/IntsRef;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_fstNode] = env->getFieldID(cls, "fstNode", "Lorg/apache/lucene/util/fst/FST$Arc;");
                fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
                fids$[fid_state] = env->getFieldID(cls, "state", "Lorg/apache/lucene/util/automaton/State;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTUtil$Path::FSTUtil$Path(const ::org::apache::lucene::util::automaton::State & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::org::apache::lucene::util::IntsRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d3d1ef, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::util::fst::FST$Arc FSTUtil$Path::_get_fstNode() const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_fstNode]));
            }

            ::org::apache::lucene::util::IntsRef FSTUtil$Path::_get_input() const
            {
              return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
            }

            ::org::apache::lucene::util::automaton::State FSTUtil$Path::_get_state() const
            {
              return ::org::apache::lucene::util::automaton::State(env->getObjectField(this$, fids$[fid_state]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args);
            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data);

            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data);
            static PyGetSetDef t_FSTUtil$Path__fields_[] = {
              DECLARE_GET_FIELD(t_FSTUtil$Path, fstNode),
              DECLARE_GET_FIELD(t_FSTUtil$Path, input),
              DECLARE_GET_FIELD(t_FSTUtil$Path, state),
              DECLARE_GET_FIELD(t_FSTUtil$Path, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTUtil$Path__methods_[] = {
              DECLARE_METHOD(t_FSTUtil$Path, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil$Path, t_FSTUtil$Path, ::java::lang::Object, FSTUtil$Path, t_FSTUtil$Path_init_, 0, 0, t_FSTUtil$Path__fields_, 0, 0);
            PyObject *t_FSTUtil$Path::wrap_Object(const FSTUtil$Path& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FSTUtil$Path::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FSTUtil$Path::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil$Path), module, "FSTUtil$Path", 0);
            }

            void t_FSTUtil$Path::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "class_", make_descriptor(FSTUtil$Path::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil$Path::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil$Path::initializeClass, 1)))
                return NULL;
              return t_FSTUtil$Path::wrap_Object(FSTUtil$Path(((t_FSTUtil$Path *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil$Path::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::Object a2((jobject) NULL);
              ::org::apache::lucene::util::IntsRef a3((jobject) NULL);
              FSTUtil$Path object((jobject) NULL);

              if (!parseArgs(args, "kKok", ::org::apache::lucene::util::automaton::State::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3))
              {
                INT_CALL(object = FSTUtil$Path(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
              OBJ_CALL(value = self->object._get_fstNode());
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::IntsRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_input());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::automaton::State value((jobject) NULL);
              OBJ_CALL(value = self->object._get_state());
              return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntField::class$ = NULL;
        jmethodID *IntField::mids$ = NULL;
        bool IntField::live$ = false;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_STORED = NULL;

        jclass IntField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_80deeaab] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_919d88bc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_80deeaab, a0.this$, a1, a2.this$)) {}

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_919d88bc, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IntField__methods_[] = {
          DECLARE_METHOD(t_IntField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntField, t_IntField, ::org::apache::lucene::document::Field, IntField, t_IntField_init_, 0, 0, 0, 0, 0);

        void t_IntField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntField), module, "IntField", 0);
        }

        void t_IntField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "class_", make_descriptor(IntField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "wrapfn_", make_descriptor(t_IntField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntField::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_STORED)));
        }

        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntField::initializeClass, 1)))
            return NULL;
          return t_IntField::wrap_Object(IntField(((t_IntField *) arg)->object.this$));
        }
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryBuilder::class$ = NULL;
              jmethodID *StandardQueryBuilder::mids$ = NULL;
              bool StandardQueryBuilder::live$ = false;

              jclass StandardQueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::search::Query StandardQueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryBuilder, t_StandardQueryBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder, StandardQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardQueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryBuilder), module, "StandardQueryBuilder", 0);
              }

              void t_StandardQueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "class_", make_descriptor(StandardQueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryBuilder::wrap_Object(StandardQueryBuilder(((t_StandardQueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilter::class$ = NULL;
          jmethodID *IndicNormalizationFilter::mids$ = NULL;
          bool IndicNormalizationFilter::live$ = false;

          jclass IndicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilter::IndicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IndicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_IndicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilter, t_IndicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, IndicNormalizationFilter, t_IndicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilter), module, "IndicNormalizationFilter", 0);
          }

          void t_IndicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "class_", make_descriptor(IndicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilter::wrap_Object(IndicNormalizationFilter(((t_IndicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IndicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IndicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
            jmethodID *QueryParserTokenManager::mids$ = NULL;
            jfieldID *QueryParserTokenManager::fids$ = NULL;
            bool QueryParserTokenManager::live$ = false;
            JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

            jclass QueryParserTokenManager::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_init$_5ba65d1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_ReInit_5ba65d1b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                mids$[mid_jjFillToken_353aefd6] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ba65d1b, a0.this$, a1)) {}

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5ba65d1b], a0.this$, a1);
            }

            void QueryParserTokenManager::SwitchTo(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParserTokenManager::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
            }

            ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
            {
              return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
            }

            void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
            {
              env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
            static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
              DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
              DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserTokenManager__methods_[] = {
              DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
              DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

            void t_QueryParserTokenManager::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
            }

            void t_QueryParserTokenManager::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserTokenManager::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
            }

            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
                return NULL;
              return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
            }
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.ReInit(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.SwitchTo(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setDebugStream(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
              return NULL;
            }

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
            {
              {
                ::java::io::PrintStream value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                {
                  INT_CALL(self->object.setDebugStream(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
              return -1;
            }

            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizerFactory::class$ = NULL;
          jmethodID *LowerCaseTokenizerFactory::mids$ = NULL;
          bool LowerCaseTokenizerFactory::live$ = false;

          jclass LowerCaseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3b72128c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LowerCaseTokenizer;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizerFactory::LowerCaseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseTokenizer LowerCaseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3b72128c], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseTokenizerFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args);
          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self);
          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data);
          static PyGetSetDef t_LowerCaseTokenizerFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseTokenizerFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory_init_, 0, 0, t_LowerCaseTokenizerFactory__fields_, 0, 0);

          void t_LowerCaseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizerFactory), module, "LowerCaseTokenizerFactory", 0);
          }

          void t_LowerCaseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "class_", make_descriptor(LowerCaseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizerFactory::wrap_Object(LowerCaseTokenizerFactory(((t_LowerCaseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LowerCaseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilterFactory::class$ = NULL;
          jmethodID *ReverseStringFilterFactory::mids$ = NULL;
          bool ReverseStringFilterFactory::live$ = false;

          jclass ReverseStringFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_b57d0b9a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/reverse/ReverseStringFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilterFactory::ReverseStringFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::reverse::ReverseStringFilter ReverseStringFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::reverse::ReverseStringFilter(env->callObjectMethod(this$, mids$[mid_create_b57d0b9a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args);

          static PyMethodDef t_ReverseStringFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilterFactory, t_ReverseStringFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ReverseStringFilterFactory, t_ReverseStringFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilterFactory), module, "ReverseStringFilterFactory", 0);
          }

          void t_ReverseStringFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "class_", make_descriptor(ReverseStringFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilterFactory::wrap_Object(ReverseStringFilterFactory(((t_ReverseStringFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ReverseStringFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ReverseStringFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::reverse::ReverseStringFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::reverse::t_ReverseStringFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsReaderBase::class$ = NULL;
        jmethodID *PostingsReaderBase::mids$ = NULL;
        bool PostingsReaderBase::live$ = false;

        jclass PostingsReaderBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsReaderBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsReaderBase::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void PostingsReaderBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsReaderBase::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        ::org::apache::lucene::index::DocsEnum PostingsReaderBase::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum PostingsReaderBase::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        void PostingsReaderBase::init(const ::org::apache::lucene::store::IndexInput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsReaderBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg);
        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self);

        static PyMethodDef t_PostingsReaderBase__methods_[] = {
          DECLARE_METHOD(t_PostingsReaderBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, decodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docs, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, init, METH_O),
          DECLARE_METHOD(t_PostingsReaderBase, newTermState, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsReaderBase, t_PostingsReaderBase, ::java::lang::Object, PostingsReaderBase, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsReaderBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsReaderBase), module, "PostingsReaderBase", 0);
        }

        void t_PostingsReaderBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "class_", make_descriptor(PostingsReaderBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsReaderBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsReaderBase::initializeClass, 1)))
            return NULL;
          return t_PostingsReaderBase::wrap_Object(PostingsReaderBase(((t_PostingsReaderBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsReaderBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "decodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockVerifyServer.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockVerifyServer::class$ = NULL;
        jmethodID *LockVerifyServer::mids$ = NULL;
        bool LockVerifyServer::live$ = false;

        jclass LockVerifyServer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockVerifyServer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockVerifyServer::LockVerifyServer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockVerifyServer::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockVerifyServer__methods_[] = {
          DECLARE_METHOD(t_LockVerifyServer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockVerifyServer, t_LockVerifyServer, ::java::lang::Object, LockVerifyServer, t_LockVerifyServer_init_, 0, 0, 0, 0, 0);

        void t_LockVerifyServer::install(PyObject *module)
        {
          installType(&PY_TYPE(LockVerifyServer), module, "LockVerifyServer", 0);
        }

        void t_LockVerifyServer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "class_", make_descriptor(LockVerifyServer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "wrapfn_", make_descriptor(t_LockVerifyServer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockVerifyServer::initializeClass, 1)))
            return NULL;
          return t_LockVerifyServer::wrap_Object(LockVerifyServer(((t_LockVerifyServer *) arg)->object.this$));
        }
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockVerifyServer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds)
        {
          LockVerifyServer object((jobject) NULL);

          INT_CALL(object = LockVerifyServer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockVerifyServer::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Short::class$ = NULL;
    jmethodID *Short::mids$ = NULL;
    bool Short::live$ = false;
    jint Short::BYTES = (jint) 0;
    jshort Short::MAX_VALUE = (jshort) 0;
    jshort Short::MIN_VALUE = (jshort) 0;
    jint Short::SIZE = (jint) 0;
    ::java::lang::Class *Short::TYPE = NULL;

    jclass Short::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Short");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_3bc40c6a] = env->getMethodID(cls, "<init>", "(S)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_5729c2d1] = env->getStaticMethodID(cls, "compare", "(SS)I");
        mids$[mid_compareTo_6b8573d1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
        mids$[mid_decode_88c4db41] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_3bc40c75] = env->getStaticMethodID(cls, "hashCode", "(S)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseShort_5fdc3f4d] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
        mids$[mid_parseShort_6e53ccc3] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
        mids$[mid_reverseBytes_3bc40c6f] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_9c2e4c45] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
        mids$[mid_toUnsignedInt_3bc40c75] = env->getStaticMethodID(cls, "toUnsignedInt", "(S)I");
        mids$[mid_toUnsignedLong_3bc40c76] = env->getStaticMethodID(cls, "toUnsignedLong", "(S)J");
        mids$[mid_valueOf_5d563b1b] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
        mids$[mid_valueOf_88c4db41] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_valueOf_0f6bcb23] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3bc40c6a, a0)) {}

    Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Short::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Short::compare(jshort a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_5729c2d1], a0, a1);
    }

    jint Short::compareTo(const Short & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b8573d1], a0.this$);
    }

    Short Short::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_88c4db41], a0.this$));
    }

    jdouble Short::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Short::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Short::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Short::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Short::hashCode(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_3bc40c75], a0);
    }

    jint Short::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Short::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Short::parseShort(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_5fdc3f4d], a0.this$);
    }

    jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_6e53ccc3], a0.this$, a1);
    }

    jshort Short::reverseBytes(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_3bc40c6f], a0);
    }

    jshort Short::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Short::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Short::toString(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9c2e4c45], a0));
    }

    jint Short::toUnsignedInt(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUnsignedInt_3bc40c75], a0);
    }

    jlong Short::toUnsignedLong(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_3bc40c76], a0);
    }

    Short Short::valueOf(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5d563b1b], a0));
    }

    Short Short::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_88c4db41], a0.this$));
    }

    Short Short::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0f6bcb23], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg);
    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_equals(t_Short *self, PyObject *args);
    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_toUnsignedInt(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Short__methods_[] = {
      DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, compareTo, METH_O),
      DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, equals, METH_VARARGS),
      DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, toUnsignedInt, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Short, t_Short, ::java::lang::Number, Short, t_Short_init_, 0, 0, 0, 0, 0);

    void t_Short::install(PyObject *module)
    {
      installType(&PY_TYPE(Short), module, "Short", 0);
    }

    void t_Short::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "class_", make_descriptor(Short::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "wrapfn_", make_descriptor(unboxShort));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "boxfn_", make_descriptor(boxShort));
      env->getClass(Short::initializeClass);
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "BYTES", make_descriptor(Short::BYTES));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "SIZE", make_descriptor(Short::SIZE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
    }

    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Short::initializeClass, 1)))
        return NULL;
      return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
    }
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Short::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short object((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jshort a1;
      jint result;

      if (!parseArgs(args, "SS", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Short::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg)
    {
      Short a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Short result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::decode(a0));
        return t_Short::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Short_equals(t_Short *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Short_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jint result;

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jshort result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jshort result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseShort", args);
      return NULL;
    }

    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jshort result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Short_toString(t_Short *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Short_toUnsignedInt(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jint result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toUnsignedInt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toUnsignedInt", arg);
      return NULL;
    }

    static PyObject *t_Short_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jlong result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short result((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Short result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
            return t_Short::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueBool.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueBool::class$ = NULL;
          jmethodID *MutableValueBool::mids$ = NULL;
          jfieldID *MutableValueBool::fids$ = NULL;
          bool MutableValueBool::live$ = false;

          jclass MutableValueBool::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueBool");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueBool::MutableValueBool() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueBool::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueBool::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueBool::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueBool::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueBool::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueBool::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jboolean MutableValueBool::_get_value() const
          {
            return env->getBooleanField(this$, fids$[fid_value]);
          }

          void MutableValueBool::_set_value(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data);
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueBool__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueBool, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueBool__methods_[] = {
            DECLARE_METHOD(t_MutableValueBool, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueBool, t_MutableValueBool, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueBool, t_MutableValueBool_init_, 0, 0, t_MutableValueBool__fields_, 0, 0);

          void t_MutableValueBool::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueBool), module, "MutableValueBool", 0);
          }

          void t_MutableValueBool::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "class_", make_descriptor(MutableValueBool::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "wrapfn_", make_descriptor(t_MutableValueBool::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueBool::initializeClass, 1)))
              return NULL;
            return t_MutableValueBool::wrap_Object(MutableValueBool(((t_MutableValueBool *) arg)->object.this$));
          }
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueBool::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds)
          {
            MutableValueBool object((jobject) NULL);

            INT_CALL(object = MutableValueBool());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_value());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetField::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetField::mids$ = NULL;
          jfieldID *SortedSetDocValuesFacetField::fids$ = NULL;
          bool SortedSetDocValuesFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *SortedSetDocValuesFacetField::TYPE = NULL;

          jclass SortedSetDocValuesFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetField::SortedSetDocValuesFacetField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SortedSetDocValuesFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data);
          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, dim),
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesFacetField__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField, ::org::apache::lucene::document::Field, SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField_init_, 0, 0, t_SortedSetDocValuesFacetField__fields_, 0, 0);

          void t_SortedSetDocValuesFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetField), module, "SortedSetDocValuesFacetField", 0);
          }

          void t_SortedSetDocValuesFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetDocValuesFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesFacetField::TYPE)));
          }

          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetField::wrap_Object(SortedSetDocValuesFacetField(((t_SortedSetDocValuesFacetField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            SortedSetDocValuesFacetField object((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetField(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/VectorValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *VectorValueSource::class$ = NULL;
            jmethodID *VectorValueSource::mids$ = NULL;
            bool VectorValueSource::live$ = false;

            jclass VectorValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/VectorValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSources_87851566] = env->getMethodID(cls, "getSources", "()Ljava/util/List;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            VectorValueSource::VectorValueSource(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void VectorValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String VectorValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jint VectorValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }

            jboolean VectorValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::util::List VectorValueSource::getSources() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSources_87851566]));
            }

            ::org::apache::lucene::queries::function::FunctionValues VectorValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint VectorValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String VectorValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data);
            static PyGetSetDef t_VectorValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_VectorValueSource, sources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_VectorValueSource__methods_[] = {
              DECLARE_METHOD(t_VectorValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, dimension, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, getSources, METH_NOARGS),
              DECLARE_METHOD(t_VectorValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(VectorValueSource, t_VectorValueSource, ::org::apache::lucene::queries::function::valuesource::MultiValueSource, VectorValueSource, t_VectorValueSource_init_, 0, 0, t_VectorValueSource__fields_, 0, 0);

            void t_VectorValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(VectorValueSource), module, "VectorValueSource", 0);
            }

            void t_VectorValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "class_", make_descriptor(VectorValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "wrapfn_", make_descriptor(t_VectorValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, VectorValueSource::initializeClass, 1)))
                return NULL;
              return t_VectorValueSource::wrap_Object(VectorValueSource(((t_VectorValueSource *) arg)->object.this$));
            }
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, VectorValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              VectorValueSource object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = VectorValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.dimension());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "dimension", args, 2);
            }

            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getSources());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::function::PY_TYPE(ValueSource));
            }

            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }

            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getSources());
              return ::java::util::t_List::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Counter::class$ = NULL;
        jmethodID *Counter::mids$ = NULL;
        bool Counter::live$ = false;

        jclass Counter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Counter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addAndGet_0ee6df33] = env->getMethodID(cls, "addAndGet", "(J)J");
            mids$[mid_get_54c6a17a] = env->getMethodID(cls, "get", "()J");
            mids$[mid_newCounter_781dd30a] = env->getStaticMethodID(cls, "newCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_newCounter_aad2ede1] = env->getStaticMethodID(cls, "newCounter", "(Z)Lorg/apache/lucene/util/Counter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Counter::Counter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong Counter::addAndGet(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addAndGet_0ee6df33], a0);
        }

        jlong Counter::get() const
        {
          return env->callLongMethod(this$, mids$[mid_get_54c6a17a]);
        }

        Counter Counter::newCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_781dd30a]));
        }

        Counter Counter::newCounter(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_aad2ede1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg);
        static PyObject *t_Counter_get(t_Counter *self);
        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Counter__methods_[] = {
          DECLARE_METHOD(t_Counter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, addAndGet, METH_O),
          DECLARE_METHOD(t_Counter, get, METH_NOARGS),
          DECLARE_METHOD(t_Counter, newCounter, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Counter, t_Counter, ::java::lang::Object, Counter, t_Counter_init_, 0, 0, 0, 0, 0);

        void t_Counter::install(PyObject *module)
        {
          installType(&PY_TYPE(Counter), module, "Counter", 0);
        }

        void t_Counter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "class_", make_descriptor(Counter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "wrapfn_", make_descriptor(t_Counter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Counter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Counter::initializeClass, 1)))
            return NULL;
          return t_Counter::wrap_Object(Counter(((t_Counter *) arg)->object.this$));
        }
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Counter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds)
        {
          Counter object((jobject) NULL);

          INT_CALL(object = Counter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.addAndGet(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAndGet", arg);
          return NULL;
        }

        static PyObject *t_Counter_get(t_Counter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.get());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Counter result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter());
              return t_Counter::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              Counter result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter(a0));
                return t_Counter::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newCounter", args);
          return NULL;
        }
      }
    }
  }
}
