#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseStemFilterFactory::mids$ = NULL;
          bool PortugueseStemFilterFactory::live$ = false;

          jclass PortugueseStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilterFactory::PortugueseStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilterFactory, t_PortugueseStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseStemFilterFactory, t_PortugueseStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilterFactory), module, "PortugueseStemFilterFactory", 0);
          }

          void t_PortugueseStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilterFactory::wrap_Object(PortugueseStemFilterFactory(((t_PortugueseStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene46SegmentInfoReader::mids$ = NULL;
          bool Lucene46SegmentInfoReader::live$ = false;

          jclass Lucene46SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoReader::Lucene46SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene46SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene46SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene46SegmentInfoReader, t_Lucene46SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene46SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoReader), module, "Lucene46SegmentInfoReader", 0);
          }

          void t_Lucene46SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoReader::wrap_Object(Lucene46SegmentInfoReader(((t_Lucene46SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoReader_init_(t_Lucene46SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoReader_read(t_Lucene46SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexInput::class$ = NULL;
        jmethodID *IndexInput::mids$ = NULL;
        bool IndexInput::live$ = false;

        jclass IndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_randomAccessSlice_27267c8d] = env->getMethodID(cls, "randomAccessSlice", "(JJ)Lorg/apache/lucene/store/RandomAccessInput;");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexInput IndexInput::clone() const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void IndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong IndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        ::org::apache::lucene::store::RandomAccessInput IndexInput::randomAccessSlice(jlong a0, jlong a1) const
        {
          return ::org::apache::lucene::store::RandomAccessInput(env->callObjectMethod(this$, mids$[mid_randomAccessSlice_27267c8d], a0, a1));
        }

        void IndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        IndexInput IndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        ::java::lang::String IndexInput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_close(t_IndexInput *self);
        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self);
        static PyObject *t_IndexInput_length(t_IndexInput *self);
        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg);
        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data);
        static PyGetSetDef t_IndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexInput__methods_[] = {
          DECLARE_METHOD(t_IndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, length, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, randomAccessSlice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, seek, METH_O),
          DECLARE_METHOD(t_IndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexInput, t_IndexInput, ::org::apache::lucene::store::DataInput, IndexInput, abstract_init, 0, 0, t_IndexInput__fields_, 0, 0);

        void t_IndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexInput), module, "IndexInput", 0);
        }

        void t_IndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "class_", make_descriptor(IndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "wrapfn_", make_descriptor(t_IndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexInput::initializeClass, 1)))
            return NULL;
          return t_IndexInput::wrap_Object(IndexInput(((t_IndexInput *) arg)->object.this$));
        }
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args)
        {
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_IndexInput_close(t_IndexInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_length(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ::org::apache::lucene::store::RandomAccessInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.randomAccessSlice(a0, a1));
            return ::org::apache::lucene::store::t_RandomAccessInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "randomAccessSlice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "seek", arg);
          return NULL;
        }

        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "slice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianAnalyzer::class$ = NULL;
          jmethodID *IndonesianAnalyzer::mids$ = NULL;
          bool IndonesianAnalyzer::live$ = false;
          ::java::lang::String *IndonesianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IndonesianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IndonesianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data);
          static PyGetSetDef t_IndonesianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IndonesianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndonesianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IndonesianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianAnalyzer, t_IndonesianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IndonesianAnalyzer, t_IndonesianAnalyzer_init_, 0, 0, t_IndonesianAnalyzer__fields_, 0, 0);

          void t_IndonesianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianAnalyzer), module, "IndonesianAnalyzer", 0);
          }

          void t_IndonesianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "class_", make_descriptor(IndonesianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IndonesianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IndonesianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IndonesianAnalyzer::wrap_Object(IndonesianAnalyzer(((t_IndonesianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::id::IndonesianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/GermanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *GermanStemmer::class$ = NULL;
        jmethodID *GermanStemmer::mids$ = NULL;
        bool GermanStemmer::live$ = false;

        jclass GermanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/GermanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GermanStemmer::GermanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean GermanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint GermanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean GermanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args);

        static PyMethodDef t_GermanStemmer__methods_[] = {
          DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::org::tartarus::snowball::SnowballProgram, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

        void t_GermanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
        }

        void t_GermanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
            return NULL;
          return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
        }
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GermanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
        {
          GermanStemmer object((jobject) NULL);

          INT_CALL(object = GermanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectTrackingAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectTrackingAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectTrackingAllocator::live$ = false;

        jclass ByteBlockPool$DirectTrackingAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(const ::org::apache::lucene::util::Counter & a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        JArray< jbyte > ByteBlockPool$DirectTrackingAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$DirectTrackingAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$DirectTrackingAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$DirectTrackingAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$DirectTrackingAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator_init_, 0, 0, t_ByteBlockPool$DirectTrackingAllocator__fields_, 0, 0);

        void t_ByteBlockPool$DirectTrackingAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), module, "ByteBlockPool$DirectTrackingAllocator", 0);
        }

        void t_ByteBlockPool$DirectTrackingAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectTrackingAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectTrackingAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectTrackingAllocator::wrap_Object(ByteBlockPool$DirectTrackingAllocator(((t_ByteBlockPool$DirectTrackingAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatTaxonomyFacets::class$ = NULL;
          jmethodID *FloatTaxonomyFacets::mids$ = NULL;
          bool FloatTaxonomyFacets::live$ = false;

          jclass FloatTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number FloatTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult FloatTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args);
          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_FloatTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_FloatTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatTaxonomyFacets, t_FloatTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, FloatTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_FloatTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatTaxonomyFacets), module, "FloatTaxonomyFacets", 0);
          }

          void t_FloatTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "class_", make_descriptor(FloatTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_FloatTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_FloatTaxonomyFacets::wrap_Object(FloatTaxonomyFacets(((t_FloatTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValues::class$ = NULL;
        jmethodID *DocValues::mids$ = NULL;
        bool DocValues::live$ = false;

        jclass DocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docsWithValue_6932366e] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_c7ef87d6] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedNumericDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_f9286ac1] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedSetDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_emptyBinary_56a19500] = env->getStaticMethodID(cls, "emptyBinary", "()Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_emptyNumeric_729438c3] = env->getStaticMethodID(cls, "emptyNumeric", "()Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_emptySorted_57832734] = env->getStaticMethodID(cls, "emptySorted", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_emptySortedNumeric_68ec8b8c] = env->getStaticMethodID(cls, "emptySortedNumeric", "()Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_emptySortedSet_4bead171] = env->getStaticMethodID(cls, "emptySortedSet", "()Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getBinary_d197d479] = env->getStaticMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_abcbf8b8] = env->getStaticMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_e27a1341] = env->getStaticMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_593e885b] = env->getStaticMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_1498712e] = env->getStaticMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_9fed6638] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/SortedDocValues;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_082bce56] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/NumericDocValues;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_unwrapSingleton_c9f185f6] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedSetDocValues;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_unwrapSingleton_66807036] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_unwrapSingletonBits_aa3508ee] = env->getStaticMethodID(cls, "unwrapSingletonBits", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_6932366e], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedNumericDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_c7ef87d6], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedSetDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_f9286ac1], a0.this$, a1));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::emptyBinary()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyBinary_56a19500]));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::emptyNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyNumeric_729438c3]));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::emptySorted()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySorted_57832734]));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::emptySortedNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedNumeric_68ec8b8c]));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::emptySortedSet()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_4bead171]));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::getBinary(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinary_d197d479], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::getNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumeric_abcbf8b8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::getSorted(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSorted_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::getSortedNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumeric_593e885b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::getSortedSet(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSet_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::singleton(const ::org::apache::lucene::index::SortedDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_9fed6638], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::singleton(const ::org::apache::lucene::index::NumericDocValues & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_082bce56], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedSetDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_c9f185f6], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_66807036], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::unwrapSingletonBits(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingletonBits_aa3508ee], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type);
        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySorted(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type);
        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_DocValues__methods_[] = {
          DECLARE_METHOD(t_DocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, docsWithValue, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyBinary, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySorted, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedSet, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getBinary, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSorted, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedSet, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, singleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingletonBits, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValues, t_DocValues, ::java::lang::Object, DocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValues), module, "DocValues", 0);
        }

        void t_DocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "class_", make_descriptor(DocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "wrapfn_", make_descriptor(t_DocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValues::initializeClass, 1)))
            return NULL;
          return t_DocValues::wrap_Object(DocValues(((t_DocValues *) arg)->object.this$));
        }
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "docsWithValue", args);
          return NULL;
        }

        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type)
        {
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyBinary());
          return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyNumeric());
          return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySorted(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySorted());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedNumeric());
          return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedSet());
          return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getBinary(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinary", args);
          return NULL;
        }

        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getNumeric(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSorted(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSorted", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedNumeric(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedSet(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSet", args);
          return NULL;
        }

        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0));
                return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::NumericDocValues::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0, a1));
                return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "singleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "unwrapSingleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingletonBits(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrapSingletonBits", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {

          ::java::lang::Class *MemoryIndex::class$ = NULL;
          jmethodID *MemoryIndex::mids$ = NULL;
          bool MemoryIndex::live$ = false;

          jclass MemoryIndex::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/index/memory/MemoryIndex");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_addField_7d0c5392] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addField_2f58d53f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;F)V");
              mids$[mid_addField_94a4a674] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addField_29c81a73] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FI)V");
              mids$[mid_addField_6b38bf6f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FII)V");
              mids$[mid_createSearcher_cab79e71] = env->getMethodID(cls, "createSearcher", "()Lorg/apache/lucene/search/IndexSearcher;");
              mids$[mid_keywordTokenStream_f7dc1120] = env->getMethodID(cls, "keywordTokenStream", "(Ljava/util/Collection;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_search_6e301103] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MemoryIndex::MemoryIndex() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MemoryIndex::MemoryIndex(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_7d0c5392], a0.this$, a1.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_2f58d53f], a0.this$, a1.this$, a2);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_94a4a674], a0.this$, a1.this$, a2.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_29c81a73], a0.this$, a1.this$, a2, a3);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_6b38bf6f], a0.this$, a1.this$, a2, a3, a4);
          }

          ::org::apache::lucene::search::IndexSearcher MemoryIndex::createSearcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_createSearcher_cab79e71]));
          }

          ::org::apache::lucene::analysis::TokenStream MemoryIndex::keywordTokenStream(const ::java::util::Collection & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_keywordTokenStream_f7dc1120], a0.this$));
          }

          void MemoryIndex::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          jfloat MemoryIndex::search(const ::org::apache::lucene::search::Query & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_search_6e301103], a0.this$);
          }

          ::java::lang::String MemoryIndex::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {
          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args);
          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args);

          static PyMethodDef t_MemoryIndex__methods_[] = {
            DECLARE_METHOD(t_MemoryIndex, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, addField, METH_VARARGS),
            DECLARE_METHOD(t_MemoryIndex, createSearcher, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, keywordTokenStream, METH_O),
            DECLARE_METHOD(t_MemoryIndex, reset, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, search, METH_O),
            DECLARE_METHOD(t_MemoryIndex, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MemoryIndex, t_MemoryIndex, ::java::lang::Object, MemoryIndex, t_MemoryIndex_init_, 0, 0, 0, 0, 0);

          void t_MemoryIndex::install(PyObject *module)
          {
            installType(&PY_TYPE(MemoryIndex), module, "MemoryIndex", 0);
          }

          void t_MemoryIndex::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "class_", make_descriptor(MemoryIndex::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "wrapfn_", make_descriptor(t_MemoryIndex::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MemoryIndex::initializeClass, 1)))
              return NULL;
            return t_MemoryIndex::wrap_Object(MemoryIndex(((t_MemoryIndex *) arg)->object.this$));
          }
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MemoryIndex::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MemoryIndex object((jobject) NULL);

                INT_CALL(object = MemoryIndex());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                MemoryIndex object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = MemoryIndex(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.addField(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;

                if (!parseArgs(args, "skF", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;

                if (!parseArgs(args, "skFI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;

                if (!parseArgs(args, "skFII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addField", args);
            return NULL;
          }

          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self)
          {
            ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);
            OBJ_CALL(result = self->object.createSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.keywordTokenStream(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "keywordTokenStream", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.search(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "search", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MemoryIndex), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizer::class$ = NULL;
          jmethodID *SoraniNormalizer::mids$ = NULL;
          bool SoraniNormalizer::live$ = false;

          jclass SoraniNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizer::SoraniNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizer__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizer, t_SoraniNormalizer, ::java::lang::Object, SoraniNormalizer, t_SoraniNormalizer_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizer), module, "SoraniNormalizer", 0);
          }

          void t_SoraniNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "class_", make_descriptor(SoraniNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizer::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizer::wrap_Object(SoraniNormalizer(((t_SoraniNormalizer *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds)
          {
            SoraniNormalizer object((jobject) NULL);

            INT_CALL(object = SoraniNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FilterIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FilterIterator::class$ = NULL;
        jmethodID *FilterIterator::mids$ = NULL;
        bool FilterIterator::live$ = false;

        jclass FilterIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FilterIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_106d97d5] = env->getMethodID(cls, "<init>", "(Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_predicateFunction_290588e2] = env->getMethodID(cls, "predicateFunction", "(Ljava/lang/Object;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterIterator::FilterIterator(const ::java::util::Iterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_106d97d5, a0.this$)) {}

        jboolean FilterIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Object FilterIterator::next() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
        }

        void FilterIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args);
        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self);
        static PyObject *t_FilterIterator_next(t_FilterIterator *self);
        static PyObject *t_FilterIterator_remove(t_FilterIterator *self);
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data);
        static PyGetSetDef t_FilterIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilterIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterIterator__methods_[] = {
          DECLARE_METHOD(t_FilterIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterIterator, t_FilterIterator, ::java::lang::Object, FilterIterator, t_FilterIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_FilterIterator__fields_, 0, 0);
        PyObject *t_FilterIterator::wrap_Object(const FilterIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterIterator), module, "FilterIterator", 0);
        }

        void t_FilterIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "class_", make_descriptor(FilterIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "wrapfn_", make_descriptor(t_FilterIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterIterator::initializeClass, 1)))
            return NULL;
          return t_FilterIterator::wrap_Object(FilterIterator(((t_FilterIterator *) arg)->object.this$));
        }
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Iterator a0((jobject) NULL);
          PyTypeObject **p0;
          FilterIterator object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
          {
            INT_CALL(object = FilterIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FilterIterator_next(t_FilterIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FilterIterator_remove(t_FilterIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexUpgrader.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexUpgrader::class$ = NULL;
        jmethodID *IndexUpgrader::mids$ = NULL;
        bool IndexUpgrader::live$ = false;

        jclass IndexUpgrader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexUpgrader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3b411aab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;)V");
            mids$[mid_init$_884b85de] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
            mids$[mid_init$_2b2ed566] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/InfoStream;Z)V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_upgrade_54c6a166] = env->getMethodID(cls, "upgrade", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b411aab, a0.this$, a1.this$)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_884b85de, a0.this$, a1.this$, a2)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::org::apache::lucene::util::InfoStream & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2b2ed566, a0.this$, a1.this$, a2.this$, a3)) {}

        void IndexUpgrader::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void IndexUpgrader::upgrade() const
        {
          env->callVoidMethod(this$, mids$[mid_upgrade_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self);

        static PyMethodDef t_IndexUpgrader__methods_[] = {
          DECLARE_METHOD(t_IndexUpgrader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, upgrade, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexUpgrader, t_IndexUpgrader, ::java::lang::Object, IndexUpgrader, t_IndexUpgrader_init_, 0, 0, 0, 0, 0);

        void t_IndexUpgrader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexUpgrader), module, "IndexUpgrader", 0);
        }

        void t_IndexUpgrader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "class_", make_descriptor(IndexUpgrader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "wrapfn_", make_descriptor(t_IndexUpgrader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexUpgrader::initializeClass, 1)))
            return NULL;
          return t_IndexUpgrader::wrap_Object(IndexUpgrader(((t_IndexUpgrader *) arg)->object.this$));
        }
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexUpgrader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              PyTypeObject **p1;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
              {
                INT_CALL(object = IndexUpgrader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
              jboolean a2;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::util::InfoStream a2((jobject) NULL);
              jboolean a3;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kKkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::InfoStream::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_, &a2, &a3))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexUpgrader::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self)
        {
          OBJ_CALL(self->object.upgrade());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene40PostingsBaseFormat::mids$ = NULL;
          bool Lucene40PostingsBaseFormat::live$ = false;

          jclass Lucene40PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsBaseFormat::Lucene40PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene40PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene40PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsBaseFormat), module, "Lucene40PostingsBaseFormat", 0);
          }

          void t_Lucene40PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsBaseFormat::wrap_Object(Lucene40PostingsBaseFormat(((t_Lucene40PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherManager.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherManager::class$ = NULL;
        jmethodID *SearcherManager::mids$ = NULL;
        bool SearcherManager::live$ = false;

        jclass SearcherManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8abe804e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_1c94e792] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_getSearcher_00082010] = env->getStaticMethodID(cls, "getSearcher", "(Lorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_isSearcherCurrent_54c6a16a] = env->getMethodID(cls, "isSearcherCurrent", "()Z");
            mids$[mid_decRef_474fe51c] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/search/IndexSearcher;)V");
            mids$[mid_getRefCount_474fe503] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/search/IndexSearcher;)I");
            mids$[mid_tryIncRef_474fe510] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/search/IndexSearcher;)Z");
            mids$[mid_refreshIfNeeded_8f3bcadb] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherManager::SearcherManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_8abe804e, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_1c94e792, a0.this$, a1, a2.this$)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherManager::getSearcher(const ::org::apache::lucene::search::SearcherFactory & a0, const ::org::apache::lucene::index::IndexReader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::IndexSearcher(env->callStaticObjectMethod(cls, mids$[mid_getSearcher_00082010], a0.this$, a1.this$));
        }

        jboolean SearcherManager::isSearcherCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSearcherCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args);
        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args);
        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self);
        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data);
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data);
        static PyGetSetDef t_SearcherManager__fields_[] = {
          DECLARE_GET_FIELD(t_SearcherManager, searcherCurrent),
          DECLARE_GET_FIELD(t_SearcherManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SearcherManager__methods_[] = {
          DECLARE_METHOD(t_SearcherManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_SearcherManager, getSearcher, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, isSearcherCurrent, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherManager, t_SearcherManager, ::org::apache::lucene::search::ReferenceManager, SearcherManager, t_SearcherManager_init_, 0, 0, t_SearcherManager__fields_, 0, 0);
        PyObject *t_SearcherManager::wrap_Object(const SearcherManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SearcherManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SearcherManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherManager), module, "SearcherManager", 0);
        }

        void t_SearcherManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "class_", make_descriptor(SearcherManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherManager::initializeClass, 1)))
            return NULL;
          return t_SearcherManager::wrap_Object(SearcherManager(((t_SearcherManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kZk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SearcherManager(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::SearcherFactory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SearcherManager::getSearcher(a0, a1));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSearcher", args);
          return NULL;
        }

        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder::live$ = false;

          jclass ScoreOrderFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List ScoreOrderFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder), module, "ScoreOrderFragmentsBuilder", 0);
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "ScoreComparator", make_descriptor(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator)));
          }

          void t_ScoreOrderFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder::wrap_Object(ScoreOrderFragmentsBuilder(((t_ScoreOrderFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = ScoreOrderFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(ScoreOrderFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector::class$ = NULL;
        jmethodID *FacetsCollector::mids$ = NULL;
        bool FacetsCollector::live$ = false;

        jclass FacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getKeepScores_54c6a16a] = env->getMethodID(cls, "getKeepScores", "()Z");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_search_670d4dc3] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_904a71a9] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8966278] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_c564507a] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_4ab72933] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_be14f375] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_8d45b2eb] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_b14f4589] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_createDocs_04d72adb] = env->getMethodID(cls, "createDocs", "(I)Lorg/apache/lucene/facet/FacetsCollector$Docs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector::FacetsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        FacetsCollector::FacetsCollector(jboolean a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        jboolean FacetsCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void FacetsCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jboolean FacetsCollector::getKeepScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getKeepScores_54c6a16a]);
        }

        ::java::util::List FacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Collector & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_670d4dc3], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Collector & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_904a71a9], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_d8966278], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6, const ::org::apache::lucene::search::Collector & a7)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_c564507a], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6, a7.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Collector & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_4ab72933], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_be14f375], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, const ::org::apache::lucene::search::Collector & a6)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_8d45b2eb], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::Filter & a3, jint a4, const ::org::apache::lucene::search::Sort & a5, jboolean a6, jboolean a7, const ::org::apache::lucene::search::Collector & a8)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_b14f4589], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6, a7, a8.this$));
        }

        void FacetsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void FacetsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data);
        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data);
        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data);
        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_FacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector, keepScores),
          DECLARE_GET_FIELD(t_FacetsCollector, matchingDocs),
          DECLARE_SET_FIELD(t_FacetsCollector, nextReader),
          DECLARE_SET_FIELD(t_FacetsCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, getKeepScores, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, getMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, search, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector, t_FacetsCollector, ::org::apache::lucene::search::Collector, FacetsCollector, t_FacetsCollector_init_, 0, 0, t_FacetsCollector__fields_, 0, 0);

        void t_FacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector), module, "FacetsCollector", 0);
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "MatchingDocs", make_descriptor(&PY_TYPE(FacetsCollector$MatchingDocs)));
        }

        void t_FacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "class_", make_descriptor(FacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector::wrap_Object(FacetsCollector(((t_FacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              FacetsCollector object((jobject) NULL);

              INT_CALL(object = FacetsCollector());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              FacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = FacetsCollector(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector_acceptsDocsOutOfOrder(t_FacetsCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getKeepScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Collector a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Collector a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 8:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::Collector a7((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5, a6, a7));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "search", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::search::Collector a4((jobject) NULL);
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter_(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              ::org::apache::lucene::search::Collector a6((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 9:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::org::apache::lucene::search::Filter a3((jobject) NULL);
              jint a4;
              ::org::apache::lucene::search::Sort a5((jobject) NULL);
              jboolean a6;
              jboolean a7;
              ::org::apache::lucene::search::Collector a8((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkkIkZZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "searchAfter_", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_setNextReader(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FacetsCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getKeepScores());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static int t_FacetsCollector_set__nextReader(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *State::class$ = NULL;
          jmethodID *State::mids$ = NULL;
          jfieldID *State::fids$ = NULL;
          bool State::live$ = false;

          jclass State::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/State");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addTransition_8209dac4] = env->getMethodID(cls, "addTransition", "(Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_compareTo_931bc94c] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/automaton/State;)I");
              mids$[mid_getNumber_54c6a179] = env->getMethodID(cls, "getNumber", "()I");
              mids$[mid_getTransitions_0ab6fc38] = env->getMethodID(cls, "getTransitions", "()Ljava/lang/Iterable;");
              mids$[mid_isAccept_54c6a16a] = env->getMethodID(cls, "isAccept", "()Z");
              mids$[mid_numTransitions_54c6a179] = env->getMethodID(cls, "numTransitions", "()I");
              mids$[mid_reduce_54c6a166] = env->getMethodID(cls, "reduce", "()V");
              mids$[mid_setAccept_bb0c767f] = env->getMethodID(cls, "setAccept", "(Z)V");
              mids$[mid_setTransitions_bc11dd38] = env->getMethodID(cls, "setTransitions", "([Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_sortTransitions_6ffdd545] = env->getMethodID(cls, "sortTransitions", "(Ljava/util/Comparator;)V");
              mids$[mid_step_efd54f68] = env->getMethodID(cls, "step", "(I)Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_step_006cd2bb] = env->getMethodID(cls, "step", "(ILjava/util/Collection;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_trimTransitionsArray_54c6a166] = env->getMethodID(cls, "trimTransitionsArray", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_numTransitions] = env->getFieldID(cls, "numTransitions", "I");
              fids$[fid_transitionsArray] = env->getFieldID(cls, "transitionsArray", "[Lorg/apache/lucene/util/automaton/Transition;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          State::State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void State::addTransition(const ::org::apache::lucene::util::automaton::Transition & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_8209dac4], a0.this$);
          }

          jint State::compareTo(const State & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_931bc94c], a0.this$);
          }

          jint State::getNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumber_54c6a179]);
          }

          ::java::lang::Iterable State::getTransitions() const
          {
            return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getTransitions_0ab6fc38]));
          }

          jboolean State::isAccept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_54c6a16a]);
          }

          jint State::numTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_numTransitions_54c6a179]);
          }

          void State::reduce() const
          {
            env->callVoidMethod(this$, mids$[mid_reduce_54c6a166]);
          }

          void State::setAccept(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_bb0c767f], a0);
          }

          void State::setTransitions(const JArray< ::org::apache::lucene::util::automaton::Transition > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTransitions_bc11dd38], a0.this$);
          }

          void State::sortTransitions(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_sortTransitions_6ffdd545], a0.this$);
          }

          State State::step(jint a0) const
          {
            return State(env->callObjectMethod(this$, mids$[mid_step_efd54f68], a0));
          }

          void State::step(jint a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_step_006cd2bb], a0, a1.this$);
          }

          ::java::lang::String State::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void State::trimTransitionsArray() const
          {
            env->callVoidMethod(this$, mids$[mid_trimTransitionsArray_54c6a166]);
          }

          jint State::_get_numTransitions() const
          {
            return env->getIntField(this$, fids$[fid_numTransitions]);
          }

          void State::_set_numTransitions(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numTransitions], a0);
          }

          JArray< ::org::apache::lucene::util::automaton::Transition > State::_get_transitionsArray() const
          {
            return JArray< ::org::apache::lucene::util::automaton::Transition >(env->getObjectField(this$, fids$[fid_transitionsArray]));
          }

          void State::_set_transitionsArray(const JArray< ::org::apache::lucene::util::automaton::Transition > & a0) const
          {
            env->setObjectField(this$, fids$[fid_transitionsArray], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_State_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_State_instance_(PyTypeObject *type, PyObject *arg);
          static int t_State_init_(t_State *self, PyObject *args, PyObject *kwds);
          static PyObject *t_State_addTransition(t_State *self, PyObject *arg);
          static PyObject *t_State_compareTo(t_State *self, PyObject *arg);
          static PyObject *t_State_getNumber(t_State *self);
          static PyObject *t_State_getTransitions(t_State *self);
          static PyObject *t_State_isAccept(t_State *self);
          static PyObject *t_State_numTransitions(t_State *self);
          static PyObject *t_State_reduce(t_State *self);
          static PyObject *t_State_setAccept(t_State *self, PyObject *arg);
          static PyObject *t_State_setTransitions(t_State *self, PyObject *arg);
          static PyObject *t_State_sortTransitions(t_State *self, PyObject *arg);
          static PyObject *t_State_step(t_State *self, PyObject *args);
          static PyObject *t_State_toString(t_State *self, PyObject *args);
          static PyObject *t_State_trimTransitionsArray(t_State *self);
          static PyObject *t_State_get__numTransitions(t_State *self, void *data);
          static int t_State_set__numTransitions(t_State *self, PyObject *arg, void *data);
          static PyObject *t_State_get__transitionsArray(t_State *self, void *data);
          static int t_State_set__transitionsArray(t_State *self, PyObject *arg, void *data);

          static PyObject *t_State_get__accept(t_State *self, void *data);
          static int t_State_set__accept(t_State *self, PyObject *arg, void *data);
          static PyObject *t_State_get__number(t_State *self, void *data);
          static PyObject *t_State_get__transitions(t_State *self, void *data);
          static int t_State_set__transitions(t_State *self, PyObject *arg, void *data);
          static PyGetSetDef t_State__fields_[] = {
            DECLARE_GETSET_FIELD(t_State, numTransitions),
            DECLARE_GETSET_FIELD(t_State, transitionsArray),
            DECLARE_GETSET_FIELD(t_State, accept),
            DECLARE_GET_FIELD(t_State, number),
            DECLARE_GETSET_FIELD(t_State, transitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_State__methods_[] = {
            DECLARE_METHOD(t_State, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_State, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_State, addTransition, METH_O),
            DECLARE_METHOD(t_State, compareTo, METH_O),
            DECLARE_METHOD(t_State, getNumber, METH_NOARGS),
            DECLARE_METHOD(t_State, getTransitions, METH_NOARGS),
            DECLARE_METHOD(t_State, isAccept, METH_NOARGS),
            DECLARE_METHOD(t_State, numTransitions, METH_NOARGS),
            DECLARE_METHOD(t_State, reduce, METH_NOARGS),
            DECLARE_METHOD(t_State, setAccept, METH_O),
            DECLARE_METHOD(t_State, setTransitions, METH_O),
            DECLARE_METHOD(t_State, sortTransitions, METH_O),
            DECLARE_METHOD(t_State, step, METH_VARARGS),
            DECLARE_METHOD(t_State, toString, METH_VARARGS),
            DECLARE_METHOD(t_State, trimTransitionsArray, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(State, t_State, ::java::lang::Object, State, t_State_init_, 0, 0, t_State__fields_, 0, 0);

          void t_State::install(PyObject *module)
          {
            installType(&PY_TYPE(State), module, "State", 0);
          }

          void t_State::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "class_", make_descriptor(State::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "wrapfn_", make_descriptor(t_State::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(State).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_State_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, State::initializeClass, 1)))
              return NULL;
            return t_State::wrap_Object(State(((t_State *) arg)->object.this$));
          }
          static PyObject *t_State_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, State::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_State_init_(t_State *self, PyObject *args, PyObject *kwds)
          {
            State object((jobject) NULL);

            INT_CALL(object = State());
            self->object = object;

            return 0;
          }

          static PyObject *t_State_addTransition(t_State *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Transition a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addTransition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", arg);
            return NULL;
          }

          static PyObject *t_State_compareTo(t_State *self, PyObject *arg)
          {
            State a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", State::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_State_getNumber(t_State *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_State_getTransitions(t_State *self)
          {
            ::java::lang::Iterable result((jobject) NULL);
            OBJ_CALL(result = self->object.getTransitions());
            return ::java::lang::t_Iterable::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(Transition));
          }

          static PyObject *t_State_isAccept(t_State *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isAccept());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_State_numTransitions(t_State *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numTransitions());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_State_reduce(t_State *self)
          {
            OBJ_CALL(self->object.reduce());
            Py_RETURN_NONE;
          }

          static PyObject *t_State_setAccept(t_State *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAccept(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", arg);
            return NULL;
          }

          static PyObject *t_State_setTransitions(t_State *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTransitions(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTransitions", arg);
            return NULL;
          }

          static PyObject *t_State_sortTransitions(t_State *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.sortTransitions(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "sortTransitions", arg);
            return NULL;
          }

          static PyObject *t_State_step(t_State *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                State result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.step(a0));
                  return t_State::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(self->object.step(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_State_toString(t_State *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(State), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_State_trimTransitionsArray(t_State *self)
          {
            OBJ_CALL(self->object.trimTransitionsArray());
            Py_RETURN_NONE;
          }

          static PyObject *t_State_get__numTransitions(t_State *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numTransitions());
            return PyInt_FromLong((long) value);
          }
          static int t_State_set__numTransitions(t_State *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numTransitions(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numTransitions", arg);
            return -1;
          }

          static PyObject *t_State_get__transitionsArray(t_State *self, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_transitionsArray());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::automaton::t_Transition::wrap_jobject);
          }
          static int t_State_set__transitionsArray(t_State *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &value))
            {
              INT_CALL(self->object._set_transitionsArray(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "transitionsArray", arg);
            return -1;
          }

          static PyObject *t_State_get__accept(t_State *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isAccept());
            Py_RETURN_BOOL(value);
          }
          static int t_State_set__accept(t_State *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAccept(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return -1;
          }

          static PyObject *t_State_get__number(t_State *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_State_get__transitions(t_State *self, void *data)
          {
            ::java::lang::Iterable value((jobject) NULL);
            OBJ_CALL(value = self->object.getTransitions());
            return ::java::lang::t_Iterable::wrap_Object(value);
          }
          static int t_State_set__transitions(t_State *self, PyObject *arg, void *data)
          {
            {
              JArray< ::org::apache::lucene::util::automaton::Transition > value((jobject) NULL);
              if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &value))
              {
                INT_CALL(self->object.setTransitions(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "transitions", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingSuggester::class$ = NULL;
            jmethodID *AnalyzingSuggester::mids$ = NULL;
            bool AnalyzingSuggester::live$ = false;
            jint AnalyzingSuggester::EXACT_FIRST = (jint) 0;
            jint AnalyzingSuggester::PRESERVE_SEP = (jint) 0;

            jclass AnalyzingSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9a7c82f9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EXACT_FIRST = env->getStaticIntField(cls, "EXACT_FIRST");
                PRESERVE_SEP = env->getStaticIntField(cls, "PRESERVE_SEP");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9a7c82f9, a0.this$, a1.this$, a2, a3, a4, a5)) {}

            void AnalyzingSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object AnalyzingSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong AnalyzingSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong AnalyzingSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean AnalyzingSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, get, METH_O),
              DECLARE_METHOD(t_AnalyzingSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingSuggester, t_AnalyzingSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingSuggester, t_AnalyzingSuggester_init_, 0, 0, t_AnalyzingSuggester__fields_, 0, 0);

            void t_AnalyzingSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingSuggester), module, "AnalyzingSuggester", 0);
            }

            void t_AnalyzingSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "class_", make_descriptor(AnalyzingSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "EXACT_FIRST", make_descriptor(AnalyzingSuggester::EXACT_FIRST));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "PRESERVE_SEP", make_descriptor(AnalyzingSuggester::PRESERVE_SEP));
            }

            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingSuggester::wrap_Object(AnalyzingSuggester(((t_AnalyzingSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 6:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2, a3, a4, a5));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Accountable::class$ = NULL;
        jmethodID *Accountable::mids$ = NULL;
        bool Accountable::live$ = false;

        jclass Accountable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Accountable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Accountable::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self);

        static PyMethodDef t_Accountable__methods_[] = {
          DECLARE_METHOD(t_Accountable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Accountable, t_Accountable, ::java::lang::Object, Accountable, abstract_init, 0, 0, 0, 0, 0);

        void t_Accountable::install(PyObject *module)
        {
          installType(&PY_TYPE(Accountable), module, "Accountable", 0);
        }

        void t_Accountable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "class_", make_descriptor(Accountable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "wrapfn_", make_descriptor(t_Accountable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Accountable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Accountable::initializeClass, 1)))
            return NULL;
          return t_Accountable::wrap_Object(Accountable(((t_Accountable *) arg)->object.this$));
        }
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Accountable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CodecUtil::class$ = NULL;
        jmethodID *CodecUtil::mids$ = NULL;
        bool CodecUtil::live$ = false;
        jint CodecUtil::CODEC_MAGIC = (jint) 0;
        jint CodecUtil::FOOTER_MAGIC = (jint) 0;

        jclass CodecUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CodecUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkEOF_0441f0b2] = env->getStaticMethodID(cls, "checkEOF", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_checkFooter_f5e506b9] = env->getStaticMethodID(cls, "checkFooter", "(Lorg/apache/lucene/store/ChecksumIndexInput;)J");
            mids$[mid_checkHeader_128b127c] = env->getStaticMethodID(cls, "checkHeader", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checkHeaderNoMagic_128b127c] = env->getStaticMethodID(cls, "checkHeaderNoMagic", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checksumEntireFile_0441f0ae] = env->getStaticMethodID(cls, "checksumEntireFile", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_footerLength_54c6a179] = env->getStaticMethodID(cls, "footerLength", "()I");
            mids$[mid_headerLength_5fdc3f57] = env->getStaticMethodID(cls, "headerLength", "(Ljava/lang/String;)I");
            mids$[mid_retrieveChecksum_0441f0ae] = env->getStaticMethodID(cls, "retrieveChecksum", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_writeFooter_faad620a] = env->getStaticMethodID(cls, "writeFooter", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_writeHeader_6b5c1111] = env->getStaticMethodID(cls, "writeHeader", "(Lorg/apache/lucene/store/DataOutput;Ljava/lang/String;I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_MAGIC = env->getStaticIntField(cls, "CODEC_MAGIC");
            FOOTER_MAGIC = env->getStaticIntField(cls, "FOOTER_MAGIC");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CodecUtil::checkEOF(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkEOF_0441f0b2], a0.this$);
        }

        jlong CodecUtil::checkFooter(const ::org::apache::lucene::store::ChecksumIndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checkFooter_f5e506b9], a0.this$);
        }

        jint CodecUtil::checkHeader(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeader_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jint CodecUtil::checkHeaderNoMagic(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeaderNoMagic_128b127c], a0.this$, a1.this$, a2, a3);
        }

        jlong CodecUtil::checksumEntireFile(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checksumEntireFile_0441f0ae], a0.this$);
        }

        jint CodecUtil::footerLength()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_footerLength_54c6a179]);
        }

        jint CodecUtil::headerLength(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_headerLength_5fdc3f57], a0.this$);
        }

        jlong CodecUtil::retrieveChecksum(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_retrieveChecksum_0441f0ae], a0.this$);
        }

        void CodecUtil::writeFooter(const ::org::apache::lucene::store::IndexOutput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeFooter_faad620a], a0.this$);
        }

        void CodecUtil::writeHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::java::lang::String & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeHeader_6b5c1111], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type);
        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CodecUtil__methods_[] = {
          DECLARE_METHOD(t_CodecUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkEOF, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeaderNoMagic, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checksumEntireFile, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, footerLength, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, headerLength, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, retrieveChecksum, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeHeader, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CodecUtil, t_CodecUtil, ::java::lang::Object, CodecUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CodecUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CodecUtil), module, "CodecUtil", 0);
        }

        void t_CodecUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "class_", make_descriptor(CodecUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "wrapfn_", make_descriptor(t_CodecUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CodecUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "CODEC_MAGIC", make_descriptor(CodecUtil::CODEC_MAGIC));
          PyDict_SetItemString(PY_TYPE(CodecUtil).tp_dict, "FOOTER_MAGIC", make_descriptor(CodecUtil::FOOTER_MAGIC));
        }

        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CodecUtil::initializeClass, 1)))
            return NULL;
          return t_CodecUtil::wrap_Object(CodecUtil(((t_CodecUtil *) arg)->object.this$));
        }
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CodecUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CodecUtil_checkEOF(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::checkEOF(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkEOF", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkFooter(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checkFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeader(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeaderNoMagic(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeaderNoMagic", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checksumEntireFile(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checksumEntireFile", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::footerLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::headerLength(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "headerLength", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::retrieveChecksum(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "retrieveChecksum", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeFooter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "ksI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeHeader(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeHeader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansOrdered::class$ = NULL;
          jmethodID *NearSpansOrdered::mids$ = NULL;
          bool NearSpansOrdered::live$ = false;

          jclass NearSpansOrdered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansOrdered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_init$_0f9019fb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;Z)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3, jboolean a4) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_0f9019fb, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          jlong NearSpansOrdered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansOrdered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansOrdered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansOrdered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansOrdered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansOrdered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansOrdered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansOrdered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansOrdered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansOrdered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self);
          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data);
          static PyGetSetDef t_NearSpansOrdered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansOrdered, payload),
            DECLARE_GET_FIELD(t_NearSpansOrdered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansOrdered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansOrdered__methods_[] = {
            DECLARE_METHOD(t_NearSpansOrdered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansOrdered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansOrdered, t_NearSpansOrdered, ::org::apache::lucene::search::spans::Spans, NearSpansOrdered, t_NearSpansOrdered_init_, 0, 0, t_NearSpansOrdered__fields_, 0, 0);

          void t_NearSpansOrdered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansOrdered), module, "NearSpansOrdered", 0);
          }

          void t_NearSpansOrdered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "class_", make_descriptor(NearSpansOrdered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansOrdered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansOrdered::initializeClass, 1)))
              return NULL;
            return t_NearSpansOrdered::wrap_Object(NearSpansOrdered(((t_NearSpansOrdered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansOrdered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkKZ", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/SimpleAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *SimpleAnalyzer::class$ = NULL;
          jmethodID *SimpleAnalyzer::mids$ = NULL;
          bool SimpleAnalyzer::live$ = false;

          jclass SimpleAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/SimpleAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleAnalyzer::SimpleAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SimpleAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SimpleAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleAnalyzer, t_SimpleAnalyzer, ::org::apache::lucene::analysis::Analyzer, SimpleAnalyzer, t_SimpleAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SimpleAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleAnalyzer), module, "SimpleAnalyzer", 0);
          }

          void t_SimpleAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "class_", make_descriptor(SimpleAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SimpleAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SimpleAnalyzer::wrap_Object(SimpleAnalyzer(((t_SimpleAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            SimpleAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              INT_CALL(object = SimpleAnalyzer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton::class$ = NULL;
          jmethodID *CompiledAutomaton::mids$ = NULL;
          jfieldID *CompiledAutomaton::fids$ = NULL;
          bool CompiledAutomaton::live$ = false;

          jclass CompiledAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_3d57924d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/Boolean;Z)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_floor_0991fadd] = env->getMethodID(cls, "floor", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_commonSuffixRef] = env->getFieldID(cls, "commonSuffixRef", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_finite] = env->getFieldID(cls, "finite", "Ljava/lang/Boolean;");
              fids$[fid_runAutomaton] = env->getFieldID(cls, "runAutomaton", "Lorg/apache/lucene/util/automaton/ByteRunAutomaton;");
              fids$[fid_sortedTransitions] = env->getFieldID(cls, "sortedTransitions", "[[Lorg/apache/lucene/util/automaton/Transition;");
              fids$[fid_term] = env->getFieldID(cls, "term", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::Boolean & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3d57924d, a0.this$, a1.this$, a2)) {}

          jboolean CompiledAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::floor(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_floor_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum CompiledAutomaton::getTermsEnum(const ::org::apache::lucene::index::Terms & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getTermsEnum_fb3ac14e], a0.this$));
          }

          jint CompiledAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String CompiledAutomaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_commonSuffixRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_commonSuffixRef]));
          }

          ::java::lang::Boolean CompiledAutomaton::_get_finite() const
          {
            return ::java::lang::Boolean(env->getObjectField(this$, fids$[fid_finite]));
          }

          ::org::apache::lucene::util::automaton::ByteRunAutomaton CompiledAutomaton::_get_runAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::ByteRunAutomaton(env->getObjectField(this$, fids$[fid_runAutomaton]));
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > CompiledAutomaton::_get_sortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->getObjectField(this$, fids$[fid_sortedTransitions]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_term]));
          }

          ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton::_get_type() const
          {
            return ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg);
          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_toDot(t_CompiledAutomaton *self);
          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__sortedTransitions(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data);

          static PyGetSetDef t_CompiledAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton, commonSuffixRef),
            DECLARE_GET_FIELD(t_CompiledAutomaton, finite),
            DECLARE_GET_FIELD(t_CompiledAutomaton, runAutomaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, sortedTransitions),
            DECLARE_GET_FIELD(t_CompiledAutomaton, term),
            DECLARE_GET_FIELD(t_CompiledAutomaton, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, floor, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, getTermsEnum, METH_O),
            DECLARE_METHOD(t_CompiledAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, toDot, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton, t_CompiledAutomaton, ::java::lang::Object, CompiledAutomaton, t_CompiledAutomaton_init_, 0, 0, t_CompiledAutomaton__fields_, 0, 0);

          void t_CompiledAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton), module, "CompiledAutomaton", 0);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "AUTOMATON_TYPE", make_descriptor(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE)));
          }

          void t_CompiledAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "class_", make_descriptor(CompiledAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton::wrap_Object(CompiledAutomaton(((t_CompiledAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = CompiledAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::Boolean a1((jobject) NULL);
                jboolean a2;
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kOZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &::java::lang::PY_TYPE(Boolean), &a0, &a1, &a2))
                {
                  INT_CALL(object = CompiledAutomaton(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.floor(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "floor", args);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getTermsEnum(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermsEnum", arg);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CompiledAutomaton_toDot(t_CompiledAutomaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_commonSuffixRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data)
          {
            ::java::lang::Boolean value((jobject) NULL);
            OBJ_CALL(value = self->object._get_finite());
            return ::java::lang::t_Boolean::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::ByteRunAutomaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_runAutomaton());
            return ::org::apache::lucene::util::automaton::t_ByteRunAutomaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__sortedTransitions(t_CompiledAutomaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }

          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::util::automaton::t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizer::class$ = NULL;
          jmethodID *ClassicTokenizer::mids$ = NULL;
          bool ClassicTokenizer::live$ = false;
          jint ClassicTokenizer::ACRONYM = (jint) 0;
          jint ClassicTokenizer::ACRONYM_DEP = (jint) 0;
          jint ClassicTokenizer::ALPHANUM = (jint) 0;
          jint ClassicTokenizer::APOSTROPHE = (jint) 0;
          jint ClassicTokenizer::CJ = (jint) 0;
          jint ClassicTokenizer::COMPANY = (jint) 0;
          jint ClassicTokenizer::EMAIL = (jint) 0;
          jint ClassicTokenizer::HOST = (jint) 0;
          jint ClassicTokenizer::NUM = (jint) 0;
          JArray< ::java::lang::String > *ClassicTokenizer::TOKEN_TYPES = NULL;

          jclass ClassicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HOST = env->getStaticIntField(cls, "HOST");
              NUM = env->getStaticIntField(cls, "NUM");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void ClassicTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void ClassicTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint ClassicTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean ClassicTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ClassicTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ClassicTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self);
          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg);
          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data);
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicTokenizer__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizer, t_ClassicTokenizer, ::org::apache::lucene::analysis::Tokenizer, ClassicTokenizer, t_ClassicTokenizer_init_, 0, 0, t_ClassicTokenizer__fields_, 0, 0);

          void t_ClassicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizer), module, "ClassicTokenizer", 0);
          }

          void t_ClassicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "class_", make_descriptor(ClassicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM", make_descriptor(ClassicTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(ClassicTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ALPHANUM", make_descriptor(ClassicTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "APOSTROPHE", make_descriptor(ClassicTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "CJ", make_descriptor(ClassicTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "COMPANY", make_descriptor(ClassicTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "EMAIL", make_descriptor(ClassicTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "HOST", make_descriptor(ClassicTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "NUM", make_descriptor(ClassicTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(ClassicTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizer::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizer::wrap_Object(ClassicTokenizer(((t_ClassicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/lang/Class.h"
#include "java/lang/Number.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableField::class$ = NULL;
        jmethodID *IndexableField::mids$ = NULL;
        bool IndexableField::live$ = false;

        jclass IndexableField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_58dcbc9c] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef IndexableField::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat IndexableField::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::index::IndexableFieldType IndexableField::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_58dcbc9c]));
        }

        ::java::lang::String IndexableField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number IndexableField::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader IndexableField::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        ::java::lang::String IndexableField::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream IndexableField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self);
        static PyObject *t_IndexableField_boost(t_IndexableField *self);
        static PyObject *t_IndexableField_fieldType(t_IndexableField *self);
        static PyObject *t_IndexableField_name(t_IndexableField *self);
        static PyObject *t_IndexableField_numericValue(t_IndexableField *self);
        static PyObject *t_IndexableField_readerValue(t_IndexableField *self);
        static PyObject *t_IndexableField_stringValue(t_IndexableField *self);
        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args);

        static PyMethodDef t_IndexableField__methods_[] = {
          DECLARE_METHOD(t_IndexableField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, boost, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, name, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableField, t_IndexableField, ::java::lang::Object, IndexableField, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableField::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableField), module, "IndexableField", 0);
        }

        void t_IndexableField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "class_", make_descriptor(IndexableField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "wrapfn_", make_descriptor(t_IndexableField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableField::initializeClass, 1)))
            return NULL;
          return t_IndexableField::wrap_Object(IndexableField(((t_IndexableField *) arg)->object.this$));
        }
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_IndexableField_boost(t_IndexableField *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_IndexableField_fieldType(t_IndexableField *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_IndexableField_name(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_IndexableField_numericValue(t_IndexableField *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_IndexableField_readerValue(t_IndexableField *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_IndexableField_stringValue(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoDeletionPolicy::class$ = NULL;
        jmethodID *NoDeletionPolicy::mids$ = NULL;
        bool NoDeletionPolicy::live$ = false;
        ::org::apache::lucene::index::IndexDeletionPolicy *NoDeletionPolicy::INSTANCE = NULL;

        jclass NoDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_a18376c3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::IndexDeletionPolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/IndexDeletionPolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexDeletionPolicy NoDeletionPolicy::clone() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_clone_a18376c3]));
        }

        void NoDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void NoDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self);
        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args);
        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_NoDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_NoDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoDeletionPolicy, t_NoDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, NoDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoDeletionPolicy), module, "NoDeletionPolicy", 0);
        }

        void t_NoDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "class_", make_descriptor(NoDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_NoDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(*NoDeletionPolicy::INSTANCE)));
        }

        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_NoDeletionPolicy::wrap_Object(NoDeletionPolicy(((t_NoDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilterFactory::class$ = NULL;
          jmethodID *FrenchLightStemFilterFactory::mids$ = NULL;
          bool FrenchLightStemFilterFactory::live$ = false;

          jclass FrenchLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilterFactory::FrenchLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilterFactory), module, "FrenchLightStemFilterFactory", 0);
          }

          void t_FrenchLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilterFactory::wrap_Object(FrenchLightStemFilterFactory(((t_FrenchLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms$Builder::class$ = NULL;
        jmethodID *PrefixCodedTerms$Builder::mids$ = NULL;
        bool PrefixCodedTerms$Builder::live$ = false;

        jclass PrefixCodedTerms$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixCodedTerms$Builder::PrefixCodedTerms$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PrefixCodedTerms$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg);

        static PyMethodDef t_PrefixCodedTerms$Builder__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, add, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder, ::java::lang::Object, PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder_init_, 0, 0, 0, 0, 0);

        void t_PrefixCodedTerms$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms$Builder), module, "PrefixCodedTerms$Builder", 0);
        }

        void t_PrefixCodedTerms$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "class_", make_descriptor(PrefixCodedTerms$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "wrapfn_", make_descriptor(t_PrefixCodedTerms$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms$Builder::wrap_Object(PrefixCodedTerms$Builder(((t_PrefixCodedTerms$Builder *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds)
        {
          PrefixCodedTerms$Builder object((jobject) NULL);

          INT_CALL(object = PrefixCodedTerms$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Writer.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/io/Flushable.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Writer::class$ = NULL;
    jmethodID *Writer::mids$ = NULL;
    bool Writer::live$ = false;

    jclass Writer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Writer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_append_368f1679] = env->getMethodID(cls, "append", "(C)Ljava/io/Writer;");
        mids$[mid_append_31d2f801] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
        mids$[mid_append_b3d4aa31] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Writer Writer::append(jchar a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_368f1679], a0));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_31d2f801], a0.this$));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_b3d4aa31], a0.this$, a1, a2));
    }

    void Writer::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Writer::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    void Writer::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void Writer::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void Writer::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void Writer::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void Writer::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_append(t_Writer *self, PyObject *args);
    static PyObject *t_Writer_close(t_Writer *self);
    static PyObject *t_Writer_flush(t_Writer *self);
    static PyObject *t_Writer_write(t_Writer *self, PyObject *args);

    static PyMethodDef t_Writer__methods_[] = {
      DECLARE_METHOD(t_Writer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, append, METH_VARARGS),
      DECLARE_METHOD(t_Writer, close, METH_NOARGS),
      DECLARE_METHOD(t_Writer, flush, METH_NOARGS),
      DECLARE_METHOD(t_Writer, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Writer, t_Writer, ::java::lang::Object, Writer, abstract_init, 0, 0, 0, 0, 0);

    void t_Writer::install(PyObject *module)
    {
      installType(&PY_TYPE(Writer), module, "Writer", 0);
    }

    void t_Writer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "class_", make_descriptor(Writer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "wrapfn_", make_descriptor(t_Writer::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Writer::initializeClass, 1)))
        return NULL;
      return t_Writer::wrap_Object(Writer(((t_Writer *) arg)->object.this$));
    }
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Writer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Writer_append(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          Writer result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_Writer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "append", args);
      return NULL;
    }

    static PyObject *t_Writer_close(t_Writer *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_flush(t_Writer *self)
    {
      OBJ_CALL(self->object.flush());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_write(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "write", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ThreadInterruptedException::class$ = NULL;
        jmethodID *ThreadInterruptedException::mids$ = NULL;
        bool ThreadInterruptedException::live$ = false;

        jclass ThreadInterruptedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ThreadInterruptedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f201c224] = env->getMethodID(cls, "<init>", "(Ljava/lang/InterruptedException;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ThreadInterruptedException::ThreadInterruptedException(const ::java::lang::InterruptedException & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f201c224, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_ThreadInterruptedException__methods_[] = {
          DECLARE_METHOD(t_ThreadInterruptedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ThreadInterruptedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ThreadInterruptedException, t_ThreadInterruptedException, ::java::lang::RuntimeException, ThreadInterruptedException, t_ThreadInterruptedException_init_, 0, 0, 0, 0, 0);

        void t_ThreadInterruptedException::install(PyObject *module)
        {
          installType(&PY_TYPE(ThreadInterruptedException), module, "ThreadInterruptedException", 0);
        }

        void t_ThreadInterruptedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "class_", make_descriptor(ThreadInterruptedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "wrapfn_", make_descriptor(t_ThreadInterruptedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ThreadInterruptedException::initializeClass, 1)))
            return NULL;
          return t_ThreadInterruptedException::wrap_Object(ThreadInterruptedException(((t_ThreadInterruptedException *) arg)->object.this$));
        }
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ThreadInterruptedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::InterruptedException a0((jobject) NULL);
          ThreadInterruptedException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::InterruptedException::initializeClass, &a0))
          {
            INT_CALL(object = ThreadInterruptedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldDateResolutionFCListener::class$ = NULL;
              jmethodID *FieldDateResolutionFCListener::mids$ = NULL;
              bool FieldDateResolutionFCListener::live$ = false;

              jclass FieldDateResolutionFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldDateResolutionFCListener::FieldDateResolutionFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldDateResolutionFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldDateResolutionFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldDateResolutionFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldDateResolutionFCListener, t_FieldDateResolutionFCListener, ::java::lang::Object, FieldDateResolutionFCListener, t_FieldDateResolutionFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldDateResolutionFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldDateResolutionFCListener), module, "FieldDateResolutionFCListener", 0);
              }

              void t_FieldDateResolutionFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "class_", make_descriptor(FieldDateResolutionFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldDateResolutionFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldDateResolutionFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldDateResolutionFCListener::wrap_Object(FieldDateResolutionFCListener(((t_FieldDateResolutionFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldDateResolutionFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldDateResolutionFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldDateResolutionFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizer::class$ = NULL;
          jmethodID *CJKTokenizer::mids$ = NULL;
          bool CJKTokenizer::live$ = false;

          jclass CJKTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizer::CJKTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          CJKTokenizer::CJKTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void CJKTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CJKTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args);
          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args);

          static PyMethodDef t_CJKTokenizer__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizer, t_CJKTokenizer, ::org::apache::lucene::analysis::Tokenizer, CJKTokenizer, t_CJKTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizer), module, "CJKTokenizer", 0);
          }

          void t_CJKTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "class_", make_descriptor(CJKTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizer::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizer::wrap_Object(CJKTokenizer(((t_CJKTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizer_init_(t_CJKTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = CJKTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                CJKTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizer_end(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CJKTokenizer_incrementToken(t_CJKTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKTokenizer_reset(t_CJKTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *UnescapedCharSequence::class$ = NULL;
              jmethodID *UnescapedCharSequence::mids$ = NULL;
              bool UnescapedCharSequence::live$ = false;

              jclass UnescapedCharSequence::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_init$_225aaf87] = env->getMethodID(cls, "<init>", "([C[ZII)V");
                  mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                  mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                  mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                  mids$[mid_toLowerCase_0df08ccc] = env->getStaticMethodID(cls, "toLowerCase", "(Ljava/lang/CharSequence;Ljava/util/Locale;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_14c7b5c5] = env->getMethodID(cls, "toStringEscaped", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_c783d655] = env->getMethodID(cls, "toStringEscaped", "([C)Ljava/lang/String;");
                  mids$[mid_wasEscaped_39c7bd30] = env->getMethodID(cls, "wasEscaped", "(I)Z");
                  mids$[mid_wasEscaped_2fbf15ac] = env->getStaticMethodID(cls, "wasEscaped", "(Ljava/lang/CharSequence;I)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              UnescapedCharSequence::UnescapedCharSequence(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

              UnescapedCharSequence::UnescapedCharSequence(const JArray< jchar > & a0, const JArray< jboolean > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_225aaf87, a0.this$, a1.this$, a2, a3)) {}

              jchar UnescapedCharSequence::charAt(jint a0) const
              {
                return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
              }

              jint UnescapedCharSequence::length() const
              {
                return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
              }

              ::java::lang::CharSequence UnescapedCharSequence::subSequence(jint a0, jint a1) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
              }

              ::java::lang::CharSequence UnescapedCharSequence::toLowerCase(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::CharSequence(env->callStaticObjectMethod(cls, mids$[mid_toLowerCase_0df08ccc], a0.this$, a1.this$));
              }

              ::java::lang::String UnescapedCharSequence::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_14c7b5c5]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped(const JArray< jchar > & a0) const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_c783d655], a0.this$));
              }

              jboolean UnescapedCharSequence::wasEscaped(jint a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_wasEscaped_39c7bd30], a0);
              }

              jboolean UnescapedCharSequence::wasEscaped(const ::java::lang::CharSequence & a0, jint a1)
              {
                jclass cls = env->getClass(initializeClass);
                return env->callStaticBooleanMethod(cls, mids$[mid_wasEscaped_2fbf15ac], a0.this$, a1);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg);
              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds);
              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self);
              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_UnescapedCharSequence__methods_[] = {
                DECLARE_METHOD(t_UnescapedCharSequence, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, charAt, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, length, METH_NOARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, subSequence, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toLowerCase, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, toString, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toStringEscaped, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped_, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(UnescapedCharSequence, t_UnescapedCharSequence, ::java::lang::Object, UnescapedCharSequence, t_UnescapedCharSequence_init_, 0, 0, 0, 0, 0);

              void t_UnescapedCharSequence::install(PyObject *module)
              {
                installType(&PY_TYPE(UnescapedCharSequence), module, "UnescapedCharSequence", 0);
              }

              void t_UnescapedCharSequence::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "class_", make_descriptor(UnescapedCharSequence::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "wrapfn_", make_descriptor(t_UnescapedCharSequence::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(UnescapedCharSequence).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, UnescapedCharSequence::initializeClass, 1)))
                  return NULL;
                return t_UnescapedCharSequence::wrap_Object(UnescapedCharSequence(((t_UnescapedCharSequence *) arg)->object.this$));
              }
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, UnescapedCharSequence::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    JArray< jboolean > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "[C[ZII", &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jchar result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.charAt(a0));
                  return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                }

                PyErr_SetArgsError((PyObject *) self, "charAt", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self)
              {
                jint result;
                OBJ_CALL(result = self->object.length());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subSequence(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "subSequence", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::toLowerCase(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "toLowerCase", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(UnescapedCharSequence), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toStringEscaped());
                    return j2p(result);
                  }
                  break;
                 case 1:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                      OBJ_CALL(result = self->object.toStringEscaped(a0));
                      return j2p(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toStringEscaped", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jboolean result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.wasEscaped(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "wasEscaped", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jboolean result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::wasEscaped(a0, a1));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError(type, "wasEscaped_", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PhraseSlopQueryNode::class$ = NULL;
              jmethodID *PhraseSlopQueryNode::mids$ = NULL;
              bool PhraseSlopQueryNode::live$ = false;

              jclass PhraseSlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNode::PhraseSlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint PhraseSlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void PhraseSlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PhraseSlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data);
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data);
              static PyGetSetDef t_PhraseSlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_PhraseSlopQueryNode, field),
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PhraseSlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNode, t_PhraseSlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PhraseSlopQueryNode, t_PhraseSlopQueryNode_init_, 0, 0, t_PhraseSlopQueryNode__fields_, 0, 0);

              void t_PhraseSlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNode), module, "PhraseSlopQueryNode", 0);
              }

              void t_PhraseSlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "class_", make_descriptor(PhraseSlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNode::wrap_Object(PhraseSlopQueryNode(((t_PhraseSlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                PhraseSlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PhraseSlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig$OpenMode::class$ = NULL;
        jmethodID *IndexWriterConfig$OpenMode::mids$ = NULL;
        bool IndexWriterConfig$OpenMode::live$ = false;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::APPEND = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE_OR_APPEND = NULL;

        jclass IndexWriterConfig$OpenMode::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig$OpenMode");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_0b044982] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_values_923174e8] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE_OR_APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE_OR_APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig$OpenMode IndexWriterConfig$OpenMode::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IndexWriterConfig$OpenMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0b044982], a0.this$));
        }

        JArray< IndexWriterConfig$OpenMode > IndexWriterConfig$OpenMode::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IndexWriterConfig$OpenMode >(env->callStaticObjectMethod(cls, mids$[mid_values_923174e8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data);
        static PyGetSetDef t_IndexWriterConfig$OpenMode__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig$OpenMode, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig$OpenMode__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, of_, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig$OpenMode, t_IndexWriterConfig$OpenMode, ::java::lang::Enum, IndexWriterConfig$OpenMode, abstract_init, 0, 0, t_IndexWriterConfig$OpenMode__fields_, 0, 0);
        PyObject *t_IndexWriterConfig$OpenMode::wrap_Object(const IndexWriterConfig$OpenMode& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IndexWriterConfig$OpenMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IndexWriterConfig$OpenMode::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig$OpenMode), module, "IndexWriterConfig$OpenMode", 0);
        }

        void t_IndexWriterConfig$OpenMode::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "class_", make_descriptor(IndexWriterConfig$OpenMode::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig$OpenMode::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::APPEND)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE_OR_APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE_OR_APPEND)));
        }

        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig$OpenMode::wrap_Object(IndexWriterConfig$OpenMode(((t_IndexWriterConfig$OpenMode *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::valueOf(a0));
            return t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type)
        {
          JArray< IndexWriterConfig$OpenMode > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::values());
          return JArray<jobject>(result.this$).wrap(t_IndexWriterConfig$OpenMode::wrap_jobject);
        }
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$InsanityType::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$InsanityType::mids$ = NULL;
        bool FieldCacheSanityChecker$InsanityType::live$ = false;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::EXPECTED = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::SUBREADER = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::VALUEMISMATCH = NULL;

        jclass FieldCacheSanityChecker$InsanityType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$InsanityType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EXPECTED = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "EXPECTED", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            SUBREADER = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "SUBREADER", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            VALUEMISMATCH = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "VALUEMISMATCH", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String FieldCacheSanityChecker$InsanityType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker$InsanityType__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$InsanityType, t_FieldCacheSanityChecker$InsanityType, ::java::lang::Object, FieldCacheSanityChecker$InsanityType, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker$InsanityType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$InsanityType), module, "FieldCacheSanityChecker$InsanityType", 0);
        }

        void t_FieldCacheSanityChecker$InsanityType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$InsanityType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCacheSanityChecker$InsanityType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "EXPECTED", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::EXPECTED)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "SUBREADER", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::SUBREADER)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "VALUEMISMATCH", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::VALUEMISMATCH)));
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$InsanityType::wrap_Object(FieldCacheSanityChecker$InsanityType(((t_FieldCacheSanityChecker$InsanityType *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$InsanityType), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SwedishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SwedishStemmer::class$ = NULL;
        jmethodID *SwedishStemmer::mids$ = NULL;
        bool SwedishStemmer::live$ = false;

        jclass SwedishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SwedishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SwedishStemmer::SwedishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SwedishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SwedishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SwedishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args);

        static PyMethodDef t_SwedishStemmer__methods_[] = {
          DECLARE_METHOD(t_SwedishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SwedishStemmer, t_SwedishStemmer, ::org::tartarus::snowball::SnowballProgram, SwedishStemmer, t_SwedishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SwedishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SwedishStemmer), module, "SwedishStemmer", 0);
        }

        void t_SwedishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "class_", make_descriptor(SwedishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SwedishStemmer::initializeClass, 1)))
            return NULL;
          return t_SwedishStemmer::wrap_Object(SwedishStemmer(((t_SwedishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SwedishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SwedishStemmer object((jobject) NULL);

          INT_CALL(object = SwedishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *JoinDocFreqValueSource::class$ = NULL;
            jmethodID *JoinDocFreqValueSource::mids$ = NULL;
            bool JoinDocFreqValueSource::live$ = false;
            ::java::lang::String *JoinDocFreqValueSource::NAME = NULL;

            jclass JoinDocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JoinDocFreqValueSource::JoinDocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

            ::java::lang::String JoinDocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean JoinDocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues JoinDocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint JoinDocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args);

            static PyMethodDef t_JoinDocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_JoinDocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JoinDocFreqValueSource, t_JoinDocFreqValueSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, JoinDocFreqValueSource, t_JoinDocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_JoinDocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(JoinDocFreqValueSource), module, "JoinDocFreqValueSource", 0);
            }

            void t_JoinDocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "class_", make_descriptor(JoinDocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_JoinDocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JoinDocFreqValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "NAME", make_descriptor(j2p(*JoinDocFreqValueSource::NAME)));
            }

            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JoinDocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_JoinDocFreqValueSource::wrap_Object(JoinDocFreqValueSource(((t_JoinDocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JoinDocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JoinDocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = JoinDocFreqValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap::class$ = NULL;
          jmethodID *CharArrayMap::mids$ = NULL;
          bool CharArrayMap::live$ = false;

          jclass CharArrayMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_741c8a04] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_containsKey_a8afc646] = env->getMethodID(cls, "containsKey", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
              mids$[mid_containsKey_6f0bb35a] = env->getMethodID(cls, "containsKey", "([CII)Z");
              mids$[mid_copy_67ffa425] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_emptyMap_31b01886] = env->getStaticMethodID(cls, "emptyMap", "()Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_entrySet_9ca3e4b1] = env->getMethodID(cls, "entrySet", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntrySet;");
              mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
              mids$[mid_get_c05993cb] = env->getMethodID(cls, "get", "([CII)Ljava/lang/Object;");
              mids$[mid_keySet_d2d3505c] = env->getMethodID(cls, "keySet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_put_b85c5dc7] = env->getMethodID(cls, "put", "([CLjava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_84c802ab] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_80209419] = env->getMethodID(cls, "put", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableMap_716215f5] = env->getStaticMethodID(cls, "unmodifiableMap", "(Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_741c8a04, a0.this$, a1.this$, a2)) {}

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          void CharArrayMap::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_a8afc646], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_6f0bb35a], a0.this$, a1, a2);
          }

          CharArrayMap CharArrayMap::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_copy_67ffa425], a0.this$, a1.this$));
          }

          CharArrayMap CharArrayMap::emptyMap()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_31b01886]));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet CharArrayMap::entrySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet(env->callObjectMethod(this$, mids$[mid_entrySet_9ca3e4b1]));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_c05993cb], a0.this$, a1, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CharArrayMap::keySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_keySet_d2d3505c]));
          }

          ::java::lang::Object CharArrayMap::put(const JArray< jchar > & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_b85c5dc7], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_84c802ab], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_80209419], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::remove(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
          }

          jint CharArrayMap::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArrayMap::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArrayMap CharArrayMap::unmodifiableMap(const CharArrayMap & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_716215f5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args);
          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type);
          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data);
          static PyGetSetDef t_CharArrayMap__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, containsKey, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, emptyMap, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, entrySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, get, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, keySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, put, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, unmodifiableMap, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap, t_CharArrayMap, ::java::util::AbstractMap, CharArrayMap, t_CharArrayMap_init_, 0, 0, t_CharArrayMap__fields_, 0, 0);
          PyObject *t_CharArrayMap::wrap_Object(const CharArrayMap& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap), module, "CharArrayMap", 0);
          }

          void t_CharArrayMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "class_", make_descriptor(CharArrayMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap::wrap_Object(CharArrayMap(((t_CharArrayMap *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.containsKey(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "containsKey", args, 2);
          }

          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::copy(a0, a1));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type)
          {
            CharArrayMap result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::emptyMap());
            return t_CharArrayMap::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.entrySet());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntrySet::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "entrySet", args, 2);
          }

          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.keySet());
              return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "keySet", args, 2);
          }

          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "sO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "oO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "put", args, 2);
          }

          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg)
          {
            CharArrayMap a0((jobject) NULL);
            PyTypeObject **p0;
            CharArrayMap result((jobject) NULL);

            if (!parseArg(arg, "K", CharArrayMap::initializeClass, &a0, &p0, t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::unmodifiableMap(a0));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableMap", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParser::class$ = NULL;
              jmethodID *StandardSyntaxParser::mids$ = NULL;
              jfieldID *StandardSyntaxParser::fids$ = NULL;
              bool StandardSyntaxParser::live$ = false;

              jclass StandardSyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_491f91b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_Clause_9709215a] = env->getMethodID(cls, "Clause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ConjQuery_9709215a] = env->getMethodID(cls, "ConjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
                  mids$[mid_DisjQuery_9709215a] = env->getMethodID(cls, "DisjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ModClause_9709215a] = env->getMethodID(cls, "ModClause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Modifiers_511690a9] = env->getMethodID(cls, "Modifiers", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_Query_9709215a] = env->getMethodID(cls, "Query", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ReInit_491f91b2] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_Term_9709215a] = env->getMethodID(cls, "Term", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_TopLevelQuery_9709215a] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                  mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                  mids$[mid_generateParseException_4481d278] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/ParseException;");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_getToken_24cc8f6e] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParser::StandardSyntaxParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_491f91b2, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Clause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Clause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ConjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ConjQuery_9709215a], a0.this$));
              }

              jint StandardSyntaxParser::Conjunction() const
              {
                return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::DisjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_DisjQuery_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ModClause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ModClause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier StandardSyntaxParser::Modifiers() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_Modifiers_511690a9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Query(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Query_9709215a], a0.this$));
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_491f91b2], a0.this$);
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Term(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Term_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::TopLevelQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_9709215a], a0.this$));
              }

              void StandardSyntaxParser::disable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
              }

              void StandardSyntaxParser::enable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException StandardSyntaxParser::generateParseException() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_4481d278]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getToken(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_24cc8f6e], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_jj_nt() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
              }

              void StandardSyntaxParser::_set_jj_nt(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_token() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_token]));
              }

              void StandardSyntaxParser::_set_token(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_token], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager StandardSyntaxParser::_get_token_source() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
              }

              void StandardSyntaxParser::_set_token_source(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->setObjectField(this$, fids$[fid_token_source], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data);

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data);
              static PyGetSetDef t_StandardSyntaxParser__fields_[] = {
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, jj_nt),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token_source),
                DECLARE_GET_FIELD(t_StandardSyntaxParser, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParser__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, Clause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ConjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Conjunction, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, DisjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ModClause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Modifiers, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Query, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Term, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, TopLevelQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, disable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, enable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, generateParseException, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getToken, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParser, t_StandardSyntaxParser, ::java::lang::Object, StandardSyntaxParser, t_StandardSyntaxParser_init_, 0, 0, t_StandardSyntaxParser__fields_, 0, 0);

              void t_StandardSyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParser), module, "StandardSyntaxParser", 0);
              }

              void t_StandardSyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "class_", make_descriptor(StandardSyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParser::wrap_Object(StandardSyntaxParser(((t_StandardSyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    StandardSyntaxParser object((jobject) NULL);

                    INT_CALL(object = StandardSyntaxParser());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Clause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Clause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ConjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ConjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self)
              {
                jint result;
                OBJ_CALL(result = self->object.Conjunction());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.DisjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "DisjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ModClause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ModClause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.Modifiers());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Query(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Query", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Term(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Term", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.TopLevelQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.disable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.enable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException result((jobject) NULL);
                OBJ_CALL(result = self->object.generateParseException());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_ParseException::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getToken(a0));
                  return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getToken", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_jj_nt());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_jj_nt(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token_source());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_StandardSyntaxParserTokenManager::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token_source(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token_source", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelAtomicReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelAtomicReader::class$ = NULL;
        jmethodID *ParallelAtomicReader::mids$ = NULL;
        bool ParallelAtomicReader::live$ = false;

        jclass ParallelAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ec148ef1] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_dac8e58a] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_d26c44dd] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelAtomicReader::ParallelAtomicReader(const JArray< ::org::apache::lucene::index::AtomicReader > & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_ec148ef1, a0.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_dac8e58a, a0, a1.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1, const JArray< ::org::apache::lucene::index::AtomicReader > & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_d26c44dd, a0, a1.this$, a2.this$)) {}

        void ParallelAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void ParallelAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void ParallelAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues ParallelAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos ParallelAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues ParallelAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues ParallelAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues ParallelAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint ParallelAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint ParallelAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void ParallelAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String ParallelAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data);
        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data);
        static PyGetSetDef t_ParallelAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_ParallelAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelAtomicReader__methods_[] = {
          DECLARE_METHOD(t_ParallelAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelAtomicReader, t_ParallelAtomicReader, ::org::apache::lucene::index::AtomicReader, ParallelAtomicReader, t_ParallelAtomicReader_init_, 0, 0, t_ParallelAtomicReader__fields_, 0, 0);

        void t_ParallelAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelAtomicReader), module, "ParallelAtomicReader", 0);
        }

        void t_ParallelAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "class_", make_descriptor(ParallelAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelAtomicReader::initializeClass, 1)))
            return NULL;
          return t_ParallelAtomicReader::wrap_Object(ParallelAtomicReader(((t_ParallelAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::AtomicReader > a0((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelAtomicReader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::AtomicReader > a2((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicAnalyzer::class$ = NULL;
          jmethodID *ClassicAnalyzer::mids$ = NULL;
          bool ClassicAnalyzer::live$ = false;
          jint ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *ClassicAnalyzer::STOP_WORDS_SET = NULL;

          jclass ClassicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint ClassicAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void ClassicAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self);
          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data);
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ClassicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicAnalyzer, t_ClassicAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ClassicAnalyzer, t_ClassicAnalyzer_init_, 0, 0, t_ClassicAnalyzer__fields_, 0, 0);

          void t_ClassicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicAnalyzer), module, "ClassicAnalyzer", 0);
          }

          void t_ClassicAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "class_", make_descriptor(ClassicAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ClassicAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(ClassicAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*ClassicAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ClassicAnalyzer::wrap_Object(ClassicAnalyzer(((t_ClassicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharTokenizer::class$ = NULL;
          jmethodID *CharTokenizer::mids$ = NULL;
          bool CharTokenizer::live$ = false;

          jclass CharTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void CharTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean CharTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CharTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args);

          static PyMethodDef t_CharTokenizer__methods_[] = {
            DECLARE_METHOD(t_CharTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTokenizer, t_CharTokenizer, ::org::apache::lucene::analysis::Tokenizer, CharTokenizer, t_CharTokenizer_init_, 0, 0, 0, 0, 0);

          void t_CharTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTokenizer), module, "CharTokenizer", 0);
          }

          void t_CharTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "class_", make_descriptor(CharTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_CharTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTokenizer::initializeClass, 1)))
              return NULL;
            return t_CharTokenizer::wrap_Object(CharTokenizer(((t_CharTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = CharTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedSetDocValues::class$ = NULL;
        jmethodID *SortedSetDocValues::mids$ = NULL;
        bool SortedSetDocValues::live$ = false;
        jlong SortedSetDocValues::NO_MORE_ORDS = (jlong) 0;

        jclass SortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03dd8] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_ORDS = env->getStaticLongField(cls, "NO_MORE_ORDS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong SortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef SortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong SortedSetDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_lookupTerm_7bc03dd8], a0.this$);
        }

        jlong SortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void SortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        ::org::apache::lucene::index::TermsEnum SortedSetDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self);
        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data);
        static PyGetSetDef t_SortedSetDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedSetDocValues, document),
          DECLARE_GET_FIELD(t_SortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, nextOrd, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValues, t_SortedSetDocValues, ::java::lang::Object, SortedSetDocValues, abstract_init, 0, 0, t_SortedSetDocValues__fields_, 0, 0);

        void t_SortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValues), module, "SortedSetDocValues", 0);
        }

        void t_SortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "class_", make_descriptor(SortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "NO_MORE_ORDS", make_descriptor(SortedSetDocValues::NO_MORE_ORDS));
        }

        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValues::wrap_Object(SortedSetDocValues(((t_SortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.nextOrd());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Version::class$ = NULL;
        jmethodID *Version::mids$ = NULL;
        bool Version::live$ = false;
        Version *Version::LUCENE_30 = NULL;
        Version *Version::LUCENE_31 = NULL;
        Version *Version::LUCENE_32 = NULL;
        Version *Version::LUCENE_33 = NULL;
        Version *Version::LUCENE_34 = NULL;
        Version *Version::LUCENE_35 = NULL;
        Version *Version::LUCENE_36 = NULL;
        Version *Version::LUCENE_3_0 = NULL;
        Version *Version::LUCENE_3_1 = NULL;
        Version *Version::LUCENE_3_2 = NULL;
        Version *Version::LUCENE_3_3 = NULL;
        Version *Version::LUCENE_3_4 = NULL;
        Version *Version::LUCENE_3_5 = NULL;
        Version *Version::LUCENE_3_6 = NULL;
        Version *Version::LUCENE_40 = NULL;
        Version *Version::LUCENE_41 = NULL;
        Version *Version::LUCENE_42 = NULL;
        Version *Version::LUCENE_43 = NULL;
        Version *Version::LUCENE_44 = NULL;
        Version *Version::LUCENE_45 = NULL;
        Version *Version::LUCENE_46 = NULL;
        Version *Version::LUCENE_47 = NULL;
        Version *Version::LUCENE_48 = NULL;
        Version *Version::LUCENE_4_0 = NULL;
        Version *Version::LUCENE_4_1 = NULL;
        Version *Version::LUCENE_4_2 = NULL;
        Version *Version::LUCENE_4_3 = NULL;
        Version *Version::LUCENE_4_4 = NULL;
        Version *Version::LUCENE_4_5 = NULL;
        Version *Version::LUCENE_4_6 = NULL;
        Version *Version::LUCENE_4_7 = NULL;
        Version *Version::LUCENE_4_8 = NULL;
        Version *Version::LUCENE_4_9 = NULL;
        Version *Version::LUCENE_CURRENT = NULL;

        jclass Version::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Version");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onOrAfter_0d96cf3f] = env->getMethodID(cls, "onOrAfter", "(Lorg/apache/lucene/util/Version;)Z");
            mids$[mid_parseLeniently_54fbdb70] = env->getStaticMethodID(cls, "parseLeniently", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_valueOf_54fbdb70] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_values_f17d8c5a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/Version;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LUCENE_30 = new Version(env->getStaticObjectField(cls, "LUCENE_30", "Lorg/apache/lucene/util/Version;"));
            LUCENE_31 = new Version(env->getStaticObjectField(cls, "LUCENE_31", "Lorg/apache/lucene/util/Version;"));
            LUCENE_32 = new Version(env->getStaticObjectField(cls, "LUCENE_32", "Lorg/apache/lucene/util/Version;"));
            LUCENE_33 = new Version(env->getStaticObjectField(cls, "LUCENE_33", "Lorg/apache/lucene/util/Version;"));
            LUCENE_34 = new Version(env->getStaticObjectField(cls, "LUCENE_34", "Lorg/apache/lucene/util/Version;"));
            LUCENE_35 = new Version(env->getStaticObjectField(cls, "LUCENE_35", "Lorg/apache/lucene/util/Version;"));
            LUCENE_36 = new Version(env->getStaticObjectField(cls, "LUCENE_36", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_2 = new Version(env->getStaticObjectField(cls, "LUCENE_3_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_3 = new Version(env->getStaticObjectField(cls, "LUCENE_3_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_4 = new Version(env->getStaticObjectField(cls, "LUCENE_3_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_5 = new Version(env->getStaticObjectField(cls, "LUCENE_3_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_6 = new Version(env->getStaticObjectField(cls, "LUCENE_3_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_40 = new Version(env->getStaticObjectField(cls, "LUCENE_40", "Lorg/apache/lucene/util/Version;"));
            LUCENE_41 = new Version(env->getStaticObjectField(cls, "LUCENE_41", "Lorg/apache/lucene/util/Version;"));
            LUCENE_42 = new Version(env->getStaticObjectField(cls, "LUCENE_42", "Lorg/apache/lucene/util/Version;"));
            LUCENE_43 = new Version(env->getStaticObjectField(cls, "LUCENE_43", "Lorg/apache/lucene/util/Version;"));
            LUCENE_44 = new Version(env->getStaticObjectField(cls, "LUCENE_44", "Lorg/apache/lucene/util/Version;"));
            LUCENE_45 = new Version(env->getStaticObjectField(cls, "LUCENE_45", "Lorg/apache/lucene/util/Version;"));
            LUCENE_46 = new Version(env->getStaticObjectField(cls, "LUCENE_46", "Lorg/apache/lucene/util/Version;"));
            LUCENE_47 = new Version(env->getStaticObjectField(cls, "LUCENE_47", "Lorg/apache/lucene/util/Version;"));
            LUCENE_48 = new Version(env->getStaticObjectField(cls, "LUCENE_48", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_2 = new Version(env->getStaticObjectField(cls, "LUCENE_4_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_3 = new Version(env->getStaticObjectField(cls, "LUCENE_4_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_4 = new Version(env->getStaticObjectField(cls, "LUCENE_4_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_5 = new Version(env->getStaticObjectField(cls, "LUCENE_4_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_6 = new Version(env->getStaticObjectField(cls, "LUCENE_4_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_8 = new Version(env->getStaticObjectField(cls, "LUCENE_4_8", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_9 = new Version(env->getStaticObjectField(cls, "LUCENE_4_9", "Lorg/apache/lucene/util/Version;"));
            LUCENE_CURRENT = new Version(env->getStaticObjectField(cls, "LUCENE_CURRENT", "Lorg/apache/lucene/util/Version;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Version::onOrAfter(const Version & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_onOrAfter_0d96cf3f], a0.this$);
        }

        Version Version::parseLeniently(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parseLeniently_54fbdb70], a0.this$));
        }

        Version Version::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_valueOf_54fbdb70], a0.this$));
        }

        JArray< Version > Version::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Version >(env->callStaticObjectMethod(cls, mids$[mid_values_f17d8c5a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_of_(t_Version *self, PyObject *args);
        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg);
        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Version_values(PyTypeObject *type);
        static PyObject *t_Version_get__parameters_(t_Version *self, void *data);
        static PyGetSetDef t_Version__fields_[] = {
          DECLARE_GET_FIELD(t_Version, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Version__methods_[] = {
          DECLARE_METHOD(t_Version, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, of_, METH_VARARGS),
          DECLARE_METHOD(t_Version, onOrAfter, METH_O),
          DECLARE_METHOD(t_Version, parseLeniently, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Version, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Version, t_Version, ::java::lang::Enum, Version, abstract_init, 0, 0, t_Version__fields_, 0, 0);
        PyObject *t_Version::wrap_Object(const Version& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Version::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Version *self = (t_Version *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Version::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Version::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Version *self = (t_Version *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Version::install(PyObject *module)
        {
          installType(&PY_TYPE(Version), module, "Version", 0);
        }

        void t_Version::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "class_", make_descriptor(Version::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "wrapfn_", make_descriptor(t_Version::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Version::initializeClass);
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_30", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_30)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_31", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_31)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_32", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_32)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_33", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_33)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_34", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_34)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_35", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_35)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_36", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_36)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_40", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_40)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_41", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_41)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_42", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_42)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_43", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_43)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_44", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_44)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_45", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_45)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_46", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_46)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_47", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_47)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_48", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_48)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_8", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_8)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_9", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_9)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_CURRENT", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_CURRENT)));
        }

        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Version::initializeClass, 1)))
            return NULL;
          return t_Version::wrap_Object(Version(((t_Version *) arg)->object.this$));
        }
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Version::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Version_of_(t_Version *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg)
        {
          Version a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", Version::initializeClass, &a0, &p0, t_Version::parameters_))
          {
            OBJ_CALL(result = self->object.onOrAfter(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "onOrAfter", arg);
          return NULL;
        }

        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parseLeniently(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseLeniently", arg);
          return NULL;
        }

        static PyObject *t_Version_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::valueOf(a0));
            return t_Version::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Version_values(PyTypeObject *type)
        {
          JArray< Version > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::Version::values());
          return JArray<jobject>(result.this$).wrap(t_Version::wrap_jobject);
        }
        static PyObject *t_Version_get__parameters_(t_Version *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$FacetEntry::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$FacetEntry::mids$ = NULL;
          bool AbstractGroupFacetCollector$FacetEntry::live$ = false;

          jclass AbstractGroupFacetCollector$FacetEntry::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_738fc2ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCount_54c6a179] = env->getMethodID(cls, "getCount", "()I");
              mids$[mid_getValue_4ae19461] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$FacetEntry::AbstractGroupFacetCollector$FacetEntry(const ::org::apache::lucene::util::BytesRef & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_738fc2ce, a0.this$, a1)) {}

          jboolean AbstractGroupFacetCollector$FacetEntry::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AbstractGroupFacetCollector$FacetEntry::getCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef AbstractGroupFacetCollector$FacetEntry::getValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getValue_4ae19461]));
          }

          jint AbstractGroupFacetCollector$FacetEntry::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String AbstractGroupFacetCollector$FacetEntry::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$FacetEntry__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, count),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$FacetEntry__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getValue, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry, ::java::lang::Object, AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry_init_, 0, 0, t_AbstractGroupFacetCollector$FacetEntry__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$FacetEntry::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), module, "AbstractGroupFacetCollector$FacetEntry", 0);
          }

          void t_AbstractGroupFacetCollector$FacetEntry::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$FacetEntry::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$FacetEntry::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$FacetEntry::wrap_Object(AbstractGroupFacetCollector$FacetEntry(((t_AbstractGroupFacetCollector$FacetEntry *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;
            AbstractGroupFacetCollector$FacetEntry object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractGroupFacetCollector$FacetEntry(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FieldCacheSource.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FieldCacheSource::class$ = NULL;
            jmethodID *FieldCacheSource::mids$ = NULL;
            bool FieldCacheSource::live$ = false;

            jclass FieldCacheSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FieldCacheSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldCacheSource::FieldCacheSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String FieldCacheSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FieldCacheSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String FieldCacheSource::getField() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
            }

            ::org::apache::lucene::search::FieldCache FieldCacheSource::getFieldCache() const
            {
              return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
            }

            jint FieldCacheSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data);
            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data);
            static PyGetSetDef t_FieldCacheSource__fields_[] = {
              DECLARE_GET_FIELD(t_FieldCacheSource, field),
              DECLARE_GET_FIELD(t_FieldCacheSource, fieldCache),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldCacheSource__methods_[] = {
              DECLARE_METHOD(t_FieldCacheSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, getField, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, getFieldCache, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldCacheSource, t_FieldCacheSource, ::org::apache::lucene::queries::function::ValueSource, FieldCacheSource, t_FieldCacheSource_init_, 0, 0, t_FieldCacheSource__fields_, 0, 0);

            void t_FieldCacheSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldCacheSource), module, "FieldCacheSource", 0);
            }

            void t_FieldCacheSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "class_", make_descriptor(FieldCacheSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldCacheSource::initializeClass, 1)))
                return NULL;
              return t_FieldCacheSource::wrap_Object(FieldCacheSource(((t_FieldCacheSource *) arg)->object.this$));
            }
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldCacheSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              FieldCacheSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldCacheSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self)
            {
              ::org::apache::lucene::search::FieldCache result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
            }

            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getField());
              return j2p(value);
            }

            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data)
            {
              ::org::apache::lucene::search::FieldCache value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedWriter::class$ = NULL;
          jmethodID *MonotonicBlockPackedWriter::mids$ = NULL;
          bool MonotonicBlockPackedWriter::live$ = false;

          jclass MonotonicBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicBlockPackedWriter::MonotonicBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void MonotonicBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args);

          static PyMethodDef t_MonotonicBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedWriter), module, "MonotonicBlockPackedWriter", 0);
          }

          void t_MonotonicBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "class_", make_descriptor(MonotonicBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedWriter::wrap_Object(MonotonicBlockPackedWriter(((t_MonotonicBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            MonotonicBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MonotonicBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args)
          {
            jlong a0;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedWriter), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CloseableThreadLocal::class$ = NULL;
        jmethodID *CloseableThreadLocal::mids$ = NULL;
        bool CloseableThreadLocal::live$ = false;

        jclass CloseableThreadLocal::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CloseableThreadLocal");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");
            mids$[mid_initialValue_846352c3] = env->getMethodID(cls, "initialValue", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CloseableThreadLocal::CloseableThreadLocal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void CloseableThreadLocal::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::java::lang::Object CloseableThreadLocal::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void CloseableThreadLocal::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args);
        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data);
        static PyGetSetDef t_CloseableThreadLocal__fields_[] = {
          DECLARE_GET_FIELD(t_CloseableThreadLocal, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CloseableThreadLocal__methods_[] = {
          DECLARE_METHOD(t_CloseableThreadLocal, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, of_, METH_VARARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, close, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, get, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CloseableThreadLocal, t_CloseableThreadLocal, ::java::lang::Object, CloseableThreadLocal, t_CloseableThreadLocal_init_, 0, 0, t_CloseableThreadLocal__fields_, 0, 0);
        PyObject *t_CloseableThreadLocal::wrap_Object(const CloseableThreadLocal& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CloseableThreadLocal::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CloseableThreadLocal::install(PyObject *module)
        {
          installType(&PY_TYPE(CloseableThreadLocal), module, "CloseableThreadLocal", 0);
        }

        void t_CloseableThreadLocal::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "class_", make_descriptor(CloseableThreadLocal::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "wrapfn_", make_descriptor(t_CloseableThreadLocal::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CloseableThreadLocal::initializeClass, 1)))
            return NULL;
          return t_CloseableThreadLocal::wrap_Object(CloseableThreadLocal(((t_CloseableThreadLocal *) arg)->object.this$));
        }
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CloseableThreadLocal::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds)
        {
          CloseableThreadLocal object((jobject) NULL);

          INT_CALL(object = CloseableThreadLocal());
          self->object = object;

          return 0;
        }

        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergePolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergePolicy::class$ = NULL;
        jmethodID *NoMergePolicy::mids$ = NULL;
        bool NoMergePolicy::live$ = false;
        ::org::apache::lucene::index::MergePolicy *NoMergePolicy::INSTANCE = NULL;

        jclass NoMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergePolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergePolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String NoMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean NoMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_close(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args);

        static PyMethodDef t_NoMergePolicy__methods_[] = {
          DECLARE_METHOD(t_NoMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergePolicy, t_NoMergePolicy, ::org::apache::lucene::index::MergePolicy, NoMergePolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergePolicy), module, "NoMergePolicy", 0);
        }

        void t_NoMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "class_", make_descriptor(NoMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_NoMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergePolicy::wrap_Object(*NoMergePolicy::INSTANCE)));
        }

        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergePolicy::initializeClass, 1)))
            return NULL;
          return t_NoMergePolicy::wrap_Object(NoMergePolicy(((t_NoMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergePolicy_close(t_NoMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseQuery::class$ = NULL;
        jmethodID *PhraseQuery::mids$ = NULL;
        bool PhraseQuery::live$ = false;

        jclass PhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_05555589] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTerms_2b86e588] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseQuery::PhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_05555589], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight PhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean PhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void PhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > PhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint PhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::Term > PhraseQuery::getTerms() const
        {
          return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_2b86e588]));
        }

        jint PhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query PhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void PhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String PhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg);
        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data);
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data);
        static PyGetSetDef t_PhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_PhraseQuery, slop),
          DECLARE_GET_FIELD(t_PhraseQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseQuery__methods_[] = {
          DECLARE_METHOD(t_PhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_PhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PhraseQuery, t_PhraseQuery, ::org::apache::lucene::search::Query, PhraseQuery, t_PhraseQuery_init_, 0, 0, t_PhraseQuery__fields_, 0, 0);

        void t_PhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseQuery), module, "PhraseQuery", 0);
        }

        void t_PhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "class_", make_descriptor(PhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_PhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseQuery::initializeClass, 1)))
            return NULL;
          return t_PhraseQuery::wrap_Object(PhraseQuery(((t_PhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          PhraseQuery object((jobject) NULL);

          INT_CALL(object = PhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self)
        {
          JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }

        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedWriter::class$ = NULL;
          jmethodID *BlockPackedWriter::mids$ = NULL;
          bool BlockPackedWriter::live$ = false;

          jclass BlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedWriter::BlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_BlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedWriter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedWriter, t_BlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, BlockPackedWriter, t_BlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedWriter), module, "BlockPackedWriter", 0);
          }

          void t_BlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "class_", make_descriptor(BlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_BlockPackedWriter::wrap_Object(BlockPackedWriter(((t_BlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            BlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl36::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl36::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl36::live$ = false;
            jint UAX29URLEmailTokenizerImpl36::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl36::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl36::UAX29URLEmailTokenizerImpl36(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl36::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl36::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl36::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl36::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl36::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl36::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl36::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {
            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl36__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl36, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl36__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36, ::java::lang::Object, UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36_init_, 0, 0, t_UAX29URLEmailTokenizerImpl36__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl36::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl36), module, "UAX29URLEmailTokenizerImpl36", 0);
            }

            void t_UAX29URLEmailTokenizerImpl36::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl36::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl36::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl36::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl36::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl36::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl36::wrap_Object(UAX29URLEmailTokenizerImpl36(((t_UAX29URLEmailTokenizerImpl36 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl36 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl36(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilterFactory::class$ = NULL;
          jmethodID *IndonesianStemFilterFactory::mids$ = NULL;
          bool IndonesianStemFilterFactory::live$ = false;

          jclass IndonesianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilterFactory::IndonesianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndonesianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilterFactory, t_IndonesianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndonesianStemFilterFactory, t_IndonesianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilterFactory), module, "IndonesianStemFilterFactory", 0);
          }

          void t_IndonesianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "class_", make_descriptor(IndonesianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilterFactory::wrap_Object(IndonesianStemFilterFactory(((t_IndonesianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndonesianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndonesianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedThreadFactory.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/String.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedThreadFactory::class$ = NULL;
        jmethodID *NamedThreadFactory::mids$ = NULL;
        bool NamedThreadFactory::live$ = false;

        jclass NamedThreadFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedThreadFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_newThread_9e58833c] = env->getMethodID(cls, "newThread", "(Ljava/lang/Runnable;)Ljava/lang/Thread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedThreadFactory::NamedThreadFactory(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        ::java::lang::Thread NamedThreadFactory::newThread(const ::java::lang::Runnable & a0) const
        {
          return ::java::lang::Thread(env->callObjectMethod(this$, mids$[mid_newThread_9e58833c], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg);

        static PyMethodDef t_NamedThreadFactory__methods_[] = {
          DECLARE_METHOD(t_NamedThreadFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, newThread, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedThreadFactory, t_NamedThreadFactory, ::java::lang::Object, NamedThreadFactory, t_NamedThreadFactory_init_, 0, 0, 0, 0, 0);

        void t_NamedThreadFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedThreadFactory), module, "NamedThreadFactory", 0);
        }

        void t_NamedThreadFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "class_", make_descriptor(NamedThreadFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "wrapfn_", make_descriptor(t_NamedThreadFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedThreadFactory::initializeClass, 1)))
            return NULL;
          return t_NamedThreadFactory::wrap_Object(NamedThreadFactory(((t_NamedThreadFactory *) arg)->object.this$));
        }
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedThreadFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NamedThreadFactory object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NamedThreadFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg)
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::Thread result((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newThread(a0));
            return ::java::lang::t_Thread::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newThread", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NativeFSLockFactory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NativeFSLockFactory::class$ = NULL;
        jmethodID *NativeFSLockFactory::mids$ = NULL;
        bool NativeFSLockFactory::live$ = false;

        jclass NativeFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NativeFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NativeFSLockFactory::NativeFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        void NativeFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock NativeFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args);
        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args);

        static PyMethodDef t_NativeFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_NativeFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NativeFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NativeFSLockFactory, t_NativeFSLockFactory, ::org::apache::lucene::store::FSLockFactory, NativeFSLockFactory, t_NativeFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_NativeFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NativeFSLockFactory), module, "NativeFSLockFactory", 0);
        }

        void t_NativeFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "class_", make_descriptor(NativeFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NativeFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NativeFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_NativeFSLockFactory::wrap_Object(NativeFSLockFactory(((t_NativeFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NativeFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NativeFSLockFactory object((jobject) NULL);

              INT_CALL(object = NativeFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene40StoredFieldsFormat::mids$ = NULL;
          bool Lucene40StoredFieldsFormat::live$ = false;

          jclass Lucene40StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsFormat::Lucene40StoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader Lucene40StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter Lucene40StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsFormat), module, "Lucene40StoredFieldsFormat", 0);
          }

          void t_Lucene40StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsFormat::wrap_Object(Lucene40StoredFieldsFormat(((t_Lucene40StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40StoredFieldsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenStream::class$ = NULL;
        jmethodID *PythonTokenStream::mids$ = NULL;
        bool PythonTokenStream::live$ = false;

        jclass PythonTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenStream::PythonTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonTokenStream::close() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_close_54c6a166]);
        }

        void PythonTokenStream::end() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_end_54c6a166]);
        }

        void PythonTokenStream::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenStream::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenStream::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonTokenStream::reset() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self);
        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args);
        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data);
        static PyGetSetDef t_PythonTokenStream__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenStream, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenStream__methods_[] = {
          DECLARE_METHOD(t_PythonTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, end, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenStream, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenStream, t_PythonTokenStream, ::org::apache::lucene::analysis::TokenStream, PythonTokenStream, t_PythonTokenStream_init_, 0, 0, t_PythonTokenStream__fields_, 0, 0);

        void t_PythonTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenStream), module, "PythonTokenStream", 1);
        }

        void t_PythonTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "class_", make_descriptor(PythonTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenStream::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonTokenStream_close0 },
            { "end", "()V", (void *) t_PythonTokenStream_end1 },
            { "incrementToken", "()Z", (void *) t_PythonTokenStream_incrementToken2 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenStream_pythonDecRef3 },
            { "reset", "()V", (void *) t_PythonTokenStream_reset4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenStream::initializeClass, 1)))
            return NULL;
          return t_PythonTokenStream::wrap_Object(PythonTokenStream(((t_PythonTokenStream *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds)
        {
          PythonTokenStream object((jobject) NULL);

          INT_CALL(object = PythonTokenStream());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "end", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "reset", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergeScheduler::class$ = NULL;
        jmethodID *NoMergeScheduler::mids$ = NULL;
        bool NoMergeScheduler::live$ = false;
        ::org::apache::lucene::index::MergeScheduler *NoMergeScheduler::INSTANCE = NULL;

        jclass NoMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_ff96d655] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergeScheduler(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergeScheduler;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeScheduler NoMergeScheduler::clone() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_clone_ff96d655]));
        }

        void NoMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void NoMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self);
        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args);
        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args);

        static PyMethodDef t_NoMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_NoMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergeScheduler, t_NoMergeScheduler, ::org::apache::lucene::index::MergeScheduler, NoMergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergeScheduler), module, "NoMergeScheduler", 0);
        }

        void t_NoMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "class_", make_descriptor(NoMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_NoMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergeScheduler::wrap_Object(*NoMergeScheduler::INSTANCE)));
        }

        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_NoMergeScheduler::wrap_Object(NoMergeScheduler(((t_NoMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionSecondPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionSecondPassGroupingCollector::mids$ = NULL;
            bool FunctionSecondPassGroupingCollector::live$ = false;

            jclass FunctionSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3599aebe] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZLorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionSecondPassGroupingCollector::FunctionSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6, const ::org::apache::lucene::queries::function::ValueSource & a7, const ::java::util::Map & a8) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_3599aebe, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6, a7.this$, a8.this$)) {}

            void FunctionSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector_init_, 0, 0, t_FunctionSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionSecondPassGroupingCollector::wrap_Object(const FunctionSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionSecondPassGroupingCollector), module, "FunctionSecondPassGroupingCollector", 0);
            }

            void t_FunctionSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionSecondPassGroupingCollector::wrap_Object(FunctionSecondPassGroupingCollector(((t_FunctionSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::queries::function::ValueSource a7((jobject) NULL);
              ::java::util::Map a8((jobject) NULL);
              PyTypeObject **p8;
              FunctionSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkIZZZkK", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &p8, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSetIterator::class$ = NULL;
        jmethodID *FilteredDocIdSetIterator::mids$ = NULL;
        bool FilteredDocIdSetIterator::live$ = false;

        jclass FilteredDocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2b5607d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSetIterator::FilteredDocIdSetIterator(const ::org::apache::lucene::search::DocIdSetIterator & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2b5607d, a0.this$)) {}

        jint FilteredDocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FilteredDocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilteredDocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilteredDocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args);

        static PyMethodDef t_FilteredDocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSetIterator, t_FilteredDocIdSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FilteredDocIdSetIterator, t_FilteredDocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FilteredDocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSetIterator), module, "FilteredDocIdSetIterator", 0);
        }

        void t_FilteredDocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "class_", make_descriptor(FilteredDocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSetIterator::wrap_Object(FilteredDocIdSetIterator(((t_FilteredDocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          FilteredDocIdSetIterator object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSetIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingIntBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingIntBlockAllocator::class$ = NULL;
        jmethodID *RecyclingIntBlockAllocator::mids$ = NULL;
        bool RecyclingIntBlockAllocator::live$ = false;
        jint RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingIntBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingIntBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingIntBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingIntBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jint > RecyclingIntBlockAllocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        jint RecyclingIntBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingIntBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingIntBlockAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingIntBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingIntBlockAllocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingIntBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, getIntBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator_init_, 0, 0, t_RecyclingIntBlockAllocator__fields_, 0, 0);

        void t_RecyclingIntBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingIntBlockAllocator), module, "RecyclingIntBlockAllocator", 0);
        }

        void t_RecyclingIntBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingIntBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingIntBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingIntBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingIntBlockAllocator::wrap_Object(RecyclingIntBlockAllocator(((t_RecyclingIntBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingIntBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingIntBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIntBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "getIntBlock", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfig::class$ = NULL;
              jmethodID *FieldConfig::mids$ = NULL;
              bool FieldConfig::live$ = false;

              jclass FieldConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                  mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldConfig::FieldConfig(const ::java::lang::String & a0) : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

              ::java::lang::String FieldConfig::getField() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
              }

              ::java::lang::String FieldConfig::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldConfig_getField(t_FieldConfig *self);
              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args);
              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data);
              static PyGetSetDef t_FieldConfig__fields_[] = {
                DECLARE_GET_FIELD(t_FieldConfig, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldConfig__methods_[] = {
                DECLARE_METHOD(t_FieldConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldConfig, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfig, t_FieldConfig, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, FieldConfig, t_FieldConfig_init_, 0, 0, t_FieldConfig__fields_, 0, 0);

              void t_FieldConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfig), module, "FieldConfig", 0);
              }

              void t_FieldConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "class_", make_descriptor(FieldConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "wrapfn_", make_descriptor(t_FieldConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfig::initializeClass, 1)))
                  return NULL;
                return t_FieldConfig::wrap_Object(FieldConfig(((t_FieldConfig *) arg)->object.this$));
              }
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::String a0((jobject) NULL);
                FieldConfig object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = FieldConfig(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldConfig_getField(t_FieldConfig *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return j2p(result);
              }

              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldConfig), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinSortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinSortField::class$ = NULL;
          jmethodID *ToParentBlockJoinSortField::mids$ = NULL;
          bool ToParentBlockJoinSortField::live$ = false;

          jclass ToParentBlockJoinSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71ee501b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_f8b18760] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3, const ::org::apache::lucene::search::Filter & a4) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_71ee501b, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::search::Filter & a4, const ::org::apache::lucene::search::Filter & a5) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f8b18760, a0.this$, a1.this$, a2, a3, a4.this$, a5.this$)) {}

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinSortField__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, getComparator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinSortField, t_ToParentBlockJoinSortField, ::org::apache::lucene::search::SortField, ToParentBlockJoinSortField, t_ToParentBlockJoinSortField_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinSortField), module, "ToParentBlockJoinSortField", 0);
          }

          void t_ToParentBlockJoinSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "class_", make_descriptor(ToParentBlockJoinSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinSortField::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinSortField::wrap_Object(ToParentBlockJoinSortField(((t_ToParentBlockJoinSortField *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ::org::apache::lucene::search::Filter a5((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "getComparator", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsFormat::class$ = NULL;
        jmethodID *PostingsFormat::mids$ = NULL;
        bool PostingsFormat::live$ = false;
        JArray< PostingsFormat > *PostingsFormat::EMPTY = NULL;

        jclass PostingsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availablePostingsFormats_03e99967] = env->getStaticMethodID(cls, "availablePostingsFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
            mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_forName_19d2f1c6] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadPostingsFormats_9110048d] = env->getStaticMethodID(cls, "reloadPostingsFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new JArray< PostingsFormat >(env->getStaticObjectField(cls, "EMPTY", "[Lorg/apache/lucene/codecs/PostingsFormat;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set PostingsFormat::availablePostingsFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availablePostingsFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::FieldsConsumer PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
        }

        ::org::apache::lucene::codecs::FieldsProducer PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
        }

        PostingsFormat PostingsFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return PostingsFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_19d2f1c6], a0.this$));
        }

        ::java::lang::String PostingsFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void PostingsFormat::reloadPostingsFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadPostingsFormats_9110048d], a0.this$);
        }

        ::java::lang::String PostingsFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type);
        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self);
        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args);
        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data);
        static PyGetSetDef t_PostingsFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, availablePostingsFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_PostingsFormat, reloadPostingsFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsFormat, t_PostingsFormat, ::java::lang::Object, PostingsFormat, abstract_init, 0, 0, t_PostingsFormat__fields_, 0, 0);

        void t_PostingsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsFormat), module, "PostingsFormat", 0);
        }

        void t_PostingsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "class_", make_descriptor(PostingsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PostingsFormat::initializeClass);
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "EMPTY", make_descriptor(JArray<jobject>(PostingsFormat::EMPTY->this$).wrap(t_PostingsFormat::wrap_jobject)));
        }

        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsFormat::wrap_Object(PostingsFormat(((t_PostingsFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::availablePostingsFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          PostingsFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::forName(a0));
            return t_PostingsFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::PostingsFormat::reloadPostingsFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadPostingsFormats", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PostingsFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIn.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIn::class$ = NULL;
          jmethodID *BasicModelIn::mids$ = NULL;
          bool BasicModelIn::live$ = false;

          jclass BasicModelIn::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIn");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIn::BasicModelIn() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModelIn::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModelIn::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIn::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args);

          static PyMethodDef t_BasicModelIn__methods_[] = {
            DECLARE_METHOD(t_BasicModelIn, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIn, t_BasicModelIn, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIn, t_BasicModelIn_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIn::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIn), module, "BasicModelIn", 0);
          }

          void t_BasicModelIn::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "class_", make_descriptor(BasicModelIn::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIn::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIn::initializeClass, 1)))
              return NULL;
            return t_BasicModelIn::wrap_Object(BasicModelIn(((t_BasicModelIn *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIn::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIn object((jobject) NULL);

            INT_CALL(object = BasicModelIn());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory$StaticImplementationAttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory$StaticImplementationAttributeFactory::mids$ = NULL;
        bool AttributeFactory$StaticImplementationAttributeFactory::live$ = false;

        jclass AttributeFactory$StaticImplementationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a612bb24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_createInstance_a200d3c2] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/util/AttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory$StaticImplementationAttributeFactory::AttributeFactory$StaticImplementationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::Class & a1) : ::org::apache::lucene::util::AttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_a612bb24, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory$StaticImplementationAttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        jboolean AttributeFactory$StaticImplementationAttributeFactory::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint AttributeFactory$StaticImplementationAttributeFactory::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data);
        static PyGetSetDef t_AttributeFactory$StaticImplementationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeFactory$StaticImplementationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeFactory$StaticImplementationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, createAttributeInstance, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory, ::org::apache::lucene::util::AttributeFactory, AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory_init_, 0, 0, t_AttributeFactory$StaticImplementationAttributeFactory__fields_, 0, 0);
        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(const AttributeFactory$StaticImplementationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), module, "AttributeFactory$StaticImplementationAttributeFactory", 0);
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(AttributeFactory$StaticImplementationAttributeFactory(((t_AttributeFactory$StaticImplementationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory$StaticImplementationAttributeFactory object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = AttributeFactory$StaticImplementationAttributeFactory(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "createAttributeInstance", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "hashCode", args, 2);
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeFilterBuilder::class$ = NULL;
            jmethodID *NumericRangeFilterBuilder::mids$ = NULL;
            bool NumericRangeFilterBuilder::live$ = false;

            jclass NumericRangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_setStrictMode_bb0c767f] = env->getMethodID(cls, "setStrictMode", "(Z)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeFilterBuilder::NumericRangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void NumericRangeFilterBuilder::setStrictMode(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setStrictMode_bb0c767f], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg);
            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data);
            static PyGetSetDef t_NumericRangeFilterBuilder__fields_[] = {
              DECLARE_SET_FIELD(t_NumericRangeFilterBuilder, strictMode),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NumericRangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, setStrictMode, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeFilterBuilder, t_NumericRangeFilterBuilder, ::java::lang::Object, NumericRangeFilterBuilder, t_NumericRangeFilterBuilder_init_, 0, 0, t_NumericRangeFilterBuilder__fields_, 0, 0);

            void t_NumericRangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeFilterBuilder), module, "NumericRangeFilterBuilder", 0);
            }

            void t_NumericRangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "class_", make_descriptor(NumericRangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeFilterBuilder::wrap_Object(NumericRangeFilterBuilder(((t_NumericRangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeFilterBuilder());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setStrictMode(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setStrictMode", arg);
              return NULL;
            }

            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setStrictMode(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "strictMode", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringReader::class$ = NULL;
    jmethodID *StringReader::mids$ = NULL;
    bool StringReader::live$ = false;

    jclass StringReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringReader::StringReader(const ::java::lang::String & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void StringReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringReader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean StringReader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint StringReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint StringReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean StringReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void StringReader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong StringReader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args);

    static PyMethodDef t_StringReader__methods_[] = {
      DECLARE_METHOD(t_StringReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, close, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, mark, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, read, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, ready, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, reset, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringReader, t_StringReader, ::java::io::Reader, StringReader, t_StringReader_init_, 0, 0, 0, 0, 0);

    void t_StringReader::install(PyObject *module)
    {
      installType(&PY_TYPE(StringReader), module, "StringReader", 0);
    }

    void t_StringReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "class_", make_descriptor(StringReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "wrapfn_", make_descriptor(t_StringReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringReader::initializeClass, 1)))
        return NULL;
      return t_StringReader::wrap_Object(StringReader(((t_StringReader *) arg)->object.this$));
    }
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds)
    {
      ::java::lang::String a0((jobject) NULL);
      StringReader object((jobject) NULL);

      if (!parseArgs(args, "s", &a0))
      {
        INT_CALL(object = StringReader(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/CollectedSearchGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *CollectedSearchGroup::class$ = NULL;
          jmethodID *CollectedSearchGroup::mids$ = NULL;
          bool CollectedSearchGroup::live$ = false;

          jclass CollectedSearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/CollectedSearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollectedSearchGroup::CollectedSearchGroup() : ::org::apache::lucene::search::grouping::SearchGroup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args);
          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data);
          static PyGetSetDef t_CollectedSearchGroup__fields_[] = {
            DECLARE_GET_FIELD(t_CollectedSearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CollectedSearchGroup__methods_[] = {
            DECLARE_METHOD(t_CollectedSearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollectedSearchGroup, t_CollectedSearchGroup, ::org::apache::lucene::search::grouping::SearchGroup, CollectedSearchGroup, t_CollectedSearchGroup_init_, 0, 0, t_CollectedSearchGroup__fields_, 0, 0);
          PyObject *t_CollectedSearchGroup::wrap_Object(const CollectedSearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CollectedSearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CollectedSearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(CollectedSearchGroup), module, "CollectedSearchGroup", 0);
          }

          void t_CollectedSearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "class_", make_descriptor(CollectedSearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "wrapfn_", make_descriptor(t_CollectedSearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollectedSearchGroup::initializeClass, 1)))
              return NULL;
            return t_CollectedSearchGroup::wrap_Object(CollectedSearchGroup(((t_CollectedSearchGroup *) arg)->object.this$));
          }
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollectedSearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds)
          {
            CollectedSearchGroup object((jobject) NULL);

            INT_CALL(object = CollectedSearchGroup());
            self->object = object;

            return 0;
          }
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Header::class$ = NULL;
          jmethodID *PackedInts$Header::mids$ = NULL;
          bool PackedInts$Header::live$ = false;

          jclass PackedInts$Header::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Header");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a0813c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;III)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Header::PackedInts$Header(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46a0813c, a0.this$, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PackedInts$Header__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Header, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Header, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Header, t_PackedInts$Header, ::java::lang::Object, PackedInts$Header, t_PackedInts$Header_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Header::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Header), module, "PackedInts$Header", 0);
          }

          void t_PackedInts$Header::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "class_", make_descriptor(PackedInts$Header::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Header::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Header).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Header_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Header::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Header::wrap_Object(PackedInts$Header(((t_PackedInts$Header *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Header_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Header::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Header_init_(t_PackedInts$Header *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            jint a3;
            PackedInts$Header object((jobject) NULL);

            if (!parseArgs(args, "KIII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = PackedInts$Header(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Store::class$ = NULL;
        jmethodID *Field$Store::mids$ = NULL;
        bool Field$Store::live$ = false;
        Field$Store *Field$Store::NO = NULL;
        Field$Store *Field$Store::YES = NULL;

        jclass Field$Store::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Store");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_7fd4bea4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Store;");
            mids$[mid_values_ca930bca] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Store;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$Store(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Store;"));
            YES = new Field$Store(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$Store;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field$Store Field$Store::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Store(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7fd4bea4], a0.this$));
        }

        JArray< Field$Store > Field$Store::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Store >(env->callStaticObjectMethod(cls, mids$[mid_values_ca930bca]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args);
        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Store_values(PyTypeObject *type);
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data);
        static PyGetSetDef t_Field$Store__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Store, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Store__methods_[] = {
          DECLARE_METHOD(t_Field$Store, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Store, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Store, t_Field$Store, ::java::lang::Enum, Field$Store, abstract_init, 0, 0, t_Field$Store__fields_, 0, 0);
        PyObject *t_Field$Store::wrap_Object(const Field$Store& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Store::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Store::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Store), module, "Field$Store", 0);
        }

        void t_Field$Store::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "class_", make_descriptor(Field$Store::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "wrapfn_", make_descriptor(t_Field$Store::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Store::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "NO", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "YES", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::YES)));
        }

        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Store::initializeClass, 1)))
            return NULL;
          return t_Field$Store::wrap_Object(Field$Store(((t_Field$Store *) arg)->object.this$));
        }
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Store::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Store result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::valueOf(a0));
            return t_Field$Store::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Store_values(PyTypeObject *type)
        {
          JArray< Field$Store > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Store::wrap_jobject);
        }
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl31::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl31::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl31::live$ = false;
            jint UAX29URLEmailTokenizerImpl31::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl31::UAX29URLEmailTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl31__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31, ::java::lang::Object, UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31_init_, 0, 0, t_UAX29URLEmailTokenizerImpl31__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl31), module, "UAX29URLEmailTokenizerImpl31", 0);
            }

            void t_UAX29URLEmailTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl31::wrap_Object(UAX29URLEmailTokenizerImpl31(((t_UAX29URLEmailTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataInput::class$ = NULL;
        jmethodID *DataInput::mids$ = NULL;
        bool DataInput::live$ = false;

        jclass DataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_3fcc829c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/DataInput;");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readString_14c7b5c5] = env->getMethodID(cls, "readString", "()Ljava/lang/String;");
            mids$[mid_readStringSet_03e99967] = env->getMethodID(cls, "readStringSet", "()Ljava/util/Set;");
            mids$[mid_readStringStringMap_db60befd] = env->getMethodID(cls, "readStringStringMap", "()Ljava/util/Map;");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataInput::DataInput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DataInput DataInput::clone() const
        {
          return DataInput(env->callObjectMethod(this$, mids$[mid_clone_3fcc829c]));
        }

        jbyte DataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint DataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong DataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort DataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        ::java::lang::String DataInput::readString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readString_14c7b5c5]));
        }

        ::java::util::Set DataInput::readStringSet() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_readStringSet_03e99967]));
        }

        ::java::util::Map DataInput::readStringStringMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_readStringStringMap_db60befd]));
        }

        jint DataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong DataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void DataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataInput_clone(t_DataInput *self);
        static PyObject *t_DataInput_readByte(t_DataInput *self);
        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args);
        static PyObject *t_DataInput_readInt(t_DataInput *self);
        static PyObject *t_DataInput_readLong(t_DataInput *self);
        static PyObject *t_DataInput_readShort(t_DataInput *self);
        static PyObject *t_DataInput_readString(t_DataInput *self);
        static PyObject *t_DataInput_readStringSet(t_DataInput *self);
        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self);
        static PyObject *t_DataInput_readVInt(t_DataInput *self);
        static PyObject *t_DataInput_readVLong(t_DataInput *self);
        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg);

        static PyMethodDef t_DataInput__methods_[] = {
          DECLARE_METHOD(t_DataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, clone, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readByte, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataInput, readInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readShort, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readString, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringSet, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringStringMap, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, skipBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataInput, t_DataInput, ::java::lang::Object, DataInput, t_DataInput_init_, 0, 0, 0, 0, 0);

        void t_DataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataInput), module, "DataInput", 0);
        }

        void t_DataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "class_", make_descriptor(DataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "wrapfn_", make_descriptor(t_DataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataInput::initializeClass, 1)))
            return NULL;
          return t_DataInput::wrap_Object(DataInput(((t_DataInput *) arg)->object.this$));
        }
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds)
        {
          DataInput object((jobject) NULL);

          INT_CALL(object = DataInput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataInput_clone(t_DataInput *self)
        {
          DataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DataInput::wrap_Object(result);
        }

        static PyObject *t_DataInput_readByte(t_DataInput *self)
        {
          jbyte result;
          OBJ_CALL(result = self->object.readByte());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_DataInput_readInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readShort(t_DataInput *self)
        {
          jshort result;
          OBJ_CALL(result = self->object.readShort());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readString(t_DataInput *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.readString());
          return j2p(result);
        }

        static PyObject *t_DataInput_readStringSet(t_DataInput *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringSet());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringStringMap());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readVInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readVInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readVLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readVLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect::class$ = NULL;
          jmethodID *AfterEffect::mids$ = NULL;
          bool AfterEffect::live$ = false;

          jclass AfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect::AfterEffect() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect, t_AfterEffect, ::java::lang::Object, AfterEffect, t_AfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect), module, "AfterEffect", 0);
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "NoAfterEffect", make_descriptor(&PY_TYPE(AfterEffect$NoAfterEffect)));
          }

          void t_AfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "class_", make_descriptor(AfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect::wrap_Object(AfterEffect(((t_AfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_score(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$FilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$FilterStrategy::mids$ = NULL;
        bool FilteredQuery$FilterStrategy::live$ = false;

        jclass FilteredQuery$FilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$FilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredBulkScorer_b5c185de] = env->getMethodID(cls, "filteredBulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;ZLorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$FilterStrategy::FilteredQuery$FilterStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer FilteredQuery$FilterStrategy::filteredBulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, jboolean a2, const ::org::apache::lucene::search::DocIdSet & a3) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_filteredBulkScorer_b5c185de], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::Scorer FilteredQuery$FilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);
        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$FilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredBulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery$FilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy, ::java::lang::Object, FilteredQuery$FilterStrategy, t_FilteredQuery$FilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$FilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$FilterStrategy), module, "FilteredQuery$FilterStrategy", 0);
        }

        void t_FilteredQuery$FilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$FilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$FilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$FilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$FilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$FilterStrategy::wrap_Object(FilteredQuery$FilterStrategy(((t_FilteredQuery$FilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$FilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$FilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$FilterStrategy_init_(t_FilteredQuery$FilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$FilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$FilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredBulkScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::search::DocIdSet a3((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kkZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.filteredBulkScorer(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredBulkScorer", args);
          return NULL;
        }

        static PyObject *t_FilteredQuery$FilterStrategy_filteredScorer(t_FilteredQuery$FilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "filteredScorer", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilter::class$ = NULL;
          jmethodID *ScandinavianFoldingFilter::mids$ = NULL;
          bool ScandinavianFoldingFilter::live$ = false;

          jclass ScandinavianFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilter::ScandinavianFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilter, t_ScandinavianFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianFoldingFilter, t_ScandinavianFoldingFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilter), module, "ScandinavianFoldingFilter", 0);
          }

          void t_ScandinavianFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilter::wrap_Object(ScandinavianFoldingFilter(((t_ScandinavianFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianFoldingFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianFoldingFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MutableBits::class$ = NULL;
        jmethodID *MutableBits::mids$ = NULL;
        bool MutableBits::live$ = false;

        jclass MutableBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MutableBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MutableBits::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg);

        static PyMethodDef t_MutableBits__methods_[] = {
          DECLARE_METHOD(t_MutableBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutableBits, clear, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MutableBits, t_MutableBits, ::org::apache::lucene::util::Bits, MutableBits, abstract_init, 0, 0, 0, 0, 0);

        void t_MutableBits::install(PyObject *module)
        {
          installType(&PY_TYPE(MutableBits), module, "MutableBits", 0);
        }

        void t_MutableBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "class_", make_descriptor(MutableBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "wrapfn_", make_descriptor(t_MutableBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MutableBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MutableBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MutableBits::initializeClass, 1)))
            return NULL;
          return t_MutableBits::wrap_Object(MutableBits(((t_MutableBits *) arg)->object.this$));
        }
        static PyObject *t_MutableBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MutableBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MutableBits_clear(t_MutableBits *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.clear(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clear", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsWriterBase::class$ = NULL;
        jmethodID *PostingsWriterBase::mids$ = NULL;
        bool PostingsWriterBase::live$ = false;

        jclass PostingsWriterBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsWriterBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
            mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
            mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
            mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsWriterBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsWriterBase::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        void PostingsWriterBase::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
        }

        void PostingsWriterBase::init(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsWriterBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }

        jint PostingsWriterBase::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
        }

        void PostingsWriterBase::startTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args);
        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self);
        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data);
        static PyGetSetDef t_PostingsWriterBase__fields_[] = {
          DECLARE_SET_FIELD(t_PostingsWriterBase, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsWriterBase__methods_[] = {
          DECLARE_METHOD(t_PostingsWriterBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, encodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsWriterBase, finishTerm, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, init, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, newTermState, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, setField, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, startTerm, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsWriterBase, t_PostingsWriterBase, ::org::apache::lucene::codecs::PostingsConsumer, PostingsWriterBase, abstract_init, 0, 0, t_PostingsWriterBase__fields_, 0, 0);

        void t_PostingsWriterBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsWriterBase), module, "PostingsWriterBase", 0);
        }

        void t_PostingsWriterBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "class_", make_descriptor(PostingsWriterBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsWriterBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsWriterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsWriterBase::initializeClass, 1)))
            return NULL;
          return t_PostingsWriterBase::wrap_Object(PostingsWriterBase(((t_PostingsWriterBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsWriterBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "encodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_finishTerm(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.finishTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_newTermState(t_PostingsWriterBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }

        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setField(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "setField", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_startTerm(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.startTerm());
          Py_RETURN_NONE;
        }

        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishAnalyzer::class$ = NULL;
          jmethodID *SwedishAnalyzer::mids$ = NULL;
          bool SwedishAnalyzer::live$ = false;
          ::java::lang::String *SwedishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SwedishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SwedishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data);
          static PyGetSetDef t_SwedishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SwedishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SwedishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SwedishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishAnalyzer, t_SwedishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SwedishAnalyzer, t_SwedishAnalyzer_init_, 0, 0, t_SwedishAnalyzer__fields_, 0, 0);

          void t_SwedishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishAnalyzer), module, "SwedishAnalyzer", 0);
          }

          void t_SwedishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "class_", make_descriptor(SwedishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SwedishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SwedishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SwedishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SwedishAnalyzer::wrap_Object(SwedishAnalyzer(((t_SwedishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::sv::SwedishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41Codec::class$ = NULL;
          jmethodID *Lucene41Codec::mids$ = NULL;
          bool Lucene41Codec::live$ = false;

          jclass Lucene41Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41Codec::Lucene41Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene41Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene41Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene41Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene41Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene41Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene41Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene41Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg);
          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args);

          static PyMethodDef t_Lucene41Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene41Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene41Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41Codec, t_Lucene41Codec, ::org::apache::lucene::codecs::Codec, Lucene41Codec, t_Lucene41Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene41Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41Codec), module, "Lucene41Codec", 0);
          }

          void t_Lucene41Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "class_", make_descriptor(Lucene41Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene41Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene41Codec::wrap_Object(Lucene41Codec(((t_Lucene41Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene41Codec object((jobject) NULL);

            INT_CALL(object = Lucene41Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IdentityEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IdentityEncoder::class$ = NULL;
          jmethodID *IdentityEncoder::mids$ = NULL;
          bool IdentityEncoder::live$ = false;

          jclass IdentityEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IdentityEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IdentityEncoder::IdentityEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IdentityEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args);

          static PyMethodDef t_IdentityEncoder__methods_[] = {
            DECLARE_METHOD(t_IdentityEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IdentityEncoder, t_IdentityEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IdentityEncoder, t_IdentityEncoder_init_, 0, 0, 0, 0, 0);

          void t_IdentityEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IdentityEncoder), module, "IdentityEncoder", 0);
          }

          void t_IdentityEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "class_", make_descriptor(IdentityEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "wrapfn_", make_descriptor(t_IdentityEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IdentityEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IdentityEncoder::initializeClass, 1)))
              return NULL;
            return t_IdentityEncoder::wrap_Object(IdentityEncoder(((t_IdentityEncoder *) arg)->object.this$));
          }
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IdentityEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds)
          {
            IdentityEncoder object((jobject) NULL);

            INT_CALL(object = IdentityEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IdentityEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilter::class$ = NULL;
          jmethodID *PersianNormalizationFilter::mids$ = NULL;
          bool PersianNormalizationFilter::live$ = false;

          jclass PersianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilter::PersianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PersianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_PersianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilter, t_PersianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, PersianNormalizationFilter, t_PersianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilter), module, "PersianNormalizationFilter", 0);
          }

          void t_PersianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "class_", make_descriptor(PersianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilter::wrap_Object(PersianNormalizationFilter(((t_PersianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PersianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PersianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordAnalyzer::class$ = NULL;
          jmethodID *KeywordAnalyzer::mids$ = NULL;
          bool KeywordAnalyzer::live$ = false;

          jclass KeywordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAnalyzer::KeywordAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KeywordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_KeywordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAnalyzer, t_KeywordAnalyzer, ::org::apache::lucene::analysis::Analyzer, KeywordAnalyzer, t_KeywordAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_KeywordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAnalyzer), module, "KeywordAnalyzer", 0);
          }

          void t_KeywordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "class_", make_descriptor(KeywordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_KeywordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_KeywordAnalyzer::wrap_Object(KeywordAnalyzer(((t_KeywordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            KeywordAnalyzer object((jobject) NULL);

            INT_CALL(object = KeywordAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *QueryNodeOperation::class$ = NULL;
              jmethodID *QueryNodeOperation::mids$ = NULL;
              bool QueryNodeOperation::live$ = false;

              jclass QueryNodeOperation::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_logicalAnd_f8fdf1b4] = env->getStaticMethodID(cls, "logicalAnd", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeOperation::logicalAnd(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callStaticObjectMethod(cls, mids$[mid_logicalAnd_f8fdf1b4], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_QueryNodeOperation__methods_[] = {
                DECLARE_METHOD(t_QueryNodeOperation, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, logicalAnd, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeOperation, t_QueryNodeOperation, ::java::lang::Object, QueryNodeOperation, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryNodeOperation::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeOperation), module, "QueryNodeOperation", 0);
              }

              void t_QueryNodeOperation::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "class_", make_descriptor(QueryNodeOperation::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeOperation::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeOperation).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeOperation::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeOperation::wrap_Object(QueryNodeOperation(((t_QueryNodeOperation *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeOperation::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::QueryNodeOperation::logicalAnd(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "logicalAnd", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/AndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *AndQuery::class$ = NULL;
            jmethodID *AndQuery::mids$ = NULL;
            bool AndQuery::live$ = false;

            jclass AndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/AndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AndQuery::AndQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            ::org::apache::lucene::search::Query AndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args);

            static PyMethodDef t_AndQuery__methods_[] = {
              DECLARE_METHOD(t_AndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AndQuery, t_AndQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, AndQuery, t_AndQuery_init_, 0, 0, 0, 0, 0);

            void t_AndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(AndQuery), module, "AndQuery", 0);
            }

            void t_AndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "class_", make_descriptor(AndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "wrapfn_", make_descriptor(t_AndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AndQuery::initializeClass, 1)))
                return NULL;
              return t_AndQuery::wrap_Object(AndQuery(((t_AndQuery *) arg)->object.this$));
            }
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              AndQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = AndQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(AndQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$Builder::class$ = NULL;
        jmethodID *WAH8DocIdSet$Builder::mids$ = NULL;
        bool WAH8DocIdSet$Builder::live$ = false;

        jclass WAH8DocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_f8a06644] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_add_7ac30ded] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_7ac30ded] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WAH8DocIdSet$Builder::WAH8DocIdSet$Builder() : ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_f8a06644], a0.this$));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_7ac30ded], a0));
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_7ac30ded], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, build, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, setIndexInterval, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder, ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder, WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder_init_, 0, 0, t_WAH8DocIdSet$Builder__fields_, 0, 0);

        void t_WAH8DocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$Builder), module, "WAH8DocIdSet$Builder", 0);
        }

        void t_WAH8DocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$Builder::wrap_Object(WAH8DocIdSet$Builder(((t_WAH8DocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          WAH8DocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = WAH8DocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "build", args, 2);
        }

        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          jint a0;
          WAH8DocIdSet$Builder result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$Builder::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "setIndexInterval", args, 2);
        }

        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessor::class$ = NULL;
              jmethodID *QueryNodeProcessor::mids$ = NULL;
              bool QueryNodeProcessor::live$ = false;

              jclass QueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self);
              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data);
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessor, t_QueryNodeProcessor, ::java::lang::Object, QueryNodeProcessor, abstract_init, 0, 0, t_QueryNodeProcessor__fields_, 0, 0);

              void t_QueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessor), module, "QueryNodeProcessor", 0);
              }

              void t_QueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "class_", make_descriptor(QueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessor::wrap_Object(QueryNodeProcessor(((t_QueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion::class$ = NULL;
            jmethodID *FSTCompletion::mids$ = NULL;
            bool FSTCompletion::live$ = false;
            jint FSTCompletion::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
                mids$[mid_init$_a36157b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;ZZ)V");
                mids$[mid_getBucket_a8afc655] = env->getMethodID(cls, "getBucket", "(Ljava/lang/CharSequence;)I");
                mids$[mid_getBucketCount_54c6a179] = env->getMethodID(cls, "getBucketCount", "()I");
                mids$[mid_getFST_917b3659] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/util/fst/FST;");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a36157b6, a0.this$, a1, a2)) {}

            jint FSTCompletion::getBucket(const ::java::lang::CharSequence & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getBucket_a8afc655], a0.this$);
            }

            jint FSTCompletion::getBucketCount() const
            {
              return env->callIntMethod(this$, mids$[mid_getBucketCount_54c6a179]);
            }

            ::org::apache::lucene::util::fst::FST FSTCompletion::getFST() const
            {
              return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_getFST_917b3659]));
            }

            ::java::util::List FSTCompletion::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg);
            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args);
            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data);
            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data);
            static PyGetSetDef t_FSTCompletion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion, bucketCount),
              DECLARE_GET_FIELD(t_FSTCompletion, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, getBucket, METH_O),
              DECLARE_METHOD(t_FSTCompletion, getBucketCount, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, getFST, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion, t_FSTCompletion, ::java::lang::Object, FSTCompletion, t_FSTCompletion_init_, 0, 0, t_FSTCompletion__fields_, 0, 0);

            void t_FSTCompletion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion), module, "FSTCompletion", 0);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "Completion", make_descriptor(&PY_TYPE(FSTCompletion$Completion)));
            }

            void t_FSTCompletion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "class_", make_descriptor(FSTCompletion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletion::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletion::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion::wrap_Object(FSTCompletion(((t_FSTCompletion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
                  {
                    INT_CALL(object = FSTCompletion(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  jboolean a1;
                  jboolean a2;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "KZZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletion(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.getBucket(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBucket", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBucketCount());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self)
            {
              ::org::apache::lucene::util::fst::FST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::fst::PY_TYPE(FSTCompletion$Completion));
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBucketCount());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilter::class$ = NULL;
          jmethodID *GermanNormalizationFilter::mids$ = NULL;
          bool GermanNormalizationFilter::live$ = false;

          jclass GermanNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilter::GermanNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_GermanNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilter, t_GermanNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, GermanNormalizationFilter, t_GermanNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilter), module, "GermanNormalizationFilter", 0);
          }

          void t_GermanNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "class_", make_descriptor(GermanNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilter::wrap_Object(GermanNormalizationFilter(((t_GermanNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$SpanRewriteMethod::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$SpanRewriteMethod::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$SpanRewriteMethod::live$ = false;

          jclass SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$SpanRewriteMethod::SpanMultiTermQueryWrapper$SpanRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$SpanRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_, 0, 0, t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(const SpanMultiTermQueryWrapper$SpanRewriteMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), module, "SpanMultiTermQueryWrapper$SpanRewriteMethod", 0);
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(SpanMultiTermQueryWrapper$SpanRewriteMethod(((t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds)
          {
            SpanMultiTermQueryWrapper$SpanRewriteMethod object((jobject) NULL);

            INT_CALL(object = SpanMultiTermQueryWrapper$SpanRewriteMethod());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SPIClassIterator.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SPIClassIterator::class$ = NULL;
        jmethodID *SPIClassIterator::mids$ = NULL;
        bool SPIClassIterator::live$ = false;

        jclass SPIClassIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SPIClassIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_d529caef] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_get_9dc4dbcc] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_isParentClassLoader_7f5616f8] = env->getStaticMethodID(cls, "isParentClassLoader", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z");
            mids$[mid_next_44a5f2c9] = env->getMethodID(cls, "next", "()Ljava/lang/Class;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_d529caef], a0.this$));
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_9dc4dbcc], a0.this$, a1.this$));
        }

        jboolean SPIClassIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        jboolean SPIClassIterator::isParentClassLoader(const ::java::lang::ClassLoader & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isParentClassLoader_7f5616f8], a0.this$, a1.this$);
        }

        ::java::lang::Class SPIClassIterator::next() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_next_44a5f2c9]));
        }

        void SPIClassIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args);
        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data);
        static PyGetSetDef t_SPIClassIterator__fields_[] = {
          DECLARE_GET_FIELD(t_SPIClassIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SPIClassIterator__methods_[] = {
          DECLARE_METHOD(t_SPIClassIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_SPIClassIterator, get, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, isParentClassLoader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SPIClassIterator, t_SPIClassIterator, ::java::lang::Object, SPIClassIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Class >), t_SPIClassIterator__fields_, 0, 0);
        PyObject *t_SPIClassIterator::wrap_Object(const SPIClassIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SPIClassIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SPIClassIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(SPIClassIterator), module, "SPIClassIterator", 0);
        }

        void t_SPIClassIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "class_", make_descriptor(SPIClassIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "wrapfn_", make_descriptor(t_SPIClassIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SPIClassIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SPIClassIterator::initializeClass, 1)))
            return NULL;
          return t_SPIClassIterator::wrap_Object(SPIClassIterator(((t_SPIClassIterator *) arg)->object.this$));
        }
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SPIClassIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0, a1));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "get", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);
          ::java::lang::ClassLoader a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::java::lang::ClassLoader::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::isParentClassLoader(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isParentClassLoader", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/FastCharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *FastCharStream::class$ = NULL;
            jmethodID *FastCharStream::mids$ = NULL;
            bool FastCharStream::live$ = false;

            jclass FastCharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/FastCharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jchar FastCharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void FastCharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String FastCharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > FastCharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void FastCharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint FastCharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint FastCharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint FastCharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint FastCharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint FastCharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint FastCharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar FastCharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
            static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
            static PyGetSetDef t_FastCharStream__fields_[] = {
              DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
              DECLARE_GET_FIELD(t_FastCharStream, beginLine),
              DECLARE_GET_FIELD(t_FastCharStream, column),
              DECLARE_GET_FIELD(t_FastCharStream, endColumn),
              DECLARE_GET_FIELD(t_FastCharStream, endLine),
              DECLARE_GET_FIELD(t_FastCharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FastCharStream__methods_[] = {
              DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_FastCharStream, backup, METH_O),
              DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

            void t_FastCharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
            }

            void t_FastCharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                return NULL;
              return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
            }
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FastCharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              FastCharStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = FastCharStream(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedSetDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedSetDocValuesField::class$ = NULL;
        jmethodID *SortedSetDocValuesField::mids$ = NULL;
        bool SortedSetDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedSetDocValuesField::TYPE = NULL;

        jclass SortedSetDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedSetDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetDocValuesField::SortedSetDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedSetDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValuesField, t_SortedSetDocValuesField, ::org::apache::lucene::document::Field, SortedSetDocValuesField, t_SortedSetDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedSetDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValuesField), module, "SortedSetDocValuesField", 0);
        }

        void t_SortedSetDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "class_", make_descriptor(SortedSetDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesField::TYPE)));
        }

        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValuesField::wrap_Object(SortedSetDocValuesField(((t_SortedSetDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedSetDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedSetDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsFormat::class$ = NULL;
          jmethodID *CompressingStoredFieldsFormat::mids$ = NULL;
          bool CompressingStoredFieldsFormat::live$ = false;

          jclass CompressingStoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41920a78] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::org::apache::lucene::codecs::compressing::CompressionMode & a1, jint a2) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_41920a78, a0.this$, a1.this$, a2)) {}

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter CompressingStoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String CompressingStoredFieldsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsWriter, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsFormat), module, "CompressingStoredFieldsFormat", 0);
          }

          void t_CompressingStoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "class_", make_descriptor(CompressingStoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsFormat::wrap_Object(CompressingStoredFieldsFormat(((t_CompressingStoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a1((jobject) NULL);
                jint a2;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "skI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
                jint a3;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeFilter::class$ = NULL;
          jmethodID *SlowCollatedTermRangeFilter::mids$ = NULL;
          bool SlowCollatedTermRangeFilter::live$ = false;

          jclass SlowCollatedTermRangeFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ad38c2c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_getCollator_44b7fa29] = env->getMethodID(cls, "getCollator", "()Ljava/text/Collator;");
              mids$[mid_getLowerTerm_14c7b5c5] = env->getMethodID(cls, "getLowerTerm", "()Ljava/lang/String;");
              mids$[mid_getUpperTerm_14c7b5c5] = env->getMethodID(cls, "getUpperTerm", "()Ljava/lang/String;");
              mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
              mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeFilter::SlowCollatedTermRangeFilter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_ad38c2c0, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          ::java::text::Collator SlowCollatedTermRangeFilter::getCollator() const
          {
            return ::java::text::Collator(env->callObjectMethod(this$, mids$[mid_getCollator_44b7fa29]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getLowerTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerTerm_14c7b5c5]));
          }

          ::java::lang::String SlowCollatedTermRangeFilter::getUpperTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperTerm_14c7b5c5]));
          }

          jboolean SlowCollatedTermRangeFilter::includesLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
          }

          jboolean SlowCollatedTermRangeFilter::includesUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args);
          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self);
          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data);
          static PyGetSetDef t_SlowCollatedTermRangeFilter__fields_[] = {
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, collator),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, lowerTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, upperTerm),
            DECLARE_GET_FIELD(t_SlowCollatedTermRangeFilter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedTermRangeFilter__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getCollator, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getLowerTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, getUpperTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesLower, METH_NOARGS),
            DECLARE_METHOD(t_SlowCollatedTermRangeFilter, includesUpper, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, SlowCollatedTermRangeFilter, t_SlowCollatedTermRangeFilter_init_, 0, 0, t_SlowCollatedTermRangeFilter__fields_, 0, 0);
          PyObject *t_SlowCollatedTermRangeFilter::wrap_Object(const SlowCollatedTermRangeFilter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedTermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedTermRangeFilter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedTermRangeFilter *self = (t_SlowCollatedTermRangeFilter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedTermRangeFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeFilter), module, "SlowCollatedTermRangeFilter", 0);
          }

          void t_SlowCollatedTermRangeFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeFilter::wrap_Object(SlowCollatedTermRangeFilter(((t_SlowCollatedTermRangeFilter *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_of_(t_SlowCollatedTermRangeFilter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedTermRangeFilter_init_(t_SlowCollatedTermRangeFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeFilter object((jobject) NULL);

            if (!parseArgs(args, "sssZZk", ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeFilter(a0, a1, a2, a3, a4, a5));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::sandbox::queries::PY_TYPE(SlowCollatedTermRangeQuery);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getCollator(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::text::Collator result((jobject) NULL);
            OBJ_CALL(result = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getLowerTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_getUpperTerm(t_SlowCollatedTermRangeFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperTerm());
            return j2p(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesLower(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_includesUpper(t_SlowCollatedTermRangeFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.includesUpper());
            Py_RETURN_BOOL(result);
          }
          static PyObject *t_SlowCollatedTermRangeFilter_get__parameters_(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__collator(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::text::Collator value((jobject) NULL);
            OBJ_CALL(value = self->object.getCollator());
            return ::java::text::t_Collator::wrap_Object(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__lowerTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerTerm());
            return j2p(value);
          }

          static PyObject *t_SlowCollatedTermRangeFilter_get__upperTerm(t_SlowCollatedTermRangeFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperTerm());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack::class$ = NULL;
          jmethodID *FieldTermStack::mids$ = NULL;
          bool FieldTermStack::live$ = false;

          jclass FieldTermStack::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3cbed11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
              mids$[mid_pop_9d9e3d4a] = env->getMethodID(cls, "pop", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_push_a7ece36b] = env->getMethodID(cls, "push", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack::FieldTermStack(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e3cbed11, a0.this$, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FieldTermStack::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          jboolean FieldTermStack::isEmpty() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
          }

          ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo FieldTermStack::pop() const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_pop_9d9e3d4a]));
          }

          void FieldTermStack::push(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_push_a7ece36b], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg);
          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data);
          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data);
          static PyGetSetDef t_FieldTermStack__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack, empty),
            DECLARE_GET_FIELD(t_FieldTermStack, fieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, pop, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, push, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack, t_FieldTermStack, ::java::lang::Object, FieldTermStack, t_FieldTermStack_init_, 0, 0, t_FieldTermStack__fields_, 0, 0);

          void t_FieldTermStack::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack), module, "FieldTermStack", 0);
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "TermInfo", make_descriptor(&PY_TYPE(FieldTermStack$TermInfo)));
          }

          void t_FieldTermStack::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "class_", make_descriptor(FieldTermStack::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack::wrap_Object(FieldTermStack(((t_FieldTermStack *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a3((jobject) NULL);
            FieldTermStack object((jobject) NULL);

            if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FieldTermStack(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.pop());
            return ::org::apache::lucene::search::vectorhighlight::t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.push(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "push", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FlushInfo::class$ = NULL;
        jmethodID *FlushInfo::mids$ = NULL;
        jfieldID *FlushInfo::fids$ = NULL;
        bool FlushInfo::live$ = false;

        jclass FlushInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FlushInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedSegmentSize] = env->getFieldID(cls, "estimatedSegmentSize", "J");
            fids$[fid_numDocs] = env->getFieldID(cls, "numDocs", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FlushInfo::FlushInfo(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jboolean FlushInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FlushInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FlushInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong FlushInfo::_get_estimatedSegmentSize() const
        {
          return env->getLongField(this$, fids$[fid_estimatedSegmentSize]);
        }

        jint FlushInfo::_get_numDocs() const
        {
          return env->getIntField(this$, fids$[fid_numDocs]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data);
        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data);

        static PyGetSetDef t_FlushInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FlushInfo, estimatedSegmentSize),
          DECLARE_GET_FIELD(t_FlushInfo, numDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FlushInfo__methods_[] = {
          DECLARE_METHOD(t_FlushInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FlushInfo, t_FlushInfo, ::java::lang::Object, FlushInfo, t_FlushInfo_init_, 0, 0, t_FlushInfo__fields_, 0, 0);

        void t_FlushInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FlushInfo), module, "FlushInfo", 0);
        }

        void t_FlushInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "class_", make_descriptor(FlushInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "wrapfn_", make_descriptor(t_FlushInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FlushInfo::initializeClass, 1)))
            return NULL;
          return t_FlushInfo::wrap_Object(FlushInfo(((t_FlushInfo *) arg)->object.this$));
        }
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FlushInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          FlushInfo object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = FlushInfo(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedSegmentSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDocs());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils::class$ = NULL;
        jmethodID *NumericUtils::mids$ = NULL;
        bool NumericUtils::live$ = false;
        jint NumericUtils::BUF_SIZE_INT = (jint) 0;
        jint NumericUtils::BUF_SIZE_LONG = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT_32 = (jint) 0;
        jbyte NumericUtils::SHIFT_START_INT = (jbyte) 0;
        jbyte NumericUtils::SHIFT_START_LONG = (jbyte) 0;

        jclass NumericUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doubleToSortableLong_5d1c7659] = env->getStaticMethodID(cls, "doubleToSortableLong", "(D)J");
            mids$[mid_filterPrefixCodedInts_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedInts", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_filterPrefixCodedLongs_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedLongs", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_floatToSortableInt_06298cb4] = env->getStaticMethodID(cls, "floatToSortableInt", "(F)I");
            mids$[mid_getMaxInt_d0b7bb08] = env->getStaticMethodID(cls, "getMaxInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMaxLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMaxLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getMinInt_d0b7bb08] = env->getStaticMethodID(cls, "getMinInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMinLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMinLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getPrefixCodedIntShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedIntShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_getPrefixCodedLongShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedLongShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_intToPrefixCoded_362d2138] = env->getStaticMethodID(cls, "intToPrefixCoded", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_intToPrefixCodedBytes_362d2138] = env->getStaticMethodID(cls, "intToPrefixCodedBytes", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_longToPrefixCoded_4adff79b] = env->getStaticMethodID(cls, "longToPrefixCoded", "(JILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_longToPrefixCodedBytes_4adff79b] = env->getStaticMethodID(cls, "longToPrefixCodedBytes", "(JILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_prefixCodedToInt_7bc03ddb] = env->getStaticMethodID(cls, "prefixCodedToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_prefixCodedToLong_7bc03dd8] = env->getStaticMethodID(cls, "prefixCodedToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_sortableDoubleBits_0ee6df33] = env->getStaticMethodID(cls, "sortableDoubleBits", "(J)J");
            mids$[mid_sortableFloatBits_39c7bd23] = env->getStaticMethodID(cls, "sortableFloatBits", "(I)I");
            mids$[mid_sortableIntToFloat_39c7bd2c] = env->getStaticMethodID(cls, "sortableIntToFloat", "(I)F");
            mids$[mid_sortableLongToDouble_0ee6df3d] = env->getStaticMethodID(cls, "sortableLongToDouble", "(J)D");
            mids$[mid_splitIntRange_b263c325] = env->getStaticMethodID(cls, "splitIntRange", "(Lorg/apache/lucene/util/NumericUtils$IntRangeBuilder;III)V");
            mids$[mid_splitLongRange_585f2c31] = env->getStaticMethodID(cls, "splitLongRange", "(Lorg/apache/lucene/util/NumericUtils$LongRangeBuilder;IJJ)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUF_SIZE_INT = env->getStaticIntField(cls, "BUF_SIZE_INT");
            BUF_SIZE_LONG = env->getStaticIntField(cls, "BUF_SIZE_LONG");
            PRECISION_STEP_DEFAULT = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT");
            PRECISION_STEP_DEFAULT_32 = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT_32");
            SHIFT_START_INT = env->getStaticByteField(cls, "SHIFT_START_INT");
            SHIFT_START_LONG = env->getStaticByteField(cls, "SHIFT_START_LONG");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericUtils::doubleToSortableLong(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_doubleToSortableLong_5d1c7659], a0);
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedInts(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedInts_d737078b], a0.this$));
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedLongs(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedLongs_d737078b], a0.this$));
        }

        jint NumericUtils::floatToSortableInt(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToSortableInt_06298cb4], a0);
        }

        jint NumericUtils::getMaxInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMaxLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMaxLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getMinInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMinInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMinLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMinLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getPrefixCodedIntShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedIntShift_7bc03ddb], a0.this$);
        }

        jint NumericUtils::getPrefixCodedLongShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedLongShift_7bc03ddb], a0.this$);
        }

        void NumericUtils::intToPrefixCoded(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCoded_362d2138], a0, a1, a2.this$);
        }

        void NumericUtils::intToPrefixCodedBytes(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCodedBytes_362d2138], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCoded(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCoded_4adff79b], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCodedBytes(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCodedBytes_4adff79b], a0, a1, a2.this$);
        }

        jint NumericUtils::prefixCodedToInt(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_prefixCodedToInt_7bc03ddb], a0.this$);
        }

        jlong NumericUtils::prefixCodedToLong(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_prefixCodedToLong_7bc03dd8], a0.this$);
        }

        jlong NumericUtils::sortableDoubleBits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sortableDoubleBits_0ee6df33], a0);
        }

        jint NumericUtils::sortableFloatBits(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortableFloatBits_39c7bd23], a0);
        }

        jfloat NumericUtils::sortableIntToFloat(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_sortableIntToFloat_39c7bd2c], a0);
        }

        jdouble NumericUtils::sortableLongToDouble(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sortableLongToDouble_0ee6df3d], a0);
        }

        void NumericUtils::splitIntRange(const ::org::apache::lucene::util::NumericUtils$IntRangeBuilder & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitIntRange_b263c325], a0.this$, a1, a2, a3);
        }

        void NumericUtils::splitLongRange(const ::org::apache::lucene::util::NumericUtils$LongRangeBuilder & a0, jint a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitLongRange_585f2c31], a0.this$, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_NumericUtils__methods_[] = {
          DECLARE_METHOD(t_NumericUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, doubleToSortableLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedInts, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedLongs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, floatToSortableInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedIntShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedLongShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableDoubleBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableFloatBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableIntToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableLongToDouble, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils, t_NumericUtils, ::java::lang::Object, NumericUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils), module, "NumericUtils", 0);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "IntRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$IntRangeBuilder)));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "LongRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$LongRangeBuilder)));
        }

        void t_NumericUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "class_", make_descriptor(NumericUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_INT", make_descriptor(NumericUtils::BUF_SIZE_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_LONG", make_descriptor(NumericUtils::BUF_SIZE_LONG));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT_32", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT_32));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_INT", make_descriptor(NumericUtils::SHIFT_START_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_LONG", make_descriptor(NumericUtils::SHIFT_START_LONG));
        }

        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils::initializeClass, 1)))
            return NULL;
          return t_NumericUtils::wrap_Object(NumericUtils(((t_NumericUtils *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jlong result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::doubleToSortableLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "doubleToSortableLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedInts(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedInts", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedLongs(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedLongs", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jint result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::floatToSortableInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToSortableInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMaxInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMaxLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMinInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMinLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedIntShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedIntShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedLongShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedLongShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableDoubleBits(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "sortableDoubleBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableFloatBits(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortableFloatBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableIntToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableIntToFloat", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jdouble result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableLongToDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableLongToDouble", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$IntRangeBuilder a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "kIII", ::org::apache::lucene::util::NumericUtils$IntRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitIntRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$LongRangeBuilder a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;

          if (!parseArgs(args, "kIJJ", ::org::apache::lucene::util::NumericUtils$LongRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitLongRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitLongRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizer::class$ = NULL;
          jmethodID *PatternTokenizer::mids$ = NULL;
          bool PatternTokenizer::live$ = false;

          jclass PatternTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f57c1546] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_init$_b5faf662] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizer::PatternTokenizer(const ::java::io::Reader & a0, const ::java::util::regex::Pattern & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f57c1546, a0.this$, a1.this$, a2)) {}

          PatternTokenizer::PatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::util::regex::Pattern & a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_b5faf662, a0.this$, a1.this$, a2.this$, a3)) {}

          void PatternTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PatternTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args);

          static PyMethodDef t_PatternTokenizer__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizer, t_PatternTokenizer, ::org::apache::lucene::analysis::Tokenizer, PatternTokenizer, t_PatternTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizer), module, "PatternTokenizer", 0);
          }

          void t_PatternTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "class_", make_descriptor(PatternTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizer::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizer::wrap_Object(PatternTokenizer(((t_PatternTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::regex::Pattern a1((jobject) NULL);
                jint a2;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::util::regex::Pattern a2((jobject) NULL);
                jint a3;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "java/util/HashMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemFilter::class$ = NULL;
          jmethodID *DutchStemFilter::mids$ = NULL;
          bool DutchStemFilter::live$ = false;

          jclass DutchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d492dbba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Map;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemDictionary_70cdf88c] = env->getMethodID(cls, "setStemDictionary", "(Ljava/util/HashMap;)V");
              mids$[mid_setStemmer_b66a40d3] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/nl/DutchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          DutchStemFilter::DutchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d492dbba, a0.this$, a1.this$)) {}

          jboolean DutchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void DutchStemFilter::setStemDictionary(const ::java::util::HashMap & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemDictionary_70cdf88c], a0.this$);
          }

          void DutchStemFilter::setStemmer(const ::org::apache::lucene::analysis::nl::DutchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_b66a40d3], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args);
          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg);
          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg);
          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data);
          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DutchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_DutchStemFilter, stemDictionary),
            DECLARE_SET_FIELD(t_DutchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchStemFilter__methods_[] = {
            DECLARE_METHOD(t_DutchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_DutchStemFilter, setStemDictionary, METH_O),
            DECLARE_METHOD(t_DutchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemFilter, t_DutchStemFilter, ::org::apache::lucene::analysis::TokenFilter, DutchStemFilter, t_DutchStemFilter_init_, 0, 0, t_DutchStemFilter__fields_, 0, 0);

          void t_DutchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemFilter), module, "DutchStemFilter", 0);
          }

          void t_DutchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "class_", make_descriptor(DutchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_DutchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemFilter::initializeClass, 1)))
              return NULL;
            return t_DutchStemFilter::wrap_Object(DutchStemFilter(((t_DutchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_DutchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemFilter_init_(t_DutchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = DutchStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                DutchStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = DutchStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchStemFilter_incrementToken(t_DutchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DutchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_DutchStemFilter_setStemDictionary(t_DutchStemFilter *self, PyObject *arg)
          {
            ::java::util::HashMap a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::HashMap::initializeClass, &a0, &p0, ::java::util::t_HashMap::parameters_))
            {
              OBJ_CALL(self->object.setStemDictionary(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemDictionary", arg);
            return NULL;
          }

          static PyObject *t_DutchStemFilter_setStemmer(t_DutchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::nl::DutchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_DutchStemFilter_set__stemDictionary(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::HashMap value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::HashMap::initializeClass, &value))
              {
                INT_CALL(self->object.setStemDictionary(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemDictionary", arg);
            return -1;
          }

          static int t_DutchStemFilter_set__stemmer(t_DutchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::nl::DutchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::nl::DutchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValue::class$ = NULL;
          jmethodID *MutableValue::mids$ = NULL;
          jfieldID *MutableValue::fids$ = NULL;
          bool MutableValue::live$ = false;

          jclass MutableValue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_compareTo_d590ce63] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/mutable/MutableValue;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_exists_54c6a16a] = env->getMethodID(cls, "exists", "()Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_exists] = env->getFieldID(cls, "exists", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValue::MutableValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValue::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          jint MutableValue::compareTo(const MutableValue & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_d590ce63], a0.this$);
          }

          void MutableValue::copy(const MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          MutableValue MutableValue::duplicate() const
          {
            return MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValue::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jboolean MutableValue::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jboolean MutableValue::exists() const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_54c6a16a]);
          }

          jint MutableValue::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValue::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::java::lang::String MutableValue::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jboolean MutableValue::_get_exists() const
          {
            return env->getBooleanField(this$, fids$[fid_exists]);
          }

          void MutableValue::_set_exists(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_exists], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_duplicate(t_MutableValue *self);
          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_exists(t_MutableValue *self);
          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_toObject(t_MutableValue *self);
          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data);
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValue__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValue, exists),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValue__methods_[] = {
            DECLARE_METHOD(t_MutableValue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, compareSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, compareTo, METH_O),
            DECLARE_METHOD(t_MutableValue, copy, METH_O),
            DECLARE_METHOD(t_MutableValue, duplicate, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, equals, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, equalsSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, exists, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, toObject, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValue, t_MutableValue, ::java::lang::Object, MutableValue, t_MutableValue_init_, 0, 0, t_MutableValue__fields_, 0, 0);

          void t_MutableValue::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValue), module, "MutableValue", 0);
          }

          void t_MutableValue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "class_", make_descriptor(MutableValue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "wrapfn_", make_descriptor(t_MutableValue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValue::initializeClass, 1)))
              return NULL;
            return t_MutableValue::wrap_Object(MutableValue(((t_MutableValue *) arg)->object.this$));
          }
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds)
          {
            MutableValue object((jobject) NULL);

            INT_CALL(object = MutableValue());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_duplicate(t_MutableValue *self)
          {
            MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.duplicate());
            return t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equalsSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_exists(t_MutableValue *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.exists());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValue_toObject(t_MutableValue *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.toObject());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_exists());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_exists(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/FileDictionary.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *FileDictionary::class$ = NULL;
          jmethodID *FileDictionary::mids$ = NULL;
          bool FileDictionary::live$ = false;
          ::java::lang::String *FileDictionary::DEFAULT_FIELD_DELIMITER = NULL;

          jclass FileDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/FileDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
              mids$[mid_init$_97a84c62] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_DELIMITER = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FIELD_DELIMITER", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FileDictionary::FileDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::Reader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97a84c62, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator FileDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self);
          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data);
          static PyGetSetDef t_FileDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_FileDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FileDictionary__methods_[] = {
            DECLARE_METHOD(t_FileDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FileDictionary, t_FileDictionary, ::java::lang::Object, FileDictionary, t_FileDictionary_init_, 0, 0, t_FileDictionary__fields_, 0, 0);

          void t_FileDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(FileDictionary), module, "FileDictionary", 0);
          }

          void t_FileDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "class_", make_descriptor(FileDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "wrapfn_", make_descriptor(t_FileDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FileDictionary::initializeClass);
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "DEFAULT_FIELD_DELIMITER", make_descriptor(j2p(*FileDictionary::DEFAULT_FIELD_DELIMITER)));
          }

          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FileDictionary::initializeClass, 1)))
              return NULL;
            return t_FileDictionary::wrap_Object(FileDictionary(((t_FileDictionary *) arg)->object.this$));
          }
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FileDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamDataOutput.h"
#include "java/io/Closeable.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamDataOutput::class$ = NULL;
        jmethodID *OutputStreamDataOutput::mids$ = NULL;
        bool OutputStreamDataOutput::live$ = false;

        jclass OutputStreamDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamDataOutput::OutputStreamDataOutput(const ::java::io::OutputStream & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        void OutputStreamDataOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self);
        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args);
        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args);

        static PyMethodDef t_OutputStreamDataOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamDataOutput, t_OutputStreamDataOutput, ::org::apache::lucene::store::DataOutput, OutputStreamDataOutput, t_OutputStreamDataOutput_init_, 0, 0, 0, 0, 0);

        void t_OutputStreamDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamDataOutput), module, "OutputStreamDataOutput", 0);
        }

        void t_OutputStreamDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "class_", make_descriptor(OutputStreamDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamDataOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamDataOutput::wrap_Object(OutputStreamDataOutput(((t_OutputStreamDataOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          OutputStreamDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = OutputStreamDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRangeFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRangeFilter::class$ = NULL;
        jmethodID *DocTermOrdsRangeFilter::mids$ = NULL;
        bool DocTermOrdsRangeFilter::live$ = false;

        jclass DocTermOrdsRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_4ae19461] = env->getMethodID(cls, "getLowerVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperVal_4ae19461] = env->getMethodID(cls, "getUpperVal", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newBytesRefRange_a12b5d0e] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/DocTermOrdsRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean DocTermOrdsRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet DocTermOrdsRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String DocTermOrdsRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getLowerVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerVal_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrdsRangeFilter::getUpperVal() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperVal_4ae19461]));
        }

        jint DocTermOrdsRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DocTermOrdsRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean DocTermOrdsRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        DocTermOrdsRangeFilter DocTermOrdsRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return DocTermOrdsRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_a12b5d0e], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String DocTermOrdsRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self);
        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args);
        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data);
        static PyGetSetDef t_DocTermOrdsRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, field),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_DocTermOrdsRangeFilter, upperVal),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrdsRangeFilter__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRangeFilter, t_DocTermOrdsRangeFilter, ::org::apache::lucene::search::Filter, DocTermOrdsRangeFilter, abstract_init, 0, 0, t_DocTermOrdsRangeFilter__fields_, 0, 0);

        void t_DocTermOrdsRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRangeFilter), module, "DocTermOrdsRangeFilter", 0);
        }

        void t_DocTermOrdsRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "class_", make_descriptor(DocTermOrdsRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRangeFilter::wrap_Object(DocTermOrdsRangeFilter(((t_DocTermOrdsRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocTermOrdsRangeFilter_equals(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getDocIdSet(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getField(t_DocTermOrdsRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getLowerVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_getUpperVal(t_DocTermOrdsRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_hashCode(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesLower(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_includesUpper(t_DocTermOrdsRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrdsRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          DocTermOrdsRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocTermOrdsRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_DocTermOrdsRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_DocTermOrdsRangeFilter_toString(t_DocTermOrdsRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRangeFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__field(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__lowerVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_DocTermOrdsRangeFilter_get__upperVal(t_DocTermOrdsRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/BasqueStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *BasqueStemmer::class$ = NULL;
        jmethodID *BasqueStemmer::mids$ = NULL;
        bool BasqueStemmer::live$ = false;

        jclass BasqueStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/BasqueStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BasqueStemmer::BasqueStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean BasqueStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BasqueStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BasqueStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args);

        static PyMethodDef t_BasqueStemmer__methods_[] = {
          DECLARE_METHOD(t_BasqueStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BasqueStemmer, t_BasqueStemmer, ::org::tartarus::snowball::SnowballProgram, BasqueStemmer, t_BasqueStemmer_init_, 0, 0, 0, 0, 0);

        void t_BasqueStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(BasqueStemmer), module, "BasqueStemmer", 0);
        }

        void t_BasqueStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "class_", make_descriptor(BasqueStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "wrapfn_", make_descriptor(t_BasqueStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BasqueStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BasqueStemmer::initializeClass, 1)))
            return NULL;
          return t_BasqueStemmer::wrap_Object(BasqueStemmer(((t_BasqueStemmer *) arg)->object.this$));
        }
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BasqueStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds)
        {
          BasqueStemmer object((jobject) NULL);

          INT_CALL(object = BasqueStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BasqueStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/RangeFacetCounts.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *RangeFacetCounts::class$ = NULL;
          jmethodID *RangeFacetCounts::mids$ = NULL;
          bool RangeFacetCounts::live$ = false;

          jclass RangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/RangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List RangeFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number RangeFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult RangeFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args);

          static PyMethodDef t_RangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_RangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RangeFacetCounts, t_RangeFacetCounts, ::org::apache::lucene::facet::Facets, RangeFacetCounts, abstract_init, 0, 0, 0, 0, 0);

          void t_RangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(RangeFacetCounts), module, "RangeFacetCounts", 0);
          }

          void t_RangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "class_", make_descriptor(RangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_RangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_RangeFacetCounts::wrap_Object(RangeFacetCounts(((t_RangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsFormat::class$ = NULL;
          jmethodID *Lucene41PostingsFormat::mids$ = NULL;
          bool Lucene41PostingsFormat::live$ = false;
          jint Lucene41PostingsFormat::BLOCK_SIZE = (jint) 0;
          ::java::lang::String *Lucene41PostingsFormat::DOC_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::PAY_EXTENSION = NULL;
          ::java::lang::String *Lucene41PostingsFormat::POS_EXTENSION = NULL;

          jclass Lucene41PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              DOC_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DOC_EXTENSION", "Ljava/lang/String;"));
              PAY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "PAY_EXTENSION", "Ljava/lang/String;"));
              POS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "POS_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsFormat::Lucene41PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene41PostingsFormat::Lucene41PostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene41PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene41PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene41PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsFormat, t_Lucene41PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene41PostingsFormat, t_Lucene41PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsFormat), module, "Lucene41PostingsFormat", 0);
          }

          void t_Lucene41PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene41PostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "BLOCK_SIZE", make_descriptor(Lucene41PostingsFormat::BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "DOC_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::DOC_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "PAY_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::PAY_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsFormat).tp_dict, "POS_EXTENSION", make_descriptor(j2p(*Lucene41PostingsFormat::POS_EXTENSION)));
          }

          static PyObject *t_Lucene41PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsFormat::wrap_Object(Lucene41PostingsFormat(((t_Lucene41PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsFormat_init_(t_Lucene41PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene41PostingsFormat object((jobject) NULL);

                INT_CALL(object = Lucene41PostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                Lucene41PostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsConsumer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_fieldsProducer(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene41PostingsFormat_toString(t_Lucene41PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianLightStemFilterFactory::mids$ = NULL;
          bool NorwegianLightStemFilterFactory::live$ = false;

          jclass NorwegianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilterFactory::NorwegianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilterFactory), module, "NorwegianLightStemFilterFactory", 0);
          }

          void t_NorwegianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilterFactory::wrap_Object(NorwegianLightStemFilterFactory(((t_NorwegianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BooleanFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Iterable.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BooleanFilter::class$ = NULL;
        jmethodID *BooleanFilter::mids$ = NULL;
        bool BooleanFilter::live$ = false;

        jclass BooleanFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BooleanFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_ef4f412a] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queries/FilterClause;)V");
            mids$[mid_add_7373f548] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanFilter::BooleanFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BooleanFilter::add(const ::org::apache::lucene::queries::FilterClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ef4f412a], a0.this$);
        }

        void BooleanFilter::add(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7373f548], a0.this$, a1.this$);
        }

        ::java::util::List BooleanFilter::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        jboolean BooleanFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet BooleanFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint BooleanFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator BooleanFilter::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::java::lang::String BooleanFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args);

        static PyMethodDef t_BooleanFilter__methods_[] = {
          DECLARE_METHOD(t_BooleanFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanFilter, t_BooleanFilter, ::org::apache::lucene::search::Filter, BooleanFilter, t_BooleanFilter_init_, ((PyObject *(*)(t_BooleanFilter *)) get_iterator< t_BooleanFilter >), 0, 0, 0, 0);

        void t_BooleanFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanFilter), module, "BooleanFilter", 0);
        }

        void t_BooleanFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "class_", make_descriptor(BooleanFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanFilter::initializeClass, 1)))
            return NULL;
          return t_BooleanFilter::wrap_Object(BooleanFilter(((t_BooleanFilter *) arg)->object.this$));
        }
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds)
        {
          BooleanFilter object((jobject) NULL);

          INT_CALL(object = BooleanFilter());
          self->object = object;

          return 0;
        }

        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::queries::FilterClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::FilterClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTermQuery::class$ = NULL;
            jmethodID *SrndTermQuery::mids$ = NULL;
            bool SrndTermQuery::live$ = false;

            jclass SrndTermQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTermQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                mids$[mid_getLuceneTerm_2864f4ee] = env->getMethodID(cls, "getLuceneTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getTermText_14c7b5c5] = env->getMethodID(cls, "getTermText", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTermQuery::SrndTermQuery(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

            ::org::apache::lucene::index::Term SrndTermQuery::getLuceneTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLuceneTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndTermQuery::getTermText() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTermText_14c7b5c5]));
            }

            ::java::lang::String SrndTermQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTermQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg);
            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self);
            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data);
            static PyGetSetDef t_SrndTermQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTermQuery, termText),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTermQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTermQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, getLuceneTerm, METH_O),
              DECLARE_METHOD(t_SrndTermQuery, getTermText, METH_NOARGS),
              DECLARE_METHOD(t_SrndTermQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTermQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTermQuery, t_SrndTermQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTermQuery, t_SrndTermQuery_init_, 0, 0, t_SrndTermQuery__fields_, 0, 0);

            void t_SrndTermQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTermQuery), module, "SrndTermQuery", 0);
            }

            void t_SrndTermQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "class_", make_descriptor(SrndTermQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTermQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTermQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTermQuery::wrap_Object(SrndTermQuery(((t_SrndTermQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTermQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              SrndTermQuery object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = SrndTermQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLuceneTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLuceneTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTermText());
              return j2p(result);
            }

            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTermText());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilter::class$ = NULL;
          jmethodID *PositionFilter::mids$ = NULL;
          bool PositionFilter::live$ = false;

          jclass PositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          PositionFilter::PositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean PositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args);
          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args);

          static PyMethodDef t_PositionFilter__methods_[] = {
            DECLARE_METHOD(t_PositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilter, t_PositionFilter, ::org::apache::lucene::analysis::TokenFilter, PositionFilter, t_PositionFilter_init_, 0, 0, 0, 0, 0);

          void t_PositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilter), module, "PositionFilter", 0);
          }

          void t_PositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "class_", make_descriptor(PositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "wrapfn_", make_descriptor(t_PositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilter::initializeClass, 1)))
              return NULL;
            return t_PositionFilter::wrap_Object(PositionFilter(((t_PositionFilter *) arg)->object.this$));
          }
          static PyObject *t_PositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilter_init_(t_PositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = PositionFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                PositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilter_incrementToken(t_PositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PositionFilter_reset(t_PositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DFRSimilarity.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DFRSimilarity::class$ = NULL;
          jmethodID *DFRSimilarity::mids$ = NULL;
          bool DFRSimilarity::live$ = false;

          jclass DFRSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DFRSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0c253c94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/BasicModel;Lorg/apache/lucene/search/similarities/AfterEffect;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getAfterEffect_b58cd920] = env->getMethodID(cls, "getAfterEffect", "()Lorg/apache/lucene/search/similarities/AfterEffect;");
              mids$[mid_getBasicModel_05e8921f] = env->getMethodID(cls, "getBasicModel", "()Lorg/apache/lucene/search/similarities/BasicModel;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DFRSimilarity::DFRSimilarity(const ::org::apache::lucene::search::similarities::BasicModel & a0, const ::org::apache::lucene::search::similarities::AfterEffect & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_0c253c94, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::AfterEffect DFRSimilarity::getAfterEffect() const
          {
            return ::org::apache::lucene::search::similarities::AfterEffect(env->callObjectMethod(this$, mids$[mid_getAfterEffect_b58cd920]));
          }

          ::org::apache::lucene::search::similarities::BasicModel DFRSimilarity::getBasicModel() const
          {
            return ::org::apache::lucene::search::similarities::BasicModel(env->callObjectMethod(this$, mids$[mid_getBasicModel_05e8921f]));
          }

          ::org::apache::lucene::search::similarities::Normalization DFRSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String DFRSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args);
          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data);
          static PyGetSetDef t_DFRSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_DFRSimilarity, afterEffect),
            DECLARE_GET_FIELD(t_DFRSimilarity, basicModel),
            DECLARE_GET_FIELD(t_DFRSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DFRSimilarity__methods_[] = {
            DECLARE_METHOD(t_DFRSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, getAfterEffect, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getBasicModel, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DFRSimilarity, t_DFRSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, DFRSimilarity, t_DFRSimilarity_init_, 0, 0, t_DFRSimilarity__fields_, 0, 0);

          void t_DFRSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DFRSimilarity), module, "DFRSimilarity", 0);
          }

          void t_DFRSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "class_", make_descriptor(DFRSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DFRSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DFRSimilarity::initializeClass, 1)))
              return NULL;
            return t_DFRSimilarity::wrap_Object(DFRSimilarity(((t_DFRSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DFRSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::BasicModel a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::AfterEffect a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            DFRSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::BasicModel::initializeClass, ::org::apache::lucene::search::similarities::AfterEffect::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DFRSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::AfterEffect result((jobject) NULL);
            OBJ_CALL(result = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::BasicModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DFRSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::AfterEffect value((jobject) NULL);
            OBJ_CALL(value = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::BasicModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilter::class$ = NULL;
          jmethodID *LatvianStemFilter::mids$ = NULL;
          bool LatvianStemFilter::live$ = false;

          jclass LatvianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilter::LatvianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean LatvianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilter__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilter, t_LatvianStemFilter, ::org::apache::lucene::analysis::TokenFilter, LatvianStemFilter, t_LatvianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilter), module, "LatvianStemFilter", 0);
          }

          void t_LatvianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "class_", make_descriptor(LatvianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilter::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilter::wrap_Object(LatvianStemFilter(((t_LatvianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            LatvianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = LatvianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MinPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MinPayloadFunction::class$ = NULL;
          jmethodID *MinPayloadFunction::mids$ = NULL;
          bool MinPayloadFunction::live$ = false;

          jclass MinPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MinPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinPayloadFunction::MinPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MinPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MinPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MinPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MinPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MinPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MinPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinPayloadFunction, t_MinPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MinPayloadFunction, t_MinPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MinPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MinPayloadFunction), module, "MinPayloadFunction", 0);
          }

          void t_MinPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "class_", make_descriptor(MinPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MinPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MinPayloadFunction::wrap_Object(MinPayloadFunction(((t_MinPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MinPayloadFunction object((jobject) NULL);

            INT_CALL(object = MinPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MinPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedSetDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedSetDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedSetDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedSetDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong MultiDocValues$MultiSortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong MultiDocValues$MultiSortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void MultiDocValues$MultiSortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        JArray< jint > MultiDocValues$MultiSortedSetDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedSetDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedSetDocValues > MultiDocValues$MultiSortedSetDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedSetDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, values),
          DECLARE_SET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, document),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, nextOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, setDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedSetDocValues, t_MultiDocValues$MultiSortedSetDocValues, ::org::apache::lucene::index::SortedSetDocValues, MultiDocValues$MultiSortedSetDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedSetDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), module, "MultiDocValues$MultiSortedSetDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedSetDocValues::wrap_Object(MultiDocValues$MultiSortedSetDocValues(((t_MultiDocValues$MultiSortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "nextOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "setDocument", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedSetDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedSetDocValues::wrap_jobject);
        }

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/BreakIterator.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *BreakIterator::class$ = NULL;
    jmethodID *BreakIterator::mids$ = NULL;
    bool BreakIterator::live$ = false;
    jint BreakIterator::DONE = (jint) 0;

    jclass BreakIterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/BreakIterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
        mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
        mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCharacterInstance_91cbbddf] = env->getStaticMethodID(cls, "getCharacterInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getCharacterInstance_09bf44ce] = env->getStaticMethodID(cls, "getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_91cbbddf] = env->getStaticMethodID(cls, "getLineInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_09bf44ce] = env->getStaticMethodID(cls, "getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_91cbbddf] = env->getStaticMethodID(cls, "getSentenceInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_09bf44ce] = env->getStaticMethodID(cls, "getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_91cbbddf] = env->getStaticMethodID(cls, "getWordInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_09bf44ce] = env->getStaticMethodID(cls, "getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_isBoundary_39c7bd30] = env->getMethodID(cls, "isBoundary", "(I)Z");
        mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
        mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
        mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
        mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
        mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");
        mids$[mid_setText_5fdc3f48] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        DONE = env->getStaticIntField(cls, "DONE");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object BreakIterator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint BreakIterator::current() const
    {
      return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
    }

    jint BreakIterator::first() const
    {
      return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
    }

    jint BreakIterator::following(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
    }

    JArray< ::java::util::Locale > BreakIterator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    BreakIterator BreakIterator::getCharacterInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getCharacterInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getLineInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getLineInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getSentenceInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getSentenceInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getWordInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getWordInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_09bf44ce], a0.this$));
    }

    jboolean BreakIterator::isBoundary(jint a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isBoundary_39c7bd30], a0);
    }

    jint BreakIterator::last() const
    {
      return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
    }

    jint BreakIterator::next() const
    {
      return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
    }

    jint BreakIterator::next(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
    }

    jint BreakIterator::preceding(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
    }

    jint BreakIterator::previous() const
    {
      return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
    }

    void BreakIterator::setText(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setText_5fdc3f48], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_clone(t_BreakIterator *self);
    static PyObject *t_BreakIterator_current(t_BreakIterator *self);
    static PyObject *t_BreakIterator_first(t_BreakIterator *self);
    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_last(t_BreakIterator *self);
    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args);
    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_previous(t_BreakIterator *self);
    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data);
    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data);
    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data);
    static PyGetSetDef t_BreakIterator__fields_[] = {
      DECLARE_GET_FIELD(t_BreakIterator, availableLocales),
      DECLARE_GET_FIELD(t_BreakIterator, characterInstance),
      DECLARE_GET_FIELD(t_BreakIterator, lineInstance),
      DECLARE_GET_FIELD(t_BreakIterator, sentenceInstance),
      DECLARE_SET_FIELD(t_BreakIterator, text),
      DECLARE_GET_FIELD(t_BreakIterator, wordInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_BreakIterator__methods_[] = {
      DECLARE_METHOD(t_BreakIterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, clone, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, current, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, first, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, following, METH_O),
      DECLARE_METHOD(t_BreakIterator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getCharacterInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getLineInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getSentenceInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getWordInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, isBoundary, METH_O),
      DECLARE_METHOD(t_BreakIterator, last, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, next, METH_VARARGS),
      DECLARE_METHOD(t_BreakIterator, preceding, METH_O),
      DECLARE_METHOD(t_BreakIterator, previous, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, setText, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(BreakIterator, t_BreakIterator, ::java::lang::Object, BreakIterator, abstract_init, 0, 0, t_BreakIterator__fields_, 0, 0);

    void t_BreakIterator::install(PyObject *module)
    {
      installType(&PY_TYPE(BreakIterator), module, "BreakIterator", 0);
    }

    void t_BreakIterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "class_", make_descriptor(BreakIterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "wrapfn_", make_descriptor(t_BreakIterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(BreakIterator::initializeClass);
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "DONE", make_descriptor(BreakIterator::DONE));
    }

    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, BreakIterator::initializeClass, 1)))
        return NULL;
      return t_BreakIterator::wrap_Object(BreakIterator(((t_BreakIterator *) arg)->object.this$));
    }
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, BreakIterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_BreakIterator_clone(t_BreakIterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_BreakIterator_current(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.current());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_first(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.first());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.following(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "following", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::BreakIterator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCharacterInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLineInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getSentenceInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getWordInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.isBoundary(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isBoundary", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_last(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.last());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.next());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.next(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "next", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.preceding(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "preceding", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_previous(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.previous());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setText(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setText", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getCharacterInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getLineInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getSentenceInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setText(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "text", arg);
      return -1;
    }

    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getWordInstance());
      return t_BreakIterator::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingTermBuilder::class$ = NULL;
            jmethodID *BoostingTermBuilder::mids$ = NULL;
            bool BoostingTermBuilder::live$ = false;

            jclass BoostingTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingTermBuilder::BoostingTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingTermBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingTermBuilder, t_BoostingTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, BoostingTermBuilder, t_BoostingTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingTermBuilder), module, "BoostingTermBuilder", 0);
            }

            void t_BoostingTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "class_", make_descriptor(BoostingTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingTermBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingTermBuilder::wrap_Object(BoostingTermBuilder(((t_BoostingTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              BoostingTermBuilder object((jobject) NULL);

              INT_CALL(object = BoostingTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Exception::class$ = NULL;
    jmethodID *Exception::mids$ = NULL;
    bool Exception::live$ = false;

    jclass Exception::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Exception");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Exception::Exception() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Exception::Exception(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Exception__methods_[] = {
      DECLARE_METHOD(t_Exception, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Exception, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Exception, t_Exception, ::java::lang::Throwable, Exception, t_Exception_init_, 0, 0, 0, 0, 0);

    void t_Exception::install(PyObject *module)
    {
      installType(&PY_TYPE(Exception), module, "Exception", 0);
    }

    void t_Exception::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "class_", make_descriptor(Exception::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "wrapfn_", make_descriptor(t_Exception::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Exception::initializeClass, 1)))
        return NULL;
      return t_Exception::wrap_Object(Exception(((t_Exception *) arg)->object.this$));
    }
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Exception::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Exception object((jobject) NULL);

          INT_CALL(object = Exception());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Exception(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShortDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShortDocValuesField::class$ = NULL;
        jmethodID *ShortDocValuesField::mids$ = NULL;
        bool ShortDocValuesField::live$ = false;

        jclass ShortDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShortDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20464280] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;S)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShortDocValuesField::ShortDocValuesField(const ::java::lang::String & a0, jshort a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_20464280, a0.this$, a1)) {}

        void ShortDocValuesField::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args);
        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ShortDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ShortDocValuesField, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShortDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ShortDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, setShortValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ShortDocValuesField, t_ShortDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ShortDocValuesField, t_ShortDocValuesField_init_, 0, 0, t_ShortDocValuesField__fields_, 0, 0);

        void t_ShortDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ShortDocValuesField), module, "ShortDocValuesField", 0);
        }

        void t_ShortDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "class_", make_descriptor(ShortDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ShortDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShortDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ShortDocValuesField::wrap_Object(ShortDocValuesField(((t_ShortDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShortDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jshort a1;
          ShortDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sS", &a0, &a1))
          {
            INT_CALL(object = ShortDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args)
        {
          jshort a0;

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ShortDocValuesField), (PyObject *) self, "setShortValue", args, 2);
        }

        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *GrowableWriter::class$ = NULL;
          jmethodID *GrowableWriter::mids$ = NULL;
          bool GrowableWriter::live$ = false;

          jclass GrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/GrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_getMutable_ebbbff61] = env->getMethodID(cls, "getMutable", "()Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_585da437] = env->getMethodID(cls, "resize", "(I)Lorg/apache/lucene/util/packed/GrowableWriter;");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GrowableWriter::GrowableWriter(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::PackedInts$Mutable(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          void GrowableWriter::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void GrowableWriter::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jlong GrowableWriter::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint GrowableWriter::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable GrowableWriter::getMutable() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callObjectMethod(this$, mids$[mid_getMutable_ebbbff61]));
          }

          jlong GrowableWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          GrowableWriter GrowableWriter::resize(jint a0) const
          {
            return GrowableWriter(env->callObjectMethod(this$, mids$[mid_resize_585da437], a0));
          }

          void GrowableWriter::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void GrowableWriter::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint GrowableWriter::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self);
          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg);
          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data);
          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data);
          static PyGetSetDef t_GrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_GrowableWriter, bitsPerValue),
            DECLARE_GET_FIELD(t_GrowableWriter, mutable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GrowableWriter__methods_[] = {
            DECLARE_METHOD(t_GrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, clear, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, fill, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, get, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getBitsPerValue, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getMutable, METH_NOARGS),
            DECLARE_METHOD(t_GrowableWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, resize, METH_O),
            DECLARE_METHOD(t_GrowableWriter, save, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, set, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GrowableWriter, t_GrowableWriter, ::org::apache::lucene::util::packed::PackedInts$Mutable, GrowableWriter, t_GrowableWriter_init_, 0, 0, t_GrowableWriter__fields_, 0, 0);

          void t_GrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(GrowableWriter), module, "GrowableWriter", 0);
          }

          void t_GrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "class_", make_descriptor(GrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_GrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GrowableWriter::initializeClass, 1)))
              return NULL;
            return t_GrowableWriter::wrap_Object(GrowableWriter(((t_GrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jfloat a2;
            GrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              INT_CALL(object = GrowableWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "fill", args, 2);
          }

          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBitsPerValue());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "getBitsPerValue", args, 2);
          }

          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);
            OBJ_CALL(result = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
          }

          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg)
          {
            jint a0;
            GrowableWriter result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return t_GrowableWriter::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "save", args, 2);
          }

          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "set", args, 2);
          }

          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(GrowableWriter), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable value((jobject) NULL);
            OBJ_CALL(value = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DateFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumberDateFormat::class$ = NULL;
              jmethodID *NumberDateFormat::mids$ = NULL;
              bool NumberDateFormat::live$ = false;

              jclass NumberDateFormat::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumberDateFormat::NumberDateFormat(const ::java::text::DateFormat & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumberDateFormat__methods_[] = {
                DECLARE_METHOD(t_NumberDateFormat, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumberDateFormat, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumberDateFormat, t_NumberDateFormat, ::java::text::NumberFormat, NumberDateFormat, t_NumberDateFormat_init_, 0, 0, 0, 0, 0);

              void t_NumberDateFormat::install(PyObject *module)
              {
                installType(&PY_TYPE(NumberDateFormat), module, "NumberDateFormat", 0);
              }

              void t_NumberDateFormat::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "class_", make_descriptor(NumberDateFormat::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberDateFormat::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumberDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumberDateFormat::initializeClass, 1)))
                  return NULL;
                return t_NumberDateFormat::wrap_Object(NumberDateFormat(((t_NumberDateFormat *) arg)->object.this$));
              }
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumberDateFormat::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds)
              {
                ::java::text::DateFormat a0((jobject) NULL);
                NumberDateFormat object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = NumberDateFormat(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragListBuilder::class$ = NULL;
          jmethodID *BaseFragListBuilder::mids$ = NULL;
          bool BaseFragListBuilder::live$ = false;
          jint BaseFragListBuilder::MARGIN_DEFAULT = (jint) 0;
          jint BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR = (jint) 0;

          jclass BaseFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_c90c3835] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");
              mids$[mid_acceptPhrase_cb592899] = env->getMethodID(cls, "acceptPhrase", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;II)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MARGIN_DEFAULT = env->getStaticIntField(cls, "MARGIN_DEFAULT");
              MIN_FRAG_CHAR_SIZE_FACTOR = env->getStaticIntField(cls, "MIN_FRAG_CHAR_SIZE_FACTOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseFragListBuilder::BaseFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BaseFragListBuilder::BaseFragListBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragListBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragListBuilder, t_BaseFragListBuilder, ::java::lang::Object, BaseFragListBuilder, t_BaseFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_BaseFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragListBuilder), module, "BaseFragListBuilder", 0);
          }

          void t_BaseFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "class_", make_descriptor(BaseFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragListBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MARGIN_DEFAULT", make_descriptor(BaseFragListBuilder::MARGIN_DEFAULT));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MIN_FRAG_CHAR_SIZE_FACTOR", make_descriptor(BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR));
          }

          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragListBuilder::wrap_Object(BaseFragListBuilder(((t_BaseFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BaseFragListBuilder object((jobject) NULL);

                INT_CALL(object = BaseFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                BaseFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = BaseFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups::class$ = NULL;
          jmethodID *TopGroups::mids$ = NULL;
          jfieldID *TopGroups::fids$ = NULL;
          bool TopGroups::live$ = false;

          jclass TopGroups::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056bd231] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/TopGroups;Ljava/lang/Integer;)V");
              mids$[mid_init$_5e81883d] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;[Lorg/apache/lucene/search/SortField;II[Lorg/apache/lucene/search/grouping/GroupDocs;F)V");
              mids$[mid_merge_abb30a8c] = env->getStaticMethodID(cls, "merge", "([Lorg/apache/lucene/search/grouping/TopGroups;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IILorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;)Lorg/apache/lucene/search/grouping/TopGroups;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSort] = env->getFieldID(cls, "groupSort", "[Lorg/apache/lucene/search/SortField;");
              fids$[fid_groups] = env->getFieldID(cls, "groups", "[Lorg/apache/lucene/search/grouping/GroupDocs;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_totalGroupCount] = env->getFieldID(cls, "totalGroupCount", "Ljava/lang/Integer;");
              fids$[fid_totalGroupedHitCount] = env->getFieldID(cls, "totalGroupedHitCount", "I");
              fids$[fid_totalHitCount] = env->getFieldID(cls, "totalHitCount", "I");
              fids$[fid_withinGroupSort] = env->getFieldID(cls, "withinGroupSort", "[Lorg/apache/lucene/search/SortField;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups::TopGroups(const TopGroups & a0, const ::java::lang::Integer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_056bd231, a0.this$, a1.this$)) {}

          TopGroups::TopGroups(const JArray< ::org::apache::lucene::search::SortField > & a0, const JArray< ::org::apache::lucene::search::SortField > & a1, jint a2, jint a3, const JArray< ::org::apache::lucene::search::grouping::GroupDocs > & a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5e81883d, a0.this$, a1.this$, a2, a3, a4.this$, a5)) {}

          TopGroups TopGroups::merge(const JArray< TopGroups > & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jint a4, const ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups(env->callStaticObjectMethod(cls, mids$[mid_merge_abb30a8c], a0.this$, a1.this$, a2.this$, a3, a4, a5.this$));
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_groupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_groupSort]));
          }

          JArray< ::org::apache::lucene::search::grouping::GroupDocs > TopGroups::_get_groups() const
          {
            return JArray< ::org::apache::lucene::search::grouping::GroupDocs >(env->getObjectField(this$, fids$[fid_groups]));
          }

          jfloat TopGroups::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          ::java::lang::Integer TopGroups::_get_totalGroupCount() const
          {
            return ::java::lang::Integer(env->getObjectField(this$, fids$[fid_totalGroupCount]));
          }

          jint TopGroups::_get_totalGroupedHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalGroupedHitCount]);
          }

          jint TopGroups::_get_totalHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalHitCount]);
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_withinGroupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_withinGroupSort]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args);
          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data);

          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data);
          static PyGetSetDef t_TopGroups__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups, groupSort),
            DECLARE_GET_FIELD(t_TopGroups, groups),
            DECLARE_GET_FIELD(t_TopGroups, maxScore),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupCount),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupedHitCount),
            DECLARE_GET_FIELD(t_TopGroups, totalHitCount),
            DECLARE_GET_FIELD(t_TopGroups, withinGroupSort),
            DECLARE_GET_FIELD(t_TopGroups, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups__methods_[] = {
            DECLARE_METHOD(t_TopGroups, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups, t_TopGroups, ::java::lang::Object, TopGroups, t_TopGroups_init_, 0, 0, t_TopGroups__fields_, 0, 0);
          PyObject *t_TopGroups::wrap_Object(const TopGroups& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups), module, "TopGroups", 0);
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "ScoreMergeMode", make_descriptor(&PY_TYPE(TopGroups$ScoreMergeMode)));
          }

          void t_TopGroups::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "class_", make_descriptor(TopGroups::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "wrapfn_", make_descriptor(t_TopGroups::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups::initializeClass, 1)))
              return NULL;
            return t_TopGroups::wrap_Object(TopGroups(((t_TopGroups *) arg)->object.this$));
          }
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                TopGroups a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Integer a1((jobject) NULL);
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "KO", TopGroups::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &p0, t_TopGroups::parameters_, &a1))
                {
                  INT_CALL(object = TopGroups(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::SortField > a1((jobject) NULL);
                jint a2;
                jint a3;
                JArray< ::org::apache::lucene::search::grouping::GroupDocs > a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "[k[kII[KF", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::grouping::GroupDocs::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::grouping::t_GroupDocs::parameters_, &a5))
                {
                  INT_CALL(object = TopGroups(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args)
          {
            JArray< TopGroups > a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jint a4;
            ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode a5((jobject) NULL);
            PyTypeObject **p5;
            TopGroups result((jobject) NULL);

            if (!parseArgs(args, "[KkkIIK", TopGroups::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::initializeClass, &a0, &p0, t_TopGroups::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::grouping::t_TopGroups$ScoreMergeMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups::merge(a0, a1, a2, a3, a4, a5));
              return t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::grouping::GroupDocs > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groups());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::grouping::t_GroupDocs::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data)
          {
            ::java::lang::Integer value((jobject) NULL);
            OBJ_CALL(value = self->object._get_totalGroupCount());
            return ::java::lang::t_Integer::wrap_Object(value);
          }

          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalGroupedHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHitCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_withinGroupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilterFactory::class$ = NULL;
          jmethodID *WordDelimiterFilterFactory::mids$ = NULL;
          bool WordDelimiterFilterFactory::live$ = false;
          ::java::lang::String *WordDelimiterFilterFactory::PROTECTED_TOKENS = NULL;
          ::java::lang::String *WordDelimiterFilterFactory::TYPES = NULL;

          jclass WordDelimiterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilterFactory::WordDelimiterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter WordDelimiterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void WordDelimiterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args);
          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_WordDelimiterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilterFactory, t_WordDelimiterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, WordDelimiterFilterFactory, t_WordDelimiterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilterFactory), module, "WordDelimiterFilterFactory", 0);
          }

          void t_WordDelimiterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "class_", make_descriptor(WordDelimiterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*WordDelimiterFilterFactory::PROTECTED_TOKENS)));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "TYPES", make_descriptor(j2p(*WordDelimiterFilterFactory::TYPES)));
          }

          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilterFactory::wrap_Object(WordDelimiterFilterFactory(((t_WordDelimiterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WordDelimiterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WordDelimiterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexNotFoundException::class$ = NULL;
        jmethodID *IndexNotFoundException::mids$ = NULL;
        bool IndexNotFoundException::live$ = false;

        jclass IndexNotFoundException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexNotFoundException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexNotFoundException::IndexNotFoundException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexNotFoundException__methods_[] = {
          DECLARE_METHOD(t_IndexNotFoundException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexNotFoundException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexNotFoundException, t_IndexNotFoundException, ::java::io::FileNotFoundException, IndexNotFoundException, t_IndexNotFoundException_init_, 0, 0, 0, 0, 0);

        void t_IndexNotFoundException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexNotFoundException), module, "IndexNotFoundException", 0);
        }

        void t_IndexNotFoundException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "class_", make_descriptor(IndexNotFoundException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_IndexNotFoundException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexNotFoundException::initializeClass, 1)))
            return NULL;
          return t_IndexNotFoundException::wrap_Object(IndexNotFoundException(((t_IndexNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexNotFoundException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexNotFoundException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttributeImpl::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttributeImpl::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttributeImpl::live$ = false;

        jclass NumericTokenStream$NumericTermAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
            mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream$NumericTermAttributeImpl::NumericTokenStream$NumericTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericTokenStream$NumericTermAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::fillBytesRef() const
        {
          env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef NumericTokenStream$NumericTermAttributeImpl::getBytesRef() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
        }

        jlong NumericTokenStream$NumericTermAttributeImpl::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, bytesRef),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, fillBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl_init_, 0, 0, t_NumericTokenStream$NumericTermAttributeImpl__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), module, "NumericTokenStream$NumericTermAttributeImpl", 0);
        }

        void t_NumericTokenStream$NumericTermAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttributeImpl::wrap_Object(NumericTokenStream$NumericTermAttributeImpl(((t_NumericTokenStream$NumericTermAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          NumericTokenStream$NumericTermAttributeImpl object((jobject) NULL);

          INT_CALL(object = NumericTokenStream$NumericTermAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          OBJ_CALL(self->object.fillBytesRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity::class$ = NULL;
          jmethodID *Similarity::mids$ = NULL;
          bool Similarity::live$ = false;

          jclass Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity::Similarity() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat Similarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat Similarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args);

          static PyMethodDef t_Similarity__methods_[] = {
            DECLARE_METHOD(t_Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, computeNorm, METH_O),
            DECLARE_METHOD(t_Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, queryNorm, METH_O),
            DECLARE_METHOD(t_Similarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity, t_Similarity, ::java::lang::Object, Similarity, t_Similarity_init_, 0, 0, 0, 0, 0);

          void t_Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity), module, "Similarity", 0);
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimWeight", make_descriptor(&PY_TYPE(Similarity$SimWeight)));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimScorer", make_descriptor(&PY_TYPE(Similarity$SimScorer)));
          }

          void t_Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "class_", make_descriptor(Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "wrapfn_", make_descriptor(t_Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity::initializeClass, 1)))
              return NULL;
            return t_Similarity::wrap_Object(Similarity(((t_Similarity *) arg)->object.this$));
          }
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds)
          {
            Similarity object((jobject) NULL);

            INT_CALL(object = Similarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeWeight", args);
            return NULL;
          }

          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "coord", args);
            return NULL;
          }

          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "queryNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "simScorer", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions$Pair::class$ = NULL;
          jmethodID *Extensions$Pair::mids$ = NULL;
          jfieldID *Extensions$Pair::fids$ = NULL;
          bool Extensions$Pair::live$ = false;

          jclass Extensions$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_466982f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_cud] = env->getFieldID(cls, "cud", "Ljava/lang/Object;");
              fids$[fid_cur] = env->getFieldID(cls, "cur", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions$Pair::Extensions$Pair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_466982f2, a0.this$, a1.this$)) {}

          ::java::lang::Object Extensions$Pair::_get_cud() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cud]));
          }

          ::java::lang::Object Extensions$Pair::_get_cur() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cur]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args);
          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data);
          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data);

          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data);
          static PyGetSetDef t_Extensions$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions$Pair, cud),
            DECLARE_GET_FIELD(t_Extensions$Pair, cur),
            DECLARE_GET_FIELD(t_Extensions$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions$Pair__methods_[] = {
            DECLARE_METHOD(t_Extensions$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions$Pair, t_Extensions$Pair, ::java::lang::Object, Extensions$Pair, t_Extensions$Pair_init_, 0, 0, t_Extensions$Pair__fields_, 0, 0);
          PyObject *t_Extensions$Pair::wrap_Object(const Extensions$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_Extensions$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_Extensions$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions$Pair), module, "Extensions$Pair", 0);
          }

          void t_Extensions$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "class_", make_descriptor(Extensions$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "wrapfn_", make_descriptor(t_Extensions$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions$Pair::initializeClass, 1)))
              return NULL;
            return t_Extensions$Pair::wrap_Object(Extensions$Pair(((t_Extensions$Pair *) arg)->object.this$));
          }
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Extensions$Pair object((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              INT_CALL(object = Extensions$Pair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cud());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cur());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilterFactory.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilterFactory::class$ = NULL;
          jmethodID *PorterStemFilterFactory::mids$ = NULL;
          bool PorterStemFilterFactory::live$ = false;

          jclass PorterStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_520ef479] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/en/PorterStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilterFactory::PorterStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::en::PorterStemFilter PorterStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::en::PorterStemFilter(env->callObjectMethod(this$, mids$[mid_create_520ef479], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PorterStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilterFactory, t_PorterStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PorterStemFilterFactory, t_PorterStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilterFactory), module, "PorterStemFilterFactory", 0);
          }

          void t_PorterStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "class_", make_descriptor(PorterStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilterFactory::wrap_Object(PorterStemFilterFactory(((t_PorterStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PorterStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PorterStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::en::PorterStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::en::t_PorterStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager$SearcherAndTaxonomy::class$ = NULL;
          jmethodID *SearcherTaxonomyManager$SearcherAndTaxonomy::mids$ = NULL;
          jfieldID *SearcherTaxonomyManager$SearcherAndTaxonomy::fids$ = NULL;
          bool SearcherTaxonomyManager$SearcherAndTaxonomy::live$ = false;

          jclass SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8978d829] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_searcher] = env->getFieldID(cls, "searcher", "Lorg/apache/lucene/search/IndexSearcher;");
              fids$[fid_taxonomyReader] = env->getFieldID(cls, "taxonomyReader", "Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager$SearcherAndTaxonomy::SearcherTaxonomyManager$SearcherAndTaxonomy(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8978d829, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::IndexSearcher SearcherTaxonomyManager$SearcherAndTaxonomy::_get_searcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->getObjectField(this$, fids$[fid_searcher]));
          }

          ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader SearcherTaxonomyManager$SearcherAndTaxonomy::_get_taxonomyReader() const
          {
            return ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader(env->getObjectField(this$, fids$[fid_taxonomyReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args);
          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, searcher),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, taxonomyReader),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy, ::java::lang::Object, SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_, 0, 0, t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(const SearcherTaxonomyManager$SearcherAndTaxonomy& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), module, "SearcherTaxonomyManager$SearcherAndTaxonomy", 0);
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(SearcherTaxonomyManager$SearcherAndTaxonomy(((t_SearcherTaxonomyManager$SearcherAndTaxonomy *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader a1((jobject) NULL);
            SearcherTaxonomyManager$SearcherAndTaxonomy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SearcherTaxonomyManager$SearcherAndTaxonomy(a0, a1));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::search::IndexSearcher value((jobject) NULL);
            OBJ_CALL(value = self->object._get_searcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(value);
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader value((jobject) NULL);
            OBJ_CALL(value = self->object._get_taxonomyReader());
            return ::org::apache::lucene::facet::taxonomy::directory::t_DirectoryTaxonomyReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizer::class$ = NULL;
          jmethodID *EdgeNGramTokenizer::mids$ = NULL;
          bool EdgeNGramTokenizer::live$ = false;
          jint EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;

          jclass EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizer, t_EdgeNGramTokenizer, ::org::apache::lucene::analysis::ngram::NGramTokenizer, EdgeNGramTokenizer, t_EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizer), module, "EdgeNGramTokenizer", 0);
          }

          void t_EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
          }

          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizer::wrap_Object(EdgeNGramTokenizer(((t_EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/GradientFormatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *GradientFormatter::class$ = NULL;
          jmethodID *GradientFormatter::mids$ = NULL;
          bool GradientFormatter::live$ = false;

          jclass GradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/GradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_hexToInt_5fdc3f57] = env->getStaticMethodID(cls, "hexToInt", "(Ljava/lang/String;)I");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_getForegroundColorString_5ded254a] = env->getMethodID(cls, "getForegroundColorString", "(F)Ljava/lang/String;");
              mids$[mid_getBackgroundColorString_5ded254a] = env->getMethodID(cls, "getBackgroundColorString", "(F)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GradientFormatter::GradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          jint GradientFormatter::hexToInt(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hexToInt_5fdc3f57], a0.this$);
          }

          ::java::lang::String GradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args);

          static PyMethodDef t_GradientFormatter__methods_[] = {
            DECLARE_METHOD(t_GradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, hexToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GradientFormatter, t_GradientFormatter, ::java::lang::Object, GradientFormatter, t_GradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_GradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GradientFormatter), module, "GradientFormatter", 0);
          }

          void t_GradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "class_", make_descriptor(GradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_GradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GradientFormatter::initializeClass, 1)))
              return NULL;
            return t_GradientFormatter::wrap_Object(GradientFormatter(((t_GradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            GradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = GradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::GradientFormatter::hexToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hexToInt", arg);
            return NULL;
          }

          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizer::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizer::mids$ = NULL;
          bool UAX29URLEmailTokenizer::live$ = false;
          jint UAX29URLEmailTokenizer::ALPHANUM = (jint) 0;
          jint UAX29URLEmailTokenizer::EMAIL = (jint) 0;
          jint UAX29URLEmailTokenizer::HANGUL = (jint) 0;
          jint UAX29URLEmailTokenizer::HIRAGANA = (jint) 0;
          jint UAX29URLEmailTokenizer::IDEOGRAPHIC = (jint) 0;
          jint UAX29URLEmailTokenizer::KATAKANA = (jint) 0;
          jint UAX29URLEmailTokenizer::NUM = (jint) 0;
          jint UAX29URLEmailTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *UAX29URLEmailTokenizer::TOKEN_TYPES = NULL;
          jint UAX29URLEmailTokenizer::URL = (jint) 0;

          jclass UAX29URLEmailTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              URL = env->getStaticIntField(cls, "URL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void UAX29URLEmailTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void UAX29URLEmailTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint UAX29URLEmailTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean UAX29URLEmailTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void UAX29URLEmailTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void UAX29URLEmailTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self);
          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data);
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer, ::org::apache::lucene::analysis::Tokenizer, UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer_init_, 0, 0, t_UAX29URLEmailTokenizer__fields_, 0, 0);

          void t_UAX29URLEmailTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizer), module, "UAX29URLEmailTokenizer", 0);
          }

          void t_UAX29URLEmailTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "ALPHANUM", make_descriptor(UAX29URLEmailTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "EMAIL", make_descriptor(UAX29URLEmailTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HANGUL", make_descriptor(UAX29URLEmailTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HIRAGANA", make_descriptor(UAX29URLEmailTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(UAX29URLEmailTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "KATAKANA", make_descriptor(UAX29URLEmailTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "NUM", make_descriptor(UAX29URLEmailTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(UAX29URLEmailTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(UAX29URLEmailTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "URL", make_descriptor(UAX29URLEmailTokenizer::URL));
          }

          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizer::wrap_Object(UAX29URLEmailTokenizer(((t_UAX29URLEmailTokenizer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene41PostingsBaseFormat::mids$ = NULL;
          bool Lucene41PostingsBaseFormat::live$ = false;

          jclass Lucene41PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsBaseFormat::Lucene41PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene41PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene41PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsBaseFormat), module, "Lucene41PostingsBaseFormat", 0);
          }

          void t_Lucene41PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsBaseFormat::wrap_Object(Lucene41PostingsBaseFormat(((t_Lucene41PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene41PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilterFactory::class$ = NULL;
          jmethodID *HyphenatedWordsFilterFactory::mids$ = NULL;
          bool HyphenatedWordsFilterFactory::live$ = false;

          jclass HyphenatedWordsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4f2a8112] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilterFactory::HyphenatedWordsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter HyphenatedWordsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter(env->callObjectMethod(this$, mids$[mid_create_4f2a8112], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilterFactory), module, "HyphenatedWordsFilterFactory", 0);
          }

          void t_HyphenatedWordsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "class_", make_descriptor(HyphenatedWordsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilterFactory::wrap_Object(HyphenatedWordsFilterFactory(((t_HyphenatedWordsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenatedWordsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenatedWordsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_HyphenatedWordsFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilterFactory::class$ = NULL;
          jmethodID *GermanNormalizationFilterFactory::mids$ = NULL;
          bool GermanNormalizationFilterFactory::live$ = false;

          jclass GermanNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilterFactory::GermanNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GermanNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self);
          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_GermanNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GermanNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory_init_, 0, 0, t_GermanNormalizationFilterFactory__fields_, 0, 0);

          void t_GermanNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilterFactory), module, "GermanNormalizationFilterFactory", 0);
          }

          void t_GermanNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "class_", make_descriptor(GermanNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilterFactory::wrap_Object(GermanNormalizationFilterFactory(((t_GermanNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GermanNormalizationFilterFactory_getMultiTermComponent(t_GermanNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GermanNormalizationFilterFactory_get__multiTermComponent(t_GermanNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$MemoryOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$MemoryOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$MemoryOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$MemoryOrdinalMap::DirectoryTaxonomyWriter$MemoryOrdinalMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$MemoryOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), module, "DirectoryTaxonomyWriter$MemoryOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$MemoryOrdinalMap(((t_DirectoryTaxonomyWriter$MemoryOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              DirectoryTaxonomyWriter$MemoryOrdinalMap object((jobject) NULL);

              INT_CALL(object = DirectoryTaxonomyWriter$MemoryOrdinalMap());
              self->object = object;

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector::class$ = NULL;
            jmethodID *TermDistinctValuesCollector::mids$ = NULL;
            bool TermDistinctValuesCollector::live$ = false;

            jclass TermDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e9bd6d29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermDistinctValuesCollector::TermDistinctValuesCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_e9bd6d29, a0.this$, a1.this$, a2.this$)) {}

            void TermDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List TermDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void TermDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args);
            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data);
            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_TermDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector, t_TermDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, TermDistinctValuesCollector, t_TermDistinctValuesCollector_init_, 0, 0, t_TermDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector::wrap_Object(const TermDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector *self = (t_TermDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector), module, "TermDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(TermDistinctValuesCollector$GroupCount)));
            }

            void t_TermDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector::wrap_Object(TermDistinctValuesCollector(((t_TermDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector_of_(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermDistinctValuesCollector_init_(t_TermDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Collection a2((jobject) NULL);
              PyTypeObject **p2;
              TermDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = TermDistinctValuesCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermDistinctValuesCollector_collect(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_getGroups(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::term::PY_TYPE(TermDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermDistinctValuesCollector_setNextReader(t_TermDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermDistinctValuesCollector_get__parameters_(t_TermDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermDistinctValuesCollector_get__groups(t_TermDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_TermDistinctValuesCollector_set__nextReader(t_TermDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermVectorStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermVectorStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermVectorStatus::fids$ = NULL;
        bool CheckIndex$Status$TermVectorStatus::live$ = false;

        jclass CheckIndex$Status$TermVectorStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermVectorStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totVectors] = env->getFieldID(cls, "totVectors", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$TermVectorStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermVectorStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermVectorStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermVectorStatus::_get_totVectors() const
        {
          return env->getLongField(this$, fids$[fid_totVectors]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_totVectors(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totVectors], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermVectorStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, totVectors),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermVectorStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermVectorStatus, t_CheckIndex$Status$TermVectorStatus, ::java::lang::Object, CheckIndex$Status$TermVectorStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermVectorStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermVectorStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermVectorStatus), module, "CheckIndex$Status$TermVectorStatus", 0);
        }

        void t_CheckIndex$Status$TermVectorStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermVectorStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermVectorStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermVectorStatus::wrap_Object(CheckIndex$Status$TermVectorStatus(((t_CheckIndex$Status$TermVectorStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totVectors());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totVectors(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totVectors", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext::class$ = NULL;
        jmethodID *IOContext::mids$ = NULL;
        jfieldID *IOContext::fids$ = NULL;
        bool IOContext::live$ = false;
        IOContext *IOContext::DEFAULT = NULL;
        IOContext *IOContext::READ = NULL;
        IOContext *IOContext::READONCE = NULL;

        jclass IOContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_b5b0f361] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/MergeInfo;)V");
            mids$[mid_init$_080fbf4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/FlushInfo;)V");
            mids$[mid_init$_caa57ead] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_init$_617520cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext$Context;");
            fids$[fid_flushInfo] = env->getFieldID(cls, "flushInfo", "Lorg/apache/lucene/store/FlushInfo;");
            fids$[fid_mergeInfo] = env->getFieldID(cls, "mergeInfo", "Lorg/apache/lucene/store/MergeInfo;");
            fids$[fid_readOnce] = env->getFieldID(cls, "readOnce", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext;"));
            READ = new IOContext(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext;"));
            READONCE = new IOContext(env->getStaticObjectField(cls, "READONCE", "Lorg/apache/lucene/store/IOContext;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext::IOContext() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::MergeInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b5b0f361, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::FlushInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_080fbf4f, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::IOContext$Context & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_caa57ead, a0.this$)) {}

        IOContext::IOContext(const IOContext & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_617520cb, a0.this$, a1)) {}

        jboolean IOContext::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IOContext::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String IOContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::store::IOContext$Context IOContext::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext$Context(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::FlushInfo IOContext::_get_flushInfo() const
        {
          return ::org::apache::lucene::store::FlushInfo(env->getObjectField(this$, fids$[fid_flushInfo]));
        }

        ::org::apache::lucene::store::MergeInfo IOContext::_get_mergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->getObjectField(this$, fids$[fid_mergeInfo]));
        }

        jboolean IOContext::_get_readOnce() const
        {
          return env->getBooleanField(this$, fids$[fid_readOnce]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data);

        static PyGetSetDef t_IOContext__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext, context),
          DECLARE_GET_FIELD(t_IOContext, flushInfo),
          DECLARE_GET_FIELD(t_IOContext, mergeInfo),
          DECLARE_GET_FIELD(t_IOContext, readOnce),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext__methods_[] = {
          DECLARE_METHOD(t_IOContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, equals, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext, t_IOContext, ::java::lang::Object, IOContext, t_IOContext_init_, 0, 0, t_IOContext__fields_, 0, 0);

        void t_IOContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext), module, "IOContext", 0);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "Context", make_descriptor(&PY_TYPE(IOContext$Context)));
        }

        void t_IOContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "class_", make_descriptor(IOContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "wrapfn_", make_descriptor(t_IOContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "DEFAULT", make_descriptor(t_IOContext::wrap_Object(*IOContext::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READ", make_descriptor(t_IOContext::wrap_Object(*IOContext::READ)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READONCE", make_descriptor(t_IOContext::wrap_Object(*IOContext::READONCE)));
        }

        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext::initializeClass, 1)))
            return NULL;
          return t_IOContext::wrap_Object(IOContext(((t_IOContext *) arg)->object.this$));
        }
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IOContext object((jobject) NULL);

              INT_CALL(object = IOContext());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::store::MergeInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::MergeInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::FlushInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::FlushInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
              PyTypeObject **p0;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              IOContext a0((jobject) NULL);
              jboolean a1;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "kZ", IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IOContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::IOContext$Context value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext$Context::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::FlushInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_flushInfo());
          return ::org::apache::lucene::store::t_FlushInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_readOnce());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter$SimpleRateLimiter::class$ = NULL;
        jmethodID *RateLimiter$SimpleRateLimiter::mids$ = NULL;
        bool RateLimiter$SimpleRateLimiter::live$ = false;

        jclass RateLimiter$SimpleRateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter$SimpleRateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter$SimpleRateLimiter::RateLimiter$SimpleRateLimiter(jdouble a0) : ::org::apache::lucene::store::RateLimiter(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jdouble RateLimiter$SimpleRateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter$SimpleRateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter$SimpleRateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter$SimpleRateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter$SimpleRateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter$SimpleRateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter$SimpleRateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter$SimpleRateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMbPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMinPauseCheckBytes, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, pause, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, setMbPerSec, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter, ::org::apache::lucene::store::RateLimiter, RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter_init_, 0, 0, t_RateLimiter$SimpleRateLimiter__fields_, 0, 0);

        void t_RateLimiter$SimpleRateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter$SimpleRateLimiter), module, "RateLimiter$SimpleRateLimiter", 0);
        }

        void t_RateLimiter$SimpleRateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "class_", make_descriptor(RateLimiter$SimpleRateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter$SimpleRateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter$SimpleRateLimiter::wrap_Object(RateLimiter$SimpleRateLimiter(((t_RateLimiter$SimpleRateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          RateLimiter$SimpleRateLimiter object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = RateLimiter$SimpleRateLimiter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMbPerSec());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMinPauseCheckBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMinPauseCheckBytes", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "pause", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "setMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilterFactory::class$ = NULL;
          jmethodID *ShingleFilterFactory::mids$ = NULL;
          bool ShingleFilterFactory::live$ = false;

          jclass ShingleFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f9c2452d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/shingle/ShingleFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilterFactory::ShingleFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::shingle::ShingleFilter ShingleFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::shingle::ShingleFilter(env->callObjectMethod(this$, mids$[mid_create_f9c2452d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args);

          static PyMethodDef t_ShingleFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ShingleFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilterFactory, t_ShingleFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ShingleFilterFactory, t_ShingleFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ShingleFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilterFactory), module, "ShingleFilterFactory", 0);
          }

          void t_ShingleFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "class_", make_descriptor(ShingleFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ShingleFilterFactory::wrap_Object(ShingleFilterFactory(((t_ShingleFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ShingleFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ShingleFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::shingle::ShingleFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::shingle::t_ShingleFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ShingleFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooOldException::class$ = NULL;
        jmethodID *IndexFormatTooOldException::mids$ = NULL;
        bool IndexFormatTooOldException::live$ = false;

        jclass IndexFormatTooOldException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooOldException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6fb04e3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_e6fb04e3, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooOldException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooOldException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooOldException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooOldException, t_IndexFormatTooOldException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooOldException, t_IndexFormatTooOldException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooOldException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooOldException), module, "IndexFormatTooOldException", 0);
        }

        void t_IndexFormatTooOldException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "class_", make_descriptor(IndexFormatTooOldException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooOldException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooOldException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooOldException::wrap_Object(IndexFormatTooOldException(((t_IndexFormatTooOldException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooOldException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InfoStream::class$ = NULL;
        jmethodID *InfoStream::mids$ = NULL;
        bool InfoStream::live$ = false;
        InfoStream *InfoStream::NO_OUTPUT = NULL;

        jclass InfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDefault_1923150b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setDefault_a5e6dfa2] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/util/InfoStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_OUTPUT = new InfoStream(env->getStaticObjectField(cls, "NO_OUTPUT", "Lorg/apache/lucene/util/InfoStream;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InfoStream::InfoStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        InfoStream InfoStream::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return InfoStream(env->callStaticObjectMethod(cls, mids$[mid_getDefault_1923150b]));
        }

        jboolean InfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        void InfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }

        void InfoStream::setDefault(const InfoStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_a5e6dfa2], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InfoStream_getDefault(PyTypeObject *type);
        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg);
        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args);
        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data);
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data);
        static PyGetSetDef t_InfoStream__fields_[] = {
          DECLARE_GETSET_FIELD(t_InfoStream, default),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_InfoStream__methods_[] = {
          DECLARE_METHOD(t_InfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, isEnabled, METH_O),
          DECLARE_METHOD(t_InfoStream, message, METH_VARARGS),
          DECLARE_METHOD(t_InfoStream, setDefault, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InfoStream, t_InfoStream, ::java::lang::Object, InfoStream, t_InfoStream_init_, 0, 0, t_InfoStream__fields_, 0, 0);

        void t_InfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(InfoStream), module, "InfoStream", 0);
        }

        void t_InfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "class_", make_descriptor(InfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "wrapfn_", make_descriptor(t_InfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(InfoStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(InfoStream).tp_dict, "NO_OUTPUT", make_descriptor(t_InfoStream::wrap_Object(*InfoStream::NO_OUTPUT)));
        }

        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InfoStream::initializeClass, 1)))
            return NULL;
          return t_InfoStream::wrap_Object(InfoStream(((t_InfoStream *) arg)->object.this$));
        }
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds)
        {
          InfoStream object((jobject) NULL);

          INT_CALL(object = InfoStream());
          self->object = object;

          return 0;
        }

        static PyObject *t_InfoStream_getDefault(PyTypeObject *type)
        {
          InfoStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::InfoStream::getDefault());
          return t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isEnabled", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "message", args);
          return NULL;
        }

        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg)
        {
          InfoStream a0((jobject) NULL);

          if (!parseArg(arg, "k", InfoStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::InfoStream::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data)
        {
          InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_InfoStream::wrap_Object(value);
        }
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data)
        {
          {
            InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilderFactory::class$ = NULL;
            jmethodID *SpanQueryBuilderFactory::mids$ = NULL;
            bool SpanQueryBuilderFactory::live$ = false;

            jclass SpanQueryBuilderFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addBuilder_0aaa7d83] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanQueryBuilderFactory::SpanQueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void SpanQueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addBuilder_0aaa7d83], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args);

            static PyMethodDef t_SpanQueryBuilderFactory__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilderFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, addBuilder, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilderFactory, t_SpanQueryBuilderFactory, ::java::lang::Object, SpanQueryBuilderFactory, t_SpanQueryBuilderFactory_init_, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilderFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilderFactory), module, "SpanQueryBuilderFactory", 0);
            }

            void t_SpanQueryBuilderFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "class_", make_descriptor(SpanQueryBuilderFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilderFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilderFactory::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilderFactory::wrap_Object(SpanQueryBuilderFactory(((t_SpanQueryBuilderFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilderFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds)
            {
              SpanQueryBuilderFactory object((jobject) NULL);

              INT_CALL(object = SpanQueryBuilderFactory());
              self->object = object;

              return 0;
            }

            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addBuilder(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"
#include "java/lang/Number.h"
#include "java/util/Currency.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *NumberFormat::class$ = NULL;
    jmethodID *NumberFormat::mids$ = NULL;
    bool NumberFormat::live$ = false;
    jint NumberFormat::FRACTION_FIELD = (jint) 0;
    jint NumberFormat::INTEGER_FIELD = (jint) 0;

    jclass NumberFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/NumberFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_1b4624f8] = env->getMethodID(cls, "format", "(D)Ljava/lang/String;");
        mids$[mid_format_3e02f30e] = env->getMethodID(cls, "format", "(J)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getCurrencyInstance_6b701965] = env->getStaticMethodID(cls, "getCurrencyInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getCurrencyInstance_c103b3da] = env->getStaticMethodID(cls, "getCurrencyInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getInstance_6b701965] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getInstance_c103b3da] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_6b701965] = env->getStaticMethodID(cls, "getIntegerInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_c103b3da] = env->getStaticMethodID(cls, "getIntegerInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getNumberInstance_6b701965] = env->getStaticMethodID(cls, "getNumberInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getNumberInstance_c103b3da] = env->getStaticMethodID(cls, "getNumberInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_6b701965] = env->getStaticMethodID(cls, "getPercentInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_c103b3da] = env->getStaticMethodID(cls, "getPercentInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isGroupingUsed_54c6a16a] = env->getMethodID(cls, "isGroupingUsed", "()Z");
        mids$[mid_isParseIntegerOnly_54c6a16a] = env->getMethodID(cls, "isParseIntegerOnly", "()Z");
        mids$[mid_parse_271f2fcb] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/Number;");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setGroupingUsed_bb0c767f] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setParseIntegerOnly_bb0c767f] = env->getMethodID(cls, "setParseIntegerOnly", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FRACTION_FIELD = env->getStaticIntField(cls, "FRACTION_FIELD");
        INTEGER_FIELD = env->getStaticIntField(cls, "INTEGER_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object NumberFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean NumberFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String NumberFormat::format(jdouble a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_1b4624f8], a0));
    }

    ::java::lang::String NumberFormat::format(jlong a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_3e02f30e], a0));
    }

    JArray< ::java::util::Locale > NumberFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Currency NumberFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    NumberFormat NumberFormat::getCurrencyInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_6b701965]));
    }

    NumberFormat NumberFormat::getCurrencyInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_6b701965]));
    }

    NumberFormat NumberFormat::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getIntegerInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_6b701965]));
    }

    NumberFormat NumberFormat::getIntegerInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    NumberFormat NumberFormat::getNumberInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_6b701965]));
    }

    NumberFormat NumberFormat::getNumberInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getPercentInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_6b701965]));
    }

    NumberFormat NumberFormat::getPercentInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean NumberFormat::isGroupingUsed() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isGroupingUsed_54c6a16a]);
    }

    jboolean NumberFormat::isParseIntegerOnly() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseIntegerOnly_54c6a16a]);
    }

    ::java::lang::Number NumberFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_parse_271f2fcb], a0.this$));
    }

    void NumberFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void NumberFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_bb0c767f], a0);
    }

    void NumberFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setParseIntegerOnly(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseIntegerOnly_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self);
    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self);
    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data);
    static PyGetSetDef t_NumberFormat__fields_[] = {
      DECLARE_GET_FIELD(t_NumberFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_NumberFormat, currency),
      DECLARE_GET_FIELD(t_NumberFormat, currencyInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, groupingUsed),
      DECLARE_GET_FIELD(t_NumberFormat, instance),
      DECLARE_GET_FIELD(t_NumberFormat, integerInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumIntegerDigits),
      DECLARE_GET_FIELD(t_NumberFormat, numberInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, parseIntegerOnly),
      DECLARE_GET_FIELD(t_NumberFormat, percentInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_NumberFormat__methods_[] = {
      DECLARE_METHOD(t_NumberFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getCurrency, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getCurrencyInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getIntegerInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getMaximumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMaximumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getNumberInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getPercentInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, isGroupingUsed, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, isParseIntegerOnly, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, parse, METH_O),
      DECLARE_METHOD(t_NumberFormat, setCurrency, METH_O),
      DECLARE_METHOD(t_NumberFormat, setGroupingUsed, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setParseIntegerOnly, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NumberFormat, t_NumberFormat, ::java::text::Format, NumberFormat, abstract_init, 0, 0, t_NumberFormat__fields_, 0, 0);

    void t_NumberFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(NumberFormat), module, "NumberFormat", 0);
    }

    void t_NumberFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "class_", make_descriptor(NumberFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(NumberFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "FRACTION_FIELD", make_descriptor(NumberFormat::FRACTION_FIELD));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "INTEGER_FIELD", make_descriptor(NumberFormat::INTEGER_FIELD));
    }

    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NumberFormat::initializeClass, 1)))
        return NULL;
      return t_NumberFormat::wrap_Object(NumberFormat(((t_NumberFormat *) arg)->object.this$));
    }
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NumberFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::NumberFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self)
    {
      ::java::util::Currency result((jobject) NULL);
      OBJ_CALL(result = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(result);
    }

    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCurrencyInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getIntegerInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumberInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getPercentInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isGroupingUsed());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Number result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::lang::t_Number::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCurrency", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingUsed", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseIntegerOnly(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseIntegerOnly", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrencyInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isGroupingUsed());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getIntegerInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseIntegerOnly(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseIntegerOnly", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getPercentInstance());
      return t_NumberFormat::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StraightBytesDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StraightBytesDocValuesField::class$ = NULL;
        jmethodID *StraightBytesDocValuesField::mids$ = NULL;
        bool StraightBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass StraightBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StraightBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StraightBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_StraightBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StraightBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StraightBytesDocValuesField, t_StraightBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, StraightBytesDocValuesField, t_StraightBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_StraightBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(StraightBytesDocValuesField), module, "StraightBytesDocValuesField", 0);
        }

        void t_StraightBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "class_", make_descriptor(StraightBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_StraightBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StraightBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StraightBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_StraightBytesDocValuesField::wrap_Object(StraightBytesDocValuesField(((t_StraightBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StraightBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataInput::class$ = NULL;
          jmethodID *PackedDataInput::mids$ = NULL;
          bool PackedDataInput::live$ = false;

          jclass PackedDataInput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataInput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f5d6a551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_readLong_39c7bd20] = env->getMethodID(cls, "readLong", "(I)J");
              mids$[mid_skipToNextByte_54c6a166] = env->getMethodID(cls, "skipToNextByte", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataInput::PackedDataInput(const ::org::apache::lucene::store::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d6a551, a0.this$)) {}

          jlong PackedDataInput::readLong(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_readLong_39c7bd20], a0);
          }

          void PackedDataInput::skipToNextByte() const
          {
            env->callVoidMethod(this$, mids$[mid_skipToNextByte_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg);
          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self);

          static PyMethodDef t_PackedDataInput__methods_[] = {
            DECLARE_METHOD(t_PackedDataInput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, readLong, METH_O),
            DECLARE_METHOD(t_PackedDataInput, skipToNextByte, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataInput, t_PackedDataInput, ::java::lang::Object, PackedDataInput, t_PackedDataInput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataInput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataInput), module, "PackedDataInput", 0);
          }

          void t_PackedDataInput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "class_", make_descriptor(PackedDataInput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataInput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataInput::initializeClass, 1)))
              return NULL;
            return t_PackedDataInput::wrap_Object(PackedDataInput(((t_PackedDataInput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataInput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            PackedDataInput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataInput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.readLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLong", arg);
            return NULL;
          }

          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self)
          {
            OBJ_CALL(self->object.skipToNextByte());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilter::class$ = NULL;
          jmethodID *GalicianStemFilter::mids$ = NULL;
          bool GalicianStemFilter::live$ = false;

          jclass GalicianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilter::GalicianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilter, t_GalicianStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianStemFilter, t_GalicianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilter), module, "GalicianStemFilter", 0);
          }

          void t_GalicianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "class_", make_descriptor(GalicianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilter::wrap_Object(GalicianStemFilter(((t_GalicianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumFloatAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumFloatAssociations::mids$ = NULL;
          bool TaxonomyFacetSumFloatAssociations::live$ = false;

          jclass TaxonomyFacetSumFloatAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumFloatAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumFloatAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumFloatAssociations), module, "TaxonomyFacetSumFloatAssociations", 0);
          }

          void t_TaxonomyFacetSumFloatAssociations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "class_", make_descriptor(TaxonomyFacetSumFloatAssociations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumFloatAssociations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumFloatAssociations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumFloatAssociations::wrap_Object(TaxonomyFacetSumFloatAssociations(((t_TaxonomyFacetSumFloatAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode::class$ = NULL;
              jmethodID *PathQueryNode::mids$ = NULL;
              bool PathQueryNode::live$ = false;

              jclass PathQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getFirstPathElement_e0adba2f] = env->getMethodID(cls, "getFirstPathElement", "()Ljava/lang/CharSequence;");
                  mids$[mid_getPathElement_989d102c] = env->getMethodID(cls, "getPathElement", "(I)Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getPathElements_87851566] = env->getMethodID(cls, "getPathElements", "()Ljava/util/List;");
                  mids$[mid_getPathElements_cdc2a528] = env->getMethodID(cls, "getPathElements", "(I)Ljava/util/List;");
                  mids$[mid_setPathElements_1fde8fc3] = env->getMethodID(cls, "setPathElements", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode::PathQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PathQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence PathQueryNode::getFirstPathElement() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFirstPathElement_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText PathQueryNode::getPathElement(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_getPathElement_989d102c], a0));
              }

              ::java::util::List PathQueryNode::getPathElements() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_87851566]));
              }

              ::java::util::List PathQueryNode::getPathElements(jint a0) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_cdc2a528], a0));
              }

              void PathQueryNode::setPathElements(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPathElements_1fde8fc3], a0.this$);
              }

              ::java::lang::CharSequence PathQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PathQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self);
              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data);
              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data);
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_PathQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode, firstPathElement),
                DECLARE_GETSET_FIELD(t_PathQueryNode, pathElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, getFirstPathElement, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode, getPathElement, METH_O),
                DECLARE_METHOD(t_PathQueryNode, getPathElements, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, setPathElements, METH_O),
                DECLARE_METHOD(t_PathQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode, t_PathQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PathQueryNode, t_PathQueryNode_init_, 0, 0, t_PathQueryNode__fields_, 0, 0);

              void t_PathQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode), module, "PathQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "QueryText", make_descriptor(&PY_TYPE(PathQueryNode$QueryText)));
              }

              void t_PathQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "class_", make_descriptor(PathQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode::wrap_Object(PathQueryNode(((t_PathQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                PathQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = PathQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getPathElement(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_PathQueryNode$QueryText::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElement", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::List result((jobject) NULL);
                    OBJ_CALL(result = self->object.getPathElements());
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::List result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.getPathElements(a0));
                      return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElements", args);
                return NULL;
              }

              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.setPathElements(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPathElements", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getPathElements());
                return ::java::util::t_List::wrap_Object(value);
              }
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::util::List value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
                  {
                    INT_CALL(self->object.setPathElements(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "pathElements", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/FloatDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *FloatDocValues::class$ = NULL;
            jmethodID *FloatDocValues::mids$ = NULL;
            bool FloatDocValues::live$ = false;

            jclass FloatDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/FloatDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatDocValues::FloatDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte FloatDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble FloatDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat FloatDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FloatDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint FloatDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong FloatDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object FloatDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort FloatDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String FloatDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String FloatDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data);
            static PyGetSetDef t_FloatDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_FloatDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FloatDocValues__methods_[] = {
              DECLARE_METHOD(t_FloatDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatDocValues, t_FloatDocValues, ::org::apache::lucene::queries::function::FunctionValues, FloatDocValues, t_FloatDocValues_init_, 0, 0, t_FloatDocValues__fields_, 0, 0);

            void t_FloatDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatDocValues), module, "FloatDocValues", 0);
            }

            void t_FloatDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "class_", make_descriptor(FloatDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatDocValues::initializeClass, 1)))
                return NULL;
              return t_FloatDocValues::wrap_Object(FloatDocValues(((t_FloatDocValues *) arg)->object.this$));
            }
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              FloatDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = FloatDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilter::class$ = NULL;
          jmethodID *GermanMinimalStemFilter::mids$ = NULL;
          bool GermanMinimalStemFilter::live$ = false;

          jclass GermanMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilter::GermanMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilter, t_GermanMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanMinimalStemFilter, t_GermanMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilter), module, "GermanMinimalStemFilter", 0);
          }

          void t_GermanMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "class_", make_descriptor(GermanMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilter::wrap_Object(GermanMinimalStemFilter(((t_GermanMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FreeTextSuggester::class$ = NULL;
            jmethodID *FreeTextSuggester::mids$ = NULL;
            bool FreeTextSuggester::live$ = false;
            jdouble FreeTextSuggester::ALPHA = (jdouble) 0;
            ::java::lang::String *FreeTextSuggester::CODEC_NAME = NULL;
            jint FreeTextSuggester::DEFAULT_GRAMS = (jint) 0;
            jbyte FreeTextSuggester::DEFAULT_SEPARATOR = (jbyte) 0;
            jint FreeTextSuggester::VERSION_CURRENT = (jint) 0;
            jint FreeTextSuggester::VERSION_START = (jint) 0;

            jclass FreeTextSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FreeTextSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9c9ed338] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_init$_942dba41] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IB)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_build_a548a403] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;D)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_lookup_afd51678] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;I)Ljava/util/List;");
                mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticDoubleField(cls, "ALPHA");
                CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
                DEFAULT_GRAMS = env->getStaticIntField(cls, "DEFAULT_GRAMS");
                DEFAULT_SEPARATOR = env->getStaticByteField(cls, "DEFAULT_SEPARATOR");
                VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
                VERSION_START = env->getStaticIntField(cls, "VERSION_START");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9c9ed338, a0.this$, a1.this$, a2)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jbyte a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_942dba41, a0.this$, a1.this$, a2, a3)) {}

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0, jdouble a1) const
            {
              env->callVoidMethod(this$, mids$[mid_build_a548a403], a0.this$, a1);
            }

            ::java::lang::Object FreeTextSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FreeTextSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FreeTextSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_afd51678], a0.this$, a1.this$, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FreeTextSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FreeTextSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg);
            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data);
            static PyGetSetDef t_FreeTextSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_FreeTextSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FreeTextSuggester__methods_[] = {
              DECLARE_METHOD(t_FreeTextSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, get, METH_O),
              DECLARE_METHOD(t_FreeTextSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FreeTextSuggester, t_FreeTextSuggester, ::org::apache::lucene::search::suggest::Lookup, FreeTextSuggester, t_FreeTextSuggester_init_, 0, 0, t_FreeTextSuggester__fields_, 0, 0);

            void t_FreeTextSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FreeTextSuggester), module, "FreeTextSuggester", 0);
            }

            void t_FreeTextSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "class_", make_descriptor(FreeTextSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "wrapfn_", make_descriptor(t_FreeTextSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FreeTextSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "ALPHA", make_descriptor(FreeTextSuggester::ALPHA));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "CODEC_NAME", make_descriptor(j2p(*FreeTextSuggester::CODEC_NAME)));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_GRAMS", make_descriptor(FreeTextSuggester::DEFAULT_GRAMS));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "DEFAULT_SEPARATOR", make_descriptor(FreeTextSuggester::DEFAULT_SEPARATOR));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_CURRENT", make_descriptor(FreeTextSuggester::VERSION_CURRENT));
              PyDict_SetItemString(PY_TYPE(FreeTextSuggester).tp_dict, "VERSION_START", make_descriptor(FreeTextSuggester::VERSION_START));
            }

            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FreeTextSuggester::initializeClass, 1)))
                return NULL;
              return t_FreeTextSuggester::wrap_Object(FreeTextSuggester(((t_FreeTextSuggester *) arg)->object.this$));
            }
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FreeTextSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FreeTextSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jbyte a3;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIB", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.build(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                  jdouble a1;

                  if (!parseArgs(args, "kD", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.build(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jboolean a1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FreeTextSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttribute::class$ = NULL;
          jmethodID *CharTermAttribute::mids$ = NULL;
          bool CharTermAttribute::live$ = false;

          jclass CharTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::StringBuilder & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(jchar a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::String & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const CharTermAttribute & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttribute::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          void CharTermAttribute::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          JArray< jchar > CharTermAttribute::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          CharTermAttribute CharTermAttribute::setEmpty() const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          CharTermAttribute CharTermAttribute::setLength(jint a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg);
          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg);
          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_CharTermAttribute__fields_[] = {
            DECLARE_SET_FIELD(t_CharTermAttribute, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttribute__methods_[] = {
            DECLARE_METHOD(t_CharTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttribute, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, setLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttribute, t_CharTermAttribute, ::org::apache::lucene::util::Attribute, CharTermAttribute, abstract_init, 0, 0, t_CharTermAttribute__fields_, 0, 0);

          void t_CharTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttribute), module, "CharTermAttribute", 0);
          }

          void t_CharTermAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "class_", make_descriptor(CharTermAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttribute::initializeClass, 1)))
              return NULL;
            return t_CharTermAttribute::wrap_Object(CharTermAttribute(((t_CharTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                CharTermAttribute a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self)
          {
            CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "length", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *AlreadyClosedException::class$ = NULL;
        jmethodID *AlreadyClosedException::mids$ = NULL;
        bool AlreadyClosedException::live$ = false;

        jclass AlreadyClosedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/AlreadyClosedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_AlreadyClosedException__methods_[] = {
          DECLARE_METHOD(t_AlreadyClosedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AlreadyClosedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AlreadyClosedException, t_AlreadyClosedException, ::java::lang::IllegalStateException, AlreadyClosedException, t_AlreadyClosedException_init_, 0, 0, 0, 0, 0);

        void t_AlreadyClosedException::install(PyObject *module)
        {
          installType(&PY_TYPE(AlreadyClosedException), module, "AlreadyClosedException", 0);
        }

        void t_AlreadyClosedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "class_", make_descriptor(AlreadyClosedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "wrapfn_", make_descriptor(t_AlreadyClosedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AlreadyClosedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AlreadyClosedException::initializeClass, 1)))
            return NULL;
          return t_AlreadyClosedException::wrap_Object(AlreadyClosedException(((t_AlreadyClosedException *) arg)->object.this$));
        }
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AlreadyClosedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          AlreadyClosedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = AlreadyClosedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilter::class$ = NULL;
          jmethodID *NumericPayloadTokenFilter::mids$ = NULL;
          bool NumericPayloadTokenFilter::live$ = false;

          jclass NumericPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_333172df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;FLjava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilter::NumericPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_333172df, a0.this$, a1, a2.this$)) {}

          jboolean NumericPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilter, t_NumericPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NumericPayloadTokenFilter, t_NumericPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilter), module, "NumericPayloadTokenFilter", 0);
          }

          void t_NumericPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilter::wrap_Object(NumericPayloadTokenFilter(((t_NumericPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jfloat a1;
            ::java::lang::String a2((jobject) NULL);
            NumericPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kFs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = NumericPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Sort::class$ = NULL;
        jmethodID *Sort::mids$ = NULL;
        bool Sort::live$ = false;
        Sort *Sort::INDEXORDER = NULL;
        Sort *Sort::RELEVANCE = NULL;

        jclass Sort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Sort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4176baab] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_init$_3578f7bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSort_4fd90036] = env->getMethodID(cls, "getSort", "()[Lorg/apache/lucene/search/SortField;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_11e86a55] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Sort;");
            mids$[mid_setSort_3578f7bf] = env->getMethodID(cls, "setSort", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_setSort_4176baab] = env->getMethodID(cls, "setSort", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INDEXORDER = new Sort(env->getStaticObjectField(cls, "INDEXORDER", "Lorg/apache/lucene/search/Sort;"));
            RELEVANCE = new Sort(env->getStaticObjectField(cls, "RELEVANCE", "Lorg/apache/lucene/search/Sort;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Sort::Sort() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Sort::Sort(const JArray< ::org::apache::lucene::search::SortField > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4176baab, a0.this$)) {}

        Sort::Sort(const ::org::apache::lucene::search::SortField & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3578f7bf, a0.this$)) {}

        jboolean Sort::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        JArray< ::org::apache::lucene::search::SortField > Sort::getSort() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->callObjectMethod(this$, mids$[mid_getSort_4fd90036]));
        }

        jint Sort::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Sort::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        Sort Sort::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return Sort(env->callObjectMethod(this$, mids$[mid_rewrite_11e86a55], a0.this$));
        }

        void Sort::setSort(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_3578f7bf], a0.this$);
        }

        void Sort::setSort(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_4176baab], a0.this$);
        }

        ::java::lang::String Sort::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_getSort(t_Sort *self);
        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_needsScores(t_Sort *self);
        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg);
        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_get__sort(t_Sort *self, void *data);
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data);
        static PyGetSetDef t_Sort__fields_[] = {
          DECLARE_GETSET_FIELD(t_Sort, sort),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Sort__methods_[] = {
          DECLARE_METHOD(t_Sort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, equals, METH_VARARGS),
          DECLARE_METHOD(t_Sort, getSort, METH_NOARGS),
          DECLARE_METHOD(t_Sort, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Sort, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_Sort, rewrite, METH_O),
          DECLARE_METHOD(t_Sort, setSort, METH_VARARGS),
          DECLARE_METHOD(t_Sort, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sort, t_Sort, ::java::lang::Object, Sort, t_Sort_init_, 0, 0, t_Sort__fields_, 0, 0);

        void t_Sort::install(PyObject *module)
        {
          installType(&PY_TYPE(Sort), module, "Sort", 0);
        }

        void t_Sort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "class_", make_descriptor(Sort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "wrapfn_", make_descriptor(t_Sort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Sort::initializeClass);
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "INDEXORDER", make_descriptor(t_Sort::wrap_Object(*Sort::INDEXORDER)));
          PyDict_SetItemString(PY_TYPE(Sort).tp_dict, "RELEVANCE", make_descriptor(t_Sort::wrap_Object(*Sort::RELEVANCE)));
        }

        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sort::initializeClass, 1)))
            return NULL;
          return t_Sort::wrap_Object(Sort(((t_Sort *) arg)->object.this$));
        }
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Sort object((jobject) NULL);

              INT_CALL(object = Sort());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Sort_getSort(t_Sort *self)
        {
          JArray< ::org::apache::lucene::search::SortField > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSort());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }

        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Sort_needsScores(t_Sort *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          Sort result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Sort::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setSort", args);
          return NULL;
        }

        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Sort), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Sort_get__sort(t_Sort *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSort());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::SortField value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsReader::class$ = NULL;
          jmethodID *Lucene40TermVectorsReader::mids$ = NULL;
          bool Lucene40TermVectorsReader::live$ = false;

          jclass Lucene40TermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsReader::Lucene40TermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40TermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void Lucene40TermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields Lucene40TermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong Lucene40TermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsReader, t_Lucene40TermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, Lucene40TermVectorsReader, t_Lucene40TermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsReader), module, "Lucene40TermVectorsReader", 0);
          }

          void t_Lucene40TermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "class_", make_descriptor(Lucene40TermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsReader::wrap_Object(Lucene40TermVectorsReader(((t_Lucene40TermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40TermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40TermVectorsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilter::class$ = NULL;
          jmethodID *HindiNormalizationFilter::mids$ = NULL;
          bool HindiNormalizationFilter::live$ = false;

          jclass HindiNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilter::HindiNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_HindiNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilter, t_HindiNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, HindiNormalizationFilter, t_HindiNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilter), module, "HindiNormalizationFilter", 0);
          }

          void t_HindiNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "class_", make_descriptor(HindiNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilter::wrap_Object(HindiNormalizationFilter(((t_HindiNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils$CharacterBuffer::class$ = NULL;
          jmethodID *CharacterUtils$CharacterBuffer::mids$ = NULL;
          bool CharacterUtils$CharacterBuffer::live$ = false;

          jclass CharacterUtils$CharacterBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBuffer_dab10e7f] = env->getMethodID(cls, "getBuffer", "()[C");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< jchar > CharacterUtils$CharacterBuffer::getBuffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getBuffer_dab10e7f]));
          }

          jint CharacterUtils$CharacterBuffer::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharacterUtils$CharacterBuffer::getOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
          }

          void CharacterUtils$CharacterBuffer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyGetSetDef t_CharacterUtils$CharacterBuffer__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, buffer),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, length),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, offset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils$CharacterBuffer__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getBuffer, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getOffset, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils$CharacterBuffer, t_CharacterUtils$CharacterBuffer, ::java::lang::Object, CharacterUtils$CharacterBuffer, abstract_init, 0, 0, t_CharacterUtils$CharacterBuffer__fields_, 0, 0);

          void t_CharacterUtils$CharacterBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils$CharacterBuffer), module, "CharacterUtils$CharacterBuffer", 0);
          }

          void t_CharacterUtils$CharacterBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "class_", make_descriptor(CharacterUtils$CharacterBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils$CharacterBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils$CharacterBuffer::wrap_Object(CharacterUtils$CharacterBuffer(((t_CharacterUtils$CharacterBuffer *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getBuffer());
            return result.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getBuffer());
            return value.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Index::class$ = NULL;
        jmethodID *Field$Index::mids$ = NULL;
        bool Field$Index::live$ = false;
        Field$Index *Field$Index::ANALYZED = NULL;
        Field$Index *Field$Index::ANALYZED_NO_NORMS = NULL;
        Field$Index *Field$Index::NO = NULL;
        Field$Index *Field$Index::NOT_ANALYZED = NULL;
        Field$Index *Field$Index::NOT_ANALYZED_NO_NORMS = NULL;

        jclass Field$Index::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Index");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isAnalyzed_54c6a16a] = env->getMethodID(cls, "isAnalyzed", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_toIndex_0139857d] = env->getStaticMethodID(cls, "toIndex", "(ZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_toIndex_fddaa68a] = env->getStaticMethodID(cls, "toIndex", "(ZZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_valueOf_6b6ff451] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_values_d9660127] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Index;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ANALYZED = new Field$Index(env->getStaticObjectField(cls, "ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            NO = new Field$Index(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$Index::isAnalyzed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAnalyzed_54c6a16a]);
        }

        jboolean Field$Index::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean Field$Index::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_0139857d], a0, a1));
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_fddaa68a], a0, a1, a2));
        }

        Field$Index Field$Index::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6b6ff451], a0.this$));
        }

        JArray< Field$Index > Field$Index::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Index >(env->callStaticObjectMethod(cls, mids$[mid_values_d9660127]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args);
        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self);
        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self);
        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self);
        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_values(PyTypeObject *type);
        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data);
        static PyGetSetDef t_Field$Index__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Index, analyzed),
          DECLARE_GET_FIELD(t_Field$Index, indexed),
          DECLARE_GET_FIELD(t_Field$Index, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Index__methods_[] = {
          DECLARE_METHOD(t_Field$Index, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Index, isAnalyzed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, toIndex, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Index, t_Field$Index, ::java::lang::Enum, Field$Index, abstract_init, 0, 0, t_Field$Index__fields_, 0, 0);
        PyObject *t_Field$Index::wrap_Object(const Field$Index& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Index::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Index::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Index), module, "Field$Index", 0);
        }

        void t_Field$Index::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "class_", make_descriptor(Field$Index::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "wrapfn_", make_descriptor(t_Field$Index::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Index::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED_NO_NORMS)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NO", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED_NO_NORMS)));
        }

        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Index::initializeClass, 1)))
            return NULL;
          return t_Field$Index::wrap_Object(Field$Index(((t_Field$Index *) arg)->object.this$));
        }
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Index::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAnalyzed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jboolean a0;
              jboolean a1;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1));
                return t_Field$Index::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jboolean a2;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1, a2));
                return t_Field$Index::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "toIndex", args);
          return NULL;
        }

        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Index result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::valueOf(a0));
            return t_Field$Index::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Index_values(PyTypeObject *type)
        {
          JArray< Field$Index > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Index::wrap_jobject);
        }
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAnalyzed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *CharVector::class$ = NULL;
            jmethodID *CharVector::mids$ = NULL;
            bool CharVector::live$ = false;

            jclass CharVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/CharVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_023cce63] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/CharVector;");
                mids$[mid_get_39c7bd29] = env->getMethodID(cls, "get", "(I)C");
                mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_83eec158] = env->getMethodID(cls, "put", "(IC)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CharVector::CharVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            CharVector::CharVector(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

            CharVector::CharVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            CharVector::CharVector(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

            jint CharVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint CharVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            void CharVector::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            CharVector CharVector::clone() const
            {
              return CharVector(env->callObjectMethod(this$, mids$[mid_clone_023cce63]));
            }

            jchar CharVector::get(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_get_39c7bd29], a0);
            }

            JArray< jchar > CharVector::getArray() const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
            }

            jint CharVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void CharVector::put(jint a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_83eec158], a0, a1);
            }

            void CharVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_capacity(t_CharVector *self);
            static PyObject *t_CharVector_clear(t_CharVector *self);
            static PyObject *t_CharVector_clone(t_CharVector *self);
            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_getArray(t_CharVector *self);
            static PyObject *t_CharVector_length(t_CharVector *self);
            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args);
            static PyObject *t_CharVector_trimToSize(t_CharVector *self);
            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data);
            static PyGetSetDef t_CharVector__fields_[] = {
              DECLARE_GET_FIELD(t_CharVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharVector__methods_[] = {
              DECLARE_METHOD(t_CharVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, alloc, METH_O),
              DECLARE_METHOD(t_CharVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clear, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clone, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, get, METH_O),
              DECLARE_METHOD(t_CharVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, length, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, put, METH_VARARGS),
              DECLARE_METHOD(t_CharVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharVector, t_CharVector, ::java::lang::Object, CharVector, t_CharVector_init_, 0, 0, t_CharVector__fields_, 0, 0);

            void t_CharVector::install(PyObject *module)
            {
              installType(&PY_TYPE(CharVector), module, "CharVector", 0);
            }

            void t_CharVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "class_", make_descriptor(CharVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "wrapfn_", make_descriptor(t_CharVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharVector::initializeClass, 1)))
                return NULL;
              return t_CharVector::wrap_Object(CharVector(((t_CharVector *) arg)->object.this$));
            }
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  CharVector object((jobject) NULL);

                  INT_CALL(object = CharVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[C", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    INT_CALL(object = CharVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_CharVector_capacity(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_clear(t_CharVector *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_clone(t_CharVector *self)
            {
              CharVector result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_CharVector::wrap_Object(result);
            }

            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_CharVector_getArray(t_CharVector *self)
            {
              JArray< jchar > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_CharVector_length(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args)
            {
              jint a0;
              jchar a1;

              if (!parseArgs(args, "IC", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_CharVector_trimToSize(t_CharVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data)
            {
              JArray< jchar > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$ProcessingMode::class$ = NULL;
          jmethodID *DuplicateFilter$ProcessingMode::mids$ = NULL;
          bool DuplicateFilter$ProcessingMode::live$ = false;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION = NULL;
          DuplicateFilter$ProcessingMode *DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION = NULL;

          jclass DuplicateFilter$ProcessingMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_5b1a28e1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_values_e8e814df] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PM_FAST_INVALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FAST_INVALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              PM_FULL_VALIDATION = new DuplicateFilter$ProcessingMode(env->getStaticObjectField(cls, "PM_FULL_VALIDATION", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$ProcessingMode DuplicateFilter$ProcessingMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$ProcessingMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5b1a28e1], a0.this$));
          }

          JArray< DuplicateFilter$ProcessingMode > DuplicateFilter$ProcessingMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$ProcessingMode >(env->callStaticObjectMethod(cls, mids$[mid_values_e8e814df]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$ProcessingMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$ProcessingMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$ProcessingMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$ProcessingMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$ProcessingMode, t_DuplicateFilter$ProcessingMode, ::java::lang::Enum, DuplicateFilter$ProcessingMode, abstract_init, 0, 0, t_DuplicateFilter$ProcessingMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$ProcessingMode::wrap_Object(const DuplicateFilter$ProcessingMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$ProcessingMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$ProcessingMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$ProcessingMode *self = (t_DuplicateFilter$ProcessingMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$ProcessingMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$ProcessingMode), module, "DuplicateFilter$ProcessingMode", 0);
          }

          void t_DuplicateFilter$ProcessingMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "class_", make_descriptor(DuplicateFilter$ProcessingMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$ProcessingMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FAST_INVALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FAST_INVALIDATION)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$ProcessingMode).tp_dict, "PM_FULL_VALIDATION", make_descriptor(t_DuplicateFilter$ProcessingMode::wrap_Object(*DuplicateFilter$ProcessingMode::PM_FULL_VALIDATION)));
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$ProcessingMode::wrap_Object(DuplicateFilter$ProcessingMode(((t_DuplicateFilter$ProcessingMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$ProcessingMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_of_(t_DuplicateFilter$ProcessingMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$ProcessingMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::valueOf(a0));
              return t_DuplicateFilter$ProcessingMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$ProcessingMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$ProcessingMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$ProcessingMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$ProcessingMode_get__parameters_(t_DuplicateFilter$ProcessingMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *CombineSuggestion::class$ = NULL;
          jmethodID *CombineSuggestion::mids$ = NULL;
          jfieldID *CombineSuggestion::fids$ = NULL;
          bool CombineSuggestion::live$ = false;

          jclass CombineSuggestion::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/CombineSuggestion");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e7d3559a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/SuggestWord;[I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_originalTermIndexes] = env->getFieldID(cls, "originalTermIndexes", "[I");
              fids$[fid_suggestion] = env->getFieldID(cls, "suggestion", "Lorg/apache/lucene/search/spell/SuggestWord;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CombineSuggestion::CombineSuggestion(const ::org::apache::lucene::search::spell::SuggestWord & a0, const JArray< jint > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e7d3559a, a0.this$, a1.this$)) {}

          JArray< jint > CombineSuggestion::_get_originalTermIndexes() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_originalTermIndexes]));
          }

          ::org::apache::lucene::search::spell::SuggestWord CombineSuggestion::_get_suggestion() const
          {
            return ::org::apache::lucene::search::spell::SuggestWord(env->getObjectField(this$, fids$[fid_suggestion]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data);
          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data);

          static PyGetSetDef t_CombineSuggestion__fields_[] = {
            DECLARE_GET_FIELD(t_CombineSuggestion, originalTermIndexes),
            DECLARE_GET_FIELD(t_CombineSuggestion, suggestion),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CombineSuggestion__methods_[] = {
            DECLARE_METHOD(t_CombineSuggestion, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CombineSuggestion, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CombineSuggestion, t_CombineSuggestion, ::java::lang::Object, CombineSuggestion, t_CombineSuggestion_init_, 0, 0, t_CombineSuggestion__fields_, 0, 0);

          void t_CombineSuggestion::install(PyObject *module)
          {
            installType(&PY_TYPE(CombineSuggestion), module, "CombineSuggestion", 0);
          }

          void t_CombineSuggestion::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "class_", make_descriptor(CombineSuggestion::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "wrapfn_", make_descriptor(t_CombineSuggestion::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CombineSuggestion::initializeClass, 1)))
              return NULL;
            return t_CombineSuggestion::wrap_Object(CombineSuggestion(((t_CombineSuggestion *) arg)->object.this$));
          }
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CombineSuggestion::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            CombineSuggestion object((jobject) NULL);

            if (!parseArgs(args, "k[I", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CombineSuggestion(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_originalTermIndexes());
            return value.wrap();
          }

          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data)
          {
            ::org::apache::lucene::search::spell::SuggestWord value((jobject) NULL);
            OBJ_CALL(value = self->object._get_suggestion());
            return ::org::apache::lucene::search::spell::t_SuggestWord::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntryIterator::class$ = NULL;
          jmethodID *CharArrayMap$EntryIterator::mids$ = NULL;
          bool CharArrayMap$EntryIterator::live$ = false;

          jclass CharArrayMap$EntryIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntryIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_currentValue_846352c3] = env->getMethodID(cls, "currentValue", "()Ljava/lang/Object;");
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_2971780b] = env->getMethodID(cls, "next", "()Ljava/util/Map$Entry;");
              mids$[mid_nextKey_dab10e7f] = env->getMethodID(cls, "nextKey", "()[C");
              mids$[mid_nextKeyString_14c7b5c5] = env->getMethodID(cls, "nextKeyString", "()Ljava/lang/String;");
              mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
              mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object CharArrayMap$EntryIterator::currentValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_currentValue_846352c3]));
          }

          jboolean CharArrayMap$EntryIterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          ::java::util::Map$Entry CharArrayMap$EntryIterator::next() const
          {
            return ::java::util::Map$Entry(env->callObjectMethod(this$, mids$[mid_next_2971780b]));
          }

          JArray< jchar > CharArrayMap$EntryIterator::nextKey() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_nextKey_dab10e7f]));
          }

          ::java::lang::String CharArrayMap$EntryIterator::nextKeyString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextKeyString_14c7b5c5]));
          }

          void CharArrayMap$EntryIterator::remove() const
          {
            env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
          }

          ::java::lang::Object CharArrayMap$EntryIterator::setValue(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self);
          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg);
          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntryIterator__fields_[] = {
            DECLARE_SET_FIELD(t_CharArrayMap$EntryIterator, value),
            DECLARE_GET_FIELD(t_CharArrayMap$EntryIterator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntryIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKey, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKeyString, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, remove, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayMap$EntryIterator, setValue, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntryIterator, t_CharArrayMap$EntryIterator, ::java::lang::Object, CharArrayMap$EntryIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::util::t_Map$Entry >), t_CharArrayMap$EntryIterator__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntryIterator::wrap_Object(const CharArrayMap$EntryIterator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntryIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntryIterator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntryIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntryIterator), module, "CharArrayMap$EntryIterator", 0);
          }

          void t_CharArrayMap$EntryIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "class_", make_descriptor(CharArrayMap$EntryIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntryIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntryIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntryIterator::wrap_Object(CharArrayMap$EntryIterator(((t_CharArrayMap$EntryIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.currentValue());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self)
          {
            ::java::util::Map$Entry result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::java::util::t_Map$Entry::wrap_Object(result, &::java::lang::PY_TYPE(Object), self->parameters[0]);
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKey());
            return result.wrap();
          }

          static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.nextKeyString());
            return j2p(result);
          }

          static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self)
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.setValue(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setValue", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRewriteMethod.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRewriteMethod::class$ = NULL;
        jmethodID *FieldCacheRewriteMethod::mids$ = NULL;
        bool FieldCacheRewriteMethod::live$ = false;

        jclass FieldCacheRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheRewriteMethod::FieldCacheRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FieldCacheRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FieldCacheRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FieldCacheRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args);
        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args);

        static PyMethodDef t_FieldCacheRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRewriteMethod, t_FieldCacheRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, FieldCacheRewriteMethod, t_FieldCacheRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRewriteMethod), module, "FieldCacheRewriteMethod", 0);
        }

        void t_FieldCacheRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "class_", make_descriptor(FieldCacheRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRewriteMethod::wrap_Object(FieldCacheRewriteMethod(((t_FieldCacheRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheRewriteMethod_init_(t_FieldCacheRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheRewriteMethod object((jobject) NULL);

          INT_CALL(object = FieldCacheRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheRewriteMethod_equals(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_hashCode(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRewriteMethod_rewrite(t_FieldCacheRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimWeight::class$ = NULL;
          jmethodID *Similarity$SimWeight::mids$ = NULL;
          bool Similarity$SimWeight::live$ = false;

          jclass Similarity$SimWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimWeight::Similarity$SimWeight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void Similarity$SimWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self);
          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args);
          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data);
          static PyGetSetDef t_Similarity$SimWeight__fields_[] = {
            DECLARE_GET_FIELD(t_Similarity$SimWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Similarity$SimWeight__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, getValueForNormalization, METH_NOARGS),
            DECLARE_METHOD(t_Similarity$SimWeight, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimWeight, t_Similarity$SimWeight, ::java::lang::Object, Similarity$SimWeight, t_Similarity$SimWeight_init_, 0, 0, t_Similarity$SimWeight__fields_, 0, 0);

          void t_Similarity$SimWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimWeight), module, "Similarity$SimWeight", 0);
          }

          void t_Similarity$SimWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "class_", make_descriptor(Similarity$SimWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimWeight::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimWeight::wrap_Object(Similarity$SimWeight(((t_Similarity$SimWeight *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimWeight object((jobject) NULL);

            INT_CALL(object = Similarity$SimWeight());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BroadWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BroadWord::class$ = NULL;
        jmethodID *BroadWord::mids$ = NULL;
        bool BroadWord::live$ = false;
        jlong BroadWord::H16_L = (jlong) 0;
        jlong BroadWord::H8_L = (jlong) 0;
        jlong BroadWord::L16_L = (jlong) 0;
        jlong BroadWord::L8_L = (jlong) 0;
        jlong BroadWord::L9_L = (jlong) 0;

        jclass BroadWord::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BroadWord");

            mids$ = new jmethodID[max_mid];
            mids$[mid_notEquals0_8_0ee6df33] = env->getStaticMethodID(cls, "notEquals0_8", "(J)J");
            mids$[mid_select_25d05c90] = env->getStaticMethodID(cls, "select", "(JI)I");
            mids$[mid_selectNaive_25d05c90] = env->getStaticMethodID(cls, "selectNaive", "(JI)I");
            mids$[mid_smallerUpTo7_8_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpTo7_8", "(JJ)J");
            mids$[mid_smallerUpto15_16_a7e12cb8] = env->getStaticMethodID(cls, "smallerUpto15_16", "(JJ)J");
            mids$[mid_smalleru_8_a7e12cb8] = env->getStaticMethodID(cls, "smalleru_8", "(JJ)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            H16_L = env->getStaticLongField(cls, "H16_L");
            H8_L = env->getStaticLongField(cls, "H8_L");
            L16_L = env->getStaticLongField(cls, "L16_L");
            L8_L = env->getStaticLongField(cls, "L8_L");
            L9_L = env->getStaticLongField(cls, "L9_L");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BroadWord::notEquals0_8(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_notEquals0_8_0ee6df33], a0);
        }

        jint BroadWord::select(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_select_25d05c90], a0, a1);
        }

        jint BroadWord::selectNaive(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_selectNaive_25d05c90], a0, a1);
        }

        jlong BroadWord::smallerUpTo7_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpTo7_8_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smallerUpto15_16(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smallerUpto15_16_a7e12cb8], a0, a1);
        }

        jlong BroadWord::smalleru_8(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_smalleru_8_a7e12cb8], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args);
        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BroadWord__methods_[] = {
          DECLARE_METHOD(t_BroadWord, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, notEquals0_8, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, select, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, selectNaive, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpTo7_8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smallerUpto15_16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BroadWord, smalleru_8, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BroadWord, t_BroadWord, ::java::lang::Object, BroadWord, abstract_init, 0, 0, 0, 0, 0);

        void t_BroadWord::install(PyObject *module)
        {
          installType(&PY_TYPE(BroadWord), module, "BroadWord", 0);
        }

        void t_BroadWord::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "class_", make_descriptor(BroadWord::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "wrapfn_", make_descriptor(t_BroadWord::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BroadWord::initializeClass);
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H16_L", make_descriptor(BroadWord::H16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "H8_L", make_descriptor(BroadWord::H8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L16_L", make_descriptor(BroadWord::L16_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L8_L", make_descriptor(BroadWord::L8_L));
          PyDict_SetItemString(PY_TYPE(BroadWord).tp_dict, "L9_L", make_descriptor(BroadWord::L9_L));
        }

        static PyObject *t_BroadWord_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BroadWord::initializeClass, 1)))
            return NULL;
          return t_BroadWord::wrap_Object(BroadWord(((t_BroadWord *) arg)->object.this$));
        }
        static PyObject *t_BroadWord_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BroadWord::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BroadWord_notEquals0_8(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::notEquals0_8(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "notEquals0_8", arg);
          return NULL;
        }

        static PyObject *t_BroadWord_select(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::select(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "select", args);
          return NULL;
        }

        static PyObject *t_BroadWord_selectNaive(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::selectNaive(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "selectNaive", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpTo7_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpTo7_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpTo7_8", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smallerUpto15_16(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smallerUpto15_16(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smallerUpto15_16", args);
          return NULL;
        }

        static PyObject *t_BroadWord_smalleru_8(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BroadWord::smalleru_8(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "smalleru_8", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilterFactory::class$ = NULL;
          jmethodID *CzechStemFilterFactory::mids$ = NULL;
          bool CzechStemFilterFactory::live$ = false;

          jclass CzechStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilterFactory::CzechStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CzechStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_CzechStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilterFactory, t_CzechStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CzechStemFilterFactory, t_CzechStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilterFactory), module, "CzechStemFilterFactory", 0);
          }

          void t_CzechStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "class_", make_descriptor(CzechStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilterFactory::wrap_Object(CzechStemFilterFactory(((t_CzechStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CzechStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CzechStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector::mids$ = NULL;
          bool AbstractGroupFacetCollector::live$ = false;

          jclass AbstractGroupFacetCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_mergeSegmentResults_e901ef94] = env->getMethodID(cls, "mergeSegmentResults", "(IIZ)Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_createSegmentResult_d8ccc374] = env->getMethodID(cls, "createSegmentResult", "()Lorg/apache/lucene/search/grouping/AbstractGroupFacetCollector$SegmentResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractGroupFacetCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult AbstractGroupFacetCollector::mergeSegmentResults(jint a0, jint a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult(env->callObjectMethod(this$, mids$[mid_mergeSegmentResults_e901ef94], a0, a1, a2));
          }

          void AbstractGroupFacetCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args);
          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractGroupFacetCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, mergeSegmentResults, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector, t_AbstractGroupFacetCollector, ::org::apache::lucene::search::Collector, AbstractGroupFacetCollector, abstract_init, 0, 0, t_AbstractGroupFacetCollector__fields_, 0, 0);

          void t_AbstractGroupFacetCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector), module, "AbstractGroupFacetCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "FacetEntry", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry)));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "GroupedFacetResult", make_descriptor(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult)));
          }

          void t_AbstractGroupFacetCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector::wrap_Object(AbstractGroupFacetCollector(((t_AbstractGroupFacetCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractGroupFacetCollector_acceptsDocsOutOfOrder(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector_mergeSegmentResults(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector$GroupedFacetResult result((jobject) NULL);

            if (!parseArgs(args, "IIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.mergeSegmentResults(a0, a1, a2));
              return ::org::apache::lucene::search::grouping::t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "mergeSegmentResults", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector_setScorer(t_AbstractGroupFacetCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_AbstractGroupFacetCollector_set__scorer(t_AbstractGroupFacetCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/System.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/Console.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/lang/String.h"
#include "java/lang/SecurityManager.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *System::class$ = NULL;
    jmethodID *System::mids$ = NULL;
    bool System::live$ = false;
    ::java::io::PrintStream *System::err = NULL;
    ::java::io::InputStream *System::in = NULL;
    ::java::io::PrintStream *System::out = NULL;

    jclass System::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/System");

        mids$ = new jmethodID[max_mid];
        mids$[mid_arraycopy_8bcf5170] = env->getStaticMethodID(cls, "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
        mids$[mid_clearProperty_97a5258f] = env->getStaticMethodID(cls, "clearProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_console_d6171648] = env->getStaticMethodID(cls, "console", "()Ljava/io/Console;");
        mids$[mid_currentTimeMillis_54c6a17a] = env->getStaticMethodID(cls, "currentTimeMillis", "()J");
        mids$[mid_exit_39c7bd3c] = env->getStaticMethodID(cls, "exit", "(I)V");
        mids$[mid_gc_54c6a166] = env->getStaticMethodID(cls, "gc", "()V");
        mids$[mid_getProperties_7e96414d] = env->getStaticMethodID(cls, "getProperties", "()Ljava/util/Properties;");
        mids$[mid_getProperty_97a5258f] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getProperty_aacea7e9] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getSecurityManager_0361f9be] = env->getStaticMethodID(cls, "getSecurityManager", "()Ljava/lang/SecurityManager;");
        mids$[mid_getenv_db60befd] = env->getStaticMethodID(cls, "getenv", "()Ljava/util/Map;");
        mids$[mid_getenv_97a5258f] = env->getStaticMethodID(cls, "getenv", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_identityHashCode_290588f1] = env->getStaticMethodID(cls, "identityHashCode", "(Ljava/lang/Object;)I");
        mids$[mid_lineSeparator_14c7b5c5] = env->getStaticMethodID(cls, "lineSeparator", "()Ljava/lang/String;");
        mids$[mid_load_5fdc3f48] = env->getStaticMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getStaticMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_mapLibraryName_97a5258f] = env->getStaticMethodID(cls, "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_nanoTime_54c6a17a] = env->getStaticMethodID(cls, "nanoTime", "()J");
        mids$[mid_runFinalization_54c6a166] = env->getStaticMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_setErr_1b7c898b] = env->getStaticMethodID(cls, "setErr", "(Ljava/io/PrintStream;)V");
        mids$[mid_setIn_be2e4f90] = env->getStaticMethodID(cls, "setIn", "(Ljava/io/InputStream;)V");
        mids$[mid_setOut_1b7c898b] = env->getStaticMethodID(cls, "setOut", "(Ljava/io/PrintStream;)V");
        mids$[mid_setProperties_c4afb15c] = env->getStaticMethodID(cls, "setProperties", "(Ljava/util/Properties;)V");
        mids$[mid_setProperty_aacea7e9] = env->getStaticMethodID(cls, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_setSecurityManager_c35b0b0b] = env->getStaticMethodID(cls, "setSecurityManager", "(Ljava/lang/SecurityManager;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        err = new ::java::io::PrintStream(env->getStaticObjectField(cls, "err", "Ljava/io/PrintStream;"));
        in = new ::java::io::InputStream(env->getStaticObjectField(cls, "in", "Ljava/io/InputStream;"));
        out = new ::java::io::PrintStream(env->getStaticObjectField(cls, "out", "Ljava/io/PrintStream;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void System::arraycopy(const ::java::lang::Object & a0, jint a1, const ::java::lang::Object & a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_arraycopy_8bcf5170], a0.this$, a1, a2.this$, a3, a4);
    }

    ::java::lang::String System::clearProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_clearProperty_97a5258f], a0.this$));
    }

    ::java::io::Console System::console()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::io::Console(env->callStaticObjectMethod(cls, mids$[mid_console_d6171648]));
    }

    jlong System::currentTimeMillis()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_currentTimeMillis_54c6a17a]);
    }

    void System::exit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_exit_39c7bd3c], a0);
    }

    void System::gc()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_gc_54c6a166]);
    }

    ::java::util::Properties System::getProperties()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Properties(env->callStaticObjectMethod(cls, mids$[mid_getProperties_7e96414d]));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_97a5258f], a0.this$));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_aacea7e9], a0.this$, a1.this$));
    }

    ::java::lang::SecurityManager System::getSecurityManager()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::SecurityManager(env->callStaticObjectMethod(cls, mids$[mid_getSecurityManager_0361f9be]));
    }

    ::java::util::Map System::getenv()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getenv_db60befd]));
    }

    ::java::lang::String System::getenv(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getenv_97a5258f], a0.this$));
    }

    jint System::identityHashCode(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_identityHashCode_290588f1], a0.this$);
    }

    ::java::lang::String System::lineSeparator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_lineSeparator_14c7b5c5]));
    }

    void System::load(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void System::loadLibrary(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    ::java::lang::String System::mapLibraryName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_mapLibraryName_97a5258f], a0.this$));
    }

    jlong System::nanoTime()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_nanoTime_54c6a17a]);
    }

    void System::runFinalization()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalization_54c6a166]);
    }

    void System::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    void System::setErr(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setErr_1b7c898b], a0.this$);
    }

    void System::setIn(const ::java::io::InputStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setIn_be2e4f90], a0.this$);
    }

    void System::setOut(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setOut_1b7c898b], a0.this$);
    }

    void System::setProperties(const ::java::util::Properties & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setProperties_c4afb15c], a0.this$);
    }

    ::java::lang::String System::setProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_setProperty_aacea7e9], a0.this$, a1.this$));
    }

    void System::setSecurityManager(const ::java::lang::SecurityManager & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setSecurityManager_c35b0b0b], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_console(PyTypeObject *type);
    static PyObject *t_System_currentTimeMillis(PyTypeObject *type);
    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_gc(PyTypeObject *type);
    static PyObject *t_System_getProperties(PyTypeObject *type);
    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_getSecurityManager(PyTypeObject *type);
    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_lineSeparator(PyTypeObject *type);
    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_nanoTime(PyTypeObject *type);
    static PyObject *t_System_runFinalization(PyTypeObject *type);
    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_get__env(t_System *self, void *data);
    static int t_System_set__err(t_System *self, PyObject *arg, void *data);
    static int t_System_set__in(t_System *self, PyObject *arg, void *data);
    static int t_System_set__out(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__properties(t_System *self, void *data);
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__securityManager(t_System *self, void *data);
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data);
    static PyGetSetDef t_System__fields_[] = {
      DECLARE_GET_FIELD(t_System, env),
      DECLARE_SET_FIELD(t_System, err),
      DECLARE_SET_FIELD(t_System, in),
      DECLARE_SET_FIELD(t_System, out),
      DECLARE_GETSET_FIELD(t_System, properties),
      DECLARE_GETSET_FIELD(t_System, securityManager),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_System__methods_[] = {
      DECLARE_METHOD(t_System, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, arraycopy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, clearProperty, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, console, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, currentTimeMillis, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, exit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, gc, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperties, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getSecurityManager, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getenv, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, identityHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, lineSeparator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, load, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, loadLibrary, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, mapLibraryName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, nanoTime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalization, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setErr, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setIn, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setOut, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperties, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, setSecurityManager, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(System, t_System, ::java::lang::Object, System, abstract_init, 0, 0, t_System__fields_, 0, 0);

    void t_System::install(PyObject *module)
    {
      installType(&PY_TYPE(System), module, "System", 0);
    }

    void t_System::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "class_", make_descriptor(System::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "wrapfn_", make_descriptor(t_System::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(System::initializeClass);
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "err", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::err)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "in", make_descriptor(::java::io::t_InputStream::wrap_Object(*System::in)));
      PyDict_SetItemString(PY_TYPE(System).tp_dict, "out", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::out)));
    }

    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, System::initializeClass, 1)))
        return NULL;
      return t_System::wrap_Object(System(((t_System *) arg)->object.this$));
    }
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, System::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint a1;
      ::java::lang::Object a2((jobject) NULL);
      jint a3;
      jint a4;

      if (!parseArgs(args, "oIoII", &a0, &a1, &a2, &a3, &a4))
      {
        OBJ_CALL(::java::lang::System::arraycopy(a0, a1, a2, a3, a4));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "arraycopy", args);
      return NULL;
    }

    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::clearProperty(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "clearProperty", arg);
      return NULL;
    }

    static PyObject *t_System_console(PyTypeObject *type)
    {
      ::java::io::Console result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::console());
      return ::java::io::t_Console::wrap_Object(result);
    }

    static PyObject *t_System_currentTimeMillis(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::currentTimeMillis());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(::java::lang::System::exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "exit", arg);
      return NULL;
    }

    static PyObject *t_System_gc(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_getProperties(PyTypeObject *type)
    {
      ::java::util::Properties result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getProperties());
      return ::java::util::t_Properties::wrap_Object(result);
    }

    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getProperty", args);
      return NULL;
    }

    static PyObject *t_System_getSecurityManager(PyTypeObject *type)
    {
      ::java::lang::SecurityManager result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(result);
    }

    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = ::java::lang::System::getenv());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getenv(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getenv", args);
      return NULL;
    }

    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::identityHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "identityHashCode", arg);
      return NULL;
    }

    static PyObject *t_System_lineSeparator(PyTypeObject *type)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::lineSeparator());
      return j2p(result);
    }

    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "load", arg);
      return NULL;
    }

    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::mapLibraryName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "mapLibraryName", arg);
      return NULL;
    }

    static PyObject *t_System_nanoTime(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::nanoTime());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_runFinalization(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::System::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setErr(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setErr", arg);
      return NULL;
    }

    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setIn(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setIn", arg);
      return NULL;
    }

    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setOut(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setOut", arg);
      return NULL;
    }

    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Properties a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
      {
        OBJ_CALL(::java::lang::System::setProperties(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setProperties", arg);
      return NULL;
    }

    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String a1((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::System::setProperty(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "setProperty", args);
      return NULL;
    }

    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::SecurityManager a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setSecurityManager(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setSecurityManager", arg);
      return NULL;
    }

    static PyObject *t_System_get__env(t_System *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getenv());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static int t_System_set__err(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setErr(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "err", arg);
      return -1;
    }

    static int t_System_set__in(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::InputStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
        {
          INT_CALL(self->object.setIn(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "in", arg);
      return -1;
    }

    static int t_System_set__out(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setOut(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "out", arg);
      return -1;
    }

    static PyObject *t_System_get__properties(t_System *self, void *data)
    {
      ::java::util::Properties value((jobject) NULL);
      OBJ_CALL(value = self->object.getProperties());
      return ::java::util::t_Properties::wrap_Object(value);
    }
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Properties value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Properties::initializeClass, &value))
        {
          INT_CALL(self->object.setProperties(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "properties", arg);
      return -1;
    }

    static PyObject *t_System_get__securityManager(t_System *self, void *data)
    {
      ::java::lang::SecurityManager value((jobject) NULL);
      OBJ_CALL(value = self->object.getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(value);
    }
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::SecurityManager value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &value))
        {
          INT_CALL(self->object.setSecurityManager(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "securityManager", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeTermsEnum::class$ = NULL;
          jmethodID *SlowCollatedTermRangeTermsEnum::mids$ = NULL;
          bool SlowCollatedTermRangeTermsEnum::live$ = false;

          jclass SlowCollatedTermRangeTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b77b0cda] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeTermsEnum::SlowCollatedTermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b77b0cda, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowCollatedTermRangeTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowCollatedTermRangeTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeTermsEnum), module, "SlowCollatedTermRangeTermsEnum", 0);
          }

          void t_SlowCollatedTermRangeTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeTermsEnum::wrap_Object(SlowCollatedTermRangeTermsEnum(((t_SlowCollatedTermRangeTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kssZZk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeTermsEnum(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_return::mids$ = NULL;
          bool JavascriptParser$unary_return::live$ = false;

          jclass JavascriptParser$unary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_return::JavascriptParser$unary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_return, t_JavascriptParser$unary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_return, t_JavascriptParser$unary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_return), module, "JavascriptParser$unary_return", 0);
          }

          void t_JavascriptParser$unary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_return::wrap_Object(JavascriptParser$unary_return(((t_JavascriptParser$unary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_return_init_(t_JavascriptParser$unary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizerFactory::class$ = NULL;
          jmethodID *ThaiTokenizerFactory::mids$ = NULL;
          bool ThaiTokenizerFactory::live$ = false;

          jclass ThaiTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizerFactory::ThaiTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer ThaiTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ThaiTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizerFactory, t_ThaiTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ThaiTokenizerFactory, t_ThaiTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizerFactory), module, "ThaiTokenizerFactory", 0);
          }

          void t_ThaiTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "class_", make_descriptor(ThaiTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizerFactory::wrap_Object(ThaiTokenizerFactory(((t_ThaiTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BoostQueryNodeBuilder::class$ = NULL;
              jmethodID *BoostQueryNodeBuilder::mids$ = NULL;
              bool BoostQueryNodeBuilder::live$ = false;

              jclass BoostQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeBuilder::BoostQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query BoostQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BoostQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeBuilder, t_BoostQueryNodeBuilder, ::java::lang::Object, BoostQueryNodeBuilder, t_BoostQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeBuilder), module, "BoostQueryNodeBuilder", 0);
              }

              void t_BoostQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "class_", make_descriptor(BoostQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeBuilder::wrap_Object(BoostQueryNodeBuilder(((t_BoostQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::live$ = false;

          jclass SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, size),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, getSize, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_, 0, 0, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(const SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), module, "SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", 0);
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(((t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$IntRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$IntRangeBuilder::mids$ = NULL;
        bool NumericUtils$IntRangeBuilder::live$ = false;

        jclass NumericUtils$IntRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$IntRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_d3236aa4] = env->getMethodID(cls, "addRange", "(III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$IntRangeBuilder::NumericUtils$IntRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$IntRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$IntRangeBuilder::addRange(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_d3236aa4], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$IntRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder, ::java::lang::Object, NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$IntRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$IntRangeBuilder), module, "NumericUtils$IntRangeBuilder", 0);
        }

        void t_NumericUtils$IntRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$IntRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$IntRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$IntRangeBuilder::wrap_Object(NumericUtils$IntRangeBuilder(((t_NumericUtils$IntRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$IntRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$IntRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionQuery::class$ = NULL;
          jmethodID *FunctionQuery::mids$ = NULL;
          bool FunctionQuery::live$ = false;

          jclass FunctionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionQuery::FunctionQuery(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

          ::org::apache::lucene::search::Weight FunctionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FunctionQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FunctionQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::queries::function::ValueSource FunctionQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint FunctionQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FunctionQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FunctionQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self);
          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data);
          static PyGetSetDef t_FunctionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionQuery, t_FunctionQuery, ::org::apache::lucene::search::Query, FunctionQuery, t_FunctionQuery_init_, 0, 0, t_FunctionQuery__fields_, 0, 0);

          void t_FunctionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionQuery), module, "FunctionQuery", 0);
          }

          void t_FunctionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "class_", make_descriptor(FunctionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "wrapfn_", make_descriptor(t_FunctionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionQuery::wrap_Object(FunctionQuery(((t_FunctionQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
            FunctionQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
            {
              INT_CALL(object = FunctionQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector::live$ = false;

            jclass FunctionAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_0f36bb74] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
                mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
                mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupHeadsCollector::FunctionAllGroupHeadsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2) : ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->newObject(initializeClass, &mids$, mid_init$_0f36bb74, a0.this$, a1.this$, a2.this$)) {}

            void FunctionAllGroupHeadsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }

            void FunctionAllGroupHeadsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args);
            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, nextReader),
              DECLARE_SET_FIELD(t_FunctionAllGroupHeadsCollector, scorer),
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setNextReader, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector, setScorer, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, FunctionAllGroupHeadsCollector, t_FunctionAllGroupHeadsCollector_init_, 0, 0, t_FunctionAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector::wrap_Object(const FunctionAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector *self = (t_FunctionAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector), module, "FunctionAllGroupHeadsCollector", 0);
            }

            void t_FunctionAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector::wrap_Object(FunctionAllGroupHeadsCollector(((t_FunctionAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_of_(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupHeadsCollector_init_(t_FunctionAllGroupHeadsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              FunctionAllGroupHeadsCollector object((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                INT_CALL(object = FunctionAllGroupHeadsCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setNextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setNextReader", args, 2);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector_setScorer(t_FunctionAllGroupHeadsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setScorer(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupHeadsCollector), (PyObject *) self, "setScorer", args, 2);
            }
            static PyObject *t_FunctionAllGroupHeadsCollector_get__parameters_(t_FunctionAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionAllGroupHeadsCollector_set__nextReader(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }

            static int t_FunctionAllGroupHeadsCollector_set__scorer(t_FunctionAllGroupHeadsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::Scorer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
                {
                  INT_CALL(self->object.setScorer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "scorer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianAnalyzer::class$ = NULL;
          jmethodID *BulgarianAnalyzer::mids$ = NULL;
          bool BulgarianAnalyzer::live$ = false;
          ::java::lang::String *BulgarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BulgarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents BulgarianAnalyzer::createComponents(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_1be39cae], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet BulgarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args);
          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data);
          static PyGetSetDef t_BulgarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BulgarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BulgarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BulgarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, createComponents, METH_VARARGS),
            DECLARE_METHOD(t_BulgarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianAnalyzer, t_BulgarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BulgarianAnalyzer, t_BulgarianAnalyzer_init_, 0, 0, t_BulgarianAnalyzer__fields_, 0, 0);

          void t_BulgarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianAnalyzer), module, "BulgarianAnalyzer", 0);
          }

          void t_BulgarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "class_", make_descriptor(BulgarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BulgarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BulgarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BulgarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BulgarianAnalyzer::wrap_Object(BulgarianAnalyzer(((t_BulgarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createComponents(a0, a1));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", args);
            return NULL;
          }

          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::bg::BulgarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery$TooManyClauses::class$ = NULL;
        jmethodID *BooleanQuery$TooManyClauses::mids$ = NULL;
        bool BooleanQuery$TooManyClauses::live$ = false;

        jclass BooleanQuery$TooManyClauses::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery$TooManyClauses");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery$TooManyClauses::BooleanQuery$TooManyClauses() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BooleanQuery$TooManyClauses__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses, ::java::lang::RuntimeException, BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses_init_, 0, 0, 0, 0, 0);

        void t_BooleanQuery$TooManyClauses::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery$TooManyClauses), module, "BooleanQuery$TooManyClauses", 0);
        }

        void t_BooleanQuery$TooManyClauses::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "class_", make_descriptor(BooleanQuery$TooManyClauses::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery$TooManyClauses::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery$TooManyClauses).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery$TooManyClauses::wrap_Object(BooleanQuery$TooManyClauses(((t_BooleanQuery$TooManyClauses *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds)
        {
          BooleanQuery$TooManyClauses object((jobject) NULL);

          INT_CALL(object = BooleanQuery$TooManyClauses());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldableNode::class$ = NULL;
              jmethodID *FieldableNode::mids$ = NULL;
              bool FieldableNode::live$ = false;

              jclass FieldableNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence FieldableNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void FieldableNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_getField(t_FieldableNode *self);
              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg);
              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data);
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldableNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldableNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldableNode__methods_[] = {
                DECLARE_METHOD(t_FieldableNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldableNode, setField, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldableNode, t_FieldableNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, FieldableNode, abstract_init, 0, 0, t_FieldableNode__fields_, 0, 0);

              void t_FieldableNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldableNode), module, "FieldableNode", 0);
              }

              void t_FieldableNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "class_", make_descriptor(FieldableNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "wrapfn_", make_descriptor(t_FieldableNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldableNode::initializeClass, 1)))
                  return NULL;
                return t_FieldableNode::wrap_Object(FieldableNode(((t_FieldableNode *) arg)->object.this$));
              }
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldableNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldableNode_getField(t_FieldableNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig$DimConfig::class$ = NULL;
        jmethodID *FacetsConfig$DimConfig::mids$ = NULL;
        jfieldID *FacetsConfig$DimConfig::fids$ = NULL;
        bool FacetsConfig$DimConfig::live$ = false;

        jclass FacetsConfig$DimConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig$DimConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_hierarchical] = env->getFieldID(cls, "hierarchical", "Z");
            fids$[fid_indexFieldName] = env->getFieldID(cls, "indexFieldName", "Ljava/lang/String;");
            fids$[fid_multiValued] = env->getFieldID(cls, "multiValued", "Z");
            fids$[fid_requireDimCount] = env->getFieldID(cls, "requireDimCount", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig$DimConfig::FacetsConfig$DimConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FacetsConfig$DimConfig::_get_hierarchical() const
        {
          return env->getBooleanField(this$, fids$[fid_hierarchical]);
        }

        void FacetsConfig$DimConfig::_set_hierarchical(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hierarchical], a0);
        }

        ::java::lang::String FacetsConfig$DimConfig::_get_indexFieldName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_indexFieldName]));
        }

        void FacetsConfig$DimConfig::_set_indexFieldName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_indexFieldName], a0.this$);
        }

        jboolean FacetsConfig$DimConfig::_get_multiValued() const
        {
          return env->getBooleanField(this$, fids$[fid_multiValued]);
        }

        void FacetsConfig$DimConfig::_set_multiValued(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_multiValued], a0);
        }

        jboolean FacetsConfig$DimConfig::_get_requireDimCount() const
        {
          return env->getBooleanField(this$, fids$[fid_requireDimCount]);
        }

        void FacetsConfig$DimConfig::_set_requireDimCount(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_requireDimCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);

        static PyGetSetDef t_FacetsConfig$DimConfig__fields_[] = {
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, hierarchical),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, indexFieldName),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, multiValued),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, requireDimCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig$DimConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig$DimConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DimConfig, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig$DimConfig, t_FacetsConfig$DimConfig, ::java::lang::Object, FacetsConfig$DimConfig, t_FacetsConfig$DimConfig_init_, 0, 0, t_FacetsConfig$DimConfig__fields_, 0, 0);

        void t_FacetsConfig$DimConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig$DimConfig), module, "FacetsConfig$DimConfig", 0);
        }

        void t_FacetsConfig$DimConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "class_", make_descriptor(FacetsConfig$DimConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig$DimConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig$DimConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig$DimConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig$DimConfig::wrap_Object(FacetsConfig$DimConfig(((t_FacetsConfig$DimConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig$DimConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig$DimConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig$DimConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hierarchical());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hierarchical(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hierarchical", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_indexFieldName());
          return j2p(value);
        }
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_indexFieldName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "indexFieldName", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_multiValued());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_multiValued(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "multiValued", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_requireDimCount());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_requireDimCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "requireDimCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilter::class$ = NULL;
          jmethodID *TrimFilter::mids$ = NULL;
          bool TrimFilter::live$ = false;

          jclass TrimFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_db34a9b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          TrimFilter::TrimFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_db34a9b2, a0.this$, a1.this$, a2)) {}

          jboolean TrimFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args);

          static PyMethodDef t_TrimFilter__methods_[] = {
            DECLARE_METHOD(t_TrimFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilter, t_TrimFilter, ::org::apache::lucene::analysis::TokenFilter, TrimFilter, t_TrimFilter_init_, 0, 0, 0, 0, 0);

          void t_TrimFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilter), module, "TrimFilter", 0);
          }

          void t_TrimFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "class_", make_descriptor(TrimFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "wrapfn_", make_descriptor(t_TrimFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilter::initializeClass, 1)))
              return NULL;
            return t_TrimFilter::wrap_Object(TrimFilter(((t_TrimFilter *) arg)->object.this$));
          }
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = TrimFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jboolean a2;
                TrimFilter object((jobject) NULL);

                if (!parseArgs(args, "KkZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = TrimFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TrimFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *CharStream::class$ = NULL;
              jmethodID *CharStream::mids$ = NULL;
              bool CharStream::live$ = false;

              jclass CharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/CharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              jchar CharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void CharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String CharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > CharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void CharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint CharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint CharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint CharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint CharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint CharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint CharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar CharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_BeginToken(t_CharStream *self);
              static PyObject *t_CharStream_Done(t_CharStream *self);
              static PyObject *t_CharStream_GetImage(t_CharStream *self);
              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
              static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
              static PyObject *t_CharStream_getColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndLine(t_CharStream *self);
              static PyObject *t_CharStream_getLine(t_CharStream *self);
              static PyObject *t_CharStream_readChar(t_CharStream *self);
              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
              static PyGetSetDef t_CharStream__fields_[] = {
                DECLARE_GET_FIELD(t_CharStream, beginColumn),
                DECLARE_GET_FIELD(t_CharStream, beginLine),
                DECLARE_GET_FIELD(t_CharStream, column),
                DECLARE_GET_FIELD(t_CharStream, endColumn),
                DECLARE_GET_FIELD(t_CharStream, endLine),
                DECLARE_GET_FIELD(t_CharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_CharStream__methods_[] = {
                DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_CharStream, backup, METH_O),
                DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

              void t_CharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(CharStream), module, "CharStream", 0);
              }

              void t_CharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                  return NULL;
                return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
              }
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, CharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_CharStream_BeginToken(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_Done(t_CharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_CharStream_GetImage(t_CharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_readChar(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonFilteringTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonFilteringTokenFilter::class$ = NULL;
        jmethodID *PythonFilteringTokenFilter::mids$ = NULL;
        bool PythonFilteringTokenFilter::live$ = false;

        jclass PythonFilteringTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonFilteringTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilteringTokenFilter::PythonFilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

        void PythonFilteringTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilteringTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilteringTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self);
        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data);
        static PyGetSetDef t_PythonFilteringTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilteringTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilteringTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilteringTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilteringTokenFilter, t_PythonFilteringTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, PythonFilteringTokenFilter, t_PythonFilteringTokenFilter_init_, 0, 0, t_PythonFilteringTokenFilter__fields_, 0, 0);

        void t_PythonFilteringTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilteringTokenFilter), module, "PythonFilteringTokenFilter", 1);
        }

        void t_PythonFilteringTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "class_", make_descriptor(PythonFilteringTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilteringTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilteringTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "accept", "()Z", (void *) t_PythonFilteringTokenFilter_accept0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilteringTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilteringTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilteringTokenFilter::wrap_Object(PythonFilteringTokenFilter(((t_PythonFilteringTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilteringTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          PythonFilteringTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = PythonFilteringTokenFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "accept", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("accept", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *AbstractRangeQueryNode::class$ = NULL;
              jmethodID *AbstractRangeQueryNode::mids$ = NULL;
              bool AbstractRangeQueryNode::live$ = false;

              jclass AbstractRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");
                  mids$[mid_setBounds_b72fdc1c] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;ZZ)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean AbstractRangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean AbstractRangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }

              void AbstractRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a1, jboolean a2, jboolean a3) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b72fdc1c], a0.this$, a1.this$, a2, a3);
              }

              void AbstractRangeQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AbstractRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data);
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data);
              static PyGetSetDef t_AbstractRangeQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AbstractRangeQueryNode, field),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AbstractRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_AbstractRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isUpperInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractRangeQueryNode, t_AbstractRangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, AbstractRangeQueryNode, abstract_init, 0, 0, t_AbstractRangeQueryNode__fields_, 0, 0);
              PyObject *t_AbstractRangeQueryNode::wrap_Object(const AbstractRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_AbstractRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_AbstractRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractRangeQueryNode), module, "AbstractRangeQueryNode", 0);
              }

              void t_AbstractRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "class_", make_descriptor(AbstractRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AbstractRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AbstractRangeQueryNode::wrap_Object(AbstractRangeQueryNode(((t_AbstractRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;

                if (!parseArgs(args, "KKZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a2, &a3))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBounds", args);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilter::class$ = NULL;
          jmethodID *ElisionFilter::mids$ = NULL;
          bool ElisionFilter::live$ = false;

          jclass ElisionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilter::ElisionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          jboolean ElisionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args);

          static PyMethodDef t_ElisionFilter__methods_[] = {
            DECLARE_METHOD(t_ElisionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilter, t_ElisionFilter, ::org::apache::lucene::analysis::TokenFilter, ElisionFilter, t_ElisionFilter_init_, 0, 0, 0, 0, 0);

          void t_ElisionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilter), module, "ElisionFilter", 0);
          }

          void t_ElisionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "class_", make_descriptor(ElisionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilter::initializeClass, 1)))
              return NULL;
            return t_ElisionFilter::wrap_Object(ElisionFilter(((t_ElisionFilter *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            ElisionFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = ElisionFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ElisionFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserConstants::class$ = NULL;
              jmethodID *StandardSyntaxParserConstants::mids$ = NULL;
              bool StandardSyntaxParserConstants::live$ = false;
              jint StandardSyntaxParserConstants::AND = (jint) 0;
              jint StandardSyntaxParserConstants::Boost = (jint) 0;
              jint StandardSyntaxParserConstants::CARAT = (jint) 0;
              jint StandardSyntaxParserConstants::DEFAULT = (jint) 0;
              jint StandardSyntaxParserConstants::EOF = (jint) 0;
              jint StandardSyntaxParserConstants::FUZZY_SLOP = (jint) 0;
              jint StandardSyntaxParserConstants::LPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::MINUS = (jint) 0;
              jint StandardSyntaxParserConstants::NOT = (jint) 0;
              jint StandardSyntaxParserConstants::NUMBER = (jint) 0;
              jint StandardSyntaxParserConstants::OP_COLON = (jint) 0;
              jint StandardSyntaxParserConstants::OP_EQUAL = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OR = (jint) 0;
              jint StandardSyntaxParserConstants::PLUS = (jint) 0;
              jint StandardSyntaxParserConstants::QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_GOOP = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_TO = (jint) 0;
              jint StandardSyntaxParserConstants::REGEXPTERM = (jint) 0;
              jint StandardSyntaxParserConstants::RPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::Range = (jint) 0;
              jint StandardSyntaxParserConstants::TERM = (jint) 0;
              jint StandardSyntaxParserConstants::_ESCAPED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_NUM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_QUOTED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_START_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_WHITESPACE = (jint) 0;
              JArray< ::java::lang::String > *StandardSyntaxParserConstants::tokenImage = NULL;

              jclass StandardSyntaxParserConstants::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = env->getStaticIntField(cls, "AND");
                  Boost = env->getStaticIntField(cls, "Boost");
                  CARAT = env->getStaticIntField(cls, "CARAT");
                  DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                  EOF = env->getStaticIntField(cls, "EOF");
                  FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
                  LPAREN = env->getStaticIntField(cls, "LPAREN");
                  MINUS = env->getStaticIntField(cls, "MINUS");
                  NOT = env->getStaticIntField(cls, "NOT");
                  NUMBER = env->getStaticIntField(cls, "NUMBER");
                  OP_COLON = env->getStaticIntField(cls, "OP_COLON");
                  OP_EQUAL = env->getStaticIntField(cls, "OP_EQUAL");
                  OP_LESSTHAN = env->getStaticIntField(cls, "OP_LESSTHAN");
                  OP_LESSTHANEQ = env->getStaticIntField(cls, "OP_LESSTHANEQ");
                  OP_MORETHAN = env->getStaticIntField(cls, "OP_MORETHAN");
                  OP_MORETHANEQ = env->getStaticIntField(cls, "OP_MORETHANEQ");
                  OR = env->getStaticIntField(cls, "OR");
                  PLUS = env->getStaticIntField(cls, "PLUS");
                  QUOTED = env->getStaticIntField(cls, "QUOTED");
                  RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
                  RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
                  RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
                  RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
                  RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
                  RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
                  RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
                  REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
                  RPAREN = env->getStaticIntField(cls, "RPAREN");
                  Range = env->getStaticIntField(cls, "Range");
                  TERM = env->getStaticIntField(cls, "TERM");
                  _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
                  _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                  _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
                  _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                  _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
                  _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                  tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_StandardSyntaxParserConstants__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserConstants, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserConstants, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserConstants, t_StandardSyntaxParserConstants, ::java::lang::Object, StandardSyntaxParserConstants, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardSyntaxParserConstants::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserConstants), module, "StandardSyntaxParserConstants", 0);
              }

              void t_StandardSyntaxParserConstants::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "class_", make_descriptor(StandardSyntaxParserConstants::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserConstants::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserConstants::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "AND", make_descriptor(StandardSyntaxParserConstants::AND));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Boost", make_descriptor(StandardSyntaxParserConstants::Boost));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "CARAT", make_descriptor(StandardSyntaxParserConstants::CARAT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "DEFAULT", make_descriptor(StandardSyntaxParserConstants::DEFAULT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "EOF", make_descriptor(StandardSyntaxParserConstants::EOF));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(StandardSyntaxParserConstants::FUZZY_SLOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "LPAREN", make_descriptor(StandardSyntaxParserConstants::LPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "MINUS", make_descriptor(StandardSyntaxParserConstants::MINUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NOT", make_descriptor(StandardSyntaxParserConstants::NOT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NUMBER", make_descriptor(StandardSyntaxParserConstants::NUMBER));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_COLON", make_descriptor(StandardSyntaxParserConstants::OP_COLON));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_EQUAL", make_descriptor(StandardSyntaxParserConstants::OP_EQUAL));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHAN", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHAN", make_descriptor(StandardSyntaxParserConstants::OP_MORETHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_MORETHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OR", make_descriptor(StandardSyntaxParserConstants::OR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "PLUS", make_descriptor(StandardSyntaxParserConstants::PLUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "QUOTED", make_descriptor(StandardSyntaxParserConstants::QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_END", make_descriptor(StandardSyntaxParserConstants::RANGEEX_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_START", make_descriptor(StandardSyntaxParserConstants::RANGEEX_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_END", make_descriptor(StandardSyntaxParserConstants::RANGEIN_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_START", make_descriptor(StandardSyntaxParserConstants::RANGEIN_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(StandardSyntaxParserConstants::RANGE_GOOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(StandardSyntaxParserConstants::RANGE_QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_TO", make_descriptor(StandardSyntaxParserConstants::RANGE_TO));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "REGEXPTERM", make_descriptor(StandardSyntaxParserConstants::REGEXPTERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RPAREN", make_descriptor(StandardSyntaxParserConstants::RPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Range", make_descriptor(StandardSyntaxParserConstants::Range));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "TERM", make_descriptor(StandardSyntaxParserConstants::TERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(StandardSyntaxParserConstants::_ESCAPED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(StandardSyntaxParserConstants::_NUM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(StandardSyntaxParserConstants::_QUOTED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_START_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_WHITESPACE", make_descriptor(StandardSyntaxParserConstants::_WHITESPACE));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(StandardSyntaxParserConstants::tokenImage->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserConstants::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserConstants::wrap_Object(StandardSyntaxParserConstants(((t_StandardSyntaxParserConstants *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserConstants::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilter::class$ = NULL;
          jmethodID *PorterStemFilter::mids$ = NULL;
          bool PorterStemFilter::live$ = false;

          jclass PorterStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilter::PorterStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PorterStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args);

          static PyMethodDef t_PorterStemFilter__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilter, t_PorterStemFilter, ::org::apache::lucene::analysis::TokenFilter, PorterStemFilter, t_PorterStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilter), module, "PorterStemFilter", 0);
          }

          void t_PorterStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "class_", make_descriptor(PorterStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilter::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilter::wrap_Object(PorterStemFilter(((t_PorterStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PorterStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PorterStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/BasicAutomata.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *BasicAutomata::class$ = NULL;
          jmethodID *BasicAutomata::mids$ = NULL;
          bool BasicAutomata::live$ = false;

          jclass BasicAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/BasicAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeAnyChar_9b0d5999] = env->getStaticMethodID(cls, "makeAnyChar", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeAnyString_9b0d5999] = env->getStaticMethodID(cls, "makeAnyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeChar_d5b8a843] = env->getStaticMethodID(cls, "makeChar", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeCharRange_42dcb2dd] = env->getStaticMethodID(cls, "makeCharRange", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmpty_9b0d5999] = env->getStaticMethodID(cls, "makeEmpty", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmptyString_9b0d5999] = env->getStaticMethodID(cls, "makeEmptyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeInterval_86ba9f2f] = env->getStaticMethodID(cls, "makeInterval", "(III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_af13056f] = env->getStaticMethodID(cls, "makeString", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_1c95d487] = env->getStaticMethodID(cls, "makeString", "([III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeStringUnion_40d33194] = env->getStaticMethodID(cls, "makeStringUnion", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeAnyChar()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyChar_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeAnyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeChar(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeChar_d5b8a843], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeCharRange(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeCharRange_42dcb2dd], a0, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeEmpty()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmpty_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeEmptyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmptyString_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeInterval(jint a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeInterval_86ba9f2f], a0, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeString(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_af13056f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeString(const JArray< jint > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_1c95d487], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicAutomata::makeStringUnion(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeStringUnion_40d33194], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_BasicAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_makeAnyChar(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeAnyString(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeChar(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicAutomata_makeCharRange(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeEmpty(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeEmptyString(PyTypeObject *type);
          static PyObject *t_BasicAutomata_makeInterval(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeString(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicAutomata_makeStringUnion(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_BasicAutomata__methods_[] = {
            DECLARE_METHOD(t_BasicAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeAnyChar, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeAnyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeChar, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeCharRange, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeEmpty, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeEmptyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeInterval, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeString, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicAutomata, makeStringUnion, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicAutomata, t_BasicAutomata, ::java::lang::Object, BasicAutomata, abstract_init, 0, 0, 0, 0, 0);

          void t_BasicAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicAutomata), module, "BasicAutomata", 0);
          }

          void t_BasicAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "class_", make_descriptor(BasicAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "wrapfn_", make_descriptor(t_BasicAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicAutomata::initializeClass, 1)))
              return NULL;
            return t_BasicAutomata::wrap_Object(BasicAutomata(((t_BasicAutomata *) arg)->object.this$));
          }
          static PyObject *t_BasicAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BasicAutomata_makeAnyChar(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeAnyChar());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeAnyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeAnyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeChar(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeChar(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeChar", arg);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeCharRange(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeCharRange(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeCharRange", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeEmpty(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeEmpty());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeEmptyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeEmptyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_BasicAutomata_makeInterval(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeInterval(a0, a1, a2));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeInterval", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeString(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeString(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeString(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeString", args);
            return NULL;
          }

          static PyObject *t_BasicAutomata_makeStringUnion(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicAutomata::makeStringUnion(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeStringUnion", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TieredMergePolicy::class$ = NULL;
        jmethodID *TieredMergePolicy::mids$ = NULL;
        bool TieredMergePolicy::live$ = false;
        jdouble TieredMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;

        jclass TieredMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TieredMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getFloorSegmentMB_54c6a174] = env->getMethodID(cls, "getFloorSegmentMB", "()D");
            mids$[mid_getForceMergeDeletesPctAllowed_54c6a174] = env->getMethodID(cls, "getForceMergeDeletesPctAllowed", "()D");
            mids$[mid_getMaxMergeAtOnce_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnce", "()I");
            mids$[mid_getMaxMergeAtOnceExplicit_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnceExplicit", "()I");
            mids$[mid_getMaxMergedSegmentMB_54c6a174] = env->getMethodID(cls, "getMaxMergedSegmentMB", "()D");
            mids$[mid_getReclaimDeletesWeight_54c6a174] = env->getMethodID(cls, "getReclaimDeletesWeight", "()D");
            mids$[mid_getSegmentsPerTier_54c6a174] = env->getMethodID(cls, "getSegmentsPerTier", "()D");
            mids$[mid_setFloorSegmentMB_e09c6d07] = env->getMethodID(cls, "setFloorSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07] = env->getMethodID(cls, "setForceMergeDeletesPctAllowed", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnce_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnce", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnceExplicit", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergedSegmentMB_e09c6d07] = env->getMethodID(cls, "setMaxMergedSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setReclaimDeletesWeight_e09c6d07] = env->getMethodID(cls, "setReclaimDeletesWeight", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setSegmentsPerTier_e09c6d07] = env->getMethodID(cls, "setSegmentsPerTier", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_score_178499e5] = env->getMethodID(cls, "score", "(Ljava/util/List;ZJLorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/TieredMergePolicy$MergeScore;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TieredMergePolicy::TieredMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TieredMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble TieredMergePolicy::getFloorSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getFloorSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getForceMergeDeletesPctAllowed() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getForceMergeDeletesPctAllowed_54c6a174]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnce() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnce_54c6a179]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnceExplicit() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnceExplicit_54c6a179]);
        }

        jdouble TieredMergePolicy::getMaxMergedSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergedSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getReclaimDeletesWeight() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getReclaimDeletesWeight_54c6a174]);
        }

        jdouble TieredMergePolicy::getSegmentsPerTier() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSegmentsPerTier_54c6a174]);
        }

        TieredMergePolicy TieredMergePolicy::setFloorSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setFloorSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setForceMergeDeletesPctAllowed(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnce(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnce_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnceExplicit(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergedSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergedSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setReclaimDeletesWeight(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setReclaimDeletesWeight_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setSegmentsPerTier(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setSegmentsPerTier_e09c6d07], a0));
        }

        ::java::lang::String TieredMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TieredMergePolicy_close(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_TieredMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, floorSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, forceMergeDeletesPctAllowed),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnce),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnceExplicit),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergedSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, reclaimDeletesWeight),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, segmentsPerTier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TieredMergePolicy__methods_[] = {
          DECLARE_METHOD(t_TieredMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getFloorSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getForceMergeDeletesPctAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnce, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnceExplicit, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergedSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getReclaimDeletesWeight, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getSegmentsPerTier, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, setFloorSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setForceMergeDeletesPctAllowed, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnce, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnceExplicit, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergedSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setReclaimDeletesWeight, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setSegmentsPerTier, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TieredMergePolicy, t_TieredMergePolicy, ::org::apache::lucene::index::MergePolicy, TieredMergePolicy, t_TieredMergePolicy_init_, 0, 0, t_TieredMergePolicy__fields_, 0, 0);

        void t_TieredMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(TieredMergePolicy), module, "TieredMergePolicy", 0);
        }

        void t_TieredMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "class_", make_descriptor(TieredMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_TieredMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TieredMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(TieredMergePolicy::DEFAULT_NO_CFS_RATIO));
        }

        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TieredMergePolicy::initializeClass, 1)))
            return NULL;
          return t_TieredMergePolicy::wrap_Object(TieredMergePolicy(((t_TieredMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TieredMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          TieredMergePolicy object((jobject) NULL);

          INT_CALL(object = TieredMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_TieredMergePolicy_close(t_TieredMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setFloorSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloorSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setForceMergeDeletesPctAllowed(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setForceMergeDeletesPctAllowed", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnce(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnce", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnceExplicit(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnceExplicit", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergedSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergedSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setReclaimDeletesWeight(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReclaimDeletesWeight", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setSegmentsPerTier(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSegmentsPerTier", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setFloorSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floorSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setForceMergeDeletesPctAllowed(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletesPctAllowed", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnce(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnce", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnceExplicit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnceExplicit", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergedSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergedSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setReclaimDeletesWeight(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reclaimDeletesWeight", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setSegmentsPerTier(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsPerTier", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemmer::class$ = NULL;
          jmethodID *ArabicStemmer::mids$ = NULL;
          bool ArabicStemmer::live$ = false;
          jchar ArabicStemmer::ALEF = (jchar) 0;
          jchar ArabicStemmer::BEH = (jchar) 0;
          jchar ArabicStemmer::FEH = (jchar) 0;
          jchar ArabicStemmer::HEH = (jchar) 0;
          jchar ArabicStemmer::KAF = (jchar) 0;
          jchar ArabicStemmer::LAM = (jchar) 0;
          jchar ArabicStemmer::NOON = (jchar) 0;
          jchar ArabicStemmer::TEH = (jchar) 0;
          jchar ArabicStemmer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicStemmer::WAW = (jchar) 0;
          jchar ArabicStemmer::YEH = (jchar) 0;
          JArray< JArray< jchar > > *ArabicStemmer::prefixes = NULL;
          JArray< JArray< jchar > > *ArabicStemmer::suffixes = NULL;

          jclass ArabicStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");
              mids$[mid_stemPrefix_ec6430eb] = env->getMethodID(cls, "stemPrefix", "([CI)I");
              mids$[mid_stemSuffix_ec6430eb] = env->getMethodID(cls, "stemSuffix", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              BEH = env->getStaticCharField(cls, "BEH");
              FEH = env->getStaticCharField(cls, "FEH");
              HEH = env->getStaticCharField(cls, "HEH");
              KAF = env->getStaticCharField(cls, "KAF");
              LAM = env->getStaticCharField(cls, "LAM");
              NOON = env->getStaticCharField(cls, "NOON");
              TEH = env->getStaticCharField(cls, "TEH");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              WAW = env->getStaticCharField(cls, "WAW");
              YEH = env->getStaticCharField(cls, "YEH");
              prefixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "prefixes", "[[C"));
              suffixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "suffixes", "[[C"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemmer::ArabicStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemPrefix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemPrefix_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemSuffix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemSuffix_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args);

          static PyMethodDef t_ArabicStemmer__methods_[] = {
            DECLARE_METHOD(t_ArabicStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, stem, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemPrefix, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemSuffix, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemmer, t_ArabicStemmer, ::java::lang::Object, ArabicStemmer, t_ArabicStemmer_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemmer), module, "ArabicStemmer", 0);
          }

          void t_ArabicStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "class_", make_descriptor(ArabicStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "ALEF", make_descriptor(ArabicStemmer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "BEH", make_descriptor(ArabicStemmer::BEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "FEH", make_descriptor(ArabicStemmer::FEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "HEH", make_descriptor(ArabicStemmer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "KAF", make_descriptor(ArabicStemmer::KAF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "LAM", make_descriptor(ArabicStemmer::LAM));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "NOON", make_descriptor(ArabicStemmer::NOON));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH", make_descriptor(ArabicStemmer::TEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicStemmer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "WAW", make_descriptor(ArabicStemmer::WAW));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "YEH", make_descriptor(ArabicStemmer::YEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "prefixes", make_descriptor(JArray<jobject>(ArabicStemmer::prefixes->this$).wrap(NULL)));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "suffixes", make_descriptor(JArray<jobject>(ArabicStemmer::suffixes->this$).wrap(NULL)));
          }

          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemmer::initializeClass, 1)))
              return NULL;
            return t_ArabicStemmer::wrap_Object(ArabicStemmer(((t_ArabicStemmer *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds)
          {
            ArabicStemmer object((jobject) NULL);

            INT_CALL(object = ArabicStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemPrefix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemPrefix", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemSuffix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemSuffix", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsWriter::class$ = NULL;
          jmethodID *Lucene41PostingsWriter::mids$ = NULL;
          bool Lucene41PostingsWriter::live$ = false;

          jclass Lucene41PostingsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3be9bed9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_init$_a7564e76] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;F)V");
              mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
              mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
              mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
              mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
              mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");
              mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_3be9bed9, a0.this$)) {}

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, jfloat a1) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_a7564e76, a0.this$, a1)) {}

          void Lucene41PostingsWriter::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
          }

          void Lucene41PostingsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsWriter::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          void Lucene41PostingsWriter::finishDoc() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
          }

          void Lucene41PostingsWriter::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
          }

          void Lucene41PostingsWriter::init(const ::org::apache::lucene::store::IndexOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
          }

          jint Lucene41PostingsWriter::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
          }

          void Lucene41PostingsWriter::startDoc(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
          }

          void Lucene41PostingsWriter::startTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Lucene41PostingsWriter__fields_[] = {
            DECLARE_SET_FIELD(t_Lucene41PostingsWriter, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene41PostingsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, encodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, setField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsWriter, t_Lucene41PostingsWriter, ::org::apache::lucene::codecs::PostingsWriterBase, Lucene41PostingsWriter, t_Lucene41PostingsWriter_init_, 0, 0, t_Lucene41PostingsWriter__fields_, 0, 0);

          void t_Lucene41PostingsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsWriter), module, "Lucene41PostingsWriter", 0);
          }

          void t_Lucene41PostingsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "class_", make_descriptor(Lucene41PostingsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsWriter::wrap_Object(Lucene41PostingsWriter(((t_Lucene41PostingsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                jfloat a1;
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "encodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDoc());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.finishTerm(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setField(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "setField", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.startDoc(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
              {
                INT_CALL(self->object.setField(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "field", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Bindings::class$ = NULL;
        jmethodID *Bindings::mids$ = NULL;
        bool Bindings::live$ = false;

        jclass Bindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Bindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_getScoreValueSource_b62b6193] = env->getMethodID(cls, "getScoreValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::queries::function::ValueSource Bindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg);

        static PyMethodDef t_Bindings__methods_[] = {
          DECLARE_METHOD(t_Bindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bindings, t_Bindings, ::java::lang::Object, Bindings, abstract_init, 0, 0, 0, 0, 0);

        void t_Bindings::install(PyObject *module)
        {
          installType(&PY_TYPE(Bindings), module, "Bindings", 0);
        }

        void t_Bindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "class_", make_descriptor(Bindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "wrapfn_", make_descriptor(t_Bindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bindings::initializeClass, 1)))
            return NULL;
          return t_Bindings::wrap_Object(Bindings(((t_Bindings *) arg)->object.this$));
        }
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogDocMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogDocMergePolicy::class$ = NULL;
        jmethodID *LogDocMergePolicy::mids$ = NULL;
        bool LogDocMergePolicy::live$ = false;
        jint LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS = (jint) 0;

        jclass LogDocMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogDocMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMinMergeDocs_54c6a179] = env->getMethodID(cls, "getMinMergeDocs", "()I");
            mids$[mid_setMinMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMinMergeDocs", "(I)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MIN_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MIN_MERGE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogDocMergePolicy::LogDocMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint LogDocMergePolicy::getMinMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinMergeDocs_54c6a179]);
        }

        void LogDocMergePolicy::setMinMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeDocs_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self);
        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data);
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogDocMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogDocMergePolicy, minMergeDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogDocMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogDocMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, getMinMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogDocMergePolicy, setMinMergeDocs, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogDocMergePolicy, t_LogDocMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogDocMergePolicy, t_LogDocMergePolicy_init_, 0, 0, t_LogDocMergePolicy__fields_, 0, 0);

        void t_LogDocMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogDocMergePolicy), module, "LogDocMergePolicy", 0);
        }

        void t_LogDocMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "class_", make_descriptor(LogDocMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogDocMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogDocMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_DOCS", make_descriptor(LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS));
        }

        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogDocMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogDocMergePolicy::wrap_Object(LogDocMergePolicy(((t_LogDocMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogDocMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogDocMergePolicy object((jobject) NULL);

          INT_CALL(object = LogDocMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeDocs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector$GroupCount::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector$GroupCount::mids$ = NULL;
          jfieldID *AbstractDistinctValuesCollector$GroupCount::fids$ = NULL;
          bool AbstractDistinctValuesCollector$GroupCount::live$ = false;

          jclass AbstractDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_uniqueValues] = env->getFieldID(cls, "uniqueValues", "Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector$GroupCount::AbstractDistinctValuesCollector$GroupCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

          ::java::lang::Object AbstractDistinctValuesCollector$GroupCount::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          ::java::util::Set AbstractDistinctValuesCollector$GroupCount::_get_uniqueValues() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_uniqueValues]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector$GroupCount__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, groupValue),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, uniqueValues),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector$GroupCount__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount, ::java::lang::Object, AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount_init_, 0, 0, t_AbstractDistinctValuesCollector$GroupCount__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(const AbstractDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector$GroupCount::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount), module, "AbstractDistinctValuesCollector$GroupCount", 0);
          }

          void t_AbstractDistinctValuesCollector$GroupCount::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector$GroupCount::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(AbstractDistinctValuesCollector$GroupCount(((t_AbstractDistinctValuesCollector$GroupCount *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            AbstractDistinctValuesCollector$GroupCount object((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              INT_CALL(object = AbstractDistinctValuesCollector$GroupCount(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_uniqueValues());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragListBuilder::class$ = NULL;
          jmethodID *FragListBuilder::mids$ = NULL;
          bool FragListBuilder::live$ = false;

          jclass FragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldFragList FragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args);

          static PyMethodDef t_FragListBuilder__methods_[] = {
            DECLARE_METHOD(t_FragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragListBuilder, t_FragListBuilder, ::java::lang::Object, FragListBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragListBuilder), module, "FragListBuilder", 0);
          }

          void t_FragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "class_", make_descriptor(FragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragListBuilder::initializeClass, 1)))
              return NULL;
            return t_FragListBuilder::wrap_Object(FragListBuilder(((t_FragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor$Status::class$ = NULL;
        jmethodID *StoredFieldVisitor$Status::mids$ = NULL;
        bool StoredFieldVisitor$Status::live$ = false;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::NO = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::STOP = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::YES = NULL;

        jclass StoredFieldVisitor$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor$Status");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_92de5032] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_values_fd94bdd0] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/StoredFieldVisitor$Status;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            STOP = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "STOP", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            YES = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredFieldVisitor$Status StoredFieldVisitor$Status::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return StoredFieldVisitor$Status(env->callStaticObjectMethod(cls, mids$[mid_valueOf_92de5032], a0.this$));
        }

        JArray< StoredFieldVisitor$Status > StoredFieldVisitor$Status::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< StoredFieldVisitor$Status >(env->callStaticObjectMethod(cls, mids$[mid_values_fd94bdd0]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type);
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data);
        static PyGetSetDef t_StoredFieldVisitor$Status__fields_[] = {
          DECLARE_GET_FIELD(t_StoredFieldVisitor$Status, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StoredFieldVisitor$Status__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, of_, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor$Status, t_StoredFieldVisitor$Status, ::java::lang::Enum, StoredFieldVisitor$Status, abstract_init, 0, 0, t_StoredFieldVisitor$Status__fields_, 0, 0);
        PyObject *t_StoredFieldVisitor$Status::wrap_Object(const StoredFieldVisitor$Status& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_StoredFieldVisitor$Status::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_StoredFieldVisitor$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor$Status), module, "StoredFieldVisitor$Status", 0);
        }

        void t_StoredFieldVisitor$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "class_", make_descriptor(StoredFieldVisitor$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredFieldVisitor$Status::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "NO", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::NO)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "STOP", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::STOP)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "YES", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::YES)));
        }

        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor$Status::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor$Status::wrap_Object(StoredFieldVisitor$Status(((t_StoredFieldVisitor$Status *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::valueOf(a0));
            return t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type)
        {
          JArray< StoredFieldVisitor$Status > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::values());
          return JArray<jobject>(result.this$).wrap(t_StoredFieldVisitor$Status::wrap_jobject);
        }
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFragmenter::class$ = NULL;
          jmethodID *PythonFragmenter::mids$ = NULL;
          bool PythonFragmenter::live$ = false;

          jclass PythonFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFragmenter::PythonFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFragmenter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFragmenter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFragmenter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self);
          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args);
          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data);
          static PyGetSetDef t_PythonFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFragmenter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFragmenter__methods_[] = {
            DECLARE_METHOD(t_PythonFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFragmenter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFragmenter, t_PythonFragmenter, ::java::lang::Object, PythonFragmenter, t_PythonFragmenter_init_, 0, 0, t_PythonFragmenter__fields_, 0, 0);

          void t_PythonFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFragmenter), module, "PythonFragmenter", 1);
          }

          void t_PythonFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "class_", make_descriptor(PythonFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "wrapfn_", make_descriptor(t_PythonFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFragmenter::initializeClass);
            JNINativeMethod methods[] = {
              { "isNewFragment", "()Z", (void *) t_PythonFragmenter_isNewFragment0 },
              { "pythonDecRef", "()V", (void *) t_PythonFragmenter_pythonDecRef1 },
              { "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V", (void *) t_PythonFragmenter_start2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFragmenter::initializeClass, 1)))
              return NULL;
            return t_PythonFragmenter::wrap_Object(PythonFragmenter(((t_PythonFragmenter *) arg)->object.this$));
          }
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds)
          {
            PythonFragmenter object((jobject) NULL);

            INT_CALL(object = PythonFragmenter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isNewFragment", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isNewFragment", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(::org::apache::lucene::analysis::TokenStream(a1));
            PyObject *result = PyObject_CallMethod(obj, "start", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonAnalyzer.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonAnalyzer::class$ = NULL;
        jmethodID *PythonAnalyzer::mids$ = NULL;
        bool PythonAnalyzer::live$ = false;

        jclass PythonAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAnalyzer::PythonAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonAnalyzer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonAnalyzer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAnalyzer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self);
        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args);
        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data);
        static PyGetSetDef t_PythonAnalyzer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAnalyzer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAnalyzer__methods_[] = {
          DECLARE_METHOD(t_PythonAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAnalyzer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAnalyzer, t_PythonAnalyzer, ::org::apache::lucene::analysis::Analyzer, PythonAnalyzer, t_PythonAnalyzer_init_, 0, 0, t_PythonAnalyzer__fields_, 0, 0);

        void t_PythonAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAnalyzer), module, "PythonAnalyzer", 1);
        }

        void t_PythonAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "class_", make_descriptor(PythonAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PythonAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAnalyzer::initializeClass);
          JNINativeMethod methods[] = {
            { "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;", (void *) t_PythonAnalyzer_createComponents0 },
            { "pythonDecRef", "()V", (void *) t_PythonAnalyzer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAnalyzer::initializeClass, 1)))
            return NULL;
          return t_PythonAnalyzer::wrap_Object(PythonAnalyzer(((t_PythonAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          PythonAnalyzer object((jobject) NULL);

          INT_CALL(object = PythonAnalyzer());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::java::io::t_Reader::wrap_Object(::java::io::Reader(a1));
          PyObject *result = PyObject_CallMethod(obj, "createComponents", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &value))
          {
            throwTypeError("createComponents", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonAnalyzer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemmer::class$ = NULL;
          jmethodID *DutchStemmer::mids$ = NULL;
          bool DutchStemmer::live$ = false;

          jclass DutchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemmer::DutchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DutchStemmer::stem(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stem_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg);

          static PyMethodDef t_DutchStemmer__methods_[] = {
            DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::java::lang::Object, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

          void t_DutchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
          }

          void t_DutchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
              return NULL;
            return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
          }
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
          {
            DutchStemmer object((jobject) NULL);

            INT_CALL(object = DutchStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/StrDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *StrDocValues::class$ = NULL;
            jmethodID *StrDocValues::mids$ = NULL;
            bool StrDocValues::live$ = false;

            jclass StrDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/StrDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StrDocValues::StrDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean StrDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller StrDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::Object StrDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            ::java::lang::String StrDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String StrDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data);
            static PyGetSetDef t_StrDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_StrDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StrDocValues__methods_[] = {
              DECLARE_METHOD(t_StrDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StrDocValues, t_StrDocValues, ::org::apache::lucene::queries::function::FunctionValues, StrDocValues, t_StrDocValues_init_, 0, 0, t_StrDocValues__fields_, 0, 0);

            void t_StrDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(StrDocValues), module, "StrDocValues", 0);
            }

            void t_StrDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "class_", make_descriptor(StrDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "wrapfn_", make_descriptor(t_StrDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StrDocValues::initializeClass, 1)))
                return NULL;
              return t_StrDocValues::wrap_Object(StrDocValues(((t_StrDocValues *) arg)->object.this$));
            }
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StrDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              StrDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = StrDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchAllBits::class$ = NULL;
        jmethodID *Bits$MatchAllBits::mids$ = NULL;
        bool Bits$MatchAllBits::live$ = false;

        jclass Bits$MatchAllBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchAllBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchAllBits::Bits$MatchAllBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchAllBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchAllBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self);

        static PyMethodDef t_Bits$MatchAllBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchAllBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchAllBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchAllBits, t_Bits$MatchAllBits, ::java::lang::Object, Bits$MatchAllBits, t_Bits$MatchAllBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchAllBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchAllBits), module, "Bits$MatchAllBits", 0);
        }

        void t_Bits$MatchAllBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "class_", make_descriptor(Bits$MatchAllBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchAllBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchAllBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchAllBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchAllBits::wrap_Object(Bits$MatchAllBits(((t_Bits$MatchAllBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchAllBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchAllBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchAllBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *ParseException::class$ = NULL;
            jmethodID *ParseException::mids$ = NULL;
            jfieldID *ParseException::fids$ = NULL;
            bool ParseException::live$ = false;

            jclass ParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/ParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_dea8e26f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/Token;[[I[Ljava/lang/String;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ParseException::ParseException(const ::org::apache::lucene::queryparser::surround::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_dea8e26f, a0.this$, a1.this$, a2.this$)) {}

            ::org::apache::lucene::queryparser::surround::parser::Token ParseException::_get_currentToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
            }

            void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
            }

            JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
            {
              return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
            }

            void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
            {
              env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
            }

            JArray< ::java::lang::String > ParseException::_get_tokenImage() const
            {
              return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
            }

            void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
            {
              env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

            static PyGetSetDef t_ParseException__fields_[] = {
              DECLARE_GETSET_FIELD(t_ParseException, currentToken),
              DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
              DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ParseException__methods_[] = {
              DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

            void t_ParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(ParseException), module, "ParseException", 0);
            }

            void t_ParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                return NULL;
              return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
            }
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ParseException object((jobject) NULL);

                  INT_CALL(object = ParseException());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::parser::Token a0((jobject) NULL);
                  JArray< JArray< jint > > a1((jobject) NULL);
                  JArray< ::java::lang::String > a2((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = ParseException(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_currentToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_currentToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_expectedTokenSequences());
              return JArray<jobject>(value.this$).wrap(NULL);
            }
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              if (!parseArg(arg, "[[I", &value))
              {
                INT_CALL(self->object._set_expectedTokenSequences(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_tokenImage());
              return JArray<jstring>(value.this$).wrap();
            }
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object._set_tokenImage(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$postfix_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$postfix_return::class$ = NULL;
          jmethodID *JavascriptParser$postfix_return::mids$ = NULL;
          bool JavascriptParser$postfix_return::live$ = false;

          jclass JavascriptParser$postfix_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$postfix_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$postfix_return::JavascriptParser$postfix_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$postfix_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$postfix_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$postfix_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$postfix_return, t_JavascriptParser$postfix_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$postfix_return, t_JavascriptParser$postfix_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$postfix_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$postfix_return), module, "JavascriptParser$postfix_return", 0);
          }

          void t_JavascriptParser$postfix_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "class_", make_descriptor(JavascriptParser$postfix_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$postfix_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$postfix_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$postfix_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$postfix_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$postfix_return::wrap_Object(JavascriptParser$postfix_return(((t_JavascriptParser$postfix_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$postfix_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$postfix_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$postfix_return_init_(t_JavascriptParser$postfix_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$postfix_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$postfix_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *LabelAndValue::class$ = NULL;
        jmethodID *LabelAndValue::mids$ = NULL;
        jfieldID *LabelAndValue::fids$ = NULL;
        bool LabelAndValue::live$ = false;

        jclass LabelAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/LabelAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LabelAndValue::LabelAndValue(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        jboolean LabelAndValue::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LabelAndValue::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String LabelAndValue::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String LabelAndValue::_get_label() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
        }

        ::java::lang::Number LabelAndValue::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data);
        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data);

        static PyGetSetDef t_LabelAndValue__fields_[] = {
          DECLARE_GET_FIELD(t_LabelAndValue, label),
          DECLARE_GET_FIELD(t_LabelAndValue, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LabelAndValue__methods_[] = {
          DECLARE_METHOD(t_LabelAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, equals, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LabelAndValue, t_LabelAndValue, ::java::lang::Object, LabelAndValue, t_LabelAndValue_init_, 0, 0, t_LabelAndValue__fields_, 0, 0);

        void t_LabelAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(LabelAndValue), module, "LabelAndValue", 0);
        }

        void t_LabelAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "class_", make_descriptor(LabelAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "wrapfn_", make_descriptor(t_LabelAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LabelAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LabelAndValue::initializeClass, 1)))
            return NULL;
          return t_LabelAndValue::wrap_Object(LabelAndValue(((t_LabelAndValue *) arg)->object.this$));
        }
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LabelAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          LabelAndValue object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = LabelAndValue(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LabelAndValue), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_label());
          return j2p(value);
        }

        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *RangeMapFloatFunction::class$ = NULL;
            jmethodID *RangeMapFloatFunction::mids$ = NULL;
            bool RangeMapFloatFunction::live$ = false;

            jclass RangeMapFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6ddf6b07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFFLjava/lang/Float;)V");
                mids$[mid_init$_e1b244a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFLorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3, const ::java::lang::Float & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_6ddf6b07, a0.this$, a1, a2, a3, a4.this$)) {}

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, const ::org::apache::lucene::queries::function::ValueSource & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_e1b244a8, a0.this$, a1, a2, a3.this$, a4.this$)) {}

            void RangeMapFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String RangeMapFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean RangeMapFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues RangeMapFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint RangeMapFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args);

            static PyMethodDef t_RangeMapFloatFunction__methods_[] = {
              DECLARE_METHOD(t_RangeMapFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeMapFloatFunction, t_RangeMapFloatFunction, ::org::apache::lucene::queries::function::ValueSource, RangeMapFloatFunction, t_RangeMapFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_RangeMapFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeMapFloatFunction), module, "RangeMapFloatFunction", 0);
            }

            void t_RangeMapFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "class_", make_descriptor(RangeMapFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_RangeMapFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeMapFloatFunction::initializeClass, 1)))
                return NULL;
              return t_RangeMapFloatFunction::wrap_Object(RangeMapFloatFunction(((t_RangeMapFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeMapFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 5:
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  jfloat a3;
                  ::java::lang::Float a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFFO", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                  ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLockFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLockFactory::class$ = NULL;
        jmethodID *PythonLockFactory::mids$ = NULL;
        bool PythonLockFactory::live$ = false;

        jclass PythonLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLockFactory::PythonLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLockFactory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLockFactory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLockFactory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self);
        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args);
        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data);
        static PyGetSetDef t_PythonLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLockFactory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLockFactory__methods_[] = {
          DECLARE_METHOD(t_PythonLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLockFactory, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLockFactory, t_PythonLockFactory, ::org::apache::lucene::store::LockFactory, PythonLockFactory, t_PythonLockFactory_init_, 0, 0, t_PythonLockFactory__fields_, 0, 0);

        void t_PythonLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLockFactory), module, "PythonLockFactory", 1);
        }

        void t_PythonLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "class_", make_descriptor(PythonLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "wrapfn_", make_descriptor(t_PythonLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLockFactory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonLockFactory_clearLock0 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonLockFactory_makeLock1 },
            { "pythonDecRef", "()V", (void *) t_PythonLockFactory_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLockFactory::initializeClass, 1)))
            return NULL;
          return t_PythonLockFactory::wrap_Object(PythonLockFactory(((t_PythonLockFactory *) arg)->object.this$));
        }
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds)
        {
          PythonLockFactory object((jobject) NULL);

          INT_CALL(object = PythonLockFactory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *WildcardQueryNode::class$ = NULL;
              jmethodID *WildcardQueryNode::mids$ = NULL;
              bool WildcardQueryNode::live$ = false;

              jclass WildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_3797a232] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNode::WildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              WildcardQueryNode::WildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              WildcardQueryNode WildcardQueryNode::cloneTree() const
              {
                return WildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_3797a232]));
              }

              ::java::lang::CharSequence WildcardQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String WildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_WildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNode, t_WildcardQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, WildcardQueryNode, t_WildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNode), module, "WildcardQueryNode", 0);
              }

              void t_WildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "class_", make_descriptor(WildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNode::wrap_Object(WildcardQueryNode(((t_WildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = WildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = WildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args)
              {
                WildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_WildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.h"
#include "java/text/DateFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *DateRecognizerSinkFilter::class$ = NULL;
          jmethodID *DateRecognizerSinkFilter::mids$ = NULL;
          bool DateRecognizerSinkFilter::live$ = false;
          ::java::lang::String *DateRecognizerSinkFilter::DATE_TYPE = NULL;

          jclass DateRecognizerSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DATE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DATE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DateRecognizerSinkFilter::DateRecognizerSinkFilter() : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DateRecognizerSinkFilter::DateRecognizerSinkFilter(const ::java::text::DateFormat & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}

          jboolean DateRecognizerSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args);

          static PyMethodDef t_DateRecognizerSinkFilter__methods_[] = {
            DECLARE_METHOD(t_DateRecognizerSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DateRecognizerSinkFilter, t_DateRecognizerSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, DateRecognizerSinkFilter, t_DateRecognizerSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_DateRecognizerSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DateRecognizerSinkFilter), module, "DateRecognizerSinkFilter", 0);
          }

          void t_DateRecognizerSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "class_", make_descriptor(DateRecognizerSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_DateRecognizerSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DateRecognizerSinkFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "DATE_TYPE", make_descriptor(j2p(*DateRecognizerSinkFilter::DATE_TYPE)));
          }

          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DateRecognizerSinkFilter::initializeClass, 1)))
              return NULL;
            return t_DateRecognizerSinkFilter::wrap_Object(DateRecognizerSinkFilter(((t_DateRecognizerSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DateRecognizerSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DateRecognizerSinkFilter object((jobject) NULL);

                INT_CALL(object = DateRecognizerSinkFilter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::text::DateFormat a0((jobject) NULL);
                DateRecognizerSinkFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = DateRecognizerSinkFilter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DateRecognizerSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *EmptyTokenStream::class$ = NULL;
          jmethodID *EmptyTokenStream::mids$ = NULL;
          bool EmptyTokenStream::live$ = false;

          jclass EmptyTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/EmptyTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EmptyTokenStream::EmptyTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean EmptyTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args);

          static PyMethodDef t_EmptyTokenStream__methods_[] = {
            DECLARE_METHOD(t_EmptyTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EmptyTokenStream, t_EmptyTokenStream, ::org::apache::lucene::analysis::TokenStream, EmptyTokenStream, t_EmptyTokenStream_init_, 0, 0, 0, 0, 0);

          void t_EmptyTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(EmptyTokenStream), module, "EmptyTokenStream", 0);
          }

          void t_EmptyTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "class_", make_descriptor(EmptyTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "wrapfn_", make_descriptor(t_EmptyTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EmptyTokenStream::initializeClass, 1)))
              return NULL;
            return t_EmptyTokenStream::wrap_Object(EmptyTokenStream(((t_EmptyTokenStream *) arg)->object.this$));
          }
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EmptyTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds)
          {
            EmptyTokenStream object((jobject) NULL);

            INT_CALL(object = EmptyTokenStream());
            self->object = object;

            return 0;
          }

          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EmptyTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList::class$ = NULL;
          jmethodID *FieldFragList::mids$ = NULL;
          bool FieldFragList::live$ = false;

          jclass FieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");
              mids$[mid_getFragInfos_87851566] = env->getMethodID(cls, "getFragInfos", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList::FieldFragList(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void FieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }

          ::java::util::List FieldFragList::getFragInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFragInfos_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args);
          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self);
          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data);
          static PyGetSetDef t_FieldFragList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList, fragInfos),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList__methods_[] = {
            DECLARE_METHOD(t_FieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, add, METH_VARARGS),
            DECLARE_METHOD(t_FieldFragList, getFragInfos, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList, t_FieldFragList, ::java::lang::Object, FieldFragList, t_FieldFragList_init_, 0, 0, t_FieldFragList__fields_, 0, 0);

          void t_FieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList), module, "FieldFragList", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "WeightedFragInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo)));
          }

          void t_FieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "class_", make_descriptor(FieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList::initializeClass, 1)))
              return NULL;
            return t_FieldFragList::wrap_Object(FieldFragList(((t_FieldFragList *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            FieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = FieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
          }

          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$FormatAndBits::class$ = NULL;
          jmethodID *PackedInts$FormatAndBits::mids$ = NULL;
          jfieldID *PackedInts$FormatAndBits::fids$ = NULL;
          bool PackedInts$FormatAndBits::live$ = false;

          jclass PackedInts$FormatAndBits::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$FormatAndBits");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41c85b58] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bitsPerValue] = env->getFieldID(cls, "bitsPerValue", "I");
              fids$[fid_format] = env->getFieldID(cls, "format", "Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$FormatAndBits::PackedInts$FormatAndBits(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_41c85b58, a0.this$, a1)) {}

          ::java::lang::String PackedInts$FormatAndBits::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint PackedInts$FormatAndBits::_get_bitsPerValue() const
          {
            return env->getIntField(this$, fids$[fid_bitsPerValue]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Format PackedInts$FormatAndBits::_get_format() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Format(env->getObjectField(this$, fids$[fid_format]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args);
          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data);
          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data);

          static PyGetSetDef t_PackedInts$FormatAndBits__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, bitsPerValue),
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, format),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$FormatAndBits__methods_[] = {
            DECLARE_METHOD(t_PackedInts$FormatAndBits, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$FormatAndBits, t_PackedInts$FormatAndBits, ::java::lang::Object, PackedInts$FormatAndBits, t_PackedInts$FormatAndBits_init_, 0, 0, t_PackedInts$FormatAndBits__fields_, 0, 0);

          void t_PackedInts$FormatAndBits::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$FormatAndBits), module, "PackedInts$FormatAndBits", 0);
          }

          void t_PackedInts$FormatAndBits::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "class_", make_descriptor(PackedInts$FormatAndBits::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$FormatAndBits::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$FormatAndBits::initializeClass, 1)))
              return NULL;
            return t_PackedInts$FormatAndBits::wrap_Object(PackedInts$FormatAndBits(((t_PackedInts$FormatAndBits *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$FormatAndBits::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            PackedInts$FormatAndBits object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1))
            {
              INT_CALL(object = PackedInts$FormatAndBits(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PackedInts$FormatAndBits), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format value((jobject) NULL);
            OBJ_CALL(value = self->object._get_format());
            return ::org::apache::lucene::util::packed::t_PackedInts$Format::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager$RefreshListener::class$ = NULL;
        jmethodID *ReferenceManager$RefreshListener::mids$ = NULL;
        bool ReferenceManager$RefreshListener::live$ = false;

        jclass ReferenceManager$RefreshListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager$RefreshListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ReferenceManager$RefreshListener::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void ReferenceManager$RefreshListener::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args);
        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self);
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data);
        static PyGetSetDef t_ReferenceManager$RefreshListener__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager$RefreshListener, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager$RefreshListener__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, afterRefresh, METH_O),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, beforeRefresh, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager$RefreshListener, t_ReferenceManager$RefreshListener, ::java::lang::Object, ReferenceManager$RefreshListener, abstract_init, 0, 0, t_ReferenceManager$RefreshListener__fields_, 0, 0);
        PyObject *t_ReferenceManager$RefreshListener::wrap_Object(const ReferenceManager$RefreshListener& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager$RefreshListener::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager$RefreshListener::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager$RefreshListener), module, "ReferenceManager$RefreshListener", 0);
        }

        void t_ReferenceManager$RefreshListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "class_", make_descriptor(ReferenceManager$RefreshListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager$RefreshListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager$RefreshListener::wrap_Object(ReferenceManager$RefreshListener(((t_ReferenceManager$RefreshListener *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemmer::class$ = NULL;
          jmethodID *GalicianStemmer::mids$ = NULL;
          bool GalicianStemmer::live$ = false;

          jclass GalicianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemmer::GalicianStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemmer, t_GalicianStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianStemmer, t_GalicianStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemmer), module, "GalicianStemmer", 0);
          }

          void t_GalicianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "class_", make_descriptor(GalicianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianStemmer::wrap_Object(GalicianStemmer(((t_GalicianStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianStemmer object((jobject) NULL);

            INT_CALL(object = GalicianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum::class$ = NULL;
          jmethodID *IntsRefFSTEnum::mids$ = NULL;
          bool IntsRefFSTEnum::live$ = false;

          jclass IntsRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_4ce4ab35] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_next_4ce4ab35] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_8b422fd3] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_8b422fd3] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_8b422fd3] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum::IntsRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekCeil(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekExact(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekFloor(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_8b422fd3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args);
          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IntsRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum, t_IntsRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, IntsRefFSTEnum, t_IntsRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_IntsRefFSTEnum *)) get_generic_next< t_IntsRefFSTEnum,::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput >), t_IntsRefFSTEnum__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum::wrap_Object(const IntsRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum), module, "IntsRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(IntsRefFSTEnum$InputOutput)));
          }

          void t_IntsRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "class_", make_descriptor(IntsRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum::wrap_Object(IntsRefFSTEnum(((t_IntsRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            IntsRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = IntsRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoFormat::class$ = NULL;
        jmethodID *SegmentInfoFormat::mids$ = NULL;
        bool SegmentInfoFormat::live$ = false;

        jclass SegmentInfoFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
            mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::SegmentInfoReader SegmentInfoFormat::getSegmentInfoReader() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
        }

        ::org::apache::lucene::codecs::SegmentInfoWriter SegmentInfoFormat::getSegmentInfoWriter() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data);
        static PyGetSetDef t_SegmentInfoFormat__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoReader),
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfoFormat__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoFormat, t_SegmentInfoFormat, ::java::lang::Object, SegmentInfoFormat, abstract_init, 0, 0, t_SegmentInfoFormat__fields_, 0, 0);

        void t_SegmentInfoFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoFormat), module, "SegmentInfoFormat", 0);
        }

        void t_SegmentInfoFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "class_", make_descriptor(SegmentInfoFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoFormat::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoFormat::wrap_Object(SegmentInfoFormat(((t_SegmentInfoFormat *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$StoredFieldStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$StoredFieldStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$StoredFieldStatus::fids$ = NULL;
        bool CheckIndex$Status$StoredFieldStatus::live$ = false;

        jclass CheckIndex$Status$StoredFieldStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$StoredFieldStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$StoredFieldStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$StoredFieldStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$StoredFieldStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$StoredFieldStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$StoredFieldStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$StoredFieldStatus, t_CheckIndex$Status$StoredFieldStatus, ::java::lang::Object, CheckIndex$Status$StoredFieldStatus, abstract_init, 0, 0, t_CheckIndex$Status$StoredFieldStatus__fields_, 0, 0);

        void t_CheckIndex$Status$StoredFieldStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$StoredFieldStatus), module, "CheckIndex$Status$StoredFieldStatus", 0);
        }

        void t_CheckIndex$Status$StoredFieldStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$StoredFieldStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$StoredFieldStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$StoredFieldStatus::wrap_Object(CheckIndex$Status$StoredFieldStatus(((t_CheckIndex$Status$StoredFieldStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SpanGradientFormatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SpanGradientFormatter::class$ = NULL;
          jmethodID *SpanGradientFormatter::mids$ = NULL;
          bool SpanGradientFormatter::live$ = false;

          jclass SpanGradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SpanGradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanGradientFormatter::SpanGradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::highlight::GradientFormatter(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::java::lang::String SpanGradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args);

          static PyMethodDef t_SpanGradientFormatter__methods_[] = {
            DECLARE_METHOD(t_SpanGradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanGradientFormatter, t_SpanGradientFormatter, ::org::apache::lucene::search::highlight::GradientFormatter, SpanGradientFormatter, t_SpanGradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_SpanGradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanGradientFormatter), module, "SpanGradientFormatter", 0);
          }

          void t_SpanGradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "class_", make_descriptor(SpanGradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_SpanGradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanGradientFormatter::initializeClass, 1)))
              return NULL;
            return t_SpanGradientFormatter::wrap_Object(SpanGradientFormatter(((t_SpanGradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanGradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            SpanGradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SpanGradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanGradientFormatter), (PyObject *) self, "highlightTerm", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$Type::class$ = NULL;
              jmethodID *ProximityQueryNode$Type::mids$ = NULL;
              bool ProximityQueryNode$Type::live$ = false;
              ProximityQueryNode$Type *ProximityQueryNode$Type::NUMBER = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::PARAGRAPH = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::SENTENCE = NULL;

              jclass ProximityQueryNode$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_e143b857] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_values_83915b61] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NUMBER = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "NUMBER", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  PARAGRAPH = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "PARAGRAPH", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  SENTENCE = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "SENTENCE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$Type ProximityQueryNode$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ProximityQueryNode$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e143b857], a0.this$));
              }

              JArray< ProximityQueryNode$Type > ProximityQueryNode$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ProximityQueryNode$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_83915b61]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type);
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data);
              static PyGetSetDef t_ProximityQueryNode$Type__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode$Type__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$Type, t_ProximityQueryNode$Type, ::java::lang::Enum, ProximityQueryNode$Type, abstract_init, 0, 0, t_ProximityQueryNode$Type__fields_, 0, 0);
              PyObject *t_ProximityQueryNode$Type::wrap_Object(const ProximityQueryNode$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ProximityQueryNode$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ProximityQueryNode$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$Type), module, "ProximityQueryNode$Type", 0);
              }

              void t_ProximityQueryNode$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "class_", make_descriptor(ProximityQueryNode$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ProximityQueryNode$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "NUMBER", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::NUMBER)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "PARAGRAPH", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::PARAGRAPH)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "SENTENCE", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::SENTENCE)));
              }

              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$Type::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$Type::wrap_Object(ProximityQueryNode$Type(((t_ProximityQueryNode$Type *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ProximityQueryNode$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::valueOf(a0));
                  return t_ProximityQueryNode$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type)
              {
                JArray< ProximityQueryNode$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::values());
                return JArray<jobject>(result.this$).wrap(t_ProximityQueryNode$Type::wrap_jobject);
              }
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/HungarianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *HungarianStemmer::class$ = NULL;
        jmethodID *HungarianStemmer::mids$ = NULL;
        bool HungarianStemmer::live$ = false;

        jclass HungarianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/HungarianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HungarianStemmer::HungarianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean HungarianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint HungarianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean HungarianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args);

        static PyMethodDef t_HungarianStemmer__methods_[] = {
          DECLARE_METHOD(t_HungarianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(HungarianStemmer, t_HungarianStemmer, ::org::tartarus::snowball::SnowballProgram, HungarianStemmer, t_HungarianStemmer_init_, 0, 0, 0, 0, 0);

        void t_HungarianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(HungarianStemmer), module, "HungarianStemmer", 0);
        }

        void t_HungarianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "class_", make_descriptor(HungarianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HungarianStemmer::initializeClass, 1)))
            return NULL;
          return t_HungarianStemmer::wrap_Object(HungarianStemmer(((t_HungarianStemmer *) arg)->object.this$));
        }
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HungarianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds)
        {
          HungarianStemmer object((jobject) NULL);

          INT_CALL(object = HungarianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttributeImpl.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttributeImpl::class$ = NULL;
        jmethodID *BoostAttributeImpl::mids$ = NULL;
        bool BoostAttributeImpl::live$ = false;

        jclass BoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostAttributeImpl::BoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jfloat BoostAttributeImpl::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttributeImpl::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self);
        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data);
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttributeImpl, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_BoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttributeImpl, t_BoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, BoostAttributeImpl, t_BoostAttributeImpl_init_, 0, 0, t_BoostAttributeImpl__fields_, 0, 0);

        void t_BoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttributeImpl), module, "BoostAttributeImpl", 0);
        }

        void t_BoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "class_", make_descriptor(BoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_BoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_BoostAttributeImpl::wrap_Object(BoostAttributeImpl(((t_BoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          BoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = BoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Term::class$ = NULL;
        jmethodID *Term::mids$ = NULL;
        bool Term::live$ = false;

        jclass Term::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Term");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytes_4ae19461] = env->getMethodID(cls, "bytes", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7eca6a9e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_text_14c7b5c5] = env->getMethodID(cls, "text", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_edfda73b] = env->getStaticMethodID(cls, "toString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Term::Term(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::BytesRef Term::bytes() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_bytes_4ae19461]));
        }

        jint Term::compareTo(const Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7eca6a9e], a0.this$);
        }

        jboolean Term::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String Term::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jint Term::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String Term::text() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_text_14c7b5c5]));
        }

        ::java::lang::String Term::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Term::toString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_edfda73b], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Term_bytes(t_Term *self);
        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg);
        static PyObject *t_Term_equals(t_Term *self, PyObject *args);
        static PyObject *t_Term_field(t_Term *self);
        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args);
        static PyObject *t_Term_text(t_Term *self);
        static PyObject *t_Term_toString(t_Term *self, PyObject *args);
        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Term__methods_[] = {
          DECLARE_METHOD(t_Term, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, bytes, METH_NOARGS),
          DECLARE_METHOD(t_Term, compareTo, METH_O),
          DECLARE_METHOD(t_Term, equals, METH_VARARGS),
          DECLARE_METHOD(t_Term, field, METH_NOARGS),
          DECLARE_METHOD(t_Term, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Term, text, METH_NOARGS),
          DECLARE_METHOD(t_Term, toString, METH_VARARGS),
          DECLARE_METHOD(t_Term, toString_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Term, t_Term, ::java::lang::Object, Term, t_Term_init_, 0, 0, 0, 0, 0);

        void t_Term::install(PyObject *module)
        {
          installType(&PY_TYPE(Term), module, "Term", 0);
        }

        void t_Term::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "class_", make_descriptor(Term::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "wrapfn_", make_descriptor(t_Term::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Term::initializeClass, 1)))
            return NULL;
          return t_Term::wrap_Object(Term(((t_Term *) arg)->object.this$));
        }
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Term::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = Term(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Term_bytes(t_Term *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg)
        {
          Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_Term_equals(t_Term *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Term_field(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Term_text(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.text());
          return j2p(result);
        }

        static PyObject *t_Term_toString(t_Term *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::Term::toString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toString_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilterFactory::class$ = NULL;
          jmethodID *GalicianStemFilterFactory::mids$ = NULL;
          bool GalicianStemFilterFactory::live$ = false;

          jclass GalicianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilterFactory::GalicianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilterFactory, t_GalicianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianStemFilterFactory, t_GalicianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilterFactory), module, "GalicianStemFilterFactory", 0);
          }

          void t_GalicianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilterFactory::wrap_Object(GalicianStemFilterFactory(((t_GalicianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
