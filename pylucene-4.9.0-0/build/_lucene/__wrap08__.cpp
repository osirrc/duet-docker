#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *TooManyBasicQueries::class$ = NULL;
            jmethodID *TooManyBasicQueries::mids$ = NULL;
            bool TooManyBasicQueries::live$ = false;

            jclass TooManyBasicQueries::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/TooManyBasicQueries");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TooManyBasicQueries::TooManyBasicQueries(jint a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TooManyBasicQueries__methods_[] = {
              DECLARE_METHOD(t_TooManyBasicQueries, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TooManyBasicQueries, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TooManyBasicQueries, t_TooManyBasicQueries, ::java::io::IOException, TooManyBasicQueries, t_TooManyBasicQueries_init_, 0, 0, 0, 0, 0);

            void t_TooManyBasicQueries::install(PyObject *module)
            {
              installType(&PY_TYPE(TooManyBasicQueries), module, "TooManyBasicQueries", 0);
            }

            void t_TooManyBasicQueries::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "class_", make_descriptor(TooManyBasicQueries::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "wrapfn_", make_descriptor(t_TooManyBasicQueries::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TooManyBasicQueries::initializeClass, 1)))
                return NULL;
              return t_TooManyBasicQueries::wrap_Object(TooManyBasicQueries(((t_TooManyBasicQueries *) arg)->object.this$));
            }
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TooManyBasicQueries::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              TooManyBasicQueries object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = TooManyBasicQueries(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TrackingIndexWriter::class$ = NULL;
        jmethodID *TrackingIndexWriter::mids$ = NULL;
        bool TrackingIndexWriter::live$ = false;

        jclass TrackingIndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TrackingIndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4f2fb7d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_addDocument_d1cac219] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocument_f74a1d49] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addDocuments_d1cac219] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocuments_f74a1d49] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addIndexes_a20f8ef5] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)J");
            mids$[mid_addIndexes_160e609a] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_deleteAll_54c6a17a] = env->getMethodID(cls, "deleteAll", "()J");
            mids$[mid_deleteDocuments_7eca6a9d] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_c9f85e1d] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_937b34cf] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)J");
            mids$[mid_deleteDocuments_6e30110f] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/search/Query;)J");
            mids$[mid_getAndIncrementGeneration_54c6a17a] = env->getMethodID(cls, "getAndIncrementGeneration", "()J");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getIndexWriter_bbe46a60] = env->getMethodID(cls, "getIndexWriter", "()Lorg/apache/lucene/index/IndexWriter;");
            mids$[mid_tryDeleteDocument_1e4306f9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)J");
            mids$[mid_updateDocument_b5aef5fe] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocument_4d995da4] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_updateDocuments_b5aef5fe] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocuments_4d995da4] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingIndexWriter::TrackingIndexWriter(const ::org::apache::lucene::index::IndexWriter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4f2fb7d5, a0.this$)) {}

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_a20f8ef5], a0.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_160e609a], a0.this$);
        }

        jlong TrackingIndexWriter::deleteAll() const
        {
          return env->callLongMethod(this$, mids$[mid_deleteAll_54c6a17a]);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_7eca6a9d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_c9f85e1d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_937b34cf], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_6e30110f], a0.this$);
        }

        jlong TrackingIndexWriter::getAndIncrementGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getAndIncrementGeneration_54c6a17a]);
        }

        jlong TrackingIndexWriter::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexWriter TrackingIndexWriter::getIndexWriter() const
        {
          return ::org::apache::lucene::index::IndexWriter(env->callObjectMethod(this$, mids$[mid_getIndexWriter_bbe46a60]));
        }

        jlong TrackingIndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callLongMethod(this$, mids$[mid_tryDeleteDocument_1e4306f9], a0.this$, a1);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_4d995da4], a0.this$, a1.this$, a2.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_4d995da4], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data);
        static PyGetSetDef t_TrackingIndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingIndexWriter, andIncrementGeneration),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, generation),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, indexWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingIndexWriter__methods_[] = {
          DECLARE_METHOD(t_TrackingIndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getAndIncrementGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getIndexWriter, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocuments, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingIndexWriter, t_TrackingIndexWriter, ::java::lang::Object, TrackingIndexWriter, t_TrackingIndexWriter_init_, 0, 0, t_TrackingIndexWriter__fields_, 0, 0);

        void t_TrackingIndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingIndexWriter), module, "TrackingIndexWriter", 0);
        }

        void t_TrackingIndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "class_", make_descriptor(TrackingIndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_TrackingIndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingIndexWriter::initializeClass, 1)))
            return NULL;
          return t_TrackingIndexWriter::wrap_Object(TrackingIndexWriter(((t_TrackingIndexWriter *) arg)->object.this$));
        }
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingIndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          TrackingIndexWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0))
          {
            INT_CALL(object = TrackingIndexWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocument(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.deleteAll());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self)
        {
          ::org::apache::lucene::index::IndexWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(result);
        }

        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *TaxonomyWriterCache::class$ = NULL;
            jmethodID *TaxonomyWriterCache::mids$ = NULL;
            bool TaxonomyWriterCache::live$ = false;

            jclass TaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void TaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint TaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean TaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean TaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_TaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_TaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_TaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_TaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TaxonomyWriterCache, t_TaxonomyWriterCache, ::java::lang::Object, TaxonomyWriterCache, abstract_init, 0, 0, t_TaxonomyWriterCache__fields_, 0, 0);

            void t_TaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(TaxonomyWriterCache), module, "TaxonomyWriterCache", 0);
            }

            void t_TaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "class_", make_descriptor(TaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_TaxonomyWriterCache::wrap_Object(TaxonomyWriterCache(((t_TaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationAttributeFactory.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/text/Collator.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationAttributeFactory::class$ = NULL;
        jmethodID *CollationAttributeFactory::mids$ = NULL;
        bool CollationAttributeFactory::live$ = false;

        jclass CollationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_f8cad218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/text/Collator;)V");
            mids$[mid_createInstance_4f834723] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationAttributeFactory::CollationAttributeFactory(const ::java::text::Collator & a0) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationAttributeFactory::CollationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_f8cad218, a0.this$, a1.this$)) {}

        ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl CollationAttributeFactory::createInstance() const
        {
          return ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_createInstance_4f834723]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args);
        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self);
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data);
        static PyGetSetDef t_CollationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_CollationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_CollationAttributeFactory, createInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationAttributeFactory, t_CollationAttributeFactory, ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory, CollationAttributeFactory, t_CollationAttributeFactory_init_, 0, 0, t_CollationAttributeFactory__fields_, 0, 0);
        PyObject *t_CollationAttributeFactory::wrap_Object(const CollationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CollationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CollationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationAttributeFactory), module, "CollationAttributeFactory", 0);
        }

        void t_CollationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "class_", make_descriptor(CollationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_CollationAttributeFactory::wrap_Object(CollationAttributeFactory(((t_CollationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationAttributeFactory(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              ::java::text::Collator a1((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CollationAttributeFactory(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self)
        {
          ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.createInstance());
          return ::org::apache::lucene::collation::tokenattributes::t_CollatedTermAttributeImpl::wrap_Object(result);
        }
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilterFactory::class$ = NULL;
          jmethodID *TrimFilterFactory::mids$ = NULL;
          bool TrimFilterFactory::live$ = false;

          jclass TrimFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_59450f3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/TrimFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilterFactory::TrimFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::TrimFilter TrimFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::TrimFilter(env->callObjectMethod(this$, mids$[mid_create_59450f3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args);

          static PyMethodDef t_TrimFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TrimFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilterFactory, t_TrimFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TrimFilterFactory, t_TrimFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TrimFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilterFactory), module, "TrimFilterFactory", 0);
          }

          void t_TrimFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "class_", make_descriptor(TrimFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TrimFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TrimFilterFactory::wrap_Object(TrimFilterFactory(((t_TrimFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TrimFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TrimFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::TrimFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_TrimFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TrimFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LabelToOrdinal::class$ = NULL;
            jmethodID *LabelToOrdinal::mids$ = NULL;
            bool LabelToOrdinal::live$ = false;
            jint LabelToOrdinal::INVALID_ORDINAL = (jint) 0;

            jclass LabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getMaxOrdinal_54c6a179] = env->getMethodID(cls, "getMaxOrdinal", "()I");
                mids$[mid_getNextOrdinal_54c6a179] = env->getMethodID(cls, "getNextOrdinal", "()I");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LabelToOrdinal::LabelToOrdinal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void LabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint LabelToOrdinal::getMaxOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getNextOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextOrdinal_54c6a179]);
            }

            jint LabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args);
            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg);
            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data);
            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data);
            static PyGetSetDef t_LabelToOrdinal__fields_[] = {
              DECLARE_GET_FIELD(t_LabelToOrdinal, maxOrdinal),
              DECLARE_GET_FIELD(t_LabelToOrdinal, nextOrdinal),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_LabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getMaxOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getNextOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getOrdinal, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LabelToOrdinal, t_LabelToOrdinal, ::java::lang::Object, LabelToOrdinal, t_LabelToOrdinal_init_, 0, 0, t_LabelToOrdinal__fields_, 0, 0);

            void t_LabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(LabelToOrdinal), module, "LabelToOrdinal", 0);
            }

            void t_LabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "class_", make_descriptor(LabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_LabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(LabelToOrdinal).tp_dict, "INVALID_ORDINAL", make_descriptor(LabelToOrdinal::INVALID_ORDINAL));
            }

            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_LabelToOrdinal::wrap_Object(LabelToOrdinal(((t_LabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              LabelToOrdinal object((jobject) NULL);

              INT_CALL(object = LabelToOrdinal());
              self->object = object;

              return 0;
            }

            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextOrdinal());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getOrdinal", arg);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxOrdinal());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextOrdinal());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$NullReader::class$ = NULL;
          jmethodID *PackedInts$NullReader::mids$ = NULL;
          bool PackedInts$NullReader::live$ = false;

          jclass PackedInts$NullReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$NullReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$NullReader::PackedInts$NullReader(jint a0) : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jlong PackedInts$NullReader::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint PackedInts$NullReader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jlong PackedInts$NullReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint PackedInts$NullReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args);

          static PyMethodDef t_PackedInts$NullReader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$NullReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$NullReader, t_PackedInts$NullReader, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$NullReader, t_PackedInts$NullReader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$NullReader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$NullReader), module, "PackedInts$NullReader", 0);
          }

          void t_PackedInts$NullReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "class_", make_descriptor(PackedInts$NullReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$NullReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$NullReader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$NullReader::wrap_Object(PackedInts$NullReader(((t_PackedInts$NullReader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$NullReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            PackedInts$NullReader object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = PackedInts$NullReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "size", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldValuePairQueryNode::class$ = NULL;
              jmethodID *FieldValuePairQueryNode::mids$ = NULL;
              bool FieldValuePairQueryNode::live$ = false;

              jclass FieldValuePairQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args);
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data);
              static PyGetSetDef t_FieldValuePairQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_FieldValuePairQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldValuePairQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldValuePairQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldValuePairQueryNode, t_FieldValuePairQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, FieldValuePairQueryNode, abstract_init, 0, 0, t_FieldValuePairQueryNode__fields_, 0, 0);
              PyObject *t_FieldValuePairQueryNode::wrap_Object(const FieldValuePairQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_FieldValuePairQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_FieldValuePairQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldValuePairQueryNode), module, "FieldValuePairQueryNode", 0);
              }

              void t_FieldValuePairQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "class_", make_descriptor(FieldValuePairQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldValuePairQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldValuePairQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldValuePairQueryNode::wrap_Object(FieldValuePairQueryNode(((t_FieldValuePairQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldValuePairQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery::class$ = NULL;
          jmethodID *FieldQuery::mids$ = NULL;
          bool FieldQuery::live$ = false;

          jclass FieldQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFieldTermMap_e027f4d1] = env->getMethodID(cls, "getFieldTermMap", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_searchPhrase_361b35e4] = env->getMethodID(cls, "searchPhrase", "(Ljava/lang/String;Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_applyParentBoost_aaf01f72] = env->getMethodID(cls, "applyParentBoost", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::getFieldTermMap(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getFieldTermMap_e027f4d1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::searchPhrase(const ::java::lang::String & a0, const ::java::util::List & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_361b35e4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args);
          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args);

          static PyMethodDef t_FieldQuery__methods_[] = {
            DECLARE_METHOD(t_FieldQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, getFieldTermMap, METH_VARARGS),
            DECLARE_METHOD(t_FieldQuery, searchPhrase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery, t_FieldQuery, ::java::lang::Object, FieldQuery, abstract_init, 0, 0, 0, 0, 0);

          void t_FieldQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery), module, "FieldQuery", 0);
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "QueryPhraseMap", make_descriptor(&PY_TYPE(FieldQuery$QueryPhraseMap)));
          }

          void t_FieldQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "class_", make_descriptor(FieldQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery::initializeClass, 1)))
              return NULL;
            return t_FieldQuery::wrap_Object(FieldQuery(((t_FieldQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFieldTermMap(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldTermMap", args);
            return NULL;
          }

          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldPostingsFormat::class$ = NULL;
          jmethodID *PerFieldPostingsFormat::mids$ = NULL;
          bool PerFieldPostingsFormat::live$ = false;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldPostingsFormat::PerFieldPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer PerFieldPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer PerFieldPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat PerFieldPostingsFormat::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, getPostingsFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldPostingsFormat, t_PerFieldPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, PerFieldPostingsFormat, t_PerFieldPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldPostingsFormat), module, "PerFieldPostingsFormat", 0);
          }

          void t_PerFieldPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "class_", make_descriptor(PerFieldPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldPostingsFormat::wrap_Object(PerFieldPostingsFormat(((t_PerFieldPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldPostingsFormat object((jobject) NULL);

            INT_CALL(object = PerFieldPostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilter::class$ = NULL;
          jmethodID *CJKWidthFilter::mids$ = NULL;
          bool CJKWidthFilter::live$ = false;

          jclass CJKWidthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilter::CJKWidthFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CJKWidthFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args);

          static PyMethodDef t_CJKWidthFilter__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilter, t_CJKWidthFilter, ::org::apache::lucene::analysis::TokenFilter, CJKWidthFilter, t_CJKWidthFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKWidthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilter), module, "CJKWidthFilter", 0);
          }

          void t_CJKWidthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "class_", make_descriptor(CJKWidthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilter::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilter::wrap_Object(CJKWidthFilter(((t_CJKWidthFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CJKWidthFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CJKWidthFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilderFactory::class$ = NULL;
          jmethodID *QueryBuilderFactory::mids$ = NULL;
          bool QueryBuilderFactory::live$ = false;

          jclass QueryBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_155f2547] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_getQueryBuilder_c1a99e2e] = env->getMethodID(cls, "getQueryBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/QueryBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryBuilderFactory::QueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void QueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::QueryBuilder QueryBuilderFactory::getQueryBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_c1a99e2e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args);
          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_QueryBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_QueryBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_QueryBuilderFactory, getQueryBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilderFactory, t_QueryBuilderFactory, ::java::lang::Object, QueryBuilderFactory, t_QueryBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_QueryBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilderFactory), module, "QueryBuilderFactory", 0);
          }

          void t_QueryBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "class_", make_descriptor(QueryBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_QueryBuilderFactory::wrap_Object(QueryBuilderFactory(((t_QueryBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            QueryBuilderFactory object((jobject) NULL);

            INT_CALL(object = QueryBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getQueryBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_QueryBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DocumentStoredFieldVisitor::class$ = NULL;
        jmethodID *DocumentStoredFieldVisitor::mids$ = NULL;
        bool DocumentStoredFieldVisitor::live$ = false;

        jclass DocumentStoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DocumentStoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
            mids$[mid_init$_fb4f2b26] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;)V");
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_getDocument_005b06cf] = env->getMethodID(cls, "getDocument", "()Lorg/apache/lucene/document/Document;");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor() : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const JArray< ::java::lang::String > & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const ::java::util::Set & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_fb4f2b26, a0.this$)) {}

        void DocumentStoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void DocumentStoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        ::org::apache::lucene::document::Document DocumentStoredFieldVisitor::getDocument() const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_getDocument_005b06cf]));
        }

        void DocumentStoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status DocumentStoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void DocumentStoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self);
        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data);
        static PyGetSetDef t_DocumentStoredFieldVisitor__fields_[] = {
          DECLARE_GET_FIELD(t_DocumentStoredFieldVisitor, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocumentStoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, getDocument, METH_NOARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, needsField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor, ::org::apache::lucene::index::StoredFieldVisitor, DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor_init_, 0, 0, t_DocumentStoredFieldVisitor__fields_, 0, 0);

        void t_DocumentStoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(DocumentStoredFieldVisitor), module, "DocumentStoredFieldVisitor", 0);
        }

        void t_DocumentStoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "class_", make_descriptor(DocumentStoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_DocumentStoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocumentStoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_DocumentStoredFieldVisitor::wrap_Object(DocumentStoredFieldVisitor(((t_DocumentStoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              DocumentStoredFieldVisitor object((jobject) NULL);

              INT_CALL(object = DocumentStoredFieldVisitor());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::Set a0((jobject) NULL);
              PyTypeObject **p0;
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "binaryField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "doubleField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "floatField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self)
        {
          ::org::apache::lucene::document::Document result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(result);
        }

        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "intField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "longField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "needsField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "stringField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data)
        {
          ::org::apache::lucene::document::Document value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/Among.h"
#include "java/lang/String.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *Among::class$ = NULL;
      jmethodID *Among::mids$ = NULL;
      jfieldID *Among::fids$ = NULL;
      bool Among::live$ = false;

      jclass Among::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/Among");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_c253f9f9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;Lorg/tartarus/snowball/SnowballProgram;)V");

          fids$ = new jfieldID[max_fid];
          fids$[fid_methodobject] = env->getFieldID(cls, "methodobject", "Lorg/tartarus/snowball/SnowballProgram;");
          fids$[fid_result] = env->getFieldID(cls, "result", "I");
          fids$[fid_s] = env->getFieldID(cls, "s", "[C");
          fids$[fid_s_size] = env->getFieldID(cls, "s_size", "I");
          fids$[fid_substring_i] = env->getFieldID(cls, "substring_i", "I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Among::Among(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3, const ::org::tartarus::snowball::SnowballProgram & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c253f9f9, a0.this$, a1, a2, a3.this$, a4.this$)) {}

      ::org::tartarus::snowball::SnowballProgram Among::_get_methodobject() const
      {
        return ::org::tartarus::snowball::SnowballProgram(env->getObjectField(this$, fids$[fid_methodobject]));
      }

      jint Among::_get_result() const
      {
        return env->getIntField(this$, fids$[fid_result]);
      }

      JArray< jchar > Among::_get_s() const
      {
        return JArray< jchar >(env->getObjectField(this$, fids$[fid_s]));
      }

      jint Among::_get_s_size() const
      {
        return env->getIntField(this$, fids$[fid_s_size]);
      }

      jint Among::_get_substring_i() const
      {
        return env->getIntField(this$, fids$[fid_substring_i]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Among_get__methodobject(t_Among *self, void *data);
      static PyObject *t_Among_get__result(t_Among *self, void *data);
      static PyObject *t_Among_get__s(t_Among *self, void *data);
      static PyObject *t_Among_get__s_size(t_Among *self, void *data);
      static PyObject *t_Among_get__substring_i(t_Among *self, void *data);

      static PyGetSetDef t_Among__fields_[] = {
        DECLARE_GET_FIELD(t_Among, methodobject),
        DECLARE_GET_FIELD(t_Among, result),
        DECLARE_GET_FIELD(t_Among, s),
        DECLARE_GET_FIELD(t_Among, s_size),
        DECLARE_GET_FIELD(t_Among, substring_i),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Among__methods_[] = {
        DECLARE_METHOD(t_Among, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Among, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Among, t_Among, ::java::lang::Object, Among, t_Among_init_, 0, 0, t_Among__fields_, 0, 0);

      void t_Among::install(PyObject *module)
      {
        installType(&PY_TYPE(Among), module, "Among", 0);
      }

      void t_Among::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "class_", make_descriptor(Among::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "wrapfn_", make_descriptor(t_Among::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Among::initializeClass, 1)))
          return NULL;
        return t_Among::wrap_Object(Among(((t_Among *) arg)->object.this$));
      }
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Among::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds)
      {
        ::java::lang::String a0((jobject) NULL);
        jint a1;
        jint a2;
        ::java::lang::String a3((jobject) NULL);
        ::org::tartarus::snowball::SnowballProgram a4((jobject) NULL);
        Among object((jobject) NULL);

        if (!parseArgs(args, "sIIsk", ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1, &a2, &a3, &a4))
        {
          INT_CALL(object = Among(a0, a1, a2, a3, a4));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Among_get__methodobject(t_Among *self, void *data)
      {
        ::org::tartarus::snowball::SnowballProgram value((jobject) NULL);
        OBJ_CALL(value = self->object._get_methodobject());
        return ::org::tartarus::snowball::t_SnowballProgram::wrap_Object(value);
      }

      static PyObject *t_Among_get__result(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_result());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__s(t_Among *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object._get_s());
        return value.wrap();
      }

      static PyObject *t_Among_get__s_size(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_s_size());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__substring_i(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_substring_i());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFieldFragList::class$ = NULL;
          jmethodID *WeightedFieldFragList::mids$ = NULL;
          bool WeightedFieldFragList::live$ = false;

          jclass WeightedFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFieldFragList::WeightedFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void WeightedFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args);

          static PyMethodDef t_WeightedFieldFragList__methods_[] = {
            DECLARE_METHOD(t_WeightedFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFieldFragList, t_WeightedFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, WeightedFieldFragList, t_WeightedFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_WeightedFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFieldFragList), module, "WeightedFieldFragList", 0);
          }

          void t_WeightedFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "class_", make_descriptor(WeightedFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_WeightedFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFieldFragList::initializeClass, 1)))
              return NULL;
            return t_WeightedFieldFragList::wrap_Object(WeightedFieldFragList(((t_WeightedFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            WeightedFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = WeightedFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WeightedFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenFilter::class$ = NULL;
        jmethodID *TokenFilter::mids$ = NULL;
        bool TokenFilter::live$ = false;

        jclass TokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        void TokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args);

        static PyMethodDef t_TokenFilter__methods_[] = {
          DECLARE_METHOD(t_TokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenFilter, t_TokenFilter, ::org::apache::lucene::analysis::TokenStream, TokenFilter, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenFilter), module, "TokenFilter", 0);
        }

        void t_TokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "class_", make_descriptor(TokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenFilter::initializeClass, 1)))
            return NULL;
          return t_TokenFilter::wrap_Object(TokenFilter(((t_TokenFilter *) arg)->object.this$));
        }
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeFacetCounts.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeFacetCounts::class$ = NULL;
          jmethodID *LongRangeFacetCounts::mids$ = NULL;
          bool LongRangeFacetCounts::live$ = false;

          jclass LongRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d97a5aae] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_f040242a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_9056893a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/LongRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::LongRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_d97a5aae, a0.this$, a1.this$, a2.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::LongRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f040242a, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::LongRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9056893a, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LongRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_LongRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeFacetCounts, t_LongRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, LongRangeFacetCounts, t_LongRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_LongRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeFacetCounts), module, "LongRangeFacetCounts", 0);
          }

          void t_LongRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "class_", make_descriptor(LongRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_LongRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_LongRangeFacetCounts::wrap_Object(LongRangeFacetCounts(((t_LongRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a2((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a3((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a4((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Shorts::class$ = NULL;
        jmethodID *FieldCache$Shorts::mids$ = NULL;
        bool FieldCache$Shorts::live$ = false;
        FieldCache$Shorts *FieldCache$Shorts::EMPTY = NULL;

        jclass FieldCache$Shorts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Shorts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd39] = env->getMethodID(cls, "get", "(I)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Shorts(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Shorts;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Shorts::FieldCache$Shorts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jshort FieldCache$Shorts::get(jint a0) const
        {
          return env->callShortMethod(this$, mids$[mid_get_39c7bd39], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Shorts__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Shorts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Shorts, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Shorts, t_FieldCache$Shorts, ::java::lang::Object, FieldCache$Shorts, t_FieldCache$Shorts_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Shorts::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Shorts), module, "FieldCache$Shorts", 0);
        }

        void t_FieldCache$Shorts::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "class_", make_descriptor(FieldCache$Shorts::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Shorts::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Shorts::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Shorts).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Shorts::wrap_Object(*FieldCache$Shorts::EMPTY)));
        }

        static PyObject *t_FieldCache$Shorts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Shorts::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Shorts::wrap_Object(FieldCache$Shorts(((t_FieldCache$Shorts *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Shorts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Shorts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Shorts_init_(t_FieldCache$Shorts *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Shorts object((jobject) NULL);

          INT_CALL(object = FieldCache$Shorts());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Shorts_get(t_FieldCache$Shorts *self, PyObject *arg)
        {
          jint a0;
          jshort result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$UnCompiledNode::class$ = NULL;
          jmethodID *Builder$UnCompiledNode::mids$ = NULL;
          jfieldID *Builder$UnCompiledNode::fids$ = NULL;
          bool Builder$UnCompiledNode::live$ = false;

          jclass Builder$UnCompiledNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$UnCompiledNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_343134b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Builder;I)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_getLastOutput_29be6a55] = env->getMethodID(cls, "getLastOutput", "(I)Ljava/lang/Object;");
              mids$[mid_isCompiled_54c6a16a] = env->getMethodID(cls, "isCompiled", "()Z");
              mids$[mid_prependOutput_290588ee] = env->getMethodID(cls, "prependOutput", "(Ljava/lang/Object;)V");
              mids$[mid_setLastOutput_f7cd74a4] = env->getMethodID(cls, "setLastOutput", "(ILjava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcs] = env->getFieldID(cls, "arcs", "[Lorg/apache/lucene/util/fst/Builder$Arc;");
              fids$[fid_depth] = env->getFieldID(cls, "depth", "I");
              fids$[fid_inputCount] = env->getFieldID(cls, "inputCount", "J");
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_numArcs] = env->getFieldID(cls, "numArcs", "I");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$UnCompiledNode::Builder$UnCompiledNode(const ::org::apache::lucene::util::fst::Builder & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_343134b4, a0.this$, a1)) {}

          void Builder$UnCompiledNode::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          ::java::lang::Object Builder$UnCompiledNode::getLastOutput(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLastOutput_29be6a55], a0));
          }

          jboolean Builder$UnCompiledNode::isCompiled() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCompiled_54c6a16a]);
          }

          void Builder$UnCompiledNode::prependOutput(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_prependOutput_290588ee], a0.this$);
          }

          void Builder$UnCompiledNode::setLastOutput(jint a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastOutput_f7cd74a4], a0, a1.this$);
          }

          JArray< ::org::apache::lucene::util::fst::Builder$Arc > Builder$UnCompiledNode::_get_arcs() const
          {
            return JArray< ::org::apache::lucene::util::fst::Builder$Arc >(env->getObjectField(this$, fids$[fid_arcs]));
          }

          void Builder$UnCompiledNode::_set_arcs(const JArray< ::org::apache::lucene::util::fst::Builder$Arc > & a0) const
          {
            env->setObjectField(this$, fids$[fid_arcs], a0.this$);
          }

          jint Builder$UnCompiledNode::_get_depth() const
          {
            return env->getIntField(this$, fids$[fid_depth]);
          }

          jlong Builder$UnCompiledNode::_get_inputCount() const
          {
            return env->getLongField(this$, fids$[fid_inputCount]);
          }

          void Builder$UnCompiledNode::_set_inputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_inputCount], a0);
          }

          jboolean Builder$UnCompiledNode::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$UnCompiledNode::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$UnCompiledNode::_get_numArcs() const
          {
            return env->getIntField(this$, fids$[fid_numArcs]);
          }

          void Builder$UnCompiledNode::_set_numArcs(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numArcs], a0);
          }

          ::java::lang::Object Builder$UnCompiledNode::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$UnCompiledNode::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args);
          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args);
          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data);
          static PyGetSetDef t_Builder$UnCompiledNode__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, arcs),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, depth),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, inputCount),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, numArcs),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, output),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, compiled),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$UnCompiledNode__methods_[] = {
            DECLARE_METHOD(t_Builder$UnCompiledNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, clear, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, getLastOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, isCompiled, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, prependOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, setLastOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$UnCompiledNode, t_Builder$UnCompiledNode, ::java::lang::Object, Builder$UnCompiledNode, t_Builder$UnCompiledNode_init_, 0, 0, t_Builder$UnCompiledNode__fields_, 0, 0);
          PyObject *t_Builder$UnCompiledNode::wrap_Object(const Builder$UnCompiledNode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$UnCompiledNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$UnCompiledNode::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$UnCompiledNode), module, "Builder$UnCompiledNode", 0);
          }

          void t_Builder$UnCompiledNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "class_", make_descriptor(Builder$UnCompiledNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "wrapfn_", make_descriptor(t_Builder$UnCompiledNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$UnCompiledNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$UnCompiledNode::initializeClass, 1)))
              return NULL;
            return t_Builder$UnCompiledNode::wrap_Object(Builder$UnCompiledNode(((t_Builder$UnCompiledNode *) arg)->object.this$));
          }
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$UnCompiledNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Builder a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            Builder$UnCompiledNode object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::fst::Builder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder::parameters_, &a1))
            {
              INT_CALL(object = Builder$UnCompiledNode(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getLastOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getLastOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCompiled());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(self->object.prependOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "prependOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.setLastOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastOutput", args);
            return NULL;
          }
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arcs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::fst::t_Builder$Arc::wrap_jobject);
          }
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::fst::Builder$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_depth());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_inputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_inputCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "inputCount", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numArcs());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numArcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numArcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCompiled());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSet::class$ = NULL;
        jmethodID *FilteredDocIdSet::mids$ = NULL;
        bool FilteredDocIdSet::live$ = false;

        jclass FilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52bc98cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSet::FilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_52bc98cb, a0.this$)) {}

        ::org::apache::lucene::util::Bits FilteredDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FilteredDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FilteredDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong FilteredDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args);
        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data);
        static PyGetSetDef t_FilteredDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSet, t_FilteredDocIdSet, ::org::apache::lucene::search::DocIdSet, FilteredDocIdSet, t_FilteredDocIdSet_init_, 0, 0, t_FilteredDocIdSet__fields_, 0, 0);

        void t_FilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSet), module, "FilteredDocIdSet", 0);
        }

        void t_FilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "class_", make_descriptor(FilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSet::wrap_Object(FilteredDocIdSet(((t_FilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSet_init_(t_FilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          FilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSet_bits(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_isCacheable(t_FilteredDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_iterator(t_FilteredDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_ramBytesUsed(t_FilteredDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FilteredDocIdSet_get__cacheable(t_FilteredDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MergeInfo::class$ = NULL;
        jmethodID *MergeInfo::mids$ = NULL;
        jfieldID *MergeInfo::fids$ = NULL;
        bool MergeInfo::live$ = false;

        jclass MergeInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MergeInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1629c044] = env->getMethodID(cls, "<init>", "(IJZI)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_isExternal] = env->getFieldID(cls, "isExternal", "Z");
            fids$[fid_mergeMaxNumSegments] = env->getFieldID(cls, "mergeMaxNumSegments", "I");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeInfo::MergeInfo(jint a0, jlong a1, jboolean a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1629c044, a0, a1, a2, a3)) {}

        jboolean MergeInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint MergeInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MergeInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MergeInfo::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        jboolean MergeInfo::_get_isExternal() const
        {
          return env->getBooleanField(this$, fids$[fid_isExternal]);
        }

        jint MergeInfo::_get_mergeMaxNumSegments() const
        {
          return env->getIntField(this$, fids$[fid_mergeMaxNumSegments]);
        }

        jint MergeInfo::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data);

        static PyGetSetDef t_MergeInfo__fields_[] = {
          DECLARE_GET_FIELD(t_MergeInfo, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergeInfo, isExternal),
          DECLARE_GET_FIELD(t_MergeInfo, mergeMaxNumSegments),
          DECLARE_GET_FIELD(t_MergeInfo, totalDocCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeInfo__methods_[] = {
          DECLARE_METHOD(t_MergeInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeInfo, t_MergeInfo, ::java::lang::Object, MergeInfo, t_MergeInfo_init_, 0, 0, t_MergeInfo__fields_, 0, 0);

        void t_MergeInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeInfo), module, "MergeInfo", 0);
        }

        void t_MergeInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "class_", make_descriptor(MergeInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "wrapfn_", make_descriptor(t_MergeInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeInfo::initializeClass, 1)))
            return NULL;
          return t_MergeInfo::wrap_Object(MergeInfo(((t_MergeInfo *) arg)->object.this$));
        }
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          jboolean a2;
          jint a3;
          MergeInfo object((jobject) NULL);

          if (!parseArgs(args, "IJZI", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MergeInfo(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MergeInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isExternal());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeMaxNumSegments());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MergeInfo_get__totalDocCount(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH1.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH1::class$ = NULL;
          jmethodID *NormalizationH1::mids$ = NULL;
          bool NormalizationH1::live$ = false;

          jclass NormalizationH1::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH1");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH1::NormalizationH1() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH1::NormalizationH1(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH1::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH1::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH1::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self);
          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data);
          static PyGetSetDef t_NormalizationH1__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH1, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH1__methods_[] = {
            DECLARE_METHOD(t_NormalizationH1, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH1, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH1, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH1, t_NormalizationH1, ::org::apache::lucene::search::similarities::Normalization, NormalizationH1, t_NormalizationH1_init_, 0, 0, t_NormalizationH1__fields_, 0, 0);

          void t_NormalizationH1::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH1), module, "NormalizationH1", 0);
          }

          void t_NormalizationH1::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "class_", make_descriptor(NormalizationH1::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH1::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH1::initializeClass, 1)))
              return NULL;
            return t_NormalizationH1::wrap_Object(NormalizationH1(((t_NormalizationH1 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH1::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH1 object((jobject) NULL);

                INT_CALL(object = NormalizationH1());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH1 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH1(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ChecksumIndexInput::class$ = NULL;
        jmethodID *ChecksumIndexInput::mids$ = NULL;
        bool ChecksumIndexInput::live$ = false;

        jclass ChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong ChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        void ChecksumIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self);
        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args);
        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data);
        static PyGetSetDef t_ChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ChecksumIndexInput, checksum),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_ChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_ChecksumIndexInput, seek, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChecksumIndexInput, t_ChecksumIndexInput, ::org::apache::lucene::store::IndexInput, ChecksumIndexInput, abstract_init, 0, 0, t_ChecksumIndexInput__fields_, 0, 0);

        void t_ChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ChecksumIndexInput), module, "ChecksumIndexInput", 0);
        }

        void t_ChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "class_", make_descriptor(ChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_ChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_ChecksumIndexInput::wrap_Object(ChecksumIndexInput(((t_ChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ChecksumIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "java/io/FileNotFoundException.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$DiskOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$DiskOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$DiskOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$DiskOrdinalMap::DirectoryTaxonomyWriter$DiskOrdinalMap(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$DiskOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), module, "DirectoryTaxonomyWriter$DiskOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$DiskOrdinalMap(((t_DirectoryTaxonomyWriter$DiskOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::File a0((jobject) NULL);
              DirectoryTaxonomyWriter$DiskOrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = DirectoryTaxonomyWriter$DiskOrdinalMap(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          jfieldID *Token::fids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
              mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
              mids$[mid_newToken_61c98f04] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_newToken_73220176] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
              fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
              fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
              fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
              fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
              fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
              fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/classic/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

          ::java::lang::Object Token::getValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
          }

          Token Token::newToken(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_61c98f04], a0));
          }

          Token Token::newToken(jint a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_73220176], a0, a1.this$));
          }

          ::java::lang::String Token::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint Token::_get_beginColumn() const
          {
            return env->getIntField(this$, fids$[fid_beginColumn]);
          }

          void Token::_set_beginColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginColumn], a0);
          }

          jint Token::_get_beginLine() const
          {
            return env->getIntField(this$, fids$[fid_beginLine]);
          }

          void Token::_set_beginLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginLine], a0);
          }

          jint Token::_get_endColumn() const
          {
            return env->getIntField(this$, fids$[fid_endColumn]);
          }

          void Token::_set_endColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endColumn], a0);
          }

          jint Token::_get_endLine() const
          {
            return env->getIntField(this$, fids$[fid_endLine]);
          }

          void Token::_set_endLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endLine], a0);
          }

          ::java::lang::String Token::_get_image() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
          }

          void Token::_set_image(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_image], a0.this$);
          }

          jint Token::_get_kind() const
          {
            return env->getIntField(this$, fids$[fid_kind]);
          }

          void Token::_set_kind(jint a0) const
          {
            env->setIntField(this$, fids$[fid_kind], a0);
          }

          Token Token::_get_next() const
          {
            return Token(env->getObjectField(this$, fids$[fid_next]));
          }

          void Token::_set_next(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_next], a0.this$);
          }

          Token Token::_get_specialToken() const
          {
            return Token(env->getObjectField(this$, fids$[fid_specialToken]));
          }

          void Token::_set_specialToken(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getValue(t_Token *self);
          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
          static PyObject *t_Token_toString(t_Token *self, PyObject *args);
          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endLine(t_Token *self, void *data);
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__image(t_Token *self, void *data);
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__kind(t_Token *self, void *data);
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__next(t_Token *self, void *data);
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

          static PyObject *t_Token_get__value(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GETSET_FIELD(t_Token, beginColumn),
            DECLARE_GETSET_FIELD(t_Token, beginLine),
            DECLARE_GETSET_FIELD(t_Token, endColumn),
            DECLARE_GETSET_FIELD(t_Token, endLine),
            DECLARE_GETSET_FIELD(t_Token, image),
            DECLARE_GETSET_FIELD(t_Token, kind),
            DECLARE_GETSET_FIELD(t_Token, next),
            DECLARE_GETSET_FIELD(t_Token, specialToken),
            DECLARE_GET_FIELD(t_Token, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
            DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Token, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Token object((jobject) NULL);

                INT_CALL(object = Token());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                Token object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = Token(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token object((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  INT_CALL(object = Token(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getValue(t_Token *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                Token result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0));
                  return t_Token::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0, a1));
                  return t_Token::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "newToken", args);
            return NULL;
          }

          static PyObject *t_Token_toString(t_Token *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__endLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__image(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_image());
            return j2p(value);
          }
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_image(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "image", arg);
            return -1;
          }

          static PyObject *t_Token_get__kind(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_kind());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_kind(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "kind", arg);
            return -1;
          }

          static PyObject *t_Token_get__next(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_next());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_next(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "next", arg);
            return -1;
          }

          static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_specialToken());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_specialToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
            return -1;
          }

          static PyObject *t_Token_get__value(t_Token *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilter::class$ = NULL;
          jmethodID *SwedishLightStemFilter::mids$ = NULL;
          bool SwedishLightStemFilter::live$ = false;

          jclass SwedishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilter::SwedishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SwedishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilter, t_SwedishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SwedishLightStemFilter, t_SwedishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilter), module, "SwedishLightStemFilter", 0);
          }

          void t_SwedishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "class_", make_descriptor(SwedishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilter::wrap_Object(SwedishLightStemFilter(((t_SwedishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SwedishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SwedishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *Cl2oTaxonomyWriterCache::class$ = NULL;
            jmethodID *Cl2oTaxonomyWriterCache::mids$ = NULL;
            bool Cl2oTaxonomyWriterCache::live$ = false;

            jclass Cl2oTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getMemoryUsage_54c6a179] = env->getMethodID(cls, "getMemoryUsage", "()I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Cl2oTaxonomyWriterCache::Cl2oTaxonomyWriterCache(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void Cl2oTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void Cl2oTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint Cl2oTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jint Cl2oTaxonomyWriterCache::getMemoryUsage() const
            {
              return env->callIntMethod(this$, mids$[mid_getMemoryUsage_54c6a179]);
            }

            jboolean Cl2oTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean Cl2oTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_Cl2oTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, full),
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, memoryUsage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Cl2oTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, getMemoryUsage, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache, ::java::lang::Object, Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache_init_, 0, 0, t_Cl2oTaxonomyWriterCache__fields_, 0, 0);

            void t_Cl2oTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(Cl2oTaxonomyWriterCache), module, "Cl2oTaxonomyWriterCache", 0);
            }

            void t_Cl2oTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "class_", make_descriptor(Cl2oTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_Cl2oTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_Cl2oTaxonomyWriterCache::wrap_Object(Cl2oTaxonomyWriterCache(((t_Cl2oTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              Cl2oTaxonomyWriterCache object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = Cl2oTaxonomyWriterCache(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMemoryUsage());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMemoryUsage());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *CachedFilterBuilder::class$ = NULL;
            jmethodID *CachedFilterBuilder::mids$ = NULL;
            bool CachedFilterBuilder::live$ = false;

            jclass CachedFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11d0c47f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilderFactory;Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CachedFilterBuilder::CachedFilterBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilderFactory & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11d0c47f, a0.this$, a1.this$, a2)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_CachedFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_CachedFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CachedFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CachedFilterBuilder, t_CachedFilterBuilder, ::java::lang::Object, CachedFilterBuilder, t_CachedFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_CachedFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(CachedFilterBuilder), module, "CachedFilterBuilder", 0);
            }

            void t_CachedFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "class_", make_descriptor(CachedFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_CachedFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CachedFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_CachedFilterBuilder::wrap_Object(CachedFilterBuilder(((t_CachedFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CachedFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilderFactory a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a1((jobject) NULL);
              jint a2;
              CachedFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::queryparser::xml::QueryBuilderFactory::initializeClass, ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CachedFilterBuilder(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *RangeQueryNode::class$ = NULL;
              jmethodID *RangeQueryNode::mids$ = NULL;
              bool RangeQueryNode::live$ = false;

              jclass RangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getLowerBound_2906e52b] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_2906e52b] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_54c6a16a] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_54c6a16a] = env->getMethodID(cls, "isUpperInclusive", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_2906e52b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_2906e52b]));
              }

              jboolean RangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_54c6a16a]);
              }

              jboolean RangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args);
              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data);
              static PyGetSetDef t_RangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_RangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_RangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isUpperInclusive, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RangeQueryNode, t_RangeQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, RangeQueryNode, abstract_init, 0, 0, t_RangeQueryNode__fields_, 0, 0);
              PyObject *t_RangeQueryNode::wrap_Object(const RangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_RangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_RangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RangeQueryNode), module, "RangeQueryNode", 0);
              }

              void t_RangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "class_", make_descriptor(RangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RangeQueryNode::wrap_Object(RangeQueryNode(((t_RangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThis::class$ = NULL;
          jmethodID *MoreLikeThis::mids$ = NULL;
          bool MoreLikeThis::live$ = false;
          jboolean MoreLikeThis::DEFAULT_BOOST = (jboolean) 0;
          JArray< ::java::lang::String > *MoreLikeThis::DEFAULT_FIELD_NAMES = NULL;
          jint MoreLikeThis::DEFAULT_MAX_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_QUERY_TERMS = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_WORD_LENGTH = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_TERM_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_WORD_LENGTH = (jint) 0;
          ::java::util::Set *MoreLikeThis::DEFAULT_STOP_WORDS = NULL;

          jclass MoreLikeThis::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThis");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_ac25be47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_describeParams_14c7b5c5] = env->getMethodID(cls, "describeParams", "()Ljava/lang/String;");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getBoostFactor_54c6a176] = env->getMethodID(cls, "getBoostFactor", "()F");
              mids$[mid_getFieldNames_2e6d5245] = env->getMethodID(cls, "getFieldNames", "()[Ljava/lang/String;");
              mids$[mid_getMaxDocFreq_54c6a179] = env->getMethodID(cls, "getMaxDocFreq", "()I");
              mids$[mid_getMaxNumTokensParsed_54c6a179] = env->getMethodID(cls, "getMaxNumTokensParsed", "()I");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMaxWordLen_54c6a179] = env->getMethodID(cls, "getMaxWordLen", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFreq_54c6a179] = env->getMethodID(cls, "getMinTermFreq", "()I");
              mids$[mid_getMinWordLen_54c6a179] = env->getMethodID(cls, "getMinWordLen", "()I");
              mids$[mid_getSimilarity_41a9d5af] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/TFIDFSimilarity;");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_isBoost_54c6a16a] = env->getMethodID(cls, "isBoost", "()Z");
              mids$[mid_like_2ad233cc] = env->getMethodID(cls, "like", "(I)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_8dd03cea] = env->getMethodID(cls, "like", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_e557659a] = env->getMethodID(cls, "like", "(Ljava/lang/String;[Ljava/io/Reader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_retrieveInterestingTerms_d74df9a3] = env->getMethodID(cls, "retrieveInterestingTerms", "(I)[Ljava/lang/String;");
              mids$[mid_retrieveInterestingTerms_bf65abe1] = env->getMethodID(cls, "retrieveInterestingTerms", "(Ljava/io/Reader;Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_retrieveTerms_df466ac9] = env->getMethodID(cls, "retrieveTerms", "(I)Lorg/apache/lucene/util/PriorityQueue;");
              mids$[mid_retrieveTerms_ed0c2893] = env->getMethodID(cls, "retrieveTerms", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/util/PriorityQueue;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setBoost_bb0c767f] = env->getMethodID(cls, "setBoost", "(Z)V");
              mids$[mid_setBoostFactor_06298cab] = env->getMethodID(cls, "setBoostFactor", "(F)V");
              mids$[mid_setFieldNames_4dd4540c] = env->getMethodID(cls, "setFieldNames", "([Ljava/lang/String;)V");
              mids$[mid_setMaxDocFreq_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreq", "(I)V");
              mids$[mid_setMaxDocFreqPct_39c7bd3c] = env->getMethodID(cls, "setMaxDocFreqPct", "(I)V");
              mids$[mid_setMaxNumTokensParsed_39c7bd3c] = env->getMethodID(cls, "setMaxNumTokensParsed", "(I)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMaxWordLen_39c7bd3c] = env->getMethodID(cls, "setMaxWordLen", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFreq_39c7bd3c] = env->getMethodID(cls, "setMinTermFreq", "(I)V");
              mids$[mid_setMinWordLen_39c7bd3c] = env->getMethodID(cls, "setMinWordLen", "(I)V");
              mids$[mid_setSimilarity_8af31e2e] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOOST = env->getStaticBooleanField(cls, "DEFAULT_BOOST");
              DEFAULT_FIELD_NAMES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "DEFAULT_FIELD_NAMES", "[Ljava/lang/String;"));
              DEFAULT_MAX_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MAX_DOC_FREQ");
              DEFAULT_MAX_NUM_TOKENS_PARSED = env->getStaticIntField(cls, "DEFAULT_MAX_NUM_TOKENS_PARSED");
              DEFAULT_MAX_QUERY_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_QUERY_TERMS");
              DEFAULT_MAX_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_LENGTH");
              DEFAULT_MIN_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_DOC_FREQ");
              DEFAULT_MIN_TERM_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_TERM_FREQ");
              DEFAULT_MIN_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_LENGTH");
              DEFAULT_STOP_WORDS = new ::java::util::Set(env->getStaticObjectField(cls, "DEFAULT_STOP_WORDS", "Ljava/util/Set;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac25be47, a0.this$, a1.this$)) {}

          ::java::lang::String MoreLikeThis::describeParams() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_describeParams_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThis::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          jfloat MoreLikeThis::getBoostFactor() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoostFactor_54c6a176]);
          }

          JArray< ::java::lang::String > MoreLikeThis::getFieldNames() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getFieldNames_2e6d5245]));
          }

          jint MoreLikeThis::getMaxDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMaxNumTokensParsed() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxNumTokensParsed_54c6a179]);
          }

          jint MoreLikeThis::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThis::getMaxWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxWordLen_54c6a179]);
          }

          jint MoreLikeThis::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinTermFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFreq_54c6a179]);
          }

          jint MoreLikeThis::getMinWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinWordLen_54c6a179]);
          }

          ::org::apache::lucene::search::similarities::TFIDFSimilarity MoreLikeThis::getSimilarity() const
          {
            return ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_41a9d5af]));
          }

          ::java::util::Set MoreLikeThis::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jboolean MoreLikeThis::isBoost() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isBoost_54c6a16a]);
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(jint a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_2ad233cc], a0));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_8dd03cea], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::lang::String & a0, const JArray< ::java::io::Reader > & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_e557659a], a0.this$, a1.this$));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(jint a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_d74df9a3], a0));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_bf65abe1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::PriorityQueue MoreLikeThis::retrieveTerms(jint a0) const
          {
            return ::org::apache::lucene::util::PriorityQueue(env->callObjectMethod(this$, mids$[mid_retrieveTerms_df466ac9], a0));
          }

          ::org::apache::lucene::util::PriorityQueue MoreLikeThis::retrieveTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::util::PriorityQueue(env->callObjectMethod(this$, mids$[mid_retrieveTerms_ed0c2893], a0.this$, a1.this$));
          }

          void MoreLikeThis::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThis::setBoost(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoost_bb0c767f], a0);
          }

          void MoreLikeThis::setBoostFactor(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoostFactor_06298cab], a0);
          }

          void MoreLikeThis::setFieldNames(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldNames_4dd4540c], a0.this$);
          }

          void MoreLikeThis::setMaxDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxDocFreqPct(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreqPct_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxNumTokensParsed(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxNumTokensParsed_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThis::setMaxWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinTermFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFreq_39c7bd3c], a0);
          }

          void MoreLikeThis::setMinWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinWordLen_39c7bd3c], a0);
          }

          void MoreLikeThis::setSimilarity(const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSimilarity_8af31e2e], a0.this$);
          }

          void MoreLikeThis::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThis__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThis, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boost),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boostFactor),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, fieldNames),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxDocFreq),
            DECLARE_SET_FIELD(t_MoreLikeThis, maxDocFreqPct),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxNumTokensParsed),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minTermFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, similarity),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThis__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThis, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, describeParams, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getBoostFactor, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getFieldNames, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxNumTokensParsed, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, isBoost, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, like, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveInterestingTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoost, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoostFactor, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setFieldNames, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreqPct, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxNumTokensParsed, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinTermFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setSimilarity, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setStopWords, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThis, t_MoreLikeThis, ::java::lang::Object, MoreLikeThis, t_MoreLikeThis_init_, 0, 0, t_MoreLikeThis__fields_, 0, 0);

          void t_MoreLikeThis::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThis), module, "MoreLikeThis", 0);
          }

          void t_MoreLikeThis::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "class_", make_descriptor(MoreLikeThis::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThis::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(MoreLikeThis::initializeClass);
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_BOOST", make_descriptor(MoreLikeThis::DEFAULT_BOOST));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_FIELD_NAMES", make_descriptor(JArray<jstring>(MoreLikeThis::DEFAULT_FIELD_NAMES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MAX_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_NUM_TOKENS_PARSED", make_descriptor(MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_QUERY_TERMS", make_descriptor(MoreLikeThis::DEFAULT_MAX_QUERY_TERMS));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MAX_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MAX_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_DOC_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_TERM_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_TERM_FREQ));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_MIN_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MIN_WORD_LENGTH));
            PyDict_SetItemString(PY_TYPE(MoreLikeThis).tp_dict, "DEFAULT_STOP_WORDS", make_descriptor(::java::util::t_Set::wrap_Object(*MoreLikeThis::DEFAULT_STOP_WORDS)));
          }

          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThis::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThis::wrap_Object(MoreLikeThis(((t_MoreLikeThis *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThis::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = MoreLikeThis(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::org::apache::lucene::search::similarities::TFIDFSimilarity a1((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MoreLikeThis(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.describeParams());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldNames());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinWordLen());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity result((jobject) NULL);
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isBoost());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.like(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::io::Reader > a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[k", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "like", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveInterestingTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::PriorityQueue result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveTerms(a0));
                  return ::org::apache::lucene::util::t_PriorityQueue::wrap_Object(result, &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::PriorityQueue result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveTerms(a0, a1));
                  return ::org::apache::lucene::util::t_PriorityQueue::wrap_Object(result, &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setBoost(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setBoostFactor(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoostFactor", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setFieldNames(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldNames", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreqPct(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreqPct", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxNumTokensParsed(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxNumTokensParsed", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSimilarity(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isBoost());
            Py_RETURN_BOOL(value);
          }
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setBoost(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boost", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setBoostFactor(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boostFactor", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldNames());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setFieldNames(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldNames", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreq", arg);
            return -1;
          }

          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreqPct(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreqPct", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxNumTokensParsed());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxNumTokensParsed(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxNumTokensParsed", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinWordLen());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
            OBJ_CALL(value = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &value))
              {
                INT_CALL(self->object.setSimilarity(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "similarity", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$GlobalReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$GlobalReuseStrategy::mids$ = NULL;
        bool Analyzer$GlobalReuseStrategy::live$ = false;

        jclass Analyzer$GlobalReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$GlobalReuseStrategy::Analyzer$GlobalReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$GlobalReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$GlobalReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$GlobalReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$GlobalReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$GlobalReuseStrategy), module, "Analyzer$GlobalReuseStrategy", 0);
        }

        void t_Analyzer$GlobalReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$GlobalReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$GlobalReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$GlobalReuseStrategy::wrap_Object(Analyzer$GlobalReuseStrategy(((t_Analyzer$GlobalReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$GlobalReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$GlobalReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianAnalyzer::class$ = NULL;
          jmethodID *ItalianAnalyzer::mids$ = NULL;
          bool ItalianAnalyzer::live$ = false;
          ::java::lang::String *ItalianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ItalianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ItalianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data);
          static PyGetSetDef t_ItalianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ItalianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ItalianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ItalianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianAnalyzer, t_ItalianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ItalianAnalyzer, t_ItalianAnalyzer_init_, 0, 0, t_ItalianAnalyzer__fields_, 0, 0);

          void t_ItalianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianAnalyzer), module, "ItalianAnalyzer", 0);
          }

          void t_ItalianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "class_", make_descriptor(ItalianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ItalianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ItalianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ItalianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ItalianAnalyzer::wrap_Object(ItalianAnalyzer(((t_ItalianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::it::ItalianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/eu/BasqueAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {

          ::java::lang::Class *BasqueAnalyzer::class$ = NULL;
          jmethodID *BasqueAnalyzer::mids$ = NULL;
          bool BasqueAnalyzer::live$ = false;
          ::java::lang::String *BasqueAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BasqueAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/eu/BasqueAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BasqueAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {
          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data);
          static PyGetSetDef t_BasqueAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BasqueAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasqueAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BasqueAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasqueAnalyzer, t_BasqueAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BasqueAnalyzer, t_BasqueAnalyzer_init_, 0, 0, t_BasqueAnalyzer__fields_, 0, 0);

          void t_BasqueAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BasqueAnalyzer), module, "BasqueAnalyzer", 0);
          }

          void t_BasqueAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "class_", make_descriptor(BasqueAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BasqueAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BasqueAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BasqueAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasqueAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BasqueAnalyzer::wrap_Object(BasqueAnalyzer(((t_BasqueAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasqueAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::eu::BasqueAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *ParserException::class$ = NULL;
          jmethodID *ParserException::mids$ = NULL;
          bool ParserException::live$ = false;

          jclass ParserException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/ParserException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserException::ParserException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParserException::ParserException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ParserException__methods_[] = {
            DECLARE_METHOD(t_ParserException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserException, t_ParserException, ::java::lang::Exception, ParserException, t_ParserException_init_, 0, 0, 0, 0, 0);

          void t_ParserException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserException), module, "ParserException", 0);
          }

          void t_ParserException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "class_", make_descriptor(ParserException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "wrapfn_", make_descriptor(t_ParserException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserException::initializeClass, 1)))
              return NULL;
            return t_ParserException::wrap_Object(ParserException(((t_ParserException *) arg)->object.this$));
          }
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParserException object((jobject) NULL);

                INT_CALL(object = ParserException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Throwable a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Throwable a1((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ParserException(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilter::class$ = NULL;
          jmethodID *HyphenatedWordsFilter::mids$ = NULL;
          bool HyphenatedWordsFilter::live$ = false;

          jclass HyphenatedWordsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilter::HyphenatedWordsFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HyphenatedWordsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HyphenatedWordsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args);
          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilter, t_HyphenatedWordsFilter, ::org::apache::lucene::analysis::TokenFilter, HyphenatedWordsFilter, t_HyphenatedWordsFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilter), module, "HyphenatedWordsFilter", 0);
          }

          void t_HyphenatedWordsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "class_", make_descriptor(HyphenatedWordsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilter::wrap_Object(HyphenatedWordsFilter(((t_HyphenatedWordsFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HyphenatedWordsFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HyphenatedWordsFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$RandomAccessFilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$RandomAccessFilterStrategy::mids$ = NULL;
        bool FilteredQuery$RandomAccessFilterStrategy::live$ = false;

        jclass FilteredQuery$RandomAccessFilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_useRandomAccess_7abf89aa] = env->getMethodID(cls, "useRandomAccess", "(Lorg/apache/lucene/util/Bits;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$RandomAccessFilterStrategy::FilteredQuery$RandomAccessFilterStrategy() : ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Scorer FilteredQuery$RandomAccessFilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$RandomAccessFilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy, ::org::apache::lucene::search::FilteredQuery$FilterStrategy, FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$RandomAccessFilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), module, "FilteredQuery$RandomAccessFilterStrategy", 0);
        }

        void t_FilteredQuery$RandomAccessFilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$RandomAccessFilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$RandomAccessFilterStrategy::wrap_Object(FilteredQuery$RandomAccessFilterStrategy(((t_FilteredQuery$RandomAccessFilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$RandomAccessFilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$RandomAccessFilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), (PyObject *) self, "filteredScorer", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways::class$ = NULL;
        jmethodID *DrillSideways::mids$ = NULL;
        bool DrillSideways::live$ = false;

        jclass DrillSideways::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47a6ec5e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_init$_f1ca4e8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)V");
            mids$[mid_init$_0ea4c17f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_search_f5942c04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_37cfd26e] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_32a5c782] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_8da44ba0] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_scoreSubDocsAtOnce_54c6a16a] = env->getMethodID(cls, "scoreSubDocsAtOnce", "()Z");
            mids$[mid_buildFacetsResult_3bbe989f] = env->getMethodID(cls, "buildFacetsResult", "(Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/FacetsCollector;[Ljava/lang/String;)Lorg/apache/lucene/facet/Facets;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47a6ec5e, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1ca4e8d, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ea4c17f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_f5942c04], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, jint a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_37cfd26e], a0.this$, a1));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::facet::DrillDownQuery & a1, jint a2) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_32a5c782], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_8da44ba0], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args);

        static PyMethodDef t_DrillSideways__methods_[] = {
          DECLARE_METHOD(t_DrillSideways, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, search, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways, t_DrillSideways, ::java::lang::Object, DrillSideways, t_DrillSideways_init_, 0, 0, 0, 0, 0);

        void t_DrillSideways::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways), module, "DrillSideways", 0);
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "DrillSidewaysResult", make_descriptor(&PY_TYPE(DrillSideways$DrillSidewaysResult)));
        }

        void t_DrillSideways::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "class_", make_descriptor(DrillSideways::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways::initializeClass, 1)))
            return NULL;
          return t_DrillSideways::wrap_Object(DrillSideways(((t_DrillSideways *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a3((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::facet::DrillDownQuery a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsAndPositionsEnum::class$ = NULL;
        jmethodID *DocsAndPositionsEnum::mids$ = NULL;
        bool DocsAndPositionsEnum::live$ = false;
        jint DocsAndPositionsEnum::FLAG_OFFSETS = (jint) 0;
        jint DocsAndPositionsEnum::FLAG_PAYLOADS = (jint) 0;

        jclass DocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_OFFSETS = env->getStaticIntField(cls, "FLAG_OFFSETS");
            FLAG_PAYLOADS = env->getStaticIntField(cls, "FLAG_PAYLOADS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint DocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef DocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint DocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint DocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_DocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_DocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, nextPosition, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, startOffset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsAndPositionsEnum, t_DocsAndPositionsEnum, ::org::apache::lucene::index::DocsEnum, DocsAndPositionsEnum, abstract_init, 0, 0, t_DocsAndPositionsEnum__fields_, 0, 0);

        void t_DocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsAndPositionsEnum), module, "DocsAndPositionsEnum", 0);
        }

        void t_DocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "class_", make_descriptor(DocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsAndPositionsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_OFFSETS", make_descriptor(DocsAndPositionsEnum::FLAG_OFFSETS));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_PAYLOADS", make_descriptor(DocsAndPositionsEnum::FLAG_PAYLOADS));
        }

        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsAndPositionsEnum::wrap_Object(DocsAndPositionsEnum(((t_DocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet::class$ = NULL;
        jmethodID *PForDeltaDocIdSet::mids$ = NULL;
        bool PForDeltaDocIdSet::live$ = false;

        jclass PForDeltaDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint PForDeltaDocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jboolean PForDeltaDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator PForDeltaDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong PForDeltaDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self);
        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_PForDeltaDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet, t_PForDeltaDocIdSet, ::org::apache::lucene::search::DocIdSet, PForDeltaDocIdSet, abstract_init, 0, 0, t_PForDeltaDocIdSet__fields_, 0, 0);

        void t_PForDeltaDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet), module, "PForDeltaDocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(PForDeltaDocIdSet$Builder)));
        }

        void t_PForDeltaDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet::wrap_Object(PForDeltaDocIdSet(((t_PForDeltaDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PForDeltaDocIdSet_cardinality(t_PForDeltaDocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PForDeltaDocIdSet_isCacheable(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_iterator(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_ramBytesUsed(t_PForDeltaDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(PForDeltaDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_PForDeltaDocIdSet_get__cacheable(t_PForDeltaDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionSPL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionSPL::class$ = NULL;
          jmethodID *DistributionSPL::mids$ = NULL;
          bool DistributionSPL::live$ = false;

          jclass DistributionSPL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionSPL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionSPL::DistributionSPL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionSPL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionSPL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args);
          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args);

          static PyMethodDef t_DistributionSPL__methods_[] = {
            DECLARE_METHOD(t_DistributionSPL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionSPL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionSPL, t_DistributionSPL, ::org::apache::lucene::search::similarities::Distribution, DistributionSPL, t_DistributionSPL_init_, 0, 0, 0, 0, 0);

          void t_DistributionSPL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionSPL), module, "DistributionSPL", 0);
          }

          void t_DistributionSPL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "class_", make_descriptor(DistributionSPL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "wrapfn_", make_descriptor(t_DistributionSPL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionSPL::initializeClass, 1)))
              return NULL;
            return t_DistributionSPL::wrap_Object(DistributionSPL(((t_DistributionSPL *) arg)->object.this$));
          }
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionSPL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds)
          {
            DistributionSPL object((jobject) NULL);

            INT_CALL(object = DistributionSPL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilter::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilter::mids$ = NULL;
          bool PortugueseMinimalStemFilter::live$ = false;

          jclass PortugueseMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilter::PortugueseMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilter), module, "PortugueseMinimalStemFilter", 0);
          }

          void t_PortugueseMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilter::wrap_Object(PortugueseMinimalStemFilter(((t_PortugueseMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/util/ArrayList.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *HyphenationTree::class$ = NULL;
            jmethodID *HyphenationTree::mids$ = NULL;
            bool HyphenationTree::live$ = false;

            jclass HyphenationTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/HyphenationTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_findPattern_97a5258f] = env->getMethodID(cls, "findPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_hyphenate_b8db7bec] = env->getMethodID(cls, "hyphenate", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_hyphenate_bc347fb6] = env->getMethodID(cls, "hyphenate", "([CIIII)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_loadPatterns_c3dacf57] = env->getMethodID(cls, "loadPatterns", "(Ljava/io/File;)V");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_getValues_b4292e98] = env->getMethodID(cls, "getValues", "(I)[B");
                mids$[mid_unpackValues_141401b3] = env->getMethodID(cls, "unpackValues", "(I)Ljava/lang/String;");
                mids$[mid_hstrcmp_aa5dc2ed] = env->getMethodID(cls, "hstrcmp", "([CI[CI)I");
                mids$[mid_searchPatterns_fa7f9f9d] = env->getMethodID(cls, "searchPatterns", "([CI[B)V");
                mids$[mid_packValues_5fdc3f57] = env->getMethodID(cls, "packValues", "(Ljava/lang/String;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            HyphenationTree::HyphenationTree() : ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void HyphenationTree::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void HyphenationTree::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void HyphenationTree::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }

            ::java::lang::String HyphenationTree::findPattern(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_findPattern_97a5258f], a0.this$));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const ::java::lang::String & a0, jint a1, jint a2) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_b8db7bec], a0.this$, a1, a2));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_bc347fb6], a0.this$, a1, a2, a3, a4));
            }

            void HyphenationTree::loadPatterns(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_loadPatterns_c3dacf57], a0.this$);
            }

            void HyphenationTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg);
            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds);
            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args);

            static PyMethodDef t_HyphenationTree__methods_[] = {
              DECLARE_METHOD(t_HyphenationTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, addClass, METH_O),
              DECLARE_METHOD(t_HyphenationTree, addException, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, addPattern, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, findPattern, METH_O),
              DECLARE_METHOD(t_HyphenationTree, hyphenate, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, loadPatterns, METH_O),
              DECLARE_METHOD(t_HyphenationTree, printStats, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(HyphenationTree, t_HyphenationTree, ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree, HyphenationTree, t_HyphenationTree_init_, 0, 0, 0, 0, 0);

            void t_HyphenationTree::install(PyObject *module)
            {
              installType(&PY_TYPE(HyphenationTree), module, "HyphenationTree", 0);
            }

            void t_HyphenationTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "class_", make_descriptor(HyphenationTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "wrapfn_", make_descriptor(t_HyphenationTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, HyphenationTree::initializeClass, 1)))
                return NULL;
              return t_HyphenationTree::wrap_Object(HyphenationTree(((t_HyphenationTree *) arg)->object.this$));
            }
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, HyphenationTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds)
            {
              HyphenationTree object((jobject) NULL);

              INT_CALL(object = HyphenationTree());
              self->object = object;

              return 0;
            }

            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.findPattern(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "findPattern", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "sII", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
                break;
               case 5:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  jint a3;
                  jint a4;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2, a3, a4));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "hyphenate", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::io::File a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(self->object.loadPatterns(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "loadPatterns", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(HyphenationTree), (PyObject *) self, "printStats", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *PhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool PhraseSlopQueryNodeProcessor::live$ = false;

              jclass PhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNodeProcessor::PhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_PhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNodeProcessor), module, "PhraseSlopQueryNodeProcessor", 0);
              }

              void t_PhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(PhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNodeProcessor::wrap_Object(PhraseSlopQueryNodeProcessor(((t_PhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *PrecedenceQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *PrecedenceQueryNodeProcessorPipeline::mids$ = NULL;
              bool PrecedenceQueryNodeProcessorPipeline::live$ = false;

              jclass PrecedenceQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrecedenceQueryNodeProcessorPipeline::PrecedenceQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PrecedenceQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline, PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_PrecedenceQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(PrecedenceQueryNodeProcessorPipeline), module, "PrecedenceQueryNodeProcessorPipeline", 0);
              }

              void t_PrecedenceQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(PrecedenceQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_PrecedenceQueryNodeProcessorPipeline::wrap_Object(PrecedenceQueryNodeProcessorPipeline(((t_PrecedenceQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                PrecedenceQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = PrecedenceQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelP.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelP::class$ = NULL;
          jmethodID *BasicModelP::mids$ = NULL;
          bool BasicModelP::live$ = false;

          jclass BasicModelP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelP::BasicModelP() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelP::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args);
          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args);

          static PyMethodDef t_BasicModelP__methods_[] = {
            DECLARE_METHOD(t_BasicModelP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelP, t_BasicModelP, ::org::apache::lucene::search::similarities::BasicModel, BasicModelP, t_BasicModelP_init_, 0, 0, 0, 0, 0);

          void t_BasicModelP::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelP), module, "BasicModelP", 0);
          }

          void t_BasicModelP::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "class_", make_descriptor(BasicModelP::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "wrapfn_", make_descriptor(t_BasicModelP::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelP::initializeClass, 1)))
              return NULL;
            return t_BasicModelP::wrap_Object(BasicModelP(((t_BasicModelP *) arg)->object.this$));
          }
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds)
          {
            BasicModelP object((jobject) NULL);

            INT_CALL(object = BasicModelP());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceFilterFactory::mids$ = NULL;
          bool PatternReplaceFilterFactory::live$ = false;

          jclass PatternReplaceFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d0c93252] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternReplaceFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilterFactory::PatternReplaceFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternReplaceFilter PatternReplaceFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternReplaceFilter(env->callObjectMethod(this$, mids$[mid_create_d0c93252], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilterFactory, t_PatternReplaceFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternReplaceFilterFactory, t_PatternReplaceFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilterFactory), module, "PatternReplaceFilterFactory", 0);
          }

          void t_PatternReplaceFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilterFactory::wrap_Object(PatternReplaceFilterFactory(((t_PatternReplaceFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternReplaceFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternReplaceFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceReader::class$ = NULL;
        jmethodID *IntBlockPool$SliceReader::mids$ = NULL;
        bool IntBlockPool$SliceReader::live$ = false;

        jclass IntBlockPool$SliceReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_endOfSlice_54c6a16a] = env->getMethodID(cls, "endOfSlice", "()Z");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_reset_d8d154a6] = env->getMethodID(cls, "reset", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceReader::IntBlockPool$SliceReader(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jboolean IntBlockPool$SliceReader::endOfSlice() const
        {
          return env->callBooleanMethod(this$, mids$[mid_endOfSlice_54c6a16a]);
        }

        jint IntBlockPool$SliceReader::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        void IntBlockPool$SliceReader::reset(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$SliceReader__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, endOfSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, readInt, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceReader, t_IntBlockPool$SliceReader, ::java::lang::Object, IntBlockPool$SliceReader, t_IntBlockPool$SliceReader_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$SliceReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceReader), module, "IntBlockPool$SliceReader", 0);
        }

        void t_IntBlockPool$SliceReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "class_", make_descriptor(IntBlockPool$SliceReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceReader::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceReader::wrap_Object(IntBlockPool$SliceReader(((t_IntBlockPool$SliceReader *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.endOfSlice());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.reset(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector$SearchGroupDocs::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector$SearchGroupDocs::mids$ = NULL;
          jfieldID *AbstractSecondPassGroupingCollector$SearchGroupDocs::fids$ = NULL;
          bool AbstractSecondPassGroupingCollector$SearchGroupDocs::live$ = false;

          jclass AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b73e617c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector;Ljava/lang/Object;Lorg/apache/lucene/search/TopDocsCollector;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_collector] = env->getFieldID(cls, "collector", "Lorg/apache/lucene/search/TopDocsCollector;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector$SearchGroupDocs::AbstractSecondPassGroupingCollector$SearchGroupDocs(const ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector & a0, const ::java::lang::Object & a1, const ::org::apache::lucene::search::TopDocsCollector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b73e617c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::TopDocsCollector AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_collector() const
          {
            return ::org::apache::lucene::search::TopDocsCollector(env->getObjectField(this$, fids$[fid_collector]));
          }

          ::java::lang::Object AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, collector),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, groupValue),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs, ::java::lang::Object, AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_, 0, 0, t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(const AbstractSecondPassGroupingCollector$SearchGroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs), module, "AbstractSecondPassGroupingCollector$SearchGroupDocs", 0);
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(AbstractSecondPassGroupingCollector$SearchGroupDocs(((t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::search::TopDocsCollector a2((jobject) NULL);
            PyTypeObject **p2;
            AbstractSecondPassGroupingCollector$SearchGroupDocs object((jobject) NULL);

            if (!parseArgs(args, "KoK", ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector::initializeClass, ::org::apache::lucene::search::TopDocsCollector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_AbstractSecondPassGroupingCollector::parameters_, &a1, &a2, &p2, ::org::apache::lucene::search::t_TopDocsCollector::parameters_))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector$SearchGroupDocs(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::org::apache::lucene::search::TopDocsCollector value((jobject) NULL);
            OBJ_CALL(value = self->object._get_collector());
            return ::org::apache::lucene::search::t_TopDocsCollector::wrap_Object(value);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphenation::class$ = NULL;
            jmethodID *Hyphenation::mids$ = NULL;
            bool Hyphenation::live$ = false;

            jclass Hyphenation::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphenation");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getHyphenationPoints_dab10e75] = env->getMethodID(cls, "getHyphenationPoints", "()[I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< jint > Hyphenation::getHyphenationPoints() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getHyphenationPoints_dab10e75]));
            }

            jint Hyphenation::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self);
            static PyObject *t_Hyphenation_length(t_Hyphenation *self);
            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data);
            static PyGetSetDef t_Hyphenation__fields_[] = {
              DECLARE_GET_FIELD(t_Hyphenation, hyphenationPoints),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphenation__methods_[] = {
              DECLARE_METHOD(t_Hyphenation, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, getHyphenationPoints, METH_NOARGS),
              DECLARE_METHOD(t_Hyphenation, length, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphenation, t_Hyphenation, ::java::lang::Object, Hyphenation, abstract_init, 0, 0, t_Hyphenation__fields_, 0, 0);

            void t_Hyphenation::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphenation), module, "Hyphenation", 0);
            }

            void t_Hyphenation::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "class_", make_descriptor(Hyphenation::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "wrapfn_", make_descriptor(t_Hyphenation::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphenation::initializeClass, 1)))
                return NULL;
              return t_Hyphenation::wrap_Object(Hyphenation(((t_Hyphenation *) arg)->object.this$));
            }
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphenation::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getHyphenationPoints());
              return result.wrap();
            }

            static PyObject *t_Hyphenation_length(t_Hyphenation *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getHyphenationPoints());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Thread.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "java/lang/Runnable.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/lang/Throwable.h"
#include "java/lang/Thread$UncaughtExceptionHandler.h"
#include "java/lang/String.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/Thread$State.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Thread::class$ = NULL;
    jmethodID *Thread::mids$ = NULL;
    bool Thread::live$ = false;
    jint Thread::MAX_PRIORITY = (jint) 0;
    jint Thread::MIN_PRIORITY = (jint) 0;
    jint Thread::NORM_PRIORITY = (jint) 0;

    jclass Thread::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Thread");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_db86d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_749aa364] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_88a58d93] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
        mids$[mid_init$_684615b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V");
        mids$[mid_init$_5db621bb] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_57d87d50] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
        mids$[mid_activeCount_54c6a179] = env->getStaticMethodID(cls, "activeCount", "()I");
        mids$[mid_checkAccess_54c6a166] = env->getMethodID(cls, "checkAccess", "()V");
        mids$[mid_countStackFrames_54c6a179] = env->getMethodID(cls, "countStackFrames", "()I");
        mids$[mid_currentThread_88082f50] = env->getStaticMethodID(cls, "currentThread", "()Ljava/lang/Thread;");
        mids$[mid_destroy_54c6a166] = env->getMethodID(cls, "destroy", "()V");
        mids$[mid_dumpStack_54c6a166] = env->getStaticMethodID(cls, "dumpStack", "()V");
        mids$[mid_enumerate_9e0743ee] = env->getStaticMethodID(cls, "enumerate", "([Ljava/lang/Thread;)I");
        mids$[mid_getAllStackTraces_db60befd] = env->getStaticMethodID(cls, "getAllStackTraces", "()Ljava/util/Map;");
        mids$[mid_getContextClassLoader_8d2f11fc] = env->getMethodID(cls, "getContextClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b] = env->getStaticMethodID(cls, "getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_getId_54c6a17a] = env->getMethodID(cls, "getId", "()J");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPriority_54c6a179] = env->getMethodID(cls, "getPriority", "()I");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getState_bbff3c63] = env->getMethodID(cls, "getState", "()Ljava/lang/Thread$State;");
        mids$[mid_getThreadGroup_172b52b4] = env->getMethodID(cls, "getThreadGroup", "()Ljava/lang/ThreadGroup;");
        mids$[mid_getUncaughtExceptionHandler_a65feb9b] = env->getMethodID(cls, "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_holdsLock_290588e2] = env->getStaticMethodID(cls, "holdsLock", "(Ljava/lang/Object;)Z");
        mids$[mid_interrupt_54c6a166] = env->getMethodID(cls, "interrupt", "()V");
        mids$[mid_interrupted_54c6a16a] = env->getStaticMethodID(cls, "interrupted", "()Z");
        mids$[mid_isAlive_54c6a16a] = env->getMethodID(cls, "isAlive", "()Z");
        mids$[mid_isDaemon_54c6a16a] = env->getMethodID(cls, "isDaemon", "()Z");
        mids$[mid_isInterrupted_54c6a16a] = env->getMethodID(cls, "isInterrupted", "()Z");
        mids$[mid_join_54c6a166] = env->getMethodID(cls, "join", "()V");
        mids$[mid_join_0ee6df2f] = env->getMethodID(cls, "join", "(J)V");
        mids$[mid_join_25d05c8f] = env->getMethodID(cls, "join", "(JI)V");
        mids$[mid_resume_54c6a166] = env->getMethodID(cls, "resume", "()V");
        mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
        mids$[mid_setContextClassLoader_9110048d] = env->getMethodID(cls, "setContextClassLoader", "(Ljava/lang/ClassLoader;)V");
        mids$[mid_setDaemon_bb0c767f] = env->getMethodID(cls, "setDaemon", "(Z)V");
        mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2] = env->getStaticMethodID(cls, "setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_setName_5fdc3f48] = env->getMethodID(cls, "setName", "(Ljava/lang/String;)V");
        mids$[mid_setPriority_39c7bd3c] = env->getMethodID(cls, "setPriority", "(I)V");
        mids$[mid_setUncaughtExceptionHandler_4dc005b2] = env->getMethodID(cls, "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_sleep_0ee6df2f] = env->getStaticMethodID(cls, "sleep", "(J)V");
        mids$[mid_sleep_25d05c8f] = env->getStaticMethodID(cls, "sleep", "(JI)V");
        mids$[mid_start_54c6a166] = env->getMethodID(cls, "start", "()V");
        mids$[mid_stop_54c6a166] = env->getMethodID(cls, "stop", "()V");
        mids$[mid_stop_c5ec8ca4] = env->getMethodID(cls, "stop", "(Ljava/lang/Throwable;)V");
        mids$[mid_suspend_54c6a166] = env->getMethodID(cls, "suspend", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_yield_54c6a166] = env->getStaticMethodID(cls, "yield", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_PRIORITY = env->getStaticIntField(cls, "MAX_PRIORITY");
        MIN_PRIORITY = env->getStaticIntField(cls, "MIN_PRIORITY");
        NORM_PRIORITY = env->getStaticIntField(cls, "NORM_PRIORITY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Thread::Thread() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Thread::Thread(const ::java::lang::Runnable & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_db86d7e2, a0.this$)) {}

    Thread::Thread(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Thread::Thread(const ::java::lang::Runnable & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_749aa364, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_88a58d93, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_684615b9, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5db621bb, a0.this$, a1.this$, a2.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_57d87d50, a0.this$, a1.this$, a2.this$, a3)) {}

    jint Thread::activeCount()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_activeCount_54c6a179]);
    }

    void Thread::checkAccess() const
    {
      env->callVoidMethod(this$, mids$[mid_checkAccess_54c6a166]);
    }

    jint Thread::countStackFrames() const
    {
      return env->callIntMethod(this$, mids$[mid_countStackFrames_54c6a179]);
    }

    Thread Thread::currentThread()
    {
      jclass cls = env->getClass(initializeClass);
      return Thread(env->callStaticObjectMethod(cls, mids$[mid_currentThread_88082f50]));
    }

    void Thread::destroy() const
    {
      env->callVoidMethod(this$, mids$[mid_destroy_54c6a166]);
    }

    void Thread::dumpStack()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_dumpStack_54c6a166]);
    }

    jint Thread::enumerate(const JArray< Thread > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_enumerate_9e0743ee], a0.this$);
    }

    ::java::util::Map Thread::getAllStackTraces()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getAllStackTraces_db60befd]));
    }

    ::java::lang::ClassLoader Thread::getContextClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getContextClassLoader_8d2f11fc]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getDefaultUncaughtExceptionHandler()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callStaticObjectMethod(cls, mids$[mid_getDefaultUncaughtExceptionHandler_a65feb9b]));
    }

    jlong Thread::getId() const
    {
      return env->callLongMethod(this$, mids$[mid_getId_54c6a17a]);
    }

    ::java::lang::String Thread::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    jint Thread::getPriority() const
    {
      return env->callIntMethod(this$, mids$[mid_getPriority_54c6a179]);
    }

    JArray< ::java::lang::StackTraceElement > Thread::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    ::java::lang::Thread$State Thread::getState() const
    {
      return ::java::lang::Thread$State(env->callObjectMethod(this$, mids$[mid_getState_bbff3c63]));
    }

    ::java::lang::ThreadGroup Thread::getThreadGroup() const
    {
      return ::java::lang::ThreadGroup(env->callObjectMethod(this$, mids$[mid_getThreadGroup_172b52b4]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getUncaughtExceptionHandler() const
    {
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callObjectMethod(this$, mids$[mid_getUncaughtExceptionHandler_a65feb9b]));
    }

    jboolean Thread::holdsLock(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_holdsLock_290588e2], a0.this$);
    }

    void Thread::interrupt() const
    {
      env->callVoidMethod(this$, mids$[mid_interrupt_54c6a166]);
    }

    jboolean Thread::interrupted()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_interrupted_54c6a16a]);
    }

    jboolean Thread::isAlive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAlive_54c6a16a]);
    }

    jboolean Thread::isDaemon() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDaemon_54c6a16a]);
    }

    jboolean Thread::isInterrupted() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterrupted_54c6a16a]);
    }

    void Thread::join() const
    {
      env->callVoidMethod(this$, mids$[mid_join_54c6a166]);
    }

    void Thread::join(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_join_0ee6df2f], a0);
    }

    void Thread::join(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_join_25d05c8f], a0, a1);
    }

    void Thread::resume() const
    {
      env->callVoidMethod(this$, mids$[mid_resume_54c6a166]);
    }

    void Thread::run() const
    {
      env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
    }

    void Thread::setContextClassLoader(const ::java::lang::ClassLoader & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setContextClassLoader_9110048d], a0.this$);
    }

    void Thread::setDaemon(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDaemon_bb0c767f], a0);
    }

    void Thread::setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setDefaultUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::setName(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setName_5fdc3f48], a0.this$);
    }

    void Thread::setPriority(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPriority_39c7bd3c], a0);
    }

    void Thread::setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setUncaughtExceptionHandler_4dc005b2], a0.this$);
    }

    void Thread::sleep(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_0ee6df2f], a0);
    }

    void Thread::sleep(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_25d05c8f], a0, a1);
    }

    void Thread::start() const
    {
      env->callVoidMethod(this$, mids$[mid_start_54c6a166]);
    }

    void Thread::stop() const
    {
      env->callVoidMethod(this$, mids$[mid_stop_54c6a166]);
    }

    void Thread::stop(const ::java::lang::Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_stop_c5ec8ca4], a0.this$);
    }

    void Thread::suspend() const
    {
      env->callVoidMethod(this$, mids$[mid_suspend_54c6a166]);
    }

    ::java::lang::String Thread::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Thread::yield()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_yield_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Thread_activeCount(PyTypeObject *type);
    static PyObject *t_Thread_checkAccess(t_Thread *self);
    static PyObject *t_Thread_countStackFrames(t_Thread *self);
    static PyObject *t_Thread_currentThread(PyTypeObject *type);
    static PyObject *t_Thread_destroy(t_Thread *self);
    static PyObject *t_Thread_dumpStack(PyTypeObject *type);
    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type);
    static PyObject *t_Thread_getContextClassLoader(t_Thread *self);
    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type);
    static PyObject *t_Thread_getId(t_Thread *self);
    static PyObject *t_Thread_getName(t_Thread *self);
    static PyObject *t_Thread_getPriority(t_Thread *self);
    static PyObject *t_Thread_getStackTrace(t_Thread *self);
    static PyObject *t_Thread_getState(t_Thread *self);
    static PyObject *t_Thread_getThreadGroup(t_Thread *self);
    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self);
    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_interrupt(t_Thread *self);
    static PyObject *t_Thread_interrupted(PyTypeObject *type);
    static PyObject *t_Thread_isAlive(t_Thread *self);
    static PyObject *t_Thread_isDaemon(t_Thread *self);
    static PyObject *t_Thread_isInterrupted(t_Thread *self);
    static PyObject *t_Thread_join(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_resume(t_Thread *self);
    static PyObject *t_Thread_run(t_Thread *self);
    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args);
    static PyObject *t_Thread_start(t_Thread *self);
    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_suspend(t_Thread *self);
    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_yield(PyTypeObject *type);
    static PyObject *t_Thread_get__alive(t_Thread *self, void *data);
    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data);
    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data);
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data);
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__id(t_Thread *self, void *data);
    static PyObject *t_Thread_get__name(t_Thread *self, void *data);
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__priority(t_Thread *self, void *data);
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data);
    static PyObject *t_Thread_get__state(t_Thread *self, void *data);
    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data);
    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyGetSetDef t_Thread__fields_[] = {
      DECLARE_GET_FIELD(t_Thread, alive),
      DECLARE_GET_FIELD(t_Thread, allStackTraces),
      DECLARE_GETSET_FIELD(t_Thread, contextClassLoader),
      DECLARE_GETSET_FIELD(t_Thread, daemon),
      DECLARE_GETSET_FIELD(t_Thread, defaultUncaughtExceptionHandler),
      DECLARE_GET_FIELD(t_Thread, id),
      DECLARE_GETSET_FIELD(t_Thread, name),
      DECLARE_GETSET_FIELD(t_Thread, priority),
      DECLARE_GET_FIELD(t_Thread, stackTrace),
      DECLARE_GET_FIELD(t_Thread, state),
      DECLARE_GET_FIELD(t_Thread, threadGroup),
      DECLARE_GETSET_FIELD(t_Thread, uncaughtExceptionHandler),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Thread__methods_[] = {
      DECLARE_METHOD(t_Thread, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, activeCount, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, checkAccess, METH_NOARGS),
      DECLARE_METHOD(t_Thread, countStackFrames, METH_NOARGS),
      DECLARE_METHOD(t_Thread, currentThread, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, destroy, METH_NOARGS),
      DECLARE_METHOD(t_Thread, dumpStack, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, enumerate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, getAllStackTraces, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getContextClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getDefaultUncaughtExceptionHandler, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getId, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getName, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getPriority, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getState, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getThreadGroup, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getUncaughtExceptionHandler, METH_NOARGS),
      DECLARE_METHOD(t_Thread, holdsLock, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, interrupt, METH_NOARGS),
      DECLARE_METHOD(t_Thread, interrupted, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, isAlive, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isDaemon, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isInterrupted, METH_NOARGS),
      DECLARE_METHOD(t_Thread, join, METH_VARARGS),
      DECLARE_METHOD(t_Thread, resume, METH_NOARGS),
      DECLARE_METHOD(t_Thread, run, METH_NOARGS),
      DECLARE_METHOD(t_Thread, setContextClassLoader, METH_O),
      DECLARE_METHOD(t_Thread, setDaemon, METH_O),
      DECLARE_METHOD(t_Thread, setDefaultUncaughtExceptionHandler, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, setName, METH_O),
      DECLARE_METHOD(t_Thread, setPriority, METH_O),
      DECLARE_METHOD(t_Thread, setUncaughtExceptionHandler, METH_O),
      DECLARE_METHOD(t_Thread, sleep, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, start, METH_NOARGS),
      DECLARE_METHOD(t_Thread, stop, METH_VARARGS),
      DECLARE_METHOD(t_Thread, suspend, METH_NOARGS),
      DECLARE_METHOD(t_Thread, toString, METH_VARARGS),
      DECLARE_METHOD(t_Thread, yield, METH_NOARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Thread, t_Thread, ::java::lang::Object, Thread, t_Thread_init_, 0, 0, t_Thread__fields_, 0, 0);

    void t_Thread::install(PyObject *module)
    {
      installType(&PY_TYPE(Thread), module, "Thread", 0);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "UncaughtExceptionHandler", make_descriptor(&PY_TYPE(Thread$UncaughtExceptionHandler)));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "State", make_descriptor(&PY_TYPE(Thread$State)));
    }

    void t_Thread::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "class_", make_descriptor(Thread::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "wrapfn_", make_descriptor(t_Thread::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Thread::initializeClass);
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MAX_PRIORITY", make_descriptor(Thread::MAX_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "MIN_PRIORITY", make_descriptor(Thread::MIN_PRIORITY));
      PyDict_SetItemString(PY_TYPE(Thread).tp_dict, "NORM_PRIORITY", make_descriptor(Thread::NORM_PRIORITY));
    }

    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Thread::initializeClass, 1)))
        return NULL;
      return t_Thread::wrap_Object(Thread(((t_Thread *) arg)->object.this$));
    }
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Thread::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Thread object((jobject) NULL);

          INT_CALL(object = Thread());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::ThreadGroup::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kks", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = Thread(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jlong a3;
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kksJ", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = Thread(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Thread_activeCount(PyTypeObject *type)
    {
      jint result;
      OBJ_CALL(result = ::java::lang::Thread::activeCount());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_checkAccess(t_Thread *self)
    {
      OBJ_CALL(self->object.checkAccess());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_countStackFrames(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.countStackFrames());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_currentThread(PyTypeObject *type)
    {
      Thread result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::currentThread());
      return t_Thread::wrap_Object(result);
    }

    static PyObject *t_Thread_destroy(t_Thread *self)
    {
      OBJ_CALL(self->object.destroy());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_dumpStack(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::dumpStack());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg)
    {
      JArray< Thread > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[k", Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::enumerate(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "enumerate", arg);
      return NULL;
    }

    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(Thread), &::java::lang::PY_TYPE(Object));
    }

    static PyObject *t_Thread_getContextClassLoader(t_Thread *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_getId(t_Thread *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Thread_getName(t_Thread *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Thread_getPriority(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getPriority());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Thread_getStackTrace(t_Thread *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_getState(t_Thread *self)
    {
      ::java::lang::Thread$State result((jobject) NULL);
      OBJ_CALL(result = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(result);
    }

    static PyObject *t_Thread_getThreadGroup(t_Thread *self)
    {
      ::java::lang::ThreadGroup result((jobject) NULL);
      OBJ_CALL(result = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(result);
    }

    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::holdsLock(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "holdsLock", arg);
      return NULL;
    }

    static PyObject *t_Thread_interrupt(t_Thread *self)
    {
      OBJ_CALL(self->object.interrupt());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_interrupted(PyTypeObject *type)
    {
      jboolean result;
      OBJ_CALL(result = ::java::lang::Thread::interrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isAlive(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAlive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isDaemon(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDaemon());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isInterrupted(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_join(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.join());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.join(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.join(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "join", args);
      return NULL;
    }

    static PyObject *t_Thread_resume(t_Thread *self)
    {
      OBJ_CALL(self->object.resume());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_run(t_Thread *self)
    {
      OBJ_CALL(self->object.run());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg)
    {
      ::java::lang::ClassLoader a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setContextClassLoader(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setContextClassLoader", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDaemon(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDaemon", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::Thread::setDefaultUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setDefaultUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setName(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setName", arg);
      return NULL;
    }

    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setPriority(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPriority", arg);
      return NULL;
    }

    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sleep", args);
      return NULL;
    }

    static PyObject *t_Thread_start(t_Thread *self)
    {
      OBJ_CALL(self->object.start());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.stop());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.stop(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "stop", args);
      return NULL;
    }

    static PyObject *t_Thread_suspend(t_Thread *self)
    {
      OBJ_CALL(self->object.suspend());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Thread), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Thread_yield(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::yield());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_get__alive(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAlive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::ClassLoader value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &value))
        {
          INT_CALL(self->object.setContextClassLoader(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "contextClassLoader", arg);
      return -1;
    }

    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDaemon());
      Py_RETURN_BOOL(value);
    }
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDaemon(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "daemon", arg);
      return -1;
    }

    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setDefaultUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "defaultUncaughtExceptionHandler", arg);
      return -1;
    }

    static PyObject *t_Thread_get__id(t_Thread *self, void *data)
    {
      jlong value;
      OBJ_CALL(value = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) value);
    }

    static PyObject *t_Thread_get__name(t_Thread *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setName(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "name", arg);
      return -1;
    }

    static PyObject *t_Thread_get__priority(t_Thread *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getPriority());
      return PyInt_FromLong((long) value);
    }
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setPriority(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "priority", arg);
      return -1;
    }

    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_get__state(t_Thread *self, void *data)
    {
      ::java::lang::Thread$State value((jobject) NULL);
      OBJ_CALL(value = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(value);
    }

    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data)
    {
      ::java::lang::ThreadGroup value((jobject) NULL);
      OBJ_CALL(value = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(value);
    }

    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "uncaughtExceptionHandler", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilter::class$ = NULL;
          jmethodID *ItalianLightStemFilter::mids$ = NULL;
          bool ItalianLightStemFilter::live$ = false;

          jclass ItalianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilter::ItalianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ItalianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilter, t_ItalianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, ItalianLightStemFilter, t_ItalianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilter), module, "ItalianLightStemFilter", 0);
          }

          void t_ItalianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "class_", make_descriptor(ItalianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilter::wrap_Object(ItalianLightStemFilter(((t_ItalianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ItalianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ItalianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState::class$ = NULL;
        jmethodID *MergeState::mids$ = NULL;
        jfieldID *MergeState::fids$ = NULL;
        bool MergeState::live$ = false;

        jclass MergeState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState");

            fids$ = new jfieldID[max_fid];
            fids$[fid_checkAbort] = env->getFieldID(cls, "checkAbort", "Lorg/apache/lucene/index/MergeState$CheckAbort;");
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "[I");
            fids$[fid_docMaps] = env->getFieldID(cls, "docMaps", "[Lorg/apache/lucene/index/MergeState$DocMap;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_matchedCount] = env->getFieldID(cls, "matchedCount", "I");
            fids$[fid_matchingSegmentReaders] = env->getFieldID(cls, "matchingSegmentReaders", "[Lorg/apache/lucene/index/SegmentReader;");
            fids$[fid_readers] = env->getFieldID(cls, "readers", "Ljava/util/List;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeState$CheckAbort MergeState::_get_checkAbort() const
        {
          return ::org::apache::lucene::index::MergeState$CheckAbort(env->getObjectField(this$, fids$[fid_checkAbort]));
        }

        JArray< jint > MergeState::_get_docBase() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docBase]));
        }

        void MergeState::_set_docBase(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docBase], a0.this$);
        }

        JArray< ::org::apache::lucene::index::MergeState$DocMap > MergeState::_get_docMaps() const
        {
          return JArray< ::org::apache::lucene::index::MergeState$DocMap >(env->getObjectField(this$, fids$[fid_docMaps]));
        }

        void MergeState::_set_docMaps(const JArray< ::org::apache::lucene::index::MergeState$DocMap > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docMaps], a0.this$);
        }

        ::org::apache::lucene::index::FieldInfos MergeState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        void MergeState::_set_fieldInfos(const ::org::apache::lucene::index::FieldInfos & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldInfos], a0.this$);
        }

        ::org::apache::lucene::util::InfoStream MergeState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        jint MergeState::_get_matchedCount() const
        {
          return env->getIntField(this$, fids$[fid_matchedCount]);
        }

        void MergeState::_set_matchedCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_matchedCount], a0);
        }

        JArray< ::org::apache::lucene::index::SegmentReader > MergeState::_get_matchingSegmentReaders() const
        {
          return JArray< ::org::apache::lucene::index::SegmentReader >(env->getObjectField(this$, fids$[fid_matchingSegmentReaders]));
        }

        void MergeState::_set_matchingSegmentReaders(const JArray< ::org::apache::lucene::index::SegmentReader > & a0) const
        {
          env->setObjectField(this$, fids$[fid_matchingSegmentReaders], a0.this$);
        }

        ::java::util::List MergeState::_get_readers() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_readers]));
        }

        ::org::apache::lucene::index::SegmentInfo MergeState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data);
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data);
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data);
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data);
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data);
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data);

        static PyGetSetDef t_MergeState__fields_[] = {
          DECLARE_GET_FIELD(t_MergeState, checkAbort),
          DECLARE_GETSET_FIELD(t_MergeState, docBase),
          DECLARE_GETSET_FIELD(t_MergeState, docMaps),
          DECLARE_GETSET_FIELD(t_MergeState, fieldInfos),
          DECLARE_GET_FIELD(t_MergeState, infoStream),
          DECLARE_GETSET_FIELD(t_MergeState, matchedCount),
          DECLARE_GETSET_FIELD(t_MergeState, matchingSegmentReaders),
          DECLARE_GET_FIELD(t_MergeState, readers),
          DECLARE_GET_FIELD(t_MergeState, segmentInfo),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeState__methods_[] = {
          DECLARE_METHOD(t_MergeState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState, t_MergeState, ::java::lang::Object, MergeState, abstract_init, 0, 0, t_MergeState__fields_, 0, 0);

        void t_MergeState::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState), module, "MergeState", 0);
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "CheckAbort", make_descriptor(&PY_TYPE(MergeState$CheckAbort)));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergeState$DocMap)));
        }

        void t_MergeState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "class_", make_descriptor(MergeState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "wrapfn_", make_descriptor(t_MergeState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState::initializeClass, 1)))
            return NULL;
          return t_MergeState::wrap_Object(MergeState(((t_MergeState *) arg)->object.this$));
        }
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::MergeState$CheckAbort value((jobject) NULL);
          OBJ_CALL(value = self->object._get_checkAbort());
          return ::org::apache::lucene::index::t_MergeState$CheckAbort::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docBase());
          return value.wrap();
        }
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_docBase(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docBase", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docMaps());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MergeState$DocMap::wrap_jobject);
        }
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::MergeState$DocMap::initializeClass, &value))
          {
            INT_CALL(self->object._set_docMaps(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docMaps", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfos::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfos", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_matchedCount());
          return PyInt_FromLong((long) value);
        }
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_matchedCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchedCount", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_matchingSegmentReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SegmentReader::wrap_jobject);
        }
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::SegmentReader::initializeClass, &value))
          {
            INT_CALL(self->object._set_matchingSegmentReaders(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchingSegmentReaders", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_readers());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingWrapperFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingWrapperFilter::class$ = NULL;
        jmethodID *CachingWrapperFilter::mids$ = NULL;
        bool CachingWrapperFilter::live$ = false;

        jclass CachingWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_cacheImpl_33cb740e] = env->getMethodID(cls, "cacheImpl", "(Lorg/apache/lucene/search/DocIdSetIterator;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingWrapperFilter::CachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        jboolean CachingWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet CachingWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Filter CachingWrapperFilter::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        jint CachingWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong CachingWrapperFilter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        ::java::lang::String CachingWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self);
        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args);
        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data);
        static PyGetSetDef t_CachingWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_CachingWrapperFilter, filter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_CachingWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CachingWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingWrapperFilter, t_CachingWrapperFilter, ::org::apache::lucene::search::Filter, CachingWrapperFilter, t_CachingWrapperFilter_init_, 0, 0, t_CachingWrapperFilter__fields_, 0, 0);

        void t_CachingWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingWrapperFilter), module, "CachingWrapperFilter", 0);
        }

        void t_CachingWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "class_", make_descriptor(CachingWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_CachingWrapperFilter::wrap_Object(CachingWrapperFilter(((t_CachingWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingWrapperFilter_init_(t_CachingWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          CachingWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
          {
            INT_CALL(object = CachingWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingWrapperFilter_equals(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getDocIdSet(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_getFilter(t_CachingWrapperFilter *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_CachingWrapperFilter_hashCode(t_CachingWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_ramBytesUsed(t_CachingWrapperFilter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CachingWrapperFilter_toString(t_CachingWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CachingWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CachingWrapperFilter_get__filter(t_CachingWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilter::class$ = NULL;
          jmethodID *TurkishLowerCaseFilter::mids$ = NULL;
          bool TurkishLowerCaseFilter::live$ = false;

          jclass TurkishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilter::TurkishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TurkishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_TurkishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishLowerCaseFilter, t_TurkishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, TurkishLowerCaseFilter, t_TurkishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_TurkishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilter), module, "TurkishLowerCaseFilter", 0);
          }

          void t_TurkishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "class_", make_descriptor(TurkishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_TurkishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilter::wrap_Object(TurkishLowerCaseFilter(((t_TurkishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TurkishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TurkishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TurkishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash::class$ = NULL;
        jmethodID *BytesRefHash::mids$ = NULL;
        bool BytesRefHash::live$ = false;
        jint BytesRefHash::DEFAULT_CAPACITY = (jint) 0;

        jclass BytesRefHash::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca821364] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;)V");
            mids$[mid_init$_348f324e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;ILorg/apache/lucene/util/BytesRefHash$BytesStartArray;)V");
            mids$[mid_add_7bc03ddb] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_addByPoolOffset_39c7bd23] = env->getMethodID(cls, "addByPoolOffset", "(I)I");
            mids$[mid_byteStart_39c7bd23] = env->getMethodID(cls, "byteStart", "(I)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clear_bb0c767f] = env->getMethodID(cls, "clear", "(Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_find_7bc03ddb] = env->getMethodID(cls, "find", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_get_ce5e2005] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_reinit_54c6a166] = env->getMethodID(cls, "reinit", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_sort_402cb660] = env->getMethodID(cls, "sort", "(Ljava/util/Comparator;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CAPACITY = env->getStaticIntField(cls, "DEFAULT_CAPACITY");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash::BytesRefHash() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca821364, a0.this$)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0, jint a1, const ::org::apache::lucene::util::BytesRefHash$BytesStartArray & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_348f324e, a0.this$, a1, a2.this$)) {}

        jint BytesRefHash::add(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_add_7bc03ddb], a0.this$);
        }

        jint BytesRefHash::addByPoolOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_addByPoolOffset_39c7bd23], a0);
        }

        jint BytesRefHash::byteStart(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_byteStart_39c7bd23], a0);
        }

        void BytesRefHash::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BytesRefHash::clear(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_bb0c767f], a0);
        }

        void BytesRefHash::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint BytesRefHash::find(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefHash::get(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_ce5e2005], a0, a1.this$));
        }

        void BytesRefHash::reinit() const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_54c6a166]);
        }

        jint BytesRefHash::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< jint > BytesRefHash::sort(const ::java::util::Comparator & a0) const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_sort_402cb660], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg);

        static PyMethodDef t_BytesRefHash__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, add, METH_O),
          DECLARE_METHOD(t_BytesRefHash, addByPoolOffset, METH_O),
          DECLARE_METHOD(t_BytesRefHash, byteStart, METH_O),
          DECLARE_METHOD(t_BytesRefHash, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, close, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, find, METH_O),
          DECLARE_METHOD(t_BytesRefHash, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, reinit, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, size, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, sort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash, t_BytesRefHash, ::java::lang::Object, BytesRefHash, t_BytesRefHash_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash), module, "BytesRefHash", 0);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DirectBytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$DirectBytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "BytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$BytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "MaxBytesLengthExceededException", make_descriptor(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException)));
        }

        void t_BytesRefHash::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "class_", make_descriptor(BytesRefHash::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefHash::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DEFAULT_CAPACITY", make_descriptor(BytesRefHash::DEFAULT_CAPACITY));
        }

        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash::wrap_Object(BytesRefHash(((t_BytesRefHash *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRefHash object((jobject) NULL);

              INT_CALL(object = BytesRefHash());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool::initializeClass, &a0))
              {
                INT_CALL(object = BytesRefHash(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::BytesRefHash$BytesStartArray a2((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::util::ByteBlockPool::initializeClass, ::org::apache::lucene::util::BytesRefHash$BytesStartArray::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRefHash(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.addByPoolOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addByPoolOffset", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteStart(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteStart", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.reinit());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = self->object.sort(a0));
            return result.wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyAnalyzer::class$ = NULL;
        jmethodID *CollationKeyAnalyzer::mids$ = NULL;
        bool CollationKeyAnalyzer::live$ = false;

        jclass CollationKeyAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_09eedbb5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/text/Collator;)V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_09eedbb5, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollationKeyAnalyzer__methods_[] = {
          DECLARE_METHOD(t_CollationKeyAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyAnalyzer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyAnalyzer, t_CollationKeyAnalyzer, ::org::apache::lucene::analysis::Analyzer, CollationKeyAnalyzer, t_CollationKeyAnalyzer_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyAnalyzer), module, "CollationKeyAnalyzer", 0);
        }

        void t_CollationKeyAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "class_", make_descriptor(CollationKeyAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyAnalyzer::initializeClass, 1)))
            return NULL;
          return t_CollationKeyAnalyzer::wrap_Object(CollationKeyAnalyzer(((t_CollationKeyAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::Version a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::text::Collator a1((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::text::Collator::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericFieldConfigListener::class$ = NULL;
              jmethodID *NumericFieldConfigListener::mids$ = NULL;
              bool NumericFieldConfigListener::live$ = false;

              jclass NumericFieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericFieldConfigListener::NumericFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void NumericFieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_NumericFieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_NumericFieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericFieldConfigListener, t_NumericFieldConfigListener, ::java::lang::Object, NumericFieldConfigListener, t_NumericFieldConfigListener_init_, 0, 0, 0, 0, 0);

              void t_NumericFieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericFieldConfigListener), module, "NumericFieldConfigListener", 0);
              }

              void t_NumericFieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "class_", make_descriptor(NumericFieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_NumericFieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericFieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_NumericFieldConfigListener::wrap_Object(NumericFieldConfigListener(((t_NumericFieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericFieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                NumericFieldConfigListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = NumericFieldConfigListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$QueryAndLimit::class$ = NULL;
        jmethodID *BufferedUpdatesStream$QueryAndLimit::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$QueryAndLimit::fids$ = NULL;
        bool BufferedUpdatesStream$QueryAndLimit::live$ = false;

        jclass BufferedUpdatesStream$QueryAndLimit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$QueryAndLimit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e29027ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_limit] = env->getFieldID(cls, "limit", "I");
            fids$[fid_query] = env->getFieldID(cls, "query", "Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedUpdatesStream$QueryAndLimit::BufferedUpdatesStream$QueryAndLimit(const ::org::apache::lucene::search::Query & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e29027ff, a0.this$, a1)) {}

        jint BufferedUpdatesStream$QueryAndLimit::_get_limit() const
        {
          return env->getIntField(this$, fids$[fid_limit]);
        }

        ::org::apache::lucene::search::Query BufferedUpdatesStream$QueryAndLimit::_get_query() const
        {
          return ::org::apache::lucene::search::Query(env->getObjectField(this$, fids$[fid_query]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$QueryAndLimit__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, limit),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$QueryAndLimit, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$QueryAndLimit__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$QueryAndLimit, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit, ::java::lang::Object, BufferedUpdatesStream$QueryAndLimit, t_BufferedUpdatesStream$QueryAndLimit_init_, 0, 0, t_BufferedUpdatesStream$QueryAndLimit__fields_, 0, 0);

        void t_BufferedUpdatesStream$QueryAndLimit::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$QueryAndLimit), module, "BufferedUpdatesStream$QueryAndLimit", 0);
        }

        void t_BufferedUpdatesStream$QueryAndLimit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$QueryAndLimit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$QueryAndLimit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$QueryAndLimit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$QueryAndLimit::wrap_Object(BufferedUpdatesStream$QueryAndLimit(((t_BufferedUpdatesStream$QueryAndLimit *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$QueryAndLimit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedUpdatesStream$QueryAndLimit_init_(t_BufferedUpdatesStream$QueryAndLimit *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          BufferedUpdatesStream$QueryAndLimit object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BufferedUpdatesStream$QueryAndLimit(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__limit(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_limit());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_BufferedUpdatesStream$QueryAndLimit_get__query(t_BufferedUpdatesStream$QueryAndLimit *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object._get_query());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache$CloneableKey::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache$CloneableKey::mids$ = NULL;
        bool DoubleBarrelLRUCache$CloneableKey::live$ = false;

        jclass DoubleBarrelLRUCache$CloneableKey::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_233cec6c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache$CloneableKey::DoubleBarrelLRUCache$CloneableKey() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DoubleBarrelLRUCache$CloneableKey DoubleBarrelLRUCache$CloneableKey::clone() const
        {
          return DoubleBarrelLRUCache$CloneableKey(env->callObjectMethod(this$, mids$[mid_clone_233cec6c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args);
        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache$CloneableKey__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache$CloneableKey, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache$CloneableKey__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey, ::java::lang::Object, DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey_init_, 0, 0, t_DoubleBarrelLRUCache$CloneableKey__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(const DoubleBarrelLRUCache$CloneableKey& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache$CloneableKey::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey), module, "DoubleBarrelLRUCache$CloneableKey", 0);
        }

        void t_DoubleBarrelLRUCache$CloneableKey::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache$CloneableKey::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(DoubleBarrelLRUCache$CloneableKey(((t_DoubleBarrelLRUCache$CloneableKey *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds)
        {
          DoubleBarrelLRUCache$CloneableKey object((jobject) NULL);

          INT_CALL(object = DoubleBarrelLRUCache$CloneableKey());
          self->object = object;

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self)
        {
          DoubleBarrelLRUCache$CloneableKey result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(result);
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter::class$ = NULL;
        jmethodID *IndexWriter::mids$ = NULL;
        bool IndexWriter::live$ = false;
        jint IndexWriter::MAX_TERM_LENGTH = (jint) 0;
        ::java::lang::String *IndexWriter::SOURCE = NULL;
        ::java::lang::String *IndexWriter::SOURCE_ADDINDEXES_READERS = NULL;
        ::java::lang::String *IndexWriter::SOURCE_FLUSH = NULL;
        ::java::lang::String *IndexWriter::SOURCE_MERGE = NULL;
        ::java::lang::String *IndexWriter::WRITE_LOCK_NAME = NULL;

        jclass IndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_02525b2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_addDocument_d1cac205] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocument_f74a1d55] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addDocuments_d1cac205] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocuments_f74a1d55] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addIndexes_a20f8ee9] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_addIndexes_160e6086] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_close_bb0c767f] = env->getMethodID(cls, "close", "(Z)V");
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_deleteAll_54c6a166] = env->getMethodID(cls, "deleteAll", "()V");
            mids$[mid_deleteDocuments_c9f85e01] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_deleteDocuments_937b34d3] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)V");
            mids$[mid_deleteUnusedFiles_54c6a166] = env->getMethodID(cls, "deleteUnusedFiles", "()V");
            mids$[mid_forceMerge_39c7bd3c] = env->getMethodID(cls, "forceMerge", "(I)V");
            mids$[mid_forceMerge_b3a85a05] = env->getMethodID(cls, "forceMerge", "(IZ)V");
            mids$[mid_forceMergeDeletes_54c6a166] = env->getMethodID(cls, "forceMergeDeletes", "()V");
            mids$[mid_forceMergeDeletes_bb0c767f] = env->getMethodID(cls, "forceMergeDeletes", "(Z)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
            mids$[mid_getConfig_d6b985f6] = env->getMethodID(cls, "getConfig", "()Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getMergingSegments_2d2d7de4] = env->getMethodID(cls, "getMergingSegments", "()Ljava/util/Collection;");
            mids$[mid_getNextMerge_2a262a14] = env->getMethodID(cls, "getNextMerge", "()Lorg/apache/lucene/index/MergePolicy$OneMerge;");
            mids$[mid_getReader_1de06693] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getReader_cfe2828e] = env->getMethodID(cls, "getReader", "(Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasPendingMerges_54c6a16a] = env->getMethodID(cls, "hasPendingMerges", "()Z");
            mids$[mid_hasUncommittedChanges_54c6a16a] = env->getMethodID(cls, "hasUncommittedChanges", "()Z");
            mids$[mid_isLocked_2e261efe] = env->getStaticMethodID(cls, "isLocked", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_maybeMerge_54c6a166] = env->getMethodID(cls, "maybeMerge", "()V");
            mids$[mid_merge_54badd95] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_numDeletedDocs_6649cdeb] = env->getMethodID(cls, "numDeletedDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_numRamDocs_54c6a179] = env->getMethodID(cls, "numRamDocs", "()I");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_ramSizeInBytes_54c6a17a] = env->getMethodID(cls, "ramSizeInBytes", "()J");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
            mids$[mid_segString_14c7b5c5] = env->getMethodID(cls, "segString", "()Ljava/lang/String;");
            mids$[mid_segString_e5fcb63c] = env->getMethodID(cls, "segString", "(Ljava/lang/Iterable;)Ljava/lang/String;");
            mids$[mid_segString_edb3a3c3] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Ljava/lang/String;");
            mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
            mids$[mid_tryDeleteDocument_1e4306e9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)Z");
            mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_updateBinaryDocValue_1aaa0ac7] = env->getMethodID(cls, "updateBinaryDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_updateDocValues_48345845] = env->getMethodID(cls, "updateDocValues", "(Lorg/apache/lucene/index/Term;[Lorg/apache/lucene/document/Field;)V");
            mids$[mid_updateDocument_b5aef5e2] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocument_4d995db8] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateDocuments_b5aef5e2] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocuments_4d995db8] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateNumericDocValue_3866ef1c] = env->getMethodID(cls, "updateNumericDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;J)V");
            mids$[mid_waitForMerges_54c6a166] = env->getMethodID(cls, "waitForMerges", "()V");
            mids$[mid_flush_46f2e2c4] = env->getMethodID(cls, "flush", "(ZZ)V");
            mids$[mid_ensureOpen_bb0c767f] = env->getMethodID(cls, "ensureOpen", "(Z)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doAfterFlush_54c6a166] = env->getMethodID(cls, "doAfterFlush", "()V");
            mids$[mid_doBeforeFlush_54c6a166] = env->getMethodID(cls, "doBeforeFlush", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_TERM_LENGTH = env->getStaticIntField(cls, "MAX_TERM_LENGTH");
            SOURCE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE", "Ljava/lang/String;"));
            SOURCE_ADDINDEXES_READERS = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_ADDINDEXES_READERS", "Ljava/lang/String;"));
            SOURCE_FLUSH = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_FLUSH", "Ljava/lang/String;"));
            SOURCE_MERGE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_MERGE", "Ljava/lang/String;"));
            WRITE_LOCK_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "WRITE_LOCK_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriter::IndexWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_02525b2d, a0.this$, a1.this$)) {}

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_d1cac205], a0.this$);
        }

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_d1cac205], a0.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_a20f8ee9], a0.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_160e6086], a0.this$);
        }

        void IndexWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexWriter::close(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_close_bb0c767f], a0);
        }

        void IndexWriter::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void IndexWriter::deleteAll() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteAll_54c6a166]);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_c9f85e01], a0.this$);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_937b34d3], a0.this$);
        }

        void IndexWriter::deleteUnusedFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteUnusedFiles_54c6a166]);
        }

        void IndexWriter::forceMerge(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_39c7bd3c], a0);
        }

        void IndexWriter::forceMerge(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_b3a85a05], a0, a1);
        }

        void IndexWriter::forceMergeDeletes() const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_54c6a166]);
        }

        void IndexWriter::forceMergeDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_bb0c767f], a0);
        }

        ::org::apache::lucene::analysis::Analyzer IndexWriter::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::java::util::Map IndexWriter::getCommitData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
        }

        ::org::apache::lucene::index::LiveIndexWriterConfig IndexWriter::getConfig() const
        {
          return ::org::apache::lucene::index::LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_getConfig_d6b985f6]));
        }

        ::org::apache::lucene::store::Directory IndexWriter::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexWriter::getMergingSegments() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getMergingSegments_2d2d7de4]));
        }

        ::org::apache::lucene::index::MergePolicy$OneMerge IndexWriter::getNextMerge() const
        {
          return ::org::apache::lucene::index::MergePolicy$OneMerge(env->callObjectMethod(this$, mids$[mid_getNextMerge_2a262a14]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader() const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_1de06693]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader(jboolean a0) const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_cfe2828e], a0));
        }

        jboolean IndexWriter::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean IndexWriter::hasPendingMerges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPendingMerges_54c6a16a]);
        }

        jboolean IndexWriter::hasUncommittedChanges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasUncommittedChanges_54c6a16a]);
        }

        jboolean IndexWriter::isLocked(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isLocked_2e261efe], a0.this$);
        }

        jint IndexWriter::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        void IndexWriter::maybeMerge() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeMerge_54c6a166]);
        }

        void IndexWriter::merge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_54badd95], a0.this$);
        }

        jint IndexWriter::numDeletedDocs(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_6649cdeb], a0.this$);
        }

        jint IndexWriter::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jint IndexWriter::numRamDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numRamDocs_54c6a179]);
        }

        void IndexWriter::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        jlong IndexWriter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        jlong IndexWriter::ramSizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_ramSizeInBytes_54c6a17a]);
        }

        void IndexWriter::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }

        ::java::lang::String IndexWriter::segString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_14c7b5c5]));
        }

        ::java::lang::String IndexWriter::segString(const ::java::lang::Iterable & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_e5fcb63c], a0.this$));
        }

        ::java::lang::String IndexWriter::segString(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_edb3a3c3], a0.this$));
        }

        void IndexWriter::setCommitData(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
        }

        jboolean IndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryDeleteDocument_1e4306e9], a0.this$, a1);
        }

        void IndexWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
        }

        void IndexWriter::updateBinaryDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateBinaryDocValue_1aaa0ac7], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocValues(const ::org::apache::lucene::index::Term & a0, const JArray< ::org::apache::lucene::document::Field > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocValues_48345845], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateNumericDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, jlong a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateNumericDocValue_3866ef1c], a0.this$, a1.this$, a2);
        }

        void IndexWriter::waitForMerges() const
        {
          env->callVoidMethod(this$, mids$[mid_waitForMerges_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_commit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self);
        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self);
        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self);
        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self);
        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data);
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data);
        static PyGetSetDef t_IndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriter, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriter, commitData),
          DECLARE_GET_FIELD(t_IndexWriter, config),
          DECLARE_GET_FIELD(t_IndexWriter, directory),
          DECLARE_GET_FIELD(t_IndexWriter, mergingSegments),
          DECLARE_GET_FIELD(t_IndexWriter, nextMerge),
          DECLARE_GET_FIELD(t_IndexWriter, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriter__methods_[] = {
          DECLARE_METHOD(t_IndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, close, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, commit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, deleteUnusedFiles, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, forceMerge, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, forceMergeDeletes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getCommitData, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getConfig, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getMergingSegments, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getNextMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getReader, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasPendingMerges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasUncommittedChanges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, isLocked, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, maybeMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, merge, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDeletedDocs, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, numRamDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramSizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, rollback, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, segString, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, setCommitData, METH_O),
          DECLARE_METHOD(t_IndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, unlock, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, updateBinaryDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocValues, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateNumericDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, waitForMerges, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter, t_IndexWriter, ::java::lang::Object, IndexWriter, t_IndexWriter_init_, 0, 0, t_IndexWriter__fields_, 0, 0);

        void t_IndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter), module, "IndexWriter", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "IndexReaderWarmer", make_descriptor(&PY_TYPE(IndexWriter$IndexReaderWarmer)));
        }

        void t_IndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "class_", make_descriptor(IndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriter::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "MAX_TERM_LENGTH", make_descriptor(IndexWriter::MAX_TERM_LENGTH));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE", make_descriptor(j2p(*IndexWriter::SOURCE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_ADDINDEXES_READERS", make_descriptor(j2p(*IndexWriter::SOURCE_ADDINDEXES_READERS)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_FLUSH", make_descriptor(j2p(*IndexWriter::SOURCE_FLUSH)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_MERGE", make_descriptor(j2p(*IndexWriter::SOURCE_MERGE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "WRITE_LOCK_NAME", make_descriptor(j2p(*IndexWriter::WRITE_LOCK_NAME)));
        }

        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter::initializeClass, 1)))
            return NULL;
          return t_IndexWriter::wrap_Object(IndexWriter(((t_IndexWriter *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
          IndexWriter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexWriter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocument(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "close", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_commit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteAll());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteUnusedFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.forceMerge(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jboolean a1;

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(self->object.forceMerge(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMerge", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.forceMergeDeletes());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.forceMergeDeletes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig result((jobject) NULL);
          OBJ_CALL(result = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getReader());
              return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getReader(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getReader", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPendingMerges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasUncommittedChanges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriter::isLocked(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isLocked", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.maybeMerge());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletedDocs(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletedDocs", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numRamDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramSizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.segString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "segString", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setCommitData(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriter::unlock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "unlock", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateBinaryDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateBinaryDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          JArray< ::org::apache::lucene::document::Field > a1((jobject) NULL);

          if (!parseArgs(args, "k[k", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.updateDocValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocValues", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;

          if (!parseArgs(args, "ksJ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateNumericDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateNumericDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.waitForMerges());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setCommitData(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "commitData", arg);
          return -1;
        }

        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig value((jobject) NULL);
          OBJ_CALL(value = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::DirectoryReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getReader());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig::class$ = NULL;
        jmethodID *IndexWriterConfig::mids$ = NULL;
        bool IndexWriterConfig::live$ = false;
        jboolean IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_THREAD_STATES = (jint) 0;
        jdouble IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB = (jdouble) 0;
        jint IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_READER_POOLING = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR = (jint) 0;
        jint IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM = (jboolean) 0;
        jint IndexWriterConfig::DISABLE_AUTO_FLUSH = (jint) 0;
        jlong IndexWriterConfig::WRITE_LOCK_TIMEOUT = (jlong) 0;

        jclass IndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b2a1ba2f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefaultWriteLockTimeout_54c6a17a] = env->getStaticMethodID(cls, "getDefaultWriteLockTimeout", "()J");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCodec_c6322414] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setDefaultWriteLockTimeout_0ee6df2f] = env->getStaticMethodID(cls, "setDefaultWriteLockTimeout", "(J)V");
            mids$[mid_setIndexCommit_ec04569d] = env->getMethodID(cls, "setIndexCommit", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexDeletionPolicy_e3778c88] = env->getMethodID(cls, "setIndexDeletionPolicy", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_46a28868] = env->getMethodID(cls, "setInfoStream", "(Lorg/apache/lucene/util/InfoStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_915f97a5] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxThreadStates_0a512c4a] = env->getMethodID(cls, "setMaxThreadStates", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergePolicy_35fd1692] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergeScheduler_a7b4ba7a] = env->getMethodID(cls, "setMergeScheduler", "(Lorg/apache/lucene/index/MergeScheduler;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_f60591d0] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setOpenMode_ecf4c6f7] = env->getMethodID(cls, "setOpenMode", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_f49ea4cb] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a] = env->getMethodID(cls, "setRAMPerThreadHardLimitMB", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderPooling_53913b61] = env->getMethodID(cls, "setReaderPooling", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_0a512c4a] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setSimilarity_842e4878] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setTermIndexInterval_0a512c4a] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setUseCompoundFile_53913b61] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setWriteLockTimeout_c56ab6f1] = env->getMethodID(cls, "setWriteLockTimeout", "(J)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CHECK_INTEGRITY_AT_MERGE = env->getStaticBooleanField(cls, "DEFAULT_CHECK_INTEGRITY_AT_MERGE");
            DEFAULT_MAX_BUFFERED_DELETE_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DELETE_TERMS");
            DEFAULT_MAX_BUFFERED_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DOCS");
            DEFAULT_MAX_THREAD_STATES = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_STATES");
            DEFAULT_RAM_BUFFER_SIZE_MB = env->getStaticDoubleField(cls, "DEFAULT_RAM_BUFFER_SIZE_MB");
            DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = env->getStaticIntField(cls, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB");
            DEFAULT_READER_POOLING = env->getStaticBooleanField(cls, "DEFAULT_READER_POOLING");
            DEFAULT_READER_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_READER_TERMS_INDEX_DIVISOR");
            DEFAULT_TERM_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_TERM_INDEX_INTERVAL");
            DEFAULT_USE_COMPOUND_FILE_SYSTEM = env->getStaticBooleanField(cls, "DEFAULT_USE_COMPOUND_FILE_SYSTEM");
            DISABLE_AUTO_FLUSH = env->getStaticIntField(cls, "DISABLE_AUTO_FLUSH");
            WRITE_LOCK_TIMEOUT = env->getStaticLongField(cls, "WRITE_LOCK_TIMEOUT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig::IndexWriterConfig(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::index::LiveIndexWriterConfig(env->newObject(initializeClass, &mids$, mid_init$_b2a1ba2f, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::Analyzer IndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::org::apache::lucene::codecs::Codec IndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        jlong IndexWriterConfig::getDefaultWriteLockTimeout()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getDefaultWriteLockTimeout_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexCommit IndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy IndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream IndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint IndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint IndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint IndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy IndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler IndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer IndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode IndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble IndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint IndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean IndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint IndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity IndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint IndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jlong IndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        IndexWriterConfig IndexWriterConfig::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCodec_c6322414], a0.this$));
        }

        void IndexWriterConfig::setDefaultWriteLockTimeout(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultWriteLockTimeout_0ee6df2f], a0);
        }

        IndexWriterConfig IndexWriterConfig::setIndexCommit(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexCommit_ec04569d], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setIndexDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexDeletionPolicy_e3778c88], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::org::apache::lucene::util::InfoStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_46a28868], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_915f97a5], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxThreadStates(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxThreadStates_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_35fd1692], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergeScheduler(const ::org::apache::lucene::index::MergeScheduler & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergeScheduler_a7b4ba7a], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_f60591d0], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setOpenMode(const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setOpenMode_ecf4c6f7], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_f49ea4cb], a0));
        }

        IndexWriterConfig IndexWriterConfig::setRAMPerThreadHardLimitMB(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderPooling(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderPooling_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setSimilarity_842e4878], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setWriteLockTimeout(jlong a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setWriteLockTimeout_c56ab6f1], a0));
        }

        ::java::lang::String IndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data);
        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyGetSetDef t_IndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, codec),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, defaultWriteLockTimeout),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexCommit),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexDeletionPolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDocs),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxThreadStates),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergePolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, termIndexInterval),
          DECLARE_SET_FIELD(t_IndexWriterConfig, useCompoundFile),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getAnalyzer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getCodec, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getDefaultWriteLockTimeout, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexDeletionPolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxThreadStates, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergeScheduler, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getOpenMode, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMPerThreadHardLimitMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderPooling, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getSimilarity, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getWriteLockTimeout, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setCodec, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setDefaultWriteLockTimeout, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexCommit, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexDeletionPolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxThreadStates, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergePolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergeScheduler, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setOpenMode, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMPerThreadHardLimitMB, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderPooling, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setUseCompoundFile, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setWriteLockTimeout, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig, t_IndexWriterConfig, ::org::apache::lucene::index::LiveIndexWriterConfig, IndexWriterConfig, t_IndexWriterConfig_init_, 0, 0, t_IndexWriterConfig__fields_, 0, 0);

        void t_IndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig), module, "IndexWriterConfig", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "OpenMode", make_descriptor(&PY_TYPE(IndexWriterConfig$OpenMode)));
        }

        void t_IndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "class_", make_descriptor(IndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_CHECK_INTEGRITY_AT_MERGE", make_descriptor(IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DELETE_TERMS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DOCS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_THREAD_STATES", make_descriptor(IndexWriterConfig::DEFAULT_MAX_THREAD_STATES));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_BUFFER_SIZE_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_POOLING", make_descriptor(IndexWriterConfig::DEFAULT_READER_POOLING));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_TERMS_INDEX_DIVISOR", make_descriptor(IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_TERM_INDEX_INTERVAL", make_descriptor(IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_USE_COMPOUND_FILE_SYSTEM", make_descriptor(IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DISABLE_AUTO_FLUSH", make_descriptor(IndexWriterConfig::DISABLE_AUTO_FLUSH));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "WRITE_LOCK_TIMEOUT", make_descriptor(IndexWriterConfig::WRITE_LOCK_TIMEOUT));
        }

        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig::wrap_Object(IndexWriterConfig(((t_IndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          IndexWriterConfig object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = IndexWriterConfig(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getAnalyzer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCodec());
            return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getCodec", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type)
        {
          jlong result;
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig::getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexDeletionPolicy());
            return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexDeletionPolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getInfoStream());
            return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getInfoStream", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxThreadStates());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxThreadStates", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergePolicy());
            return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergeScheduler());
            return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergeScheduler", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergedSegmentWarmer());
            return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getOpenMode());
            return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getOpenMode", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMBufferSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMPerThreadHardLimitMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderPooling());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderPooling", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getSimilarity", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermIndexInterval());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getWriteLockTimeout());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getWriteLockTimeout", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setCodec(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriterConfig::setDefaultWriteLockTimeout(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexCommit(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexDeletionPolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexDeletionPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
            {
              ::java::io::PrintStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxThreadStates(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxThreadStates", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergePolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeScheduler a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergeScheduler(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeScheduler", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode a0((jobject) NULL);
          PyTypeObject **p0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
          {
            OBJ_CALL(result = self->object.setOpenMode(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setOpenMode", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setRAMPerThreadHardLimitMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMPerThreadHardLimitMB", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setReaderPooling(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderPooling", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setSimilarity(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setUseCompoundFile", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg)
        {
          jlong a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setWriteLockTimeout(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setDefaultWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultWriteLockTimeout", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexCommit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexCommit", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexDeletionPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexDeletionPolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxThreadStates(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxThreadStates", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeScheduler(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeScheduler", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &value))
            {
              INT_CALL(self->object.setOpenMode(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "openMode", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setRAMPerThreadHardLimitMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMPerThreadHardLimitMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setReaderPooling(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerPooling", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "writeLockTimeout", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesReader::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesReader::mids$ = NULL;
        bool OfflineSorter$ByteSequencesReader::live$ = false;

        jclass OfflineSorter$ByteSequencesReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_read_dab10e7e] = env->getMethodID(cls, "read", "()[B");
            mids$[mid_read_7bc03dc8] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

        void OfflineSorter$ByteSequencesReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        JArray< jbyte > OfflineSorter$ByteSequencesReader::read() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_read_dab10e7e]));
        }

        jboolean OfflineSorter$ByteSequencesReader::read(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_read_7bc03dc8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self);
        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesReader__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader, ::java::lang::Object, OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesReader::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesReader), module, "OfflineSorter$ByteSequencesReader", 0);
        }

        void t_OfflineSorter$ByteSequencesReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesReader::wrap_Object(OfflineSorter$ByteSequencesReader(((t_OfflineSorter$ByteSequencesReader *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataInput a0((jobject) NULL);
              OfflineSorter$ByteSequencesReader object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesReader(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_read(t_OfflineSorter$ByteSequencesReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.read());
              return result.wrap();
            }
            break;
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.read(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchAllDocsQuery::class$ = NULL;
        jmethodID *MatchAllDocsQuery::mids$ = NULL;
        bool MatchAllDocsQuery::live$ = false;

        jclass MatchAllDocsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchAllDocsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MatchAllDocsQuery::MatchAllDocsQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Weight MatchAllDocsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MatchAllDocsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MatchAllDocsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jint MatchAllDocsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MatchAllDocsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args);

        static PyMethodDef t_MatchAllDocsQuery__methods_[] = {
          DECLARE_METHOD(t_MatchAllDocsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MatchAllDocsQuery, t_MatchAllDocsQuery, ::org::apache::lucene::search::Query, MatchAllDocsQuery, t_MatchAllDocsQuery_init_, 0, 0, 0, 0, 0);

        void t_MatchAllDocsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchAllDocsQuery), module, "MatchAllDocsQuery", 0);
        }

        void t_MatchAllDocsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "class_", make_descriptor(MatchAllDocsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchAllDocsQuery::initializeClass, 1)))
            return NULL;
          return t_MatchAllDocsQuery::wrap_Object(MatchAllDocsQuery(((t_MatchAllDocsQuery *) arg)->object.this$));
        }
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchAllDocsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds)
        {
          MatchAllDocsQuery object((jobject) NULL);

          INT_CALL(object = MatchAllDocsQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.h"
#include "java/util/Set.h"
#include "java/lang/Character.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleBoundaryScanner::class$ = NULL;
          jmethodID *SimpleBoundaryScanner::mids$ = NULL;
          bool SimpleBoundaryScanner::live$ = false;
          JArray< ::java::lang::Character > *SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS = NULL;
          jint SimpleBoundaryScanner::DEFAULT_MAX_SCAN = (jint) 0;

          jclass SimpleBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a03f060b] = env->getMethodID(cls, "<init>", "([Ljava/lang/Character;)V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4d893084] = env->getMethodID(cls, "<init>", "(ILjava/util/Set;)V");
              mids$[mid_init$_ac2fcfe5] = env->getMethodID(cls, "<init>", "(I[Ljava/lang/Character;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOUNDARY_CHARS = new JArray< ::java::lang::Character >(env->getStaticObjectField(cls, "DEFAULT_BOUNDARY_CHARS", "[Ljava/lang/Character;"));
              DEFAULT_MAX_SCAN = env->getStaticIntField(cls, "DEFAULT_MAX_SCAN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleBoundaryScanner::SimpleBoundaryScanner() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(const JArray< ::java::lang::Character > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a03f060b, a0.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const ::java::util::Set & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4d893084, a0, a1.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const JArray< ::java::lang::Character > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac2fcfe5, a0, a1.this$)) {}

          jint SimpleBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint SimpleBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args);
          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_SimpleBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_SimpleBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleBoundaryScanner, t_SimpleBoundaryScanner, ::java::lang::Object, SimpleBoundaryScanner, t_SimpleBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_SimpleBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleBoundaryScanner), module, "SimpleBoundaryScanner", 0);
          }

          void t_SimpleBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "class_", make_descriptor(SimpleBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleBoundaryScanner::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_BOUNDARY_CHARS", make_descriptor(JArray<jobject>(SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS->this$).wrap(::java::lang::t_Character::wrap_jobject)));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_MAX_SCAN", make_descriptor(SimpleBoundaryScanner::DEFAULT_MAX_SCAN));
          }

          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_SimpleBoundaryScanner::wrap_Object(SimpleBoundaryScanner(((t_SimpleBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleBoundaryScanner object((jobject) NULL);

                INT_CALL(object = SimpleBoundaryScanner());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                JArray< ::java::lang::Character > a0((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "[O", &::java::lang::PY_TYPE(Character), &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                JArray< ::java::lang::Character > a1((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I[O", &::java::lang::PY_TYPE(Character), &a0, &a1))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/spans/PythonSpans.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *PythonSpans::class$ = NULL;
          jmethodID *PythonSpans::mids$ = NULL;
          bool PythonSpans::live$ = false;

          jclass PythonSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/spans/PythonSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSpans::PythonSpans() : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonSpans::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonSpans::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonSpans::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {
          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self);
          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args);
          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj);
          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0);
          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data);
          static PyGetSetDef t_PythonSpans__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSpans, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSpans__methods_[] = {
            DECLARE_METHOD(t_PythonSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSpans, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonSpans, t_PythonSpans, ::org::apache::lucene::search::spans::Spans, PythonSpans, t_PythonSpans_init_, 0, 0, t_PythonSpans__fields_, 0, 0);

          void t_PythonSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSpans), module, "PythonSpans", 1);
          }

          void t_PythonSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "class_", make_descriptor(PythonSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "wrapfn_", make_descriptor(t_PythonSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSpans::initializeClass);
            JNINativeMethod methods[] = {
              { "cost", "()J", (void *) t_PythonSpans_cost0 },
              { "doc", "()I", (void *) t_PythonSpans_doc1 },
              { "end", "()I", (void *) t_PythonSpans_end2 },
              { "getPayload", "()Ljava/util/Collection;", (void *) t_PythonSpans_getPayload3 },
              { "isPayloadAvailable", "()Z", (void *) t_PythonSpans_isPayloadAvailable4 },
              { "next", "()Z", (void *) t_PythonSpans_next5 },
              { "pythonDecRef", "()V", (void *) t_PythonSpans_pythonDecRef6 },
              { "skipTo", "(I)Z", (void *) t_PythonSpans_skipTo7 },
              { "start", "()I", (void *) t_PythonSpans_start8 },
            };
            env->registerNatives(cls, methods, 9);
          }

          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSpans::initializeClass, 1)))
              return NULL;
            return t_PythonSpans::wrap_Object(PythonSpans(((t_PythonSpans *) arg)->object.this$));
          }
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds)
          {
            PythonSpans object((jobject) NULL);

            INT_CALL(object = PythonSpans());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jlong value;
            PyObject *result = PyObject_CallMethod(obj, "cost", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "J", &value))
            {
              throwTypeError("cost", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jlong) 0;
          }

          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "doc", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("doc", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "end", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("end", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::util::Collection value((jobject) NULL);
            PyObject *result = PyObject_CallMethod(obj, "getPayload", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::java::util::Collection::initializeClass, &value))
            {
              throwTypeError("getPayload", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isPayloadAvailable", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isPayloadAvailable", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "next", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("next", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "skipTo", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("skipTo", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "start", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("start", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer::live$ = false;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer::DEFAULT_SIDE = NULL;

          jclass Lucene43EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_init$_6fc4da21] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_init$_9a7df2b7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_3a1c54b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/lang/String;II)V");
              mids$[mid_init$_1623557f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_6fc4da21, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9a7df2b7, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::java::lang::String & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_3a1c54b5, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          Lucene43EdgeNGramTokenizer::Lucene43EdgeNGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, const ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side & a3, jint a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_1623557f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          void Lucene43EdgeNGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43EdgeNGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43EdgeNGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43EdgeNGramTokenizer, t_Lucene43EdgeNGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer), module, "Lucene43EdgeNGramTokenizer", 0);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "Side", make_descriptor(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side)));
          }

          void t_Lucene43EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(Lucene43EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer::DEFAULT_SIDE)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer::wrap_Object(Lucene43EdgeNGramTokenizer(((t_Lucene43EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43EdgeNGramTokenizer_init_(t_Lucene43EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkKII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KksII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                Lucene43EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::ngram::t_Lucene43EdgeNGramTokenizer$Side::parameters_, &a4, &a5))
                {
                  INT_CALL(object = Lucene43EdgeNGramTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_end(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_incrementToken(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer_reset(t_Lucene43EdgeNGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43EdgeNGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsAndPositionsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsAndPositionsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsAndPositionsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9604ac16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsAndPositionsEnum::FilterAtomicReader$FilterDocsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_9604ac16, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsAndPositionsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, FilterAtomicReader$FilterDocsAndPositionsEnum, t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_, 0, 0, t_FilterAtomicReader$FilterDocsAndPositionsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), module, "FilterAtomicReader$FilterDocsAndPositionsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsAndPositionsEnum::wrap_Object(FilterAtomicReader$FilterDocsAndPositionsEnum(((t_FilterAtomicReader$FilterDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsAndPositionsEnum_init_(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsAndPositionsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_advance(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_attributes(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_cost(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_docID(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_endOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_freq(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_getPayload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextDoc(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_nextPosition(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_startOffset(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsAndPositionsEnum_get__payload(t_FilterAtomicReader$FilterDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReader::class$ = NULL;
          jmethodID *BlockPackedReader::mids$ = NULL;
          bool BlockPackedReader::live$ = false;

          jclass BlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f9e6aacc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;IIJZ)V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReader::BlockPackedReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4) : ::org::apache::lucene::util::LongValues(env->newObject(initializeClass, &mids$, mid_init$_f9e6aacc, a0.this$, a1, a2, a3, a4)) {}

          jlong BlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jlong BlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args);
          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self);

          static PyMethodDef t_BlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReader, t_BlockPackedReader, ::org::apache::lucene::util::LongValues, BlockPackedReader, t_BlockPackedReader_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReader), module, "BlockPackedReader", 0);
          }

          void t_BlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "class_", make_descriptor(BlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReader::wrap_Object(BlockPackedReader(((t_BlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            BlockPackedReader object((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = BlockPackedReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDocIdSet.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDocIdSet::class$ = NULL;
          jmethodID *EliasFanoDocIdSet::mids$ = NULL;
          bool EliasFanoDocIdSet::live$ = false;

          jclass EliasFanoDocIdSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDocIdSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_encodeFromDisi_c2b5607d] = env->getMethodID(cls, "encodeFromDisi", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
              mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDocIdSet::EliasFanoDocIdSet(jint a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          void EliasFanoDocIdSet::encodeFromDisi(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeFromDisi_c2b5607d], a0.this$);
          }

          jboolean EliasFanoDocIdSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint EliasFanoDocIdSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean EliasFanoDocIdSet::isCacheable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
          }

          ::org::apache::lucene::search::DocIdSetIterator EliasFanoDocIdSet::iterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
          }

          jlong EliasFanoDocIdSet::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoDocIdSet::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data);
          static PyGetSetDef t_EliasFanoDocIdSet__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDocIdSet, cacheable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDocIdSet__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDocIdSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, encodeFromDisi, METH_O),
            DECLARE_METHOD(t_EliasFanoDocIdSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, isCacheable, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDocIdSet, t_EliasFanoDocIdSet, ::org::apache::lucene::search::DocIdSet, EliasFanoDocIdSet, t_EliasFanoDocIdSet_init_, 0, 0, t_EliasFanoDocIdSet__fields_, 0, 0);

          void t_EliasFanoDocIdSet::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDocIdSet), module, "EliasFanoDocIdSet", 0);
          }

          void t_EliasFanoDocIdSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "class_", make_descriptor(EliasFanoDocIdSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDocIdSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDocIdSet::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDocIdSet::wrap_Object(EliasFanoDocIdSet(((t_EliasFanoDocIdSet *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDocIdSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            EliasFanoDocIdSet object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = EliasFanoDocIdSet(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg)
          {
            ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
            {
              OBJ_CALL(self->object.encodeFromDisi(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeFromDisi", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isCacheable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "isCacheable", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoDocIdSet::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCacheable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilterFactory::class$ = NULL;
          jmethodID *HTMLStripCharFilterFactory::mids$ = NULL;
          bool HTMLStripCharFilterFactory::live$ = false;

          jclass HTMLStripCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca5f8ca1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/charfilter/HTMLStripCharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilterFactory::HTMLStripCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter HTMLStripCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter(env->callObjectMethod(this$, mids$[mid_create_ca5f8ca1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilterFactory), module, "HTMLStripCharFilterFactory", 0);
          }

          void t_HTMLStripCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "class_", make_descriptor(HTMLStripCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilterFactory::wrap_Object(HTMLStripCharFilterFactory(((t_HTMLStripCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HTMLStripCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HTMLStripCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::charfilter::t_HTMLStripCharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/AssociationFacetField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *AssociationFacetField::class$ = NULL;
          jmethodID *AssociationFacetField::mids$ = NULL;
          jfieldID *AssociationFacetField::fids$ = NULL;
          bool AssociationFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *AssociationFacetField::TYPE = NULL;

          jclass AssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/AssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d63aecac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_assoc] = env->getFieldID(cls, "assoc", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AssociationFacetField::AssociationFacetField(const ::org::apache::lucene::util::BytesRef & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d63aecac, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String AssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef AssociationFacetField::_get_assoc() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_assoc]));
          }

          ::java::lang::String AssociationFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          JArray< ::java::lang::String > AssociationFacetField::_get_path() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args);
          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data);

          static PyGetSetDef t_AssociationFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_AssociationFacetField, assoc),
            DECLARE_GET_FIELD(t_AssociationFacetField, dim),
            DECLARE_GET_FIELD(t_AssociationFacetField, path),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_AssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AssociationFacetField, t_AssociationFacetField, ::org::apache::lucene::document::Field, AssociationFacetField, t_AssociationFacetField_init_, 0, 0, t_AssociationFacetField__fields_, 0, 0);

          void t_AssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(AssociationFacetField), module, "AssociationFacetField", 0);
          }

          void t_AssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "class_", make_descriptor(AssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_AssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AssociationFacetField::initializeClass);
            PyDict_SetItemString(PY_TYPE(AssociationFacetField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*AssociationFacetField::TYPE)));
          }

          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_AssociationFacetField::wrap_Object(AssociationFacetField(((t_AssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            AssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "ks[s", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = AssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AssociationFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_assoc());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_path());
            return JArray<jstring>(value.this$).wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupsCollector::mids$ = NULL;
            bool FunctionAllGroupsCollector::live$ = false;

            jclass FunctionAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupsCollector::FunctionAllGroupsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

            void FunctionAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection FunctionAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void FunctionAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args);
            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data);
            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_FunctionAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupsCollector, t_FunctionAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, FunctionAllGroupsCollector, t_FunctionAllGroupsCollector_init_, 0, 0, t_FunctionAllGroupsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupsCollector::wrap_Object(const FunctionAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupsCollector), module, "FunctionAllGroupsCollector", 0);
            }

            void t_FunctionAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupsCollector::wrap_Object(FunctionAllGroupsCollector(((t_FunctionAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              FunctionAllGroupsCollector object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionAllGroupsCollector(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue));
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor::class$ = NULL;
        jmethodID *StoredFieldVisitor::mids$ = NULL;
        bool StoredFieldVisitor::live$ = false;

        jclass StoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void StoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void StoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        void StoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void StoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status StoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void StoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args);

        static PyMethodDef t_StoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, needsField, METH_O),
          DECLARE_METHOD(t_StoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor, t_StoredFieldVisitor, ::java::lang::Object, StoredFieldVisitor, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor), module, "StoredFieldVisitor", 0);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "Status", make_descriptor(&PY_TYPE(StoredFieldVisitor$Status)));
        }

        void t_StoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "class_", make_descriptor(StoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor::wrap_Object(StoredFieldVisitor(((t_StoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "binaryField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "doubleField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "floatField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "longField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "needsField", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "stringField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAndSuffixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAndSuffixAwareTokenFilter::mids$ = NULL;
          bool PrefixAndSuffixAwareTokenFilter::live$ = false;

          jclass PrefixAndSuffixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_63d58924] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_updateInputToken_a810a20b] = env->getMethodID(cls, "updateInputToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAndSuffixAwareTokenFilter::PrefixAndSuffixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_63d58924, a0.this$, a1.this$, a2.this$)) {}

          void PrefixAndSuffixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAndSuffixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PrefixAndSuffixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAndSuffixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateInputToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateInputToken_a810a20b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);

          static PyMethodDef t_PrefixAndSuffixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateInputToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PrefixAndSuffixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), module, "PrefixAndSuffixAwareTokenFilter", 0);
          }

          void t_PrefixAndSuffixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAndSuffixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAndSuffixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAndSuffixAwareTokenFilter::wrap_Object(PrefixAndSuffixAwareTokenFilter(((t_PrefixAndSuffixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
            PrefixAndSuffixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PrefixAndSuffixAwareTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateInputToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateInputToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *StandardTokenizerImpl40::class$ = NULL;
            jmethodID *StandardTokenizerImpl40::mids$ = NULL;
            bool StandardTokenizerImpl40::live$ = false;
            jint StandardTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::YYEOF = (jint) 0;
            jint StandardTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl40::StandardTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl40__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl40, t_StandardTokenizerImpl40, ::java::lang::Object, StandardTokenizerImpl40, t_StandardTokenizerImpl40_init_, 0, 0, t_StandardTokenizerImpl40__fields_, 0, 0);

            void t_StandardTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl40), module, "StandardTokenizerImpl40", 0);
            }

            void t_StandardTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "class_", make_descriptor(StandardTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl40::wrap_Object(StandardTokenizerImpl40(((t_StandardTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilterFactory::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilterFactory::live$ = false;

          jclass TokenOffsetPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4b14c4a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilterFactory::TokenOffsetPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter TokenOffsetPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_4b14c4a0], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), module, "TokenOffsetPayloadTokenFilterFactory", 0);
          }

          void t_TokenOffsetPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilterFactory::wrap_Object(TokenOffsetPayloadTokenFilterFactory(((t_TokenOffsetPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TokenOffsetPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TokenOffsetPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TernaryTreeNode::class$ = NULL;
            jmethodID *TernaryTreeNode::mids$ = NULL;
            bool TernaryTreeNode::live$ = false;

            jclass TernaryTreeNode::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TernaryTreeNode");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTreeNode::TernaryTreeNode() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TernaryTreeNode__methods_[] = {
              DECLARE_METHOD(t_TernaryTreeNode, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTreeNode, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTreeNode, t_TernaryTreeNode, ::java::lang::Object, TernaryTreeNode, t_TernaryTreeNode_init_, 0, 0, 0, 0, 0);

            void t_TernaryTreeNode::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTreeNode), module, "TernaryTreeNode", 0);
            }

            void t_TernaryTreeNode::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "class_", make_descriptor(TernaryTreeNode::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "wrapfn_", make_descriptor(t_TernaryTreeNode::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTreeNode::initializeClass, 1)))
                return NULL;
              return t_TernaryTreeNode::wrap_Object(TernaryTreeNode(((t_TernaryTreeNode *) arg)->object.this$));
            }
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTreeNode::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds)
            {
              TernaryTreeNode object((jobject) NULL);

              INT_CALL(object = TernaryTreeNode());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_and_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_and_return::mids$ = NULL;
          bool JavascriptParser$bitwise_and_return::live$ = false;

          jclass JavascriptParser$bitwise_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_and_return::JavascriptParser$bitwise_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_and_return), module, "JavascriptParser$bitwise_and_return", 0);
          }

          void t_JavascriptParser$bitwise_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_and_return::wrap_Object(JavascriptParser$bitwise_and_return(((t_JavascriptParser$bitwise_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedTerm::class$ = NULL;
          jmethodID *WeightedTerm::mids$ = NULL;
          bool WeightedTerm::live$ = false;

          jclass WeightedTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_getTerm_14c7b5c5] = env->getMethodID(cls, "getTerm", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_setTerm_5fdc3f48] = env->getMethodID(cls, "setTerm", "(Ljava/lang/String;)V");
              mids$[mid_setWeight_06298cab] = env->getMethodID(cls, "setWeight", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedTerm::WeightedTerm(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          ::java::lang::String WeightedTerm::getTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTerm_14c7b5c5]));
          }

          jfloat WeightedTerm::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          void WeightedTerm::setTerm(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTerm_5fdc3f48], a0.this$);
          }

          void WeightedTerm::setWeight(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWeight_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedTerm, term),
            DECLARE_GETSET_FIELD(t_WeightedTerm, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, setTerm, METH_O),
            DECLARE_METHOD(t_WeightedTerm, setWeight, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedTerm, t_WeightedTerm, ::java::lang::Object, WeightedTerm, t_WeightedTerm_init_, 0, 0, t_WeightedTerm__fields_, 0, 0);

          void t_WeightedTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedTerm), module, "WeightedTerm", 0);
          }

          void t_WeightedTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "class_", make_descriptor(WeightedTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedTerm::wrap_Object(WeightedTerm(((t_WeightedTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            WeightedTerm object((jobject) NULL);

            if (!parseArgs(args, "Fs", &a0, &a1))
            {
              INT_CALL(object = WeightedTerm(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return j2p(result);
          }

          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTerm(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTerm", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setWeight(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return j2p(value);
          }
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTerm(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "term", arg);
            return -1;
          }

          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setWeight(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "weight", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemmer::class$ = NULL;
          jmethodID *RussianLightStemmer::mids$ = NULL;
          bool RussianLightStemmer::live$ = false;

          jclass RussianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemmer::RussianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint RussianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args);

          static PyMethodDef t_RussianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemmer, t_RussianLightStemmer, ::java::lang::Object, RussianLightStemmer, t_RussianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemmer), module, "RussianLightStemmer", 0);
          }

          void t_RussianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "class_", make_descriptor(RussianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemmer::wrap_Object(RussianLightStemmer(((t_RussianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            RussianLightStemmer object((jobject) NULL);

            INT_CALL(object = RussianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$OrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$OrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$OrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$OrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$OrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$OrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$OrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$OrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$OrdinalMap, t_DirectoryTaxonomyWriter$OrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$OrdinalMap, abstract_init, 0, 0, t_DirectoryTaxonomyWriter$OrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$OrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), module, "DirectoryTaxonomyWriter$OrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$OrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$OrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$OrdinalMap::wrap_Object(DirectoryTaxonomyWriter$OrdinalMap(((t_DirectoryTaxonomyWriter$OrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemmer::class$ = NULL;
          jmethodID *IndonesianStemmer::mids$ = NULL;
          bool IndonesianStemmer::live$ = false;

          jclass IndonesianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_39342af2] = env->getMethodID(cls, "stem", "([CIZ)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemmer::IndonesianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndonesianStemmer::stem(const JArray< jchar > & a0, jint a1, jboolean a2) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_39342af2], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args);

          static PyMethodDef t_IndonesianStemmer__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemmer, t_IndonesianStemmer, ::java::lang::Object, IndonesianStemmer, t_IndonesianStemmer_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemmer), module, "IndonesianStemmer", 0);
          }

          void t_IndonesianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "class_", make_descriptor(IndonesianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemmer::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemmer::wrap_Object(IndonesianStemmer(((t_IndonesianStemmer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds)
          {
            IndonesianStemmer object((jobject) NULL);

            INT_CALL(object = IndonesianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jint result;

            if (!parseArgs(args, "[CIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.stem(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool::class$ = NULL;
        jmethodID *IntBlockPool::mids$ = NULL;
        jfieldID *IntBlockPool::fids$ = NULL;
        bool IntBlockPool::live$ = false;
        jint IntBlockPool::INT_BLOCK_MASK = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SHIFT = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SIZE = (jint) 0;

        jclass IntBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_112445b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool$Allocator;)V");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[I");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[I");
            fids$[fid_intOffset] = env->getFieldID(cls, "intOffset", "I");
            fids$[fid_intUpto] = env->getFieldID(cls, "intUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INT_BLOCK_MASK = env->getStaticIntField(cls, "INT_BLOCK_MASK");
            INT_BLOCK_SHIFT = env->getStaticIntField(cls, "INT_BLOCK_SHIFT");
            INT_BLOCK_SIZE = env->getStaticIntField(cls, "INT_BLOCK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool::IntBlockPool() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntBlockPool::IntBlockPool(const ::org::apache::lucene::util::IntBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_112445b3, a0.this$)) {}

        void IntBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void IntBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void IntBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        JArray< jint > IntBlockPool::_get_buffer() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void IntBlockPool::_set_buffer(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jint > > IntBlockPool::_get_buffers() const
        {
          return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void IntBlockPool::_set_buffers(const JArray< JArray< jint > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint IntBlockPool::_get_intOffset() const
        {
          return env->getIntField(this$, fids$[fid_intOffset]);
        }

        void IntBlockPool::_set_intOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intOffset], a0);
        }

        jint IntBlockPool::_get_intUpto() const
        {
          return env->getIntField(this$, fids$[fid_intUpto]);
        }

        void IntBlockPool::_set_intUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self);
        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args);
        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_IntBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intOffset),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool, t_IntBlockPool, ::java::lang::Object, IntBlockPool, t_IntBlockPool_init_, 0, 0, t_IntBlockPool__fields_, 0, 0);

        void t_IntBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool), module, "IntBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceReader", make_descriptor(&PY_TYPE(IntBlockPool$SliceReader)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceWriter", make_descriptor(&PY_TYPE(IntBlockPool$SliceWriter)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(IntBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(IntBlockPool$Allocator)));
        }

        void t_IntBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "class_", make_descriptor(IntBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_MASK", make_descriptor(IntBlockPool::INT_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SHIFT", make_descriptor(IntBlockPool::INT_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SIZE", make_descriptor(IntBlockPool::INT_BLOCK_SIZE));
        }

        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool::wrap_Object(IntBlockPool(((t_IntBlockPool *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntBlockPool object((jobject) NULL);

              INT_CALL(object = IntBlockPool());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::IntBlockPool$Allocator a0((jobject) NULL);
              IntBlockPool object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool$Allocator::initializeClass, &a0))
              {
                INT_CALL(object = IntBlockPool(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          if (!parseArg(arg, "[[I", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intOffset", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMFile::class$ = NULL;
        jmethodID *RAMFile::mids$ = NULL;
        bool RAMFile::live$ = false;

        jclass RAMFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLength_54c6a17a] = env->getMethodID(cls, "getLength", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_getBuffer_b4292e98] = env->getMethodID(cls, "getBuffer", "(I)[B");
            mids$[mid_setLength_0ee6df2f] = env->getMethodID(cls, "setLength", "(J)V");
            mids$[mid_newBuffer_b4292e98] = env->getMethodID(cls, "newBuffer", "(I)[B");
            mids$[mid_numBuffers_54c6a179] = env->getMethodID(cls, "numBuffers", "()I");
            mids$[mid_addBuffer_b4292e98] = env->getMethodID(cls, "addBuffer", "(I)[B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMFile::RAMFile() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong RAMFile::getLength() const
        {
          return env->callLongMethod(this$, mids$[mid_getLength_54c6a17a]);
        }

        jlong RAMFile::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMFile_getLength(t_RAMFile *self);
        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self);
        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data);
        static PyGetSetDef t_RAMFile__fields_[] = {
          DECLARE_GET_FIELD(t_RAMFile, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMFile__methods_[] = {
          DECLARE_METHOD(t_RAMFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, getLength, METH_NOARGS),
          DECLARE_METHOD(t_RAMFile, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMFile, t_RAMFile, ::java::lang::Object, RAMFile, t_RAMFile_init_, 0, 0, t_RAMFile__fields_, 0, 0);

        void t_RAMFile::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMFile), module, "RAMFile", 0);
        }

        void t_RAMFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "class_", make_descriptor(RAMFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "wrapfn_", make_descriptor(t_RAMFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMFile::initializeClass, 1)))
            return NULL;
          return t_RAMFile::wrap_Object(RAMFile(((t_RAMFile *) arg)->object.this$));
        }
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds)
        {
          RAMFile object((jobject) NULL);

          INT_CALL(object = RAMFile());
          self->object = object;

          return 0;
        }

        static PyObject *t_RAMFile_getLength(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilter::class$ = NULL;
          jmethodID *SynonymFilter::mids$ = NULL;
          bool SynonymFilter::live$ = false;
          ::java::lang::String *SynonymFilter::TYPE_SYNONYM = NULL;

          jclass SynonymFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6759cd52] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/synonym/SynonymMap;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              TYPE_SYNONYM = new ::java::lang::String(env->getStaticObjectField(cls, "TYPE_SYNONYM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilter::SynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::synonym::SynonymMap & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6759cd52, a0.this$, a1.this$, a2)) {}

          jboolean SynonymFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SynonymFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args);
          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args);

          static PyMethodDef t_SynonymFilter__methods_[] = {
            DECLARE_METHOD(t_SynonymFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilter, t_SynonymFilter, ::org::apache::lucene::analysis::TokenFilter, SynonymFilter, t_SynonymFilter_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilter), module, "SynonymFilter", 0);
          }

          void t_SynonymFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "class_", make_descriptor(SynonymFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymFilter).tp_dict, "TYPE_SYNONYM", make_descriptor(j2p(*SynonymFilter::TYPE_SYNONYM)));
          }

          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilter::initializeClass, 1)))
              return NULL;
            return t_SynonymFilter::wrap_Object(SynonymFilter(((t_SynonymFilter *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::synonym::SynonymMap a1((jobject) NULL);
            jboolean a2;
            SynonymFilter object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::synonym::SynonymMap::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SynonymFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SynonymFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonLongParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonLongParser::class$ = NULL;
        jmethodID *PythonLongParser::mids$ = NULL;
        bool PythonLongParser::live$ = false;

        jclass PythonLongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonLongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLongParser::PythonLongParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLongParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLongParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLongParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self);
        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args);
        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data);
        static PyGetSetDef t_PythonLongParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLongParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLongParser__methods_[] = {
          DECLARE_METHOD(t_PythonLongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLongParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLongParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLongParser, t_PythonLongParser, ::java::lang::Object, PythonLongParser, t_PythonLongParser_init_, 0, 0, t_PythonLongParser__fields_, 0, 0);

        void t_PythonLongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLongParser), module, "PythonLongParser", 1);
        }

        void t_PythonLongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "class_", make_descriptor(PythonLongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "wrapfn_", make_descriptor(t_PythonLongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLongParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J", (void *) t_PythonLongParser_parseLong0 },
            { "pythonDecRef", "()V", (void *) t_PythonLongParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonLongParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLongParser::initializeClass, 1)))
            return NULL;
          return t_PythonLongParser::wrap_Object(PythonLongParser(((t_PythonLongParser *) arg)->object.this$));
        }
        static PyObject *t_PythonLongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLongParser_init_(t_PythonLongParser *self, PyObject *args, PyObject *kwds)
        {
          PythonLongParser object((jobject) NULL);

          INT_CALL(object = PythonLongParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLongParser_finalize(t_PythonLongParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLongParser_pythonExtension(t_PythonLongParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jlong JNICALL t_PythonLongParser_parseLong0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseLong", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("parseLong", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonLongParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonLongParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLongParser::mids$[PythonLongParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonLongParser_get__self(t_PythonLongParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$WordBuilder::class$ = NULL;
        jmethodID *WAH8DocIdSet$WordBuilder::mids$ = NULL;
        bool WAH8DocIdSet$WordBuilder::live$ = false;

        jclass WAH8DocIdSet$WordBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$WordBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_3cc37a2d] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$WordBuilder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$WordBuilder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$WordBuilder WAH8DocIdSet$WordBuilder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$WordBuilder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_3cc37a2d], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self);
        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg);
        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$WordBuilder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$WordBuilder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$WordBuilder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, build, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$WordBuilder, t_WAH8DocIdSet$WordBuilder, ::java::lang::Object, WAH8DocIdSet$WordBuilder, abstract_init, 0, 0, t_WAH8DocIdSet$WordBuilder__fields_, 0, 0);

        void t_WAH8DocIdSet$WordBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$WordBuilder), module, "WAH8DocIdSet$WordBuilder", 0);
        }

        void t_WAH8DocIdSet$WordBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$WordBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$WordBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$WordBuilder::wrap_Object(WAH8DocIdSet$WordBuilder(((t_WAH8DocIdSet$WordBuilder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg)
        {
          jint a0;
          WAH8DocIdSet$WordBuilder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$WordBuilder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity::class$ = NULL;
          jmethodID *LMSimilarity::mids$ = NULL;
          bool LMSimilarity::live$ = false;

          jclass LMSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity::LMSimilarity() : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMSimilarity::LMSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          ::java::lang::String LMSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }

          ::java::lang::String LMSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self);
          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args);
          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data);
          static PyGetSetDef t_LMSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, getName, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity, t_LMSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, LMSimilarity, t_LMSimilarity_init_, 0, 0, t_LMSimilarity__fields_, 0, 0);

          void t_LMSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity), module, "LMSimilarity", 0);
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "DefaultCollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$DefaultCollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "CollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$CollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "LMStats", make_descriptor(&PY_TYPE(LMSimilarity$LMStats)));
          }

          void t_LMSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "class_", make_descriptor(LMSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity::wrap_Object(LMSimilarity(((t_LMSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMSimilarity object((jobject) NULL);

                INT_CALL(object = LMSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryTreeBuilder::class$ = NULL;
              jmethodID *StandardQueryTreeBuilder::mids$ = NULL;
              bool StandardQueryTreeBuilder::live$ = false;

              jclass StandardQueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryTreeBuilder::StandardQueryTreeBuilder() : ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query StandardQueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryTreeBuilder, t_StandardQueryTreeBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder, StandardQueryTreeBuilder, t_StandardQueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryTreeBuilder), module, "StandardQueryTreeBuilder", 0);
              }

              void t_StandardQueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "class_", make_descriptor(StandardQueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryTreeBuilder::wrap_Object(StandardQueryTreeBuilder(((t_StandardQueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = StandardQueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryTreeBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionFirstPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionFirstPassGroupingCollector::mids$ = NULL;
            bool FunctionFirstPassGroupingCollector::live$ = false;

            jclass FunctionFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ef44e36a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_5767061f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/mutable/MutableValue;");
                mids$[mid_copyDocGroupValue_25e3929d] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/mutable/MutableValue;Lorg/apache/lucene/util/mutable/MutableValue;)Lorg/apache/lucene/util/mutable/MutableValue;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionFirstPassGroupingCollector::FunctionFirstPassGroupingCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2, jint a3) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_ef44e36a, a0.this$, a1.this$, a2.this$, a3)) {}

            void FunctionFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector_init_, 0, 0, t_FunctionFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionFirstPassGroupingCollector::wrap_Object(const FunctionFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionFirstPassGroupingCollector), module, "FunctionFirstPassGroupingCollector", 0);
            }

            void t_FunctionFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionFirstPassGroupingCollector::wrap_Object(FunctionFirstPassGroupingCollector(((t_FunctionFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              FunctionFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "kKkI", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &a3))
              {
                INT_CALL(object = FunctionFirstPassGroupingCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MultiDocValues$MultiSortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint MultiDocValues$MultiSortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        JArray< jint > MultiDocValues$MultiSortedDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedDocValues > MultiDocValues$MultiSortedDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data);

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, values),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, lookupOrd, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedDocValues, t_MultiDocValues$MultiSortedDocValues, ::org::apache::lucene::index::SortedDocValues, MultiDocValues$MultiSortedDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedDocValues), module, "MultiDocValues$MultiSortedDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedDocValues::wrap_Object(MultiDocValues$MultiSortedDocValues(((t_MultiDocValues$MultiSortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedDocValues::wrap_jobject);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues::class$ = NULL;
        jmethodID *MultiDocValues::mids$ = NULL;
        bool MultiDocValues::live$ = false;

        jclass MultiDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBinaryValues_03a34e9d] = env->getStaticMethodID(cls, "getBinaryValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_cb5a3ee0] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_e37a26c0] = env->getStaticMethodID(cls, "getNormValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericValues_e37a26c0] = env->getStaticMethodID(cls, "getNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedNumericValues_21f7b92b] = env->getStaticMethodID(cls, "getSortedNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetValues_0b5c63b6] = env->getStaticMethodID(cls, "getSortedSetValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSortedValues_af349b19] = env->getStaticMethodID(cls, "getSortedValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::BinaryDocValues MultiDocValues::getBinaryValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinaryValues_03a34e9d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits MultiDocValues::getDocsWithField(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_cb5a3ee0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNormValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNormValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumericValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues MultiDocValues::getSortedNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumericValues_21f7b92b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues MultiDocValues::getSortedSetValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSetValues_0b5c63b6], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues MultiDocValues::getSortedValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedValues_af349b19], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MultiDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getBinaryValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNormValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedSetValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedValues, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues, t_MultiDocValues, ::java::lang::Object, MultiDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues), module, "MultiDocValues", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedSetDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(MultiDocValues$OrdinalMap)));
        }

        void t_MultiDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "class_", make_descriptor(MultiDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues::wrap_Object(MultiDocValues(((t_MultiDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getBinaryValues(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinaryValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNormValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNormValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedSetValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSetValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedValues", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/IllegalStateException.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *BytesRefSorter::class$ = NULL;
            jmethodID *BytesRefSorter::mids$ = NULL;
            bool BytesRefSorter::live$ = false;

            jclass BytesRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/BytesRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void BytesRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            ::java::util::Comparator BytesRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator BytesRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg);
            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data);
            static PyGetSetDef t_BytesRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_BytesRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BytesRefSorter__methods_[] = {
              DECLARE_METHOD(t_BytesRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, add, METH_O),
              DECLARE_METHOD(t_BytesRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_BytesRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefSorter, t_BytesRefSorter, ::java::lang::Object, BytesRefSorter, abstract_init, 0, 0, t_BytesRefSorter__fields_, 0, 0);

            void t_BytesRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefSorter), module, "BytesRefSorter", 0);
            }

            void t_BytesRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "class_", make_descriptor(BytesRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "wrapfn_", make_descriptor(t_BytesRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefSorter::initializeClass, 1)))
                return NULL;
              return t_BytesRefSorter::wrap_Object(BytesRefSorter(((t_BytesRefSorter *) arg)->object.this$));
            }
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericQueryNodeProcessor::mids$ = NULL;
              bool NumericQueryNodeProcessor::live$ = false;

              jclass NumericQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNodeProcessor::NumericQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNodeProcessor, t_NumericQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericQueryNodeProcessor, t_NumericQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNodeProcessor), module, "NumericQueryNodeProcessor", 0);
              }

              void t_NumericQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNodeProcessor::wrap_Object(NumericQueryNodeProcessor(((t_NumericQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery::class$ = NULL;
          jmethodID *PayloadNearQuery::mids$ = NULL;
          bool PayloadNearQuery::live$ = false;

          jclass PayloadNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ba8911fe] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZLorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_clone_95fde422] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/payloads/PayloadNearQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::payloads::PayloadFunction & a3) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_ba8911fe, a0.this$, a1, a2, a3.this$)) {}

          PayloadNearQuery PayloadNearQuery::clone() const
          {
            return PayloadNearQuery(env->callObjectMethod(this$, mids$[mid_clone_95fde422]));
          }

          ::org::apache::lucene::search::Weight PayloadNearQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PayloadNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery, t_PayloadNearQuery, ::org::apache::lucene::search::spans::SpanNearQuery, PayloadNearQuery, t_PayloadNearQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery), module, "PayloadNearQuery", 0);
          }

          void t_PayloadNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "class_", make_descriptor(PayloadNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery::wrap_Object(PayloadNearQuery(((t_PayloadNearQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                ::org::apache::lucene::search::payloads::PayloadFunction a3((jobject) NULL);
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args)
          {
            PayloadNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommit::class$ = NULL;
        jmethodID *TwoPhaseCommit::mids$ = NULL;
        bool TwoPhaseCommit::live$ = false;

        jclass TwoPhaseCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommit::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void TwoPhaseCommit::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        void TwoPhaseCommit::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self);

        static PyMethodDef t_TwoPhaseCommit__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, commit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, rollback, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommit, t_TwoPhaseCommit, ::java::lang::Object, TwoPhaseCommit, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommit), module, "TwoPhaseCommit", 0);
        }

        void t_TwoPhaseCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "class_", make_descriptor(TwoPhaseCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommit::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommit::wrap_Object(TwoPhaseCommit(((t_TwoPhaseCommit *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DisjunctionMaxQueryBuilder::class$ = NULL;
            jmethodID *DisjunctionMaxQueryBuilder::mids$ = NULL;
            bool DisjunctionMaxQueryBuilder::live$ = false;

            jclass DisjunctionMaxQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DisjunctionMaxQueryBuilder::DisjunctionMaxQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DisjunctionMaxQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder, ::java::lang::Object, DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_DisjunctionMaxQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DisjunctionMaxQueryBuilder), module, "DisjunctionMaxQueryBuilder", 0);
            }

            void t_DisjunctionMaxQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "class_", make_descriptor(DisjunctionMaxQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_DisjunctionMaxQueryBuilder::wrap_Object(DisjunctionMaxQueryBuilder(((t_DisjunctionMaxQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              DisjunctionMaxQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = DisjunctionMaxQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {

          ::java::lang::Class *CollatedTermAttributeImpl::class$ = NULL;
          jmethodID *CollatedTermAttributeImpl::mids$ = NULL;
          bool CollatedTermAttributeImpl::live$ = false;

          jclass CollatedTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollatedTermAttributeImpl::CollatedTermAttributeImpl(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

          void CollatedTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {
          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args);

          static PyMethodDef t_CollatedTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CollatedTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, fillBytesRef, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollatedTermAttributeImpl, t_CollatedTermAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, CollatedTermAttributeImpl, t_CollatedTermAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_CollatedTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CollatedTermAttributeImpl), module, "CollatedTermAttributeImpl", 0);
          }

          void t_CollatedTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "class_", make_descriptor(CollatedTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CollatedTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollatedTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CollatedTermAttributeImpl::wrap_Object(CollatedTermAttributeImpl(((t_CollatedTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollatedTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::Collator a0((jobject) NULL);
            CollatedTermAttributeImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
            {
              INT_CALL(object = CollatedTermAttributeImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.fillBytesRef());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CollatedTermAttributeImpl), (PyObject *) self, "fillBytesRef", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPayloadCheckQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/util/Collection.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanPayloadCheckQuery::mids$ = NULL;
          bool SpanPayloadCheckQuery::live$ = false;

          jclass SpanPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8621bfa8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_5574a424] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPayloadCheckQuery::SpanPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_8621bfa8, a0.this$, a1.this$)) {}

          SpanPayloadCheckQuery SpanPayloadCheckQuery::clone() const
          {
            return SpanPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_5574a424]));
          }

          jboolean SpanPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPayloadCheckQuery, t_SpanPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPayloadCheckQuery, t_SpanPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPayloadCheckQuery), module, "SpanPayloadCheckQuery", 0);
          }

          void t_SpanPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPayloadCheckQuery::wrap_Object(SpanPayloadCheckQuery(((t_SpanPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            SpanPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/EnglishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *EnglishStemmer::class$ = NULL;
        jmethodID *EnglishStemmer::mids$ = NULL;
        bool EnglishStemmer::live$ = false;

        jclass EnglishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/EnglishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        EnglishStemmer::EnglishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean EnglishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint EnglishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean EnglishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args);

        static PyMethodDef t_EnglishStemmer__methods_[] = {
          DECLARE_METHOD(t_EnglishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(EnglishStemmer, t_EnglishStemmer, ::org::tartarus::snowball::SnowballProgram, EnglishStemmer, t_EnglishStemmer_init_, 0, 0, 0, 0, 0);

        void t_EnglishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(EnglishStemmer), module, "EnglishStemmer", 0);
        }

        void t_EnglishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "class_", make_descriptor(EnglishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EnglishStemmer::initializeClass, 1)))
            return NULL;
          return t_EnglishStemmer::wrap_Object(EnglishStemmer(((t_EnglishStemmer *) arg)->object.this$));
        }
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EnglishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds)
        {
          EnglishStemmer object((jobject) NULL);

          INT_CALL(object = EnglishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RomanianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RomanianStemmer::class$ = NULL;
        jmethodID *RomanianStemmer::mids$ = NULL;
        bool RomanianStemmer::live$ = false;

        jclass RomanianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RomanianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RomanianStemmer::RomanianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RomanianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RomanianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RomanianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args);

        static PyMethodDef t_RomanianStemmer__methods_[] = {
          DECLARE_METHOD(t_RomanianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RomanianStemmer, t_RomanianStemmer, ::org::tartarus::snowball::SnowballProgram, RomanianStemmer, t_RomanianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RomanianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RomanianStemmer), module, "RomanianStemmer", 0);
        }

        void t_RomanianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "class_", make_descriptor(RomanianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RomanianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RomanianStemmer::initializeClass, 1)))
            return NULL;
          return t_RomanianStemmer::wrap_Object(RomanianStemmer(((t_RomanianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RomanianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RomanianStemmer object((jobject) NULL);

          INT_CALL(object = RomanianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopTermsRewrite::class$ = NULL;
        jmethodID *TopTermsRewrite::mids$ = NULL;
        bool TopTermsRewrite::live$ = false;

        jclass TopTermsRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopTermsRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopTermsRewrite::TopTermsRewrite(jint a0) : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean TopTermsRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TopTermsRewrite::getSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
        }

        jint TopTermsRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query TopTermsRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args);
        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self);
        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data);
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data);
        static PyGetSetDef t_TopTermsRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TopTermsRewrite, size),
          DECLARE_GET_FIELD(t_TopTermsRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopTermsRewrite__methods_[] = {
          DECLARE_METHOD(t_TopTermsRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, getSize, METH_NOARGS),
          DECLARE_METHOD(t_TopTermsRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopTermsRewrite, t_TopTermsRewrite, ::org::apache::lucene::search::TermCollectingRewrite, TopTermsRewrite, t_TopTermsRewrite_init_, 0, 0, t_TopTermsRewrite__fields_, 0, 0);
        PyObject *t_TopTermsRewrite::wrap_Object(const TopTermsRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopTermsRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopTermsRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TopTermsRewrite), module, "TopTermsRewrite", 0);
        }

        void t_TopTermsRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "class_", make_descriptor(TopTermsRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "wrapfn_", make_descriptor(t_TopTermsRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopTermsRewrite::initializeClass, 1)))
            return NULL;
          return t_TopTermsRewrite::wrap_Object(TopTermsRewrite(((t_TopTermsRewrite *) arg)->object.this$));
        }
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopTermsRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopTermsRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopTermsRewrite(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *DocValuesOrdinalsReader::class$ = NULL;
          jmethodID *DocValuesOrdinalsReader::mids$ = NULL;
          bool DocValuesOrdinalsReader::live$ = false;

          jclass DocValuesOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_decode_079b7c7a] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocValuesOrdinalsReader::DocValuesOrdinalsReader() : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DocValuesOrdinalsReader::DocValuesOrdinalsReader(const ::java::lang::String & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ::java::lang::String DocValuesOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader DocValuesOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data);
          static PyGetSetDef t_DocValuesOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_DocValuesOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocValuesOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_DocValuesOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getReader, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocValuesOrdinalsReader, t_DocValuesOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, DocValuesOrdinalsReader, t_DocValuesOrdinalsReader_init_, 0, 0, t_DocValuesOrdinalsReader__fields_, 0, 0);

          void t_DocValuesOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DocValuesOrdinalsReader), module, "DocValuesOrdinalsReader", 0);
          }

          void t_DocValuesOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "class_", make_descriptor(DocValuesOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_DocValuesOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocValuesOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_DocValuesOrdinalsReader::wrap_Object(DocValuesOrdinalsReader(((t_DocValuesOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocValuesOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DocValuesOrdinalsReader object((jobject) NULL);

                INT_CALL(object = DocValuesOrdinalsReader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DocValuesOrdinalsReader object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DocValuesOrdinalsReader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StemmerUtil::class$ = NULL;
          jmethodID *StemmerUtil::mids$ = NULL;
          bool StemmerUtil::live$ = false;

          jclass StemmerUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StemmerUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_delete_6f0bb349] = env->getStaticMethodID(cls, "delete", "([CII)I");
              mids$[mid_deleteN_afe81cab] = env->getStaticMethodID(cls, "deleteN", "([CIII)I");
              mids$[mid_endsWith_510fc742] = env->getStaticMethodID(cls, "endsWith", "([CILjava/lang/String;)Z");
              mids$[mid_endsWith_cf61b894] = env->getStaticMethodID(cls, "endsWith", "([CI[C)Z");
              mids$[mid_startsWith_510fc742] = env->getStaticMethodID(cls, "startsWith", "([CILjava/lang/String;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StemmerUtil::delete$(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_delete_6f0bb349], a0.this$, a1, a2);
          }

          jint StemmerUtil::deleteN(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_deleteN_afe81cab], a0.this$, a1, a2, a3);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_510fc742], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_cf61b894], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::startsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_510fc742], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StemmerUtil__methods_[] = {
            DECLARE_METHOD(t_StemmerUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, delete, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, deleteN, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, endsWith, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, startsWith, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerUtil, t_StemmerUtil, ::java::lang::Object, StemmerUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_StemmerUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerUtil), module, "StemmerUtil", 0);
          }

          void t_StemmerUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "class_", make_descriptor(StemmerUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "wrapfn_", make_descriptor(t_StemmerUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerUtil::initializeClass, 1)))
              return NULL;
            return t_StemmerUtil::wrap_Object(StemmerUtil(((t_StemmerUtil *) arg)->object.this$));
          }
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::delete$(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "delete", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::deleteN(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "deleteN", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                JArray< jchar > a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CI[C", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "endsWith", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::startsWith(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "startsWith", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_adde7c2e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;)V");
              mids$[mid_init$_1134ad3e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/util/List;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_adde7c2e, a0.this$, a1.this$)) {}

          Dictionary::Dictionary(const ::java::io::InputStream & a0, const ::java::util::List & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1134ad3e, a0.this$, a1.this$, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, t_Dictionary_init_, 0, 0, 0, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Dictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::java::io::InputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  INT_CALL(object = Dictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndPrefixQuery::class$ = NULL;
            jmethodID *SrndPrefixQuery::mids$ = NULL;
            bool SrndPrefixQuery::live$ = false;

            jclass SrndPrefixQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndPrefixQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f33a591b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZC)V");
                mids$[mid_getLucenePrefixTerm_2864f4ee] = env->getMethodID(cls, "getLucenePrefixTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getPrefix_14c7b5c5] = env->getMethodID(cls, "getPrefix", "()Ljava/lang/String;");
                mids$[mid_getSuffixOperator_54c6a173] = env->getMethodID(cls, "getSuffixOperator", "()C");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndPrefixQuery::SrndPrefixQuery(const ::java::lang::String & a0, jboolean a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f33a591b, a0.this$, a1, a2)) {}

            ::org::apache::lucene::index::Term SrndPrefixQuery::getLucenePrefixTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLucenePrefixTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndPrefixQuery::getPrefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPrefix_14c7b5c5]));
            }

            jchar SrndPrefixQuery::getSuffixOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getSuffixOperator_54c6a173]);
            }

            ::java::lang::String SrndPrefixQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndPrefixQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data);
            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data);
            static PyGetSetDef t_SrndPrefixQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndPrefixQuery, prefix),
              DECLARE_GET_FIELD(t_SrndPrefixQuery, suffixOperator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndPrefixQuery__methods_[] = {
              DECLARE_METHOD(t_SrndPrefixQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, getLucenePrefixTerm, METH_O),
              DECLARE_METHOD(t_SrndPrefixQuery, getPrefix, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, getSuffixOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndPrefixQuery, t_SrndPrefixQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndPrefixQuery, t_SrndPrefixQuery_init_, 0, 0, t_SrndPrefixQuery__fields_, 0, 0);

            void t_SrndPrefixQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndPrefixQuery), module, "SrndPrefixQuery", 0);
            }

            void t_SrndPrefixQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "class_", make_descriptor(SrndPrefixQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndPrefixQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndPrefixQuery::initializeClass, 1)))
                return NULL;
              return t_SrndPrefixQuery::wrap_Object(SrndPrefixQuery(((t_SrndPrefixQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndPrefixQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              jchar a2;
              SrndPrefixQuery object((jobject) NULL);

              if (!parseArgs(args, "sZC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndPrefixQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLucenePrefixTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLucenePrefixTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPrefix());
              return j2p(result);
            }

            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPrefix());
              return j2p(value);
            }

            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosReader::class$ = NULL;
        jmethodID *FieldInfosReader::mids$ = NULL;
        bool FieldInfosReader::live$ = false;

        jclass FieldInfosReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_d7fc5981] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfos FieldInfosReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_d7fc5981], a0.this$, a1.this$, a2.this$, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args);

        static PyMethodDef t_FieldInfosReader__methods_[] = {
          DECLARE_METHOD(t_FieldInfosReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosReader, t_FieldInfosReader, ::java::lang::Object, FieldInfosReader, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosReader), module, "FieldInfosReader", 0);
        }

        void t_FieldInfosReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "class_", make_descriptor(FieldInfosReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosReader::initializeClass, 1)))
            return NULL;
          return t_FieldInfosReader::wrap_Object(FieldInfosReader(((t_FieldInfosReader *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Comparable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Float::class$ = NULL;
    jmethodID *Float::mids$ = NULL;
    bool Float::live$ = false;
    jint Float::BYTES = (jint) 0;
    jint Float::MAX_EXPONENT = (jint) 0;
    jfloat Float::MAX_VALUE = (jfloat) 0;
    jint Float::MIN_EXPONENT = (jint) 0;
    jfloat Float::MIN_NORMAL = (jfloat) 0;
    jfloat Float::MIN_VALUE = (jfloat) 0;
    jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
    jfloat Float::NaN = (jfloat) 0;
    jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
    jint Float::SIZE = (jint) 0;
    ::java::lang::Class *Float::TYPE = NULL;

    jclass Float::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Float");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_f1b0c01b] = env->getStaticMethodID(cls, "compare", "(FF)I");
        mids$[mid_compareTo_6b30eb75] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatToIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
        mids$[mid_floatToRawIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_06298cb4] = env->getStaticMethodID(cls, "hashCode", "(F)I");
        mids$[mid_intBitsToFloat_39c7bd2c] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isFinite_06298ca7] = env->getStaticMethodID(cls, "isFinite", "(F)Z");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_06298ca7] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_06298ca7] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_max_f1b0c014] = env->getStaticMethodID(cls, "max", "(FF)F");
        mids$[mid_min_f1b0c014] = env->getStaticMethodID(cls, "min", "(FF)F");
        mids$[mid_parseFloat_5fdc3f58] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_sum_f1b0c014] = env->getStaticMethodID(cls, "sum", "(FF)F");
        mids$[mid_toHexString_5ded254a] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_5ded254a] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_685a245e] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");
        mids$[mid_valueOf_b837041d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticFloatField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

    jbyte Float::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Float::compare(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_f1b0c01b], a0, a1);
    }

    jint Float::compareTo(const Float & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b30eb75], a0.this$);
    }

    jdouble Float::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Float::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint Float::floatToIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_06298cb4], a0);
    }

    jint Float::floatToRawIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_06298cb4], a0);
    }

    jfloat Float::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Float::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Float::hashCode(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_06298cb4], a0);
    }

    jfloat Float::intBitsToFloat(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_39c7bd2c], a0);
    }

    jint Float::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Float::isFinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_06298ca7], a0);
    }

    jboolean Float::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Float::isInfinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_06298ca7], a0);
    }

    jboolean Float::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Float::isNaN(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_06298ca7], a0);
    }

    jlong Float::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jfloat Float::max$(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_max_f1b0c014], a0, a1);
    }

    jfloat Float::min$(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_min_f1b0c014], a0, a1);
    }

    jfloat Float::parseFloat(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_5fdc3f58], a0.this$);
    }

    jshort Float::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jfloat Float::sum(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_sum_f1b0c014], a0, a1);
    }

    ::java::lang::String Float::toHexString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_5ded254a], a0));
    }

    ::java::lang::String Float::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Float::toString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_5ded254a], a0));
    }

    Float Float::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_685a245e], a0));
    }

    Float Float::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b837041d], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg);
    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_equals(t_Float *self, PyObject *args);
    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_isFinite(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isInfinite(t_Float *self);
    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isNaN(t_Float *self);
    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_toString(t_Float *self, PyObject *args);
    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_get__infinite(t_Float *self, void *data);
    static PyObject *t_Float_get__naN(t_Float *self, void *data);
    static PyGetSetDef t_Float__fields_[] = {
      DECLARE_GET_FIELD(t_Float, infinite),
      DECLARE_GET_FIELD(t_Float, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Float__methods_[] = {
      DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, compareTo, METH_O),
      DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, equals, METH_VARARGS),
      DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, isFinite, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, toString, METH_VARARGS),
      DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Float, t_Float, ::java::lang::Number, Float, t_Float_init_, 0, 0, t_Float__fields_, 0, 0);

    void t_Float::install(PyObject *module)
    {
      installType(&PY_TYPE(Float), module, "Float", 0);
    }

    void t_Float::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "class_", make_descriptor(Float::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "wrapfn_", make_descriptor(unboxFloat));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "boxfn_", make_descriptor(boxFloat));
      env->getClass(Float::initializeClass);
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "BYTES", make_descriptor(Float::BYTES));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NaN", make_descriptor(Float::NaN));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "SIZE", make_descriptor(Float::SIZE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
    }

    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Float::initializeClass, 1)))
        return NULL;
      return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
    }
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Float::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Float object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jfloat a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jint result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg)
    {
      Float a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Float_equals(t_Float *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToRawIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Float_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jint result;

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jfloat result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "intBitsToFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Float_isFinite(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isFinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isFinite", arg);
      return NULL;
    }

    static PyObject *t_Float_isInfinite(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Float_isNaN(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Float_max(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::max$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Float_min(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::min$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jfloat result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Float_sum(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::sum(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Float_toString(t_Float *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jfloat a0;
          Float result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Float result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Float_get__infinite(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Float_get__naN(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/RuleReturnScope.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *RuleReturnScope::class$ = NULL;
      jmethodID *RuleReturnScope::mids$ = NULL;
      bool RuleReturnScope::live$ = false;

      jclass RuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/RuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTemplate_846352c3] = env->getMethodID(cls, "getTemplate", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      RuleReturnScope::RuleReturnScope() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object RuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTemplate() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTemplate_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data);
      static PyGetSetDef t_RuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_RuleReturnScope, start),
        DECLARE_GET_FIELD(t_RuleReturnScope, stop),
        DECLARE_GET_FIELD(t_RuleReturnScope, template),
        DECLARE_GET_FIELD(t_RuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_RuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_RuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, getStart, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getStop, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTemplate, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTree, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(RuleReturnScope, t_RuleReturnScope, ::java::lang::Object, RuleReturnScope, t_RuleReturnScope_init_, 0, 0, t_RuleReturnScope__fields_, 0, 0);

      void t_RuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(RuleReturnScope), module, "RuleReturnScope", 0);
      }

      void t_RuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "class_", make_descriptor(RuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_RuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, RuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_RuleReturnScope::wrap_Object(RuleReturnScope(((t_RuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, RuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        RuleReturnScope object((jobject) NULL);

        INT_CALL(object = RuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterIterator::class$ = NULL;
          jmethodID *WordDelimiterIterator::mids$ = NULL;
          bool WordDelimiterIterator::live$ = false;
          JArray< jbyte > *WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE = NULL;
          jint WordDelimiterIterator::DONE = (jint) 0;

          jclass WordDelimiterIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getType_39c7bd28] = env->getStaticMethodID(cls, "getType", "(I)B");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_WORD_DELIM_TABLE = new JArray< jbyte >(env->getStaticObjectField(cls, "DEFAULT_WORD_DELIM_TABLE", "[B"));
              DONE = env->getStaticIntField(cls, "DONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jbyte WordDelimiterIterator::getType(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticByteMethod(cls, mids$[mid_getType_39c7bd28], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_WordDelimiterIterator__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, getType, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterIterator, t_WordDelimiterIterator, ::java::lang::Object, WordDelimiterIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_WordDelimiterIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterIterator), module, "WordDelimiterIterator", 0);
          }

          void t_WordDelimiterIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "class_", make_descriptor(WordDelimiterIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DEFAULT_WORD_DELIM_TABLE", make_descriptor(WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE->wrap()));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DONE", make_descriptor(WordDelimiterIterator::DONE));
          }

          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterIterator::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterIterator::wrap_Object(WordDelimiterIterator(((t_WordDelimiterIterator *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jbyte result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::WordDelimiterIterator::getType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getType", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *CharStream::class$ = NULL;
          jmethodID *CharStream::mids$ = NULL;
          bool CharStream::live$ = false;

          jclass CharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/CharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jchar CharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void CharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String CharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > CharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void CharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint CharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint CharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint CharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint CharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint CharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint CharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar CharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_BeginToken(t_CharStream *self);
          static PyObject *t_CharStream_Done(t_CharStream *self);
          static PyObject *t_CharStream_GetImage(t_CharStream *self);
          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
          static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
          static PyObject *t_CharStream_getColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndLine(t_CharStream *self);
          static PyObject *t_CharStream_getLine(t_CharStream *self);
          static PyObject *t_CharStream_readChar(t_CharStream *self);
          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
          static PyGetSetDef t_CharStream__fields_[] = {
            DECLARE_GET_FIELD(t_CharStream, beginColumn),
            DECLARE_GET_FIELD(t_CharStream, beginLine),
            DECLARE_GET_FIELD(t_CharStream, column),
            DECLARE_GET_FIELD(t_CharStream, endColumn),
            DECLARE_GET_FIELD(t_CharStream, endLine),
            DECLARE_GET_FIELD(t_CharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharStream__methods_[] = {
            DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_CharStream, backup, METH_O),
            DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

          void t_CharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(CharStream), module, "CharStream", 0);
          }

          void t_CharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
              return NULL;
            return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
          }
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharStream_BeginToken(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_Done(t_CharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharStream_GetImage(t_CharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_readChar(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PrefixWildcardQueryNode::class$ = NULL;
              jmethodID *PrefixWildcardQueryNode::mids$ = NULL;
              bool PrefixWildcardQueryNode::live$ = false;

              jclass PrefixWildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_45dffc2c] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              PrefixWildcardQueryNode PrefixWildcardQueryNode::cloneTree() const
              {
                return PrefixWildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_45dffc2c]));
              }

              ::java::lang::String PrefixWildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args);
              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_PrefixWildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNode, t_PrefixWildcardQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode, PrefixWildcardQueryNode, t_PrefixWildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNode), module, "PrefixWildcardQueryNode", 0);
              }

              void t_PrefixWildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNode::wrap_Object(PrefixWildcardQueryNode(((t_PrefixWildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                PrefixWildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_PrefixWildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilter::class$ = NULL;
          jmethodID *BrazilianStemFilter::mids$ = NULL;
          bool BrazilianStemFilter::live$ = false;

          jclass BrazilianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilter::BrazilianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BrazilianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilter, t_BrazilianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BrazilianStemFilter, t_BrazilianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilter), module, "BrazilianStemFilter", 0);
          }

          void t_BrazilianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "class_", make_descriptor(BrazilianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilter::wrap_Object(BrazilianStemFilter(((t_BrazilianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BrazilianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BrazilianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *LevenshteinAutomata::class$ = NULL;
          jmethodID *LevenshteinAutomata::mids$ = NULL;
          bool LevenshteinAutomata::live$ = false;
          jint LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE = (jint) 0;

          jclass LevenshteinAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/LevenshteinAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_1525174f] = env->getMethodID(cls, "<init>", "([IIZ)V");
              mids$[mid_toAutomaton_d5b8a843] = env->getMethodID(cls, "toAutomaton", "(I)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAXIMUM_SUPPORTED_DISTANCE = env->getStaticIntField(cls, "MAXIMUM_SUPPORTED_DISTANCE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevenshteinAutomata::LevenshteinAutomata(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          LevenshteinAutomata::LevenshteinAutomata(const JArray< jint > & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1525174f, a0.this$, a1, a2)) {}

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d5b8a843], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *arg);

          static PyMethodDef t_LevenshteinAutomata__methods_[] = {
            DECLARE_METHOD(t_LevenshteinAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, toAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevenshteinAutomata, t_LevenshteinAutomata, ::java::lang::Object, LevenshteinAutomata, t_LevenshteinAutomata_init_, 0, 0, 0, 0, 0);

          void t_LevenshteinAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(LevenshteinAutomata), module, "LevenshteinAutomata", 0);
          }

          void t_LevenshteinAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "class_", make_descriptor(LevenshteinAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "wrapfn_", make_descriptor(t_LevenshteinAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LevenshteinAutomata::initializeClass);
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "MAXIMUM_SUPPORTED_DISTANCE", make_descriptor(LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE));
          }

          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevenshteinAutomata::initializeClass, 1)))
              return NULL;
            return t_LevenshteinAutomata::wrap_Object(LevenshteinAutomata(((t_LevenshteinAutomata *) arg)->object.this$));
          }
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevenshteinAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "[IIZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.toAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStreamReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStreamReader::class$ = NULL;
    jmethodID *InputStreamReader::mids$ = NULL;
    bool InputStreamReader::live$ = false;

    jclass InputStreamReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStreamReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getEncoding_14c7b5c5] = env->getMethodID(cls, "getEncoding", "()Ljava/lang/String;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

    void InputStreamReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::lang::String InputStreamReader::getEncoding() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEncoding_14c7b5c5]));
    }

    jint InputStreamReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStreamReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean InputStreamReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self);
    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data);
    static PyGetSetDef t_InputStreamReader__fields_[] = {
      DECLARE_GET_FIELD(t_InputStreamReader, encoding),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_InputStreamReader__methods_[] = {
      DECLARE_METHOD(t_InputStreamReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, close, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, getEncoding, METH_NOARGS),
      DECLARE_METHOD(t_InputStreamReader, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, ready, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStreamReader, t_InputStreamReader, ::java::io::Reader, InputStreamReader, t_InputStreamReader_init_, 0, 0, t_InputStreamReader__fields_, 0, 0);

    void t_InputStreamReader::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStreamReader), module, "InputStreamReader", 0);
    }

    void t_InputStreamReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "class_", make_descriptor(InputStreamReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "wrapfn_", make_descriptor(t_InputStreamReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStreamReader::initializeClass, 1)))
        return NULL;
      return t_InputStreamReader::wrap_Object(InputStreamReader(((t_InputStreamReader *) arg)->object.this$));
    }
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStreamReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamReader(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::InputStream a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = InputStreamReader(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getEncoding());
      return j2p(result);
    }

    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getEncoding());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilterFactory::class$ = NULL;
          jmethodID *SynonymFilterFactory::mids$ = NULL;
          bool SynonymFilterFactory::live$ = false;

          jclass SynonymFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilterFactory::SynonymFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SynonymFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void SynonymFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args);
          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SynonymFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SynonymFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilterFactory, t_SynonymFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SynonymFilterFactory, t_SynonymFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilterFactory), module, "SynonymFilterFactory", 0);
          }

          void t_SynonymFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "class_", make_descriptor(SynonymFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SynonymFilterFactory::wrap_Object(SynonymFilterFactory(((t_SynonymFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SynonymFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SynonymFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SynonymFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode::class$ = NULL;
              jmethodID *ModifierQueryNode::mids$ = NULL;
              bool ModifierQueryNode::live$ = false;

              jclass ModifierQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getModifier_511690a9] = env->getMethodID(cls, "getModifier", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNode::ModifierQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier ModifierQueryNode::getModifier() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_getModifier_511690a9]));
              }

              void ModifierQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence ModifierQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ModifierQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg);
              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data);
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data);
              static PyGetSetDef t_ModifierQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ModifierQueryNode, child),
                DECLARE_GET_FIELD(t_ModifierQueryNode, modifier),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getModifier, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_ModifierQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode, t_ModifierQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, ModifierQueryNode, t_ModifierQueryNode_init_, 0, 0, t_ModifierQueryNode__fields_, 0, 0);

              void t_ModifierQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode), module, "ModifierQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "Modifier", make_descriptor(&PY_TYPE(ModifierQueryNode$Modifier)));
              }

              void t_ModifierQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "class_", make_descriptor(ModifierQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode::wrap_Object(ModifierQueryNode(((t_ModifierQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                ModifierQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = ModifierQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }

              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier value((jobject) NULL);
                OBJ_CALL(value = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilter::class$ = NULL;
          jmethodID *KStemFilter::mids$ = NULL;
          bool KStemFilter::live$ = false;

          jclass KStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilter::KStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args);

          static PyMethodDef t_KStemFilter__methods_[] = {
            DECLARE_METHOD(t_KStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilter, t_KStemFilter, ::org::apache::lucene::analysis::TokenFilter, KStemFilter, t_KStemFilter_init_, 0, 0, 0, 0, 0);

          void t_KStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilter), module, "KStemFilter", 0);
          }

          void t_KStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "class_", make_descriptor(KStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "wrapfn_", make_descriptor(t_KStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilter::initializeClass, 1)))
              return NULL;
            return t_KStemFilter::wrap_Object(KStemFilter(((t_KStemFilter *) arg)->object.this$));
          }
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParser.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/Class.h"
#include "java/util/ArrayList.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParser::class$ = NULL;
            jmethodID *QueryParser::mids$ = NULL;
            jfieldID *QueryParser::fids$ = NULL;
            bool QueryParser::live$ = false;

            jclass QueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c0dff4ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_AndQuery_26528772] = env->getMethodID(cls, "AndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQuery_26528772] = env->getMethodID(cls, "FieldsQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQueryList_87851566] = env->getMethodID(cls, "FieldsQueryList", "()Ljava/util/List;");
                mids$[mid_NQuery_26528772] = env->getMethodID(cls, "NQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_NotQuery_26528772] = env->getMethodID(cls, "NotQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_OptionalFields_21eb51b0] = env->getMethodID(cls, "OptionalFields", "()Ljava/util/ArrayList;");
                mids$[mid_OptionalWeights_5e4f727f] = env->getMethodID(cls, "OptionalWeights", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;)V");
                mids$[mid_OrQuery_26528772] = env->getMethodID(cls, "OrQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrefixOperatorQuery_26528772] = env->getMethodID(cls, "PrefixOperatorQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrimaryQuery_26528772] = env->getMethodID(cls, "PrimaryQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_ReInit_c0dff4ef] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_SimpleTerm_26528772] = env->getMethodID(cls, "SimpleTerm", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_TopSrndQuery_26528772] = env->getMethodID(cls, "TopSrndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_WQuery_26528772] = env->getMethodID(cls, "WQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                mids$[mid_generateParseException_dc2be8ae] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/surround/parser/ParseException;");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_getToken_1162c488] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_parse_eb9ff21c] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_parse2_eb9ff21c] = env->getMethodID(cls, "parse2", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getPrefixQuery_484af57f] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOpDistance_5fdc3f57] = env->getStaticMethodID(cls, "getOpDistance", "(Ljava/lang/String;)I");
                mids$[mid_getAndQuery_685e421b] = env->getMethodID(cls, "getAndQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getFieldsQuery_4e036592] = env->getMethodID(cls, "getFieldsQuery", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/ArrayList;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOrQuery_685e421b] = env->getMethodID(cls, "getOrQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getNotQuery_3a2a55ec] = env->getMethodID(cls, "getNotQuery", "(Ljava/util/List;Lorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_checkDistanceSubQueries_657c42bd] = env->getStaticMethodID(cls, "checkDistanceSubQueries", "(Lorg/apache/lucene/queryparser/surround/query/DistanceQuery;Ljava/lang/String;)V");
                mids$[mid_getDistanceQuery_b401ccf2] = env->getMethodID(cls, "getDistanceQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getTermQuery_484af57f] = env->getMethodID(cls, "getTermQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_allowedSuffix_5fdc3f44] = env->getMethodID(cls, "allowedSuffix", "(Ljava/lang/String;)Z");
                mids$[mid_allowedTruncation_5fdc3f44] = env->getMethodID(cls, "allowedTruncation", "(Ljava/lang/String;)Z");
                mids$[mid_getTruncQuery_eb9ff21c] = env->getMethodID(cls, "getTruncQuery", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParser::QueryParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c0dff4ef, a0.this$)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::AndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_AndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::FieldsQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_FieldsQuery_26528772]));
            }

            ::java::util::List QueryParser::FieldsQueryList() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_FieldsQueryList_87851566]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NotQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NotQuery_26528772]));
            }

            ::java::util::ArrayList QueryParser::OptionalFields() const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_OptionalFields_21eb51b0]));
            }

            void QueryParser::OptionalWeights(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_OptionalWeights_5e4f727f], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::OrQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_OrQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrefixOperatorQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrefixOperatorQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrimaryQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrimaryQuery_26528772]));
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_c0dff4ef], a0.this$);
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::SimpleTerm() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_SimpleTerm_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::TopSrndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_TopSrndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::WQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_WQuery_26528772]));
            }

            void QueryParser::disable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
            }

            void QueryParser::enable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::parser::ParseException QueryParser::generateParseException() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_dc2be8ae]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getToken(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_1162c488], a0));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callStaticObjectMethod(cls, mids$[mid_parse_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse2(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_parse2_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_jj_nt() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
            }

            void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_token() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_token]));
            }

            void QueryParser::_set_token(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_token], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager QueryParser::_get_token_source() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
            }

            void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->setObjectField(this$, fids$[fid_token_source], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self);
            static PyObject *t_QueryParser_NQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self);
            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_WQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
            static PyGetSetDef t_QueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
              DECLARE_GETSET_FIELD(t_QueryParser, token),
              DECLARE_GETSET_FIELD(t_QueryParser, token_source),
              DECLARE_GET_FIELD(t_QueryParser, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParser__methods_[] = {
              DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, AndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQueryList, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NotQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalFields, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalWeights, METH_O),
              DECLARE_METHOD(t_QueryParser, OrQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrefixOperatorQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrimaryQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParser, SimpleTerm, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, TopSrndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, WQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getToken, METH_O),
              DECLARE_METHOD(t_QueryParser, parse, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, parse2, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParser, t_QueryParser, ::java::lang::Object, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

            void t_QueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            }

            void t_QueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
                return NULL;
              return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
            }
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  QueryParser object((jobject) NULL);

                  INT_CALL(object = QueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.AndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQueryList());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_QueryParser_NQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NotQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self)
            {
              ::java::util::ArrayList result((jobject) NULL);
              OBJ_CALL(result = self->object.OptionalFields());
              return ::java::util::t_ArrayList::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0))
              {
                OBJ_CALL(self->object.OptionalWeights(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "OptionalWeights", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.OrQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrefixOperatorQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrimaryQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.SimpleTerm());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.TopSrndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_WQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.WQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.disable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.enable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::ParseException result((jobject) NULL);
              OBJ_CALL(result = self->object.generateParseException());
              return ::org::apache::lucene::queryparser::surround::parser::t_ParseException::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getToken(a0));
                return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getToken", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::QueryParser::parse(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.parse2(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse2", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_jj_nt());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_jj_nt(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_token(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token_source());
              return ::org::apache::lucene::queryparser::surround::parser::t_QueryParserTokenManager::wrap_Object(value);
            }
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &value))
              {
                INT_CALL(self->object._set_token_source(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token_source", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttributeImpl::class$ = NULL;
          jmethodID *TypeAttributeImpl::mids$ = NULL;
          bool TypeAttributeImpl::live$ = false;

          jclass TypeAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAttributeImpl::TypeAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TypeAttributeImpl::TypeAttributeImpl(const ::java::lang::String & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          void TypeAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void TypeAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean TypeAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint TypeAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void TypeAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self);

          static PyMethodDef t_TypeAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_TypeAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_TypeAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttributeImpl, t_TypeAttributeImpl, ::org::apache::lucene::util::AttributeImpl, TypeAttributeImpl, t_TypeAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_TypeAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttributeImpl), module, "TypeAttributeImpl", 0);
          }

          void t_TypeAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "class_", make_descriptor(TypeAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_TypeAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_TypeAttributeImpl::wrap_Object(TypeAttributeImpl(((t_TypeAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TypeAttributeImpl object((jobject) NULL);

                INT_CALL(object = TypeAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                TypeAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = TypeAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool::class$ = NULL;
        jmethodID *TwoPhaseCommitTool::mids$ = NULL;
        bool TwoPhaseCommitTool::live$ = false;

        jclass TwoPhaseCommitTool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_execute_9f61f519] = env->getStaticMethodID(cls, "execute", "([Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommitTool::execute(const JArray< ::org::apache::lucene::index::TwoPhaseCommit > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_execute_9f61f519], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_TwoPhaseCommitTool__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, execute, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool, t_TwoPhaseCommitTool, ::java::lang::Object, TwoPhaseCommitTool, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool), module, "TwoPhaseCommitTool", 0);
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "CommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$CommitFailException)));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "PrepareCommitFailException", make_descriptor(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException)));
        }

        void t_TwoPhaseCommitTool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool::wrap_Object(TwoPhaseCommitTool(((t_TwoPhaseCommitTool *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::index::TwoPhaseCommit > a0((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::TwoPhaseCommitTool::execute(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "execute", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDecoder::class$ = NULL;
          jmethodID *EliasFanoDecoder::mids$ = NULL;
          bool EliasFanoDecoder::live$ = false;
          jlong EliasFanoDecoder::NO_MORE_VALUES = (jlong) 0;

          jclass EliasFanoDecoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDecoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dd0d7538] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/EliasFanoEncoder;)V");
              mids$[mid_advanceToIndex_0ee6df23] = env->getMethodID(cls, "advanceToIndex", "(J)Z");
              mids$[mid_advanceToValue_0ee6df33] = env->getMethodID(cls, "advanceToValue", "(J)J");
              mids$[mid_backToValue_0ee6df33] = env->getMethodID(cls, "backToValue", "(J)J");
              mids$[mid_currentIndex_54c6a17a] = env->getMethodID(cls, "currentIndex", "()J");
              mids$[mid_currentValue_54c6a17a] = env->getMethodID(cls, "currentValue", "()J");
              mids$[mid_getEliasFanoEncoder_803fc555] = env->getMethodID(cls, "getEliasFanoEncoder", "()Lorg/apache/lucene/util/packed/EliasFanoEncoder;");
              mids$[mid_nextValue_54c6a17a] = env->getMethodID(cls, "nextValue", "()J");
              mids$[mid_numEncoded_54c6a17a] = env->getMethodID(cls, "numEncoded", "()J");
              mids$[mid_previousValue_54c6a17a] = env->getMethodID(cls, "previousValue", "()J");
              mids$[mid_toAfterSequence_54c6a166] = env->getMethodID(cls, "toAfterSequence", "()V");
              mids$[mid_toBeforeSequence_54c6a166] = env->getMethodID(cls, "toBeforeSequence", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NO_MORE_VALUES = env->getStaticLongField(cls, "NO_MORE_VALUES");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDecoder::EliasFanoDecoder(const ::org::apache::lucene::util::packed::EliasFanoEncoder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dd0d7538, a0.this$)) {}

          jboolean EliasFanoDecoder::advanceToIndex(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_advanceToIndex_0ee6df23], a0);
          }

          jlong EliasFanoDecoder::advanceToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_advanceToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::backToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_backToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::currentIndex() const
          {
            return env->callLongMethod(this$, mids$[mid_currentIndex_54c6a17a]);
          }

          jlong EliasFanoDecoder::currentValue() const
          {
            return env->callLongMethod(this$, mids$[mid_currentValue_54c6a17a]);
          }

          ::org::apache::lucene::util::packed::EliasFanoEncoder EliasFanoDecoder::getEliasFanoEncoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoEncoder(env->callObjectMethod(this$, mids$[mid_getEliasFanoEncoder_803fc555]));
          }

          jlong EliasFanoDecoder::nextValue() const
          {
            return env->callLongMethod(this$, mids$[mid_nextValue_54c6a17a]);
          }

          jlong EliasFanoDecoder::numEncoded() const
          {
            return env->callLongMethod(this$, mids$[mid_numEncoded_54c6a17a]);
          }

          jlong EliasFanoDecoder::previousValue() const
          {
            return env->callLongMethod(this$, mids$[mid_previousValue_54c6a17a]);
          }

          void EliasFanoDecoder::toAfterSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toAfterSequence_54c6a166]);
          }

          void EliasFanoDecoder::toBeforeSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toBeforeSequence_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data);
          static PyGetSetDef t_EliasFanoDecoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDecoder, eliasFanoEncoder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDecoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDecoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToIndex, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, backToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, currentIndex, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, getEliasFanoEncoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, nextValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, numEncoded, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, previousValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toAfterSequence, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toBeforeSequence, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDecoder, t_EliasFanoDecoder, ::java::lang::Object, EliasFanoDecoder, t_EliasFanoDecoder_init_, 0, 0, t_EliasFanoDecoder__fields_, 0, 0);

          void t_EliasFanoDecoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDecoder), module, "EliasFanoDecoder", 0);
          }

          void t_EliasFanoDecoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "class_", make_descriptor(EliasFanoDecoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDecoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoDecoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "NO_MORE_VALUES", make_descriptor(EliasFanoDecoder::NO_MORE_VALUES));
          }

          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDecoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDecoder::wrap_Object(EliasFanoDecoder(((t_EliasFanoDecoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDecoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder a0((jobject) NULL);
            EliasFanoDecoder object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::packed::EliasFanoEncoder::initializeClass, &a0))
            {
              INT_CALL(object = EliasFanoDecoder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToIndex(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToIndex", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.backToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "backToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentIndex());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.nextValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.numEncoded());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.previousValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toAfterSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toBeforeSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SnapshotDeletionPolicy::class$ = NULL;
        jmethodID *SnapshotDeletionPolicy::mids$ = NULL;
        bool SnapshotDeletionPolicy::live$ = false;

        jclass SnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9cff6c2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)V");
            mids$[mid_getIndexCommit_6e559b4f] = env->getMethodID(cls, "getIndexCommit", "(J)Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getSnapshotCount_54c6a179] = env->getMethodID(cls, "getSnapshotCount", "()I");
            mids$[mid_getSnapshots_87851566] = env->getMethodID(cls, "getSnapshots", "()Ljava/util/List;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_incRef_fecc65d3] = env->getMethodID(cls, "incRef", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_releaseGen_0ee6df2f] = env->getMethodID(cls, "releaseGen", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SnapshotDeletionPolicy::SnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_9cff6c2e, a0.this$)) {}

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::getIndexCommit(jlong a0) const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_6e559b4f], a0));
        }

        jint SnapshotDeletionPolicy::getSnapshotCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSnapshotCount_54c6a179]);
        }

        ::java::util::List SnapshotDeletionPolicy::getSnapshots() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSnapshots_87851566]));
        }

        void SnapshotDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_SnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshotCount),
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshots),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_SnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getIndexCommit, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshotCount, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshots, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onInit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, release, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, snapshot, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SnapshotDeletionPolicy, t_SnapshotDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, SnapshotDeletionPolicy, t_SnapshotDeletionPolicy_init_, 0, 0, t_SnapshotDeletionPolicy__fields_, 0, 0);

        void t_SnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(SnapshotDeletionPolicy), module, "SnapshotDeletionPolicy", 0);
        }

        void t_SnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(SnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_SnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_SnapshotDeletionPolicy::wrap_Object(SnapshotDeletionPolicy(((t_SnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          SnapshotDeletionPolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            INT_CALL(object = SnapshotDeletionPolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getIndexCommit(a0));
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSnapshotCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
        }

        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.snapshot());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSnapshotCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46Codec::class$ = NULL;
          jmethodID *Lucene46Codec::mids$ = NULL;
          bool Lucene46Codec::live$ = false;

          jclass Lucene46Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46Codec::Lucene46Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene46Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene46Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene46Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene46Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene46Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene46Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args);

          static PyMethodDef t_Lucene46Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene46Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46Codec, t_Lucene46Codec, ::org::apache::lucene::codecs::Codec, Lucene46Codec, t_Lucene46Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene46Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46Codec), module, "Lucene46Codec", 0);
          }

          void t_Lucene46Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "class_", make_descriptor(Lucene46Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene46Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene46Codec::wrap_Object(Lucene46Codec(((t_Lucene46Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene46Codec object((jobject) NULL);

            INT_CALL(object = Lucene46Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Lowest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Lowest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Lowest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Lowest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Lowest::ToParentBlockJoinFieldComparator$Lowest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Lowest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Lowest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Lowest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Lowest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Lowest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Lowest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Lowest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Lowest, t_ToParentBlockJoinFieldComparator$Lowest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Lowest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(const ToParentBlockJoinFieldComparator$Lowest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Lowest *self = (t_ToParentBlockJoinFieldComparator$Lowest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), module, "ToParentBlockJoinFieldComparator$Lowest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Lowest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Lowest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Lowest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Lowest::wrap_Object(ToParentBlockJoinFieldComparator$Lowest(((t_ToParentBlockJoinFieldComparator$Lowest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Lowest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_of_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Lowest_init_(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Lowest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Lowest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareBottom(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_compareTop(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_copy(t_ToParentBlockJoinFieldComparator$Lowest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Lowest_get__parameters_(t_ToParentBlockJoinFieldComparator$Lowest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizer::class$ = NULL;
          jmethodID *RussianLetterTokenizer::mids$ = NULL;
          bool RussianLetterTokenizer::live$ = false;

          jclass RussianLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RussianLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizer, t_RussianLetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, RussianLetterTokenizer, t_RussianLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizer), module, "RussianLetterTokenizer", 0);
          }

          void t_RussianLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "class_", make_descriptor(RussianLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizer::wrap_Object(RussianLetterTokenizer(((t_RussianLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *CharStream::class$ = NULL;
            jmethodID *CharStream::mids$ = NULL;
            bool CharStream::live$ = false;

            jclass CharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/CharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jchar CharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void CharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String CharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > CharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void CharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint CharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint CharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint CharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint CharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint CharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint CharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar CharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_BeginToken(t_CharStream *self);
            static PyObject *t_CharStream_Done(t_CharStream *self);
            static PyObject *t_CharStream_GetImage(t_CharStream *self);
            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
            static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
            static PyObject *t_CharStream_getColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndLine(t_CharStream *self);
            static PyObject *t_CharStream_getLine(t_CharStream *self);
            static PyObject *t_CharStream_readChar(t_CharStream *self);
            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
            static PyGetSetDef t_CharStream__fields_[] = {
              DECLARE_GET_FIELD(t_CharStream, beginColumn),
              DECLARE_GET_FIELD(t_CharStream, beginLine),
              DECLARE_GET_FIELD(t_CharStream, column),
              DECLARE_GET_FIELD(t_CharStream, endColumn),
              DECLARE_GET_FIELD(t_CharStream, endLine),
              DECLARE_GET_FIELD(t_CharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharStream__methods_[] = {
              DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_CharStream, backup, METH_O),
              DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

            void t_CharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(CharStream), module, "CharStream", 0);
            }

            void t_CharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                return NULL;
              return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
            }
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharStream_BeginToken(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_Done(t_CharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharStream_GetImage(t_CharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_readChar(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilterFactory::class$ = NULL;
          jmethodID *ClassicFilterFactory::mids$ = NULL;
          bool ClassicFilterFactory::live$ = false;

          jclass ClassicFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilterFactory::ClassicFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter ClassicFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args);

          static PyMethodDef t_ClassicFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilterFactory, t_ClassicFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ClassicFilterFactory, t_ClassicFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilterFactory), module, "ClassicFilterFactory", 0);
          }

          void t_ClassicFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "class_", make_descriptor(ClassicFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicFilterFactory::wrap_Object(ClassicFilterFactory(((t_ClassicFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SpecialOperations.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SpecialOperations::class$ = NULL;
          jmethodID *SpecialOperations::mids$ = NULL;
          bool SpecialOperations::live$ = false;

          jclass SpecialOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SpecialOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getCommonPrefix_c2342f4b] = env->getStaticMethodID(cls, "getCommonPrefix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonPrefixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonPrefixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getCommonSuffix_c2342f4b] = env->getStaticMethodID(cls, "getCommonSuffix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonSuffixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonSuffixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getFiniteStrings_4e50ce8f] = env->getStaticMethodID(cls, "getFiniteStrings", "(Lorg/apache/lucene/util/automaton/Automaton;I)Ljava/util/Set;");
              mids$[mid_isFinite_fc7cf398] = env->getStaticMethodID(cls, "isFinite", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_reverse_f8f6971d] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String SpecialOperations::getCommonPrefix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef SpecialOperations::getCommonPrefixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefixBytesRef_b889220f], a0.this$));
          }

          ::java::lang::String SpecialOperations::getCommonSuffix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef SpecialOperations::getCommonSuffixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffixBytesRef_b889220f], a0.this$));
          }

          ::java::util::Set SpecialOperations::getFiniteStrings(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getFiniteStrings_4e50ce8f], a0.this$, a1));
          }

          jboolean SpecialOperations::isFinite(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_fc7cf398], a0.this$);
          }

          ::java::util::Set SpecialOperations::reverse(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_reverse_f8f6971d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SpecialOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonPrefix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonSuffix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getFiniteStrings(PyTypeObject *type, PyObject *args);
          static PyObject *t_SpecialOperations_isFinite(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_reverse(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SpecialOperations__methods_[] = {
            DECLARE_METHOD(t_SpecialOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonPrefix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonPrefixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonSuffix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonSuffixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getFiniteStrings, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, isFinite, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, reverse, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpecialOperations, t_SpecialOperations, ::java::lang::Object, SpecialOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_SpecialOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(SpecialOperations), module, "SpecialOperations", 0);
          }

          void t_SpecialOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "class_", make_descriptor(SpecialOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "wrapfn_", make_descriptor(t_SpecialOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpecialOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpecialOperations::initializeClass, 1)))
              return NULL;
            return t_SpecialOperations::wrap_Object(SpecialOperations(((t_SpecialOperations *) arg)->object.this$));
          }
          static PyObject *t_SpecialOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpecialOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpecialOperations_getCommonPrefix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonPrefix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefix", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonPrefixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonSuffix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonSuffix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffix", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonSuffixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getFiniteStrings(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getFiniteStrings(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(IntsRef));
            }

            PyErr_SetArgsError(type, "getFiniteStrings", args);
            return NULL;
          }

          static PyObject *t_SpecialOperations_isFinite(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::isFinite(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isFinite", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_reverse(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::reverse(a0));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(State));
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker::class$ = NULL;
        jmethodID *FieldCacheSanityChecker::mids$ = NULL;
        bool FieldCacheSanityChecker::live$ = false;

        jclass FieldCacheSanityChecker::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_check_d93a601e] = env->getMethodID(cls, "check", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_ad442ffd] = env->getStaticMethodID(cls, "checkSanity", "(Lorg/apache/lucene/search/FieldCache;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_d93a601e] = env->getStaticMethodID(cls, "checkSanity", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker::FieldCacheSanityChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::check(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0) const
        {
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callObjectMethod(this$, mids$[mid_check_d93a601e], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const ::org::apache::lucene::search::FieldCache & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_ad442ffd], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_d93a601e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, check, METH_O),
          DECLARE_METHOD(t_FieldCacheSanityChecker, checkSanity, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker, t_FieldCacheSanityChecker, ::java::lang::Object, FieldCacheSanityChecker, t_FieldCacheSanityChecker_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker), module, "FieldCacheSanityChecker", 0);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "InsanityType", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$InsanityType)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "Insanity", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$Insanity)));
        }

        void t_FieldCacheSanityChecker::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker::wrap_Object(FieldCacheSanityChecker(((t_FieldCacheSanityChecker *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheSanityChecker object((jobject) NULL);

          INT_CALL(object = FieldCacheSanityChecker());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.check(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "check", arg);
          return NULL;
        }

        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::FieldCache a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::FieldCache::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
            {
              JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError(type, "checkSanity", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValueSource::class$ = NULL;
            jmethodID *MultiValueSource::mids$ = NULL;
            bool MultiValueSource::live$ = false;

            jclass MultiValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValueSource::MultiValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jint MultiValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self);

            static PyMethodDef t_MultiValueSource__methods_[] = {
              DECLARE_METHOD(t_MultiValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, dimension, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiValueSource, t_MultiValueSource, ::org::apache::lucene::queries::function::ValueSource, MultiValueSource, t_MultiValueSource_init_, 0, 0, 0, 0, 0);

            void t_MultiValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValueSource), module, "MultiValueSource", 0);
            }

            void t_MultiValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "class_", make_descriptor(MultiValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "wrapfn_", make_descriptor(t_MultiValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValueSource::initializeClass, 1)))
                return NULL;
              return t_MultiValueSource::wrap_Object(MultiValueSource(((t_MultiValueSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds)
            {
              MultiValueSource object((jobject) NULL);

              INT_CALL(object = MultiValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.dimension());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene46FieldInfosFormat::mids$ = NULL;
          bool Lucene46FieldInfosFormat::live$ = false;

          jclass Lucene46FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46FieldInfosFormat::Lucene46FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene46FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene46FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene46FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat_init_, 0, 0, t_Lucene46FieldInfosFormat__fields_, 0, 0);

          void t_Lucene46FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46FieldInfosFormat), module, "Lucene46FieldInfosFormat", 0);
          }

          void t_Lucene46FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene46FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46FieldInfosFormat::wrap_Object(Lucene46FieldInfosFormat(((t_Lucene46FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene46FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDate.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDate::class$ = NULL;
          jmethodID *MutableValueDate::mids$ = NULL;
          bool MutableValueDate::live$ = false;

          jclass MutableValueDate::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDate");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDate::MutableValueDate() : ::org::apache::lucene::util::mutable$::MutableValueLong(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDate::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          ::java::lang::Object MutableValueDate::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args);
          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args);

          static PyMethodDef t_MutableValueDate__methods_[] = {
            DECLARE_METHOD(t_MutableValueDate, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDate, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDate, t_MutableValueDate, ::org::apache::lucene::util::mutable$::MutableValueLong, MutableValueDate, t_MutableValueDate_init_, 0, 0, 0, 0, 0);

          void t_MutableValueDate::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDate), module, "MutableValueDate", 0);
          }

          void t_MutableValueDate::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "class_", make_descriptor(MutableValueDate::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDate::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDate::initializeClass, 1)))
              return NULL;
            return t_MutableValueDate::wrap_Object(MutableValueDate(((t_MutableValueDate *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDate::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDate object((jobject) NULL);

            INT_CALL(object = MutableValueDate());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "toObject", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilder::class$ = NULL;
          jmethodID *QueryBuilder::mids$ = NULL;
          bool QueryBuilder::live$ = false;

          jclass QueryBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryBuilder__methods_[] = {
            DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
          }

          void t_QueryBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
              return NULL;
            return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator::class$ = NULL;
        jmethodID *FieldComparator::mids$ = NULL;
        bool FieldComparator::live$ = false;

        jclass FieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_466982ed] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator::FieldComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator::compareValues(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_466982ed], a0.this$, a1.this$);
        }

        void FieldComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        FieldComparator FieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator::setTopValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
        }

        ::java::lang::Object FieldComparator::value(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args);
        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg);
        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data);
        static PyGetSetDef t_FieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator, setNextReader, METH_O),
          DECLARE_METHOD(t_FieldComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator, setTopValue, METH_O),
          DECLARE_METHOD(t_FieldComparator, value, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator, t_FieldComparator, ::java::lang::Object, FieldComparator, t_FieldComparator_init_, 0, 0, t_FieldComparator__fields_, 0, 0);
        PyObject *t_FieldComparator::wrap_Object(const FieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator), module, "FieldComparator", 0);
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "TermOrdValComparator", make_descriptor(&PY_TYPE(FieldComparator$TermOrdValComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DocComparator", make_descriptor(&PY_TYPE(FieldComparator$DocComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "RelevanceComparator", make_descriptor(&PY_TYPE(FieldComparator$RelevanceComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "LongComparator", make_descriptor(&PY_TYPE(FieldComparator$LongComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "IntComparator", make_descriptor(&PY_TYPE(FieldComparator$IntComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ShortComparator", make_descriptor(&PY_TYPE(FieldComparator$ShortComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "FloatComparator", make_descriptor(&PY_TYPE(FieldComparator$FloatComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "DoubleComparator", make_descriptor(&PY_TYPE(FieldComparator$DoubleComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "ByteComparator", make_descriptor(&PY_TYPE(FieldComparator$ByteComparator)));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "NumericComparator", make_descriptor(&PY_TYPE(FieldComparator$NumericComparator)));
        }

        void t_FieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "class_", make_descriptor(FieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator::wrap_Object(FieldComparator(((t_FieldComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds)
        {
          FieldComparator object((jobject) NULL);

          INT_CALL(object = FieldComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareTop(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareValues", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_copy(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_setBottom(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setNextReader(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          FieldComparator result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setScorer(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTopValue", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return NULL;
        }
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator_set__bottom(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator_set__nextReader(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator_set__scorer(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Enumeration.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree::class$ = NULL;
            jmethodID *TernaryTree::mids$ = NULL;
            bool TernaryTree::live$ = false;

            jclass TernaryTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balance_54c6a166] = env->getMethodID(cls, "balance", "()V");
                mids$[mid_clone_30bcff98] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;");
                mids$[mid_find_5fdc3f57] = env->getMethodID(cls, "find", "(Ljava/lang/String;)I");
                mids$[mid_find_ec6430eb] = env->getMethodID(cls, "find", "([CI)I");
                mids$[mid_insert_7420ac50] = env->getMethodID(cls, "insert", "(Ljava/lang/String;C)V");
                mids$[mid_insert_6d377140] = env->getMethodID(cls, "insert", "([CIC)V");
                mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_knows_5fdc3f44] = env->getMethodID(cls, "knows", "(Ljava/lang/String;)Z");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_strcmp_979cf09d] = env->getStaticMethodID(cls, "strcmp", "(Ljava/lang/String;[CI)I");
                mids$[mid_strcmp_aa5dc2ed] = env->getStaticMethodID(cls, "strcmp", "([CI[CI)I");
                mids$[mid_strcpy_aa5dc2f2] = env->getStaticMethodID(cls, "strcpy", "([CI[CI)V");
                mids$[mid_strlen_700e23c9] = env->getStaticMethodID(cls, "strlen", "([C)I");
                mids$[mid_strlen_ec6430eb] = env->getStaticMethodID(cls, "strlen", "([CI)I");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
                mids$[mid_insertBalanced_7e9fa7a8] = env->getMethodID(cls, "insertBalanced", "([Ljava/lang/String;[CII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TernaryTree::balance() const
            {
              env->callVoidMethod(this$, mids$[mid_balance_54c6a166]);
            }

            TernaryTree TernaryTree::clone() const
            {
              return TernaryTree(env->callObjectMethod(this$, mids$[mid_clone_30bcff98]));
            }

            jint TernaryTree::find(const ::java::lang::String & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_find_5fdc3f57], a0.this$);
            }

            jint TernaryTree::find(const JArray< jchar > & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_find_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::insert(const ::java::lang::String & a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_7420ac50], a0.this$, a1);
            }

            void TernaryTree::insert(const JArray< jchar > & a0, jint a1, jchar a2) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_6d377140], a0.this$, a1, a2);
            }

            ::java::util::Enumeration TernaryTree::keys() const
            {
              return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
            }

            jboolean TernaryTree::knows(const ::java::lang::String & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_knows_5fdc3f44], a0.this$);
            }

            void TernaryTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }

            jint TernaryTree::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }

            jint TernaryTree::strcmp(const ::java::lang::String & a0, const JArray< jchar > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_979cf09d], a0.this$, a1.this$, a2);
            }

            jint TernaryTree::strcmp(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_aa5dc2ed], a0.this$, a1, a2.this$, a3);
            }

            void TernaryTree::strcpy(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_strcpy_aa5dc2f2], a0.this$, a1, a2.this$, a3);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_700e23c9], a0.this$);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0, jint a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_ec6430eb], a0.this$, a1);
            }

            void TernaryTree::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_balance(t_TernaryTree *self);
            static PyObject *t_TernaryTree_clone(t_TernaryTree *self);
            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_keys(t_TernaryTree *self);
            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_size(t_TernaryTree *self);
            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self);

            static PyMethodDef t_TernaryTree__methods_[] = {
              DECLARE_METHOD(t_TernaryTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, balance, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, clone, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, find, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, insert, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, keys, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, knows, METH_O),
              DECLARE_METHOD(t_TernaryTree, printStats, METH_O),
              DECLARE_METHOD(t_TernaryTree, size, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, strcmp, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strcpy, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strlen, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree, t_TernaryTree, ::java::lang::Object, TernaryTree, abstract_init, 0, 0, 0, 0, 0);

            void t_TernaryTree::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree), module, "TernaryTree", 0);
            }

            void t_TernaryTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "class_", make_descriptor(TernaryTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree::initializeClass, 1)))
                return NULL;
              return t_TernaryTree::wrap_Object(TernaryTree(((t_TernaryTree *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TernaryTree_balance(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.balance());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree_clone(t_TernaryTree *self)
            {
              TernaryTree result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_TernaryTree::wrap_Object(result);
            }

            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.find(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.find(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "find", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jchar a1;

                  if (!parseArgs(args, "sC", &a0, &a1))
                  {
                    OBJ_CALL(self->object.insert(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jchar a2;

                  if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
                  {
                    OBJ_CALL(self->object.insert(a0, a1, a2));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_keys(t_TernaryTree *self)
            {
              ::java::util::Enumeration result((jobject) NULL);
              OBJ_CALL(result = self->object.keys());
              return ::java::util::t_Enumeration::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.knows(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "knows", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "printStats", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_size(t_TernaryTree *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< jchar > a1((jobject) NULL);
                  jint a2;
                  jint result;

                  if (!parseArgs(args, "s[CI", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 4:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  JArray< jchar > a2((jobject) NULL);
                  jint a3;
                  jint result;

                  if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2, a3));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strcmp", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;

              if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcpy(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "strcpy", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "[C", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0));
                    return PyInt_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0, a1));
                    return PyInt_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strlen", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Runtime.h"
#include "java/lang/Thread.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Process.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Runtime::class$ = NULL;
    jmethodID *Runtime::mids$ = NULL;
    bool Runtime::live$ = false;

    jclass Runtime::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Runtime");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addShutdownHook_cfc68b69] = env->getMethodID(cls, "addShutdownHook", "(Ljava/lang/Thread;)V");
        mids$[mid_availableProcessors_54c6a179] = env->getMethodID(cls, "availableProcessors", "()I");
        mids$[mid_exec_cb215688] = env->getMethodID(cls, "exec", "([Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_a3a0dfc8] = env->getMethodID(cls, "exec", "(Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_d0c45a12] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_dfe32e32] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_e1ed077f] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exec_5726a223] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exit_39c7bd3c] = env->getMethodID(cls, "exit", "(I)V");
        mids$[mid_freeMemory_54c6a17a] = env->getMethodID(cls, "freeMemory", "()J");
        mids$[mid_gc_54c6a166] = env->getMethodID(cls, "gc", "()V");
        mids$[mid_getLocalizedInputStream_04932eef] = env->getMethodID(cls, "getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;");
        mids$[mid_getLocalizedOutputStream_97714a3f] = env->getMethodID(cls, "getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;");
        mids$[mid_getRuntime_620bf90f] = env->getStaticMethodID(cls, "getRuntime", "()Ljava/lang/Runtime;");
        mids$[mid_halt_39c7bd3c] = env->getMethodID(cls, "halt", "(I)V");
        mids$[mid_load_5fdc3f48] = env->getMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_maxMemory_54c6a17a] = env->getMethodID(cls, "maxMemory", "()J");
        mids$[mid_removeShutdownHook_cfc68b65] = env->getMethodID(cls, "removeShutdownHook", "(Ljava/lang/Thread;)Z");
        mids$[mid_runFinalization_54c6a166] = env->getMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_totalMemory_54c6a17a] = env->getMethodID(cls, "totalMemory", "()J");
        mids$[mid_traceInstructions_bb0c767f] = env->getMethodID(cls, "traceInstructions", "(Z)V");
        mids$[mid_traceMethodCalls_bb0c767f] = env->getMethodID(cls, "traceMethodCalls", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Runtime::addShutdownHook(const ::java::lang::Thread & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addShutdownHook_cfc68b69], a0.this$);
    }

    jint Runtime::availableProcessors() const
    {
      return env->callIntMethod(this$, mids$[mid_availableProcessors_54c6a179]);
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_cb215688], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_a3a0dfc8], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_d0c45a12], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_dfe32e32], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_e1ed077f], a0.this$, a1.this$, a2.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_5726a223], a0.this$, a1.this$, a2.this$));
    }

    void Runtime::exit(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_exit_39c7bd3c], a0);
    }

    jlong Runtime::freeMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_freeMemory_54c6a17a]);
    }

    void Runtime::gc() const
    {
      env->callVoidMethod(this$, mids$[mid_gc_54c6a166]);
    }

    ::java::io::InputStream Runtime::getLocalizedInputStream(const ::java::io::InputStream & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedInputStream_04932eef], a0.this$));
    }

    ::java::io::OutputStream Runtime::getLocalizedOutputStream(const ::java::io::OutputStream & a0) const
    {
      return ::java::io::OutputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedOutputStream_97714a3f], a0.this$));
    }

    Runtime Runtime::getRuntime()
    {
      jclass cls = env->getClass(initializeClass);
      return Runtime(env->callStaticObjectMethod(cls, mids$[mid_getRuntime_620bf90f]));
    }

    void Runtime::halt(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_halt_39c7bd3c], a0);
    }

    void Runtime::load(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void Runtime::loadLibrary(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    jlong Runtime::maxMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_maxMemory_54c6a17a]);
    }

    jboolean Runtime::removeShutdownHook(const ::java::lang::Thread & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeShutdownHook_cfc68b65], a0.this$);
    }

    void Runtime::runFinalization() const
    {
      env->callVoidMethod(this$, mids$[mid_runFinalization_54c6a166]);
    }

    void Runtime::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    jlong Runtime::totalMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_totalMemory_54c6a17a]);
    }

    void Runtime::traceInstructions(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceInstructions_bb0c767f], a0);
    }

    void Runtime::traceMethodCalls(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceMethodCalls_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_availableProcessors(t_Runtime *self);
    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args);
    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_freeMemory(t_Runtime *self);
    static PyObject *t_Runtime_gc(t_Runtime *self);
    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getRuntime(PyTypeObject *type);
    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_maxMemory(t_Runtime *self);
    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_runFinalization(t_Runtime *self);
    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_totalMemory(t_Runtime *self);
    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data);
    static PyGetSetDef t_Runtime__fields_[] = {
      DECLARE_GET_FIELD(t_Runtime, runtime),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Runtime__methods_[] = {
      DECLARE_METHOD(t_Runtime, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, addShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, availableProcessors, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, exec, METH_VARARGS),
      DECLARE_METHOD(t_Runtime, exit, METH_O),
      DECLARE_METHOD(t_Runtime, freeMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, gc, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, getLocalizedInputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getLocalizedOutputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getRuntime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Runtime, halt, METH_O),
      DECLARE_METHOD(t_Runtime, load, METH_O),
      DECLARE_METHOD(t_Runtime, loadLibrary, METH_O),
      DECLARE_METHOD(t_Runtime, maxMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, removeShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, runFinalization, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, totalMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, traceInstructions, METH_O),
      DECLARE_METHOD(t_Runtime, traceMethodCalls, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Runtime, t_Runtime, ::java::lang::Object, Runtime, abstract_init, 0, 0, t_Runtime__fields_, 0, 0);

    void t_Runtime::install(PyObject *module)
    {
      installType(&PY_TYPE(Runtime), module, "Runtime", 0);
    }

    void t_Runtime::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "class_", make_descriptor(Runtime::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "wrapfn_", make_descriptor(t_Runtime::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Runtime::initializeClass, 1)))
        return NULL;
      return t_Runtime::wrap_Object(Runtime(((t_Runtime *) arg)->object.this$));
    }
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Runtime::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addShutdownHook(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_availableProcessors(t_Runtime *self)
    {
      jint result;
      OBJ_CALL(result = self->object.availableProcessors());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "exec", args);
      return NULL;
    }

    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "exit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_freeMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.freeMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_gc(t_Runtime *self)
    {
      OBJ_CALL(self->object.gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedInputStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedInputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::OutputStream a0((jobject) NULL);
      ::java::io::OutputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedOutputStream(a0));
        return ::java::io::t_OutputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedOutputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getRuntime(PyTypeObject *type)
    {
      Runtime result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Runtime::getRuntime());
      return t_Runtime::wrap_Object(result);
    }

    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.halt(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "halt", arg);
      return NULL;
    }

    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "load", arg);
      return NULL;
    }

    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_Runtime_maxMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.maxMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.removeShutdownHook(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_runFinalization(t_Runtime *self)
    {
      OBJ_CALL(self->object.runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::Runtime::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_totalMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.totalMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceInstructions(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceInstructions", arg);
      return NULL;
    }

    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceMethodCalls(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceMethodCalls", arg);
      return NULL;
    }

    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data)
    {
      Runtime value((jobject) NULL);
      OBJ_CALL(value = self->object.getRuntime());
      return t_Runtime::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ConcurrentMergeScheduler::class$ = NULL;
        jmethodID *ConcurrentMergeScheduler::mids$ = NULL;
        bool ConcurrentMergeScheduler::live$ = false;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT = (jint) 0;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT = (jint) 0;

        jclass ConcurrentMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ConcurrentMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getMaxMergeCount_54c6a179] = env->getMethodID(cls, "getMaxMergeCount", "()I");
            mids$[mid_getMaxThreadCount_54c6a179] = env->getMethodID(cls, "getMaxThreadCount", "()I");
            mids$[mid_getMergeThreadPriority_54c6a179] = env->getMethodID(cls, "getMergeThreadPriority", "()I");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");
            mids$[mid_setMaxMergesAndThreads_d8d154a6] = env->getMethodID(cls, "setMaxMergesAndThreads", "(II)V");
            mids$[mid_setMergeThreadPriority_39c7bd3c] = env->getMethodID(cls, "setMergeThreadPriority", "(I)V");
            mids$[mid_sync_54c6a166] = env->getMethodID(cls, "sync", "()V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_5fdc3f48] = env->getMethodID(cls, "message", "(Ljava/lang/String;)V");
            mids$[mid_verbose_54c6a16a] = env->getMethodID(cls, "verbose", "()Z");
            mids$[mid_handleMergeException_c5ec8ca4] = env->getMethodID(cls, "handleMergeException", "(Ljava/lang/Throwable;)V");
            mids$[mid_mergeThreadCount_54c6a179] = env->getMethodID(cls, "mergeThreadCount", "()I");
            mids$[mid_updateMergeThreads_54c6a166] = env->getMethodID(cls, "updateMergeThreads", "()V");
            mids$[mid_doMerge_54badd95] = env->getMethodID(cls, "doMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_getMergeThread_a2024ae6] = env->getMethodID(cls, "getMergeThread", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergePolicy$OneMerge;)Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_COUNT");
            DEFAULT_MAX_THREAD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_COUNT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConcurrentMergeScheduler::ConcurrentMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void ConcurrentMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint ConcurrentMergeScheduler::getMaxMergeCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMaxThreadCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMergeThreadPriority() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeThreadPriority_54c6a179]);
        }

        void ConcurrentMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }

        void ConcurrentMergeScheduler::setMaxMergesAndThreads(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergesAndThreads_d8d154a6], a0, a1);
        }

        void ConcurrentMergeScheduler::setMergeThreadPriority(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeThreadPriority_39c7bd3c], a0);
        }

        void ConcurrentMergeScheduler::sync() const
        {
          env->callVoidMethod(this$, mids$[mid_sync_54c6a166]);
        }

        ::java::lang::String ConcurrentMergeScheduler::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data);
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data);
        static PyGetSetDef t_ConcurrentMergeScheduler__fields_[] = {
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxMergeCount),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxThreadCount),
          DECLARE_GETSET_FIELD(t_ConcurrentMergeScheduler, mergeThreadPriority),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConcurrentMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_ConcurrentMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxMergeCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxThreadCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMergeThreadPriority, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMaxMergesAndThreads, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMergeThreadPriority, METH_O),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, sync, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConcurrentMergeScheduler, t_ConcurrentMergeScheduler, ::org::apache::lucene::index::MergeScheduler, ConcurrentMergeScheduler, t_ConcurrentMergeScheduler_init_, 0, 0, t_ConcurrentMergeScheduler__fields_, 0, 0);

        void t_ConcurrentMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(ConcurrentMergeScheduler), module, "ConcurrentMergeScheduler", 0);
        }

        void t_ConcurrentMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "class_", make_descriptor(ConcurrentMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_ConcurrentMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConcurrentMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_MERGE_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_THREAD_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT));
        }

        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConcurrentMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_ConcurrentMergeScheduler::wrap_Object(ConcurrentMergeScheduler(((t_ConcurrentMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConcurrentMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          ConcurrentMergeScheduler object((jobject) NULL);

          INT_CALL(object = ConcurrentMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "merge", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setMaxMergesAndThreads(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergesAndThreads", args);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeThreadPriority(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeThreadPriority", arg);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.sync());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) value);
        }
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeThreadPriority(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeThreadPriority", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinCollector.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinCollector::class$ = NULL;
          jmethodID *ToParentBlockJoinCollector::mids$ = NULL;
          bool ToParentBlockJoinCollector::live$ = false;

          jclass ToParentBlockJoinCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3369b2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
              mids$[mid_getTopGroups_aade7c1f] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad] = env->getMethodID(cls, "getTopGroupsWithAllChildDocs", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinCollector::ToParentBlockJoinCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e3369b2e, a0.this$, a1, a2, a3)) {}

          jboolean ToParentBlockJoinCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void ToParentBlockJoinCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jfloat ToParentBlockJoinCollector::getMaxScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroups(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jint a4, jboolean a5) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_aade7c1f], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroupsWithAllChildDocs(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad], a0.this$, a1.this$, a2, a3, a4));
          }

          void ToParentBlockJoinCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void ToParentBlockJoinCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data);
          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_ToParentBlockJoinCollector__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinCollector, maxScore),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinCollector__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getMaxScore, METH_NOARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroupsWithAllChildDocs, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinCollector, t_ToParentBlockJoinCollector, ::org::apache::lucene::search::Collector, ToParentBlockJoinCollector, t_ToParentBlockJoinCollector_init_, 0, 0, t_ToParentBlockJoinCollector__fields_, 0, 0);

          void t_ToParentBlockJoinCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinCollector), module, "ToParentBlockJoinCollector", 0);
          }

          void t_ToParentBlockJoinCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "class_", make_descriptor(ToParentBlockJoinCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinCollector::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinCollector::wrap_Object(ToParentBlockJoinCollector(((t_ToParentBlockJoinCollector *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            ToParentBlockJoinCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroupsWithAllChildDocs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroupsWithAllChildDocs", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester::class$ = NULL;
            jmethodID *BlendedInfixSuggester::mids$ = NULL;
            bool BlendedInfixSuggester::live$ = false;
            jint BlendedInfixSuggester::DEFAULT_NUM_FACTOR = (jint) 0;

            jclass BlendedInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2fef229] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_185ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;ILorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;I)V");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_bb92c162] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_getTextFieldType_a2615189] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_dfa2a05f] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_calculateCoefficient_39c7bd2e] = env->getMethodID(cls, "calculateCoefficient", "(I)D");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_NUM_FACTOR = env->getStaticIntField(cls, "DEFAULT_NUM_FACTOR");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_b2fef229, a0.this$, a1.this$, a2.this$)) {}

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4, const ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType & a5, jint a6) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_185ca32c, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6)) {}

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_bb92c162], a0.this$, a1.this$, a2, a3, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args);

            static PyMethodDef t_BlendedInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester, t_BlendedInfixSuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester, BlendedInfixSuggester, t_BlendedInfixSuggester_init_, 0, 0, 0, 0, 0);

            void t_BlendedInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester), module, "BlendedInfixSuggester", 0);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "BlenderType", make_descriptor(&PY_TYPE(BlendedInfixSuggester$BlenderType)));
            }

            void t_BlendedInfixSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "class_", make_descriptor(BlendedInfixSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester).tp_dict, "DEFAULT_NUM_FACTOR", make_descriptor(BlendedInfixSuggester::DEFAULT_NUM_FACTOR));
            }

            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester::wrap_Object(BlendedInfixSuggester(((t_BlendedInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  ::org::apache::lucene::util::Version a0((jobject) NULL);
                  PyTypeObject **p0;
                  ::org::apache::lucene::store::Directory a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType a5((jobject) NULL);
                  PyTypeObject **p5;
                  jint a6;
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "KkkkIKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::suggest::analyzing::t_BlendedInfixSuggester$BlenderType::parameters_, &a6))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(&PY_TYPE(BlendedInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilter::class$ = NULL;
          jmethodID *LengthFilter::mids$ = NULL;
          bool LengthFilter::live$ = false;

          jclass LengthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_c7851d0e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7851d0e, a0.this$, a1, a2.this$, a3, a4)) {}

          jboolean LengthFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilter_accept(t_LengthFilter *self);

          static PyMethodDef t_LengthFilter__methods_[] = {
            DECLARE_METHOD(t_LengthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilter, t_LengthFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, LengthFilter, t_LengthFilter_init_, 0, 0, 0, 0, 0);

          void t_LengthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilter), module, "LengthFilter", 0);
          }

          void t_LengthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "class_", make_descriptor(LengthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "wrapfn_", make_descriptor(t_LengthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilter::initializeClass, 1)))
              return NULL;
            return t_LengthFilter::wrap_Object(LengthFilter(((t_LengthFilter *) arg)->object.this$));
          }
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                jint a3;
                jint a4;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilter_accept(t_LengthFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemmer::class$ = NULL;
          jmethodID *FrenchMinimalStemmer::mids$ = NULL;
          bool FrenchMinimalStemmer::live$ = false;

          jclass FrenchMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemmer::FrenchMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemmer, t_FrenchMinimalStemmer, ::java::lang::Object, FrenchMinimalStemmer, t_FrenchMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemmer), module, "FrenchMinimalStemmer", 0);
          }

          void t_FrenchMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "class_", make_descriptor(FrenchMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemmer::wrap_Object(FrenchMinimalStemmer(((t_FrenchMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchMinimalStemmer object((jobject) NULL);

            INT_CALL(object = FrenchMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$TermVector::class$ = NULL;
        jmethodID *Field$TermVector::mids$ = NULL;
        bool Field$TermVector::live$ = false;
        Field$TermVector *Field$TermVector::NO = NULL;
        Field$TermVector *Field$TermVector::WITH_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::YES = NULL;

        jclass Field$TermVector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$TermVector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isStored_54c6a16a] = env->getMethodID(cls, "isStored", "()Z");
            mids$[mid_toTermVector_e3e77410] = env->getStaticMethodID(cls, "toTermVector", "(ZZZ)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_valueOf_dd40625d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_values_3d8f8203] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_withOffsets_54c6a16a] = env->getMethodID(cls, "withOffsets", "()Z");
            mids$[mid_withPositions_54c6a16a] = env->getMethodID(cls, "withPositions", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$TermVector(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            YES = new Field$TermVector(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$TermVector;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$TermVector::isStored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStored_54c6a16a]);
        }

        Field$TermVector Field$TermVector::toTermVector(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_toTermVector_e3e77410], a0, a1, a2));
        }

        Field$TermVector Field$TermVector::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dd40625d], a0.this$));
        }

        JArray< Field$TermVector > Field$TermVector::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$TermVector >(env->callStaticObjectMethod(cls, mids$[mid_values_3d8f8203]));
        }

        jboolean Field$TermVector::withOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withOffsets_54c6a16a]);
        }

        jboolean Field$TermVector::withPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withPositions_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args);
        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_values(PyTypeObject *type);
        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data);
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data);
        static PyGetSetDef t_Field$TermVector__fields_[] = {
          DECLARE_GET_FIELD(t_Field$TermVector, stored),
          DECLARE_GET_FIELD(t_Field$TermVector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$TermVector__methods_[] = {
          DECLARE_METHOD(t_Field$TermVector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$TermVector, isStored, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, toTermVector, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, values, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, withOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, withPositions, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$TermVector, t_Field$TermVector, ::java::lang::Enum, Field$TermVector, abstract_init, 0, 0, t_Field$TermVector__fields_, 0, 0);
        PyObject *t_Field$TermVector::wrap_Object(const Field$TermVector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$TermVector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$TermVector::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$TermVector), module, "Field$TermVector", 0);
        }

        void t_Field$TermVector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "class_", make_descriptor(Field$TermVector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "wrapfn_", make_descriptor(t_Field$TermVector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$TermVector::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "NO", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::NO)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "YES", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::YES)));
        }

        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$TermVector::initializeClass, 1)))
            return NULL;
          return t_Field$TermVector::wrap_Object(Field$TermVector(((t_Field$TermVector *) arg)->object.this$));
        }
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$TermVector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args)
        {
          jboolean a0;
          jboolean a1;
          jboolean a2;
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::toTermVector(a0, a1, a2));
            return t_Field$TermVector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toTermVector", args);
          return NULL;
        }

        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::valueOf(a0));
            return t_Field$TermVector::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$TermVector_values(PyTypeObject *type)
        {
          JArray< Field$TermVector > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::values());
          return JArray<jobject>(result.this$).wrap(t_Field$TermVector::wrap_jobject);
        }

        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withPositions());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStored());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSortField.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSortField::class$ = NULL;
        jmethodID *SortedNumericSortField::mids$ = NULL;
        bool SortedNumericSortField::live$ = false;

        jclass SortedNumericSortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_init$_f03d0044] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/SortedNumericSelector$Type;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getSelector_26022dee] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::SortedNumericSelector$Type & a3) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f03d0044, a0.this$, a1.this$, a2, a3.this$)) {}

        jboolean SortedNumericSortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::FieldComparator SortedNumericSortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::SortedNumericSelector$Type SortedNumericSortField::getSelector() const
        {
          return ::org::apache::lucene::search::SortedNumericSelector$Type(env->callObjectMethod(this$, mids$[mid_getSelector_26022dee]));
        }

        jint SortedNumericSortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void SortedNumericSortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortedNumericSortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self);
        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args);
        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data);
        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data);
        static PyGetSetDef t_SortedNumericSortField__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericSortField, missingValue),
          DECLARE_GET_FIELD(t_SortedNumericSortField, selector),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSortField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getSelector, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericSortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, setMissingValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSortField, t_SortedNumericSortField, ::org::apache::lucene::search::SortField, SortedNumericSortField, t_SortedNumericSortField_init_, 0, 0, t_SortedNumericSortField__fields_, 0, 0);

        void t_SortedNumericSortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSortField), module, "SortedNumericSortField", 0);
        }

        void t_SortedNumericSortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "class_", make_descriptor(SortedNumericSortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSortField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSortField::wrap_Object(SortedNumericSortField(((t_SortedNumericSortField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              ::org::apache::lucene::search::SortedNumericSelector$Type a3((jobject) NULL);
              PyTypeObject **p3;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZK", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &p3, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(result);
        }

        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "setMissingValue", args, 2);
        }

        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "toString", args, 2);
        }

        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataOutput::class$ = NULL;
        jmethodID *DataOutput::mids$ = NULL;
        bool DataOutput::live$ = false;

        jclass DataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyBytes_394617c2] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/store/DataInput;J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_b8354c43] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_0ee6df2f] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeShort_3bc40c6a] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_5fdc3f48] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");
            mids$[mid_writeStringSet_fb4f2b26] = env->getMethodID(cls, "writeStringSet", "(Ljava/util/Set;)V");
            mids$[mid_writeStringStringMap_4c9e2b1c] = env->getMethodID(cls, "writeStringStringMap", "(Ljava/util/Map;)V");
            mids$[mid_writeVInt_39c7bd3c] = env->getMethodID(cls, "writeVInt", "(I)V");
            mids$[mid_writeVLong_0ee6df2f] = env->getMethodID(cls, "writeVLong", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataOutput::DataOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DataOutput::copyBytes(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_394617c2], a0.this$, a1);
        }

        void DataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_b8354c43], a0.this$, a1);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }

        void DataOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_0ee6df2f], a0);
        }

        void DataOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_3bc40c6a], a0);
        }

        void DataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_5fdc3f48], a0.this$);
        }

        void DataOutput::writeStringSet(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringSet_fb4f2b26], a0.this$);
        }

        void DataOutput::writeStringStringMap(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeStringStringMap_4c9e2b1c], a0.this$);
        }

        void DataOutput::writeVInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVInt_39c7bd3c], a0);
        }

        void DataOutput::writeVLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVLong_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg);

        static PyMethodDef t_DataOutput__methods_[] = {
          DECLARE_METHOD(t_DataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeByte, METH_O),
          DECLARE_METHOD(t_DataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeShort, METH_O),
          DECLARE_METHOD(t_DataOutput, writeString, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringSet, METH_O),
          DECLARE_METHOD(t_DataOutput, writeStringStringMap, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataOutput, t_DataOutput, ::java::lang::Object, DataOutput, t_DataOutput_init_, 0, 0, 0, 0, 0);

        void t_DataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataOutput), module, "DataOutput", 0);
        }

        void t_DataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "class_", make_descriptor(DataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "wrapfn_", make_descriptor(t_DataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataOutput::initializeClass, 1)))
            return NULL;
          return t_DataOutput::wrap_Object(DataOutput(((t_DataOutput *) arg)->object.this$));
        }
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds)
        {
          DataOutput object((jobject) NULL);

          INT_CALL(object = DataOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.copyBytes(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeByte", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeShort", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeString", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringSet(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeStringSet(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringSet", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeStringStringMap(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeStringStringMap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeStringStringMap", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeVInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeVLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo$Toffs::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo$Toffs::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo$Toffs::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_compareTo_7779971e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setEndOffset_39c7bd3c] = env->getMethodID(cls, "setEndOffset", "(I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo$Toffs::FieldPhraseList$WeightedPhraseInfo$Toffs(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::compareTo(const FieldPhraseList$WeightedPhraseInfo$Toffs & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_7779971e], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo$Toffs::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FieldPhraseList$WeightedPhraseInfo$Toffs::setEndOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEndOffset_39c7bd3c], a0);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo$Toffs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_[] = {
            DECLARE_GETSET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, setEndOffset, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), module, "FieldPhraseList$WeightedPhraseInfo$Toffs", 0);
          }

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_Object(FieldPhraseList$WeightedPhraseInfo$Toffs(((t_FieldPhraseList$WeightedPhraseInfo$Toffs *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            FieldPhraseList$WeightedPhraseInfo$Toffs object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = FieldPhraseList$WeightedPhraseInfo$Toffs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo$Toffs a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setEndOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEndOffset", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setEndOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "endOffset", arg);
            return -1;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilterFactory::class$ = NULL;
          jmethodID *HungarianLightStemFilterFactory::mids$ = NULL;
          bool HungarianLightStemFilterFactory::live$ = false;

          jclass HungarianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilterFactory::HungarianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HungarianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilterFactory), module, "HungarianLightStemFilterFactory", 0);
          }

          void t_HungarianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "class_", make_descriptor(HungarianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilterFactory::wrap_Object(HungarianLightStemFilterFactory(((t_HungarianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HungarianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HungarianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNearBuilder::class$ = NULL;
            jmethodID *SpanNearBuilder::mids$ = NULL;
            bool SpanNearBuilder::live$ = false;

            jclass SpanNearBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNearBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearBuilder::SpanNearBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNearBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNearBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearBuilder, t_SpanNearBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNearBuilder, t_SpanNearBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNearBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearBuilder), module, "SpanNearBuilder", 0);
            }

            void t_SpanNearBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "class_", make_descriptor(SpanNearBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNearBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNearBuilder::wrap_Object(SpanNearBuilder(((t_SpanNearBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNearBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNearBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilter::class$ = NULL;
          jmethodID *NorwegianLightStemFilter::mids$ = NULL;
          bool NorwegianLightStemFilter::live$ = false;

          jclass NorwegianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilter, t_NorwegianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianLightStemFilter, t_NorwegianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilter), module, "NorwegianLightStemFilter", 0);
          }

          void t_NorwegianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "class_", make_descriptor(NorwegianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilter::wrap_Object(NorwegianLightStemFilter(((t_NorwegianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/simple/SimpleQueryParser.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {

          ::java::lang::Class *SimpleQueryParser::class$ = NULL;
          jmethodID *SimpleQueryParser::mids$ = NULL;
          bool SimpleQueryParser::live$ = false;
          jint SimpleQueryParser::AND_OPERATOR = (jint) 0;
          jint SimpleQueryParser::ESCAPE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::FUZZY_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NEAR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NOT_OPERATOR = (jint) 0;
          jint SimpleQueryParser::OR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PHRASE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PRECEDENCE_OPERATORS = (jint) 0;
          jint SimpleQueryParser::PREFIX_OPERATOR = (jint) 0;
          jint SimpleQueryParser::WHITESPACE_OPERATOR = (jint) 0;

          jclass SimpleQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/simple/SimpleQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_init$_55ca1e02] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_init$_284c8124] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;I)V");
              mids$[mid_getDefaultOperator_157730ed] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setDefaultOperator_23bdc104] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
              mids$[mid_newPrefixQuery_fbed2634] = env->getMethodID(cls, "newPrefixQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_936f6c82] = env->getMethodID(cls, "newFuzzyQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newPhraseQuery_936f6c82] = env->getMethodID(cls, "newPhraseQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_simplify_1ffd0b56] = env->getMethodID(cls, "simplify", "(Lorg/apache/lucene/search/BooleanQuery;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newDefaultQuery_fbed2634] = env->getMethodID(cls, "newDefaultQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = env->getStaticIntField(cls, "AND_OPERATOR");
              ESCAPE_OPERATOR = env->getStaticIntField(cls, "ESCAPE_OPERATOR");
              FUZZY_OPERATOR = env->getStaticIntField(cls, "FUZZY_OPERATOR");
              NEAR_OPERATOR = env->getStaticIntField(cls, "NEAR_OPERATOR");
              NOT_OPERATOR = env->getStaticIntField(cls, "NOT_OPERATOR");
              OR_OPERATOR = env->getStaticIntField(cls, "OR_OPERATOR");
              PHRASE_OPERATOR = env->getStaticIntField(cls, "PHRASE_OPERATOR");
              PRECEDENCE_OPERATORS = env->getStaticIntField(cls, "PRECEDENCE_OPERATORS");
              PREFIX_OPERATOR = env->getStaticIntField(cls, "PREFIX_OPERATOR");
              WHITESPACE_OPERATOR = env->getStaticIntField(cls, "WHITESPACE_OPERATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_55ca1e02, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1, jint a2) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_284c8124, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::BooleanClause$Occur SimpleQueryParser::getDefaultOperator() const
          {
            return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_157730ed]));
          }

          ::org::apache::lucene::search::Query SimpleQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void SimpleQueryParser::setDefaultOperator(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_23bdc104], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {
          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self);
          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data);
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimpleQueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleQueryParser, defaultOperator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleQueryParser__methods_[] = {
            DECLARE_METHOD(t_SimpleQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_SimpleQueryParser, parse, METH_O),
            DECLARE_METHOD(t_SimpleQueryParser, setDefaultOperator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleQueryParser, t_SimpleQueryParser, ::org::apache::lucene::util::QueryBuilder, SimpleQueryParser, t_SimpleQueryParser_init_, 0, 0, t_SimpleQueryParser__fields_, 0, 0);

          void t_SimpleQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleQueryParser), module, "SimpleQueryParser", 0);
          }

          void t_SimpleQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "class_", make_descriptor(SimpleQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "wrapfn_", make_descriptor(t_SimpleQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleQueryParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "AND_OPERATOR", make_descriptor(SimpleQueryParser::AND_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "ESCAPE_OPERATOR", make_descriptor(SimpleQueryParser::ESCAPE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "FUZZY_OPERATOR", make_descriptor(SimpleQueryParser::FUZZY_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NEAR_OPERATOR", make_descriptor(SimpleQueryParser::NEAR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NOT_OPERATOR", make_descriptor(SimpleQueryParser::NOT_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "OR_OPERATOR", make_descriptor(SimpleQueryParser::OR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PHRASE_OPERATOR", make_descriptor(SimpleQueryParser::PHRASE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PRECEDENCE_OPERATORS", make_descriptor(SimpleQueryParser::PRECEDENCE_OPERATORS));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PREFIX_OPERATOR", make_descriptor(SimpleQueryParser::PREFIX_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "WHITESPACE_OPERATOR", make_descriptor(SimpleQueryParser::WHITESPACE_OPERATOR));
          }

          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleQueryParser::initializeClass, 1)))
              return NULL;
            return t_SimpleQueryParser::wrap_Object(SimpleQueryParser(((t_SimpleQueryParser *) arg)->object.this$));
          }
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self)
          {
            ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
          }

          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data)
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
          }
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NGramPhraseQuery::class$ = NULL;
        jmethodID *NGramPhraseQuery::mids$ = NULL;
        bool NGramPhraseQuery::live$ = false;

        jclass NGramPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NGramPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NGramPhraseQuery::NGramPhraseQuery(jint a0) : ::org::apache::lucene::search::PhraseQuery(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean NGramPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NGramPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query NGramPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args);

        static PyMethodDef t_NGramPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_NGramPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NGramPhraseQuery, t_NGramPhraseQuery, ::org::apache::lucene::search::PhraseQuery, NGramPhraseQuery, t_NGramPhraseQuery_init_, 0, 0, 0, 0, 0);

        void t_NGramPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NGramPhraseQuery), module, "NGramPhraseQuery", 0);
        }

        void t_NGramPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "class_", make_descriptor(NGramPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_NGramPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NGramPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_NGramPhraseQuery::wrap_Object(NGramPhraseQuery(((t_NGramPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NGramPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          NGramPhraseQuery object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = NGramPhraseQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkTokenStream::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkTokenStream::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkTokenStream::live$ = false;

          jclass TeeSinkTokenFilter$SinkTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TeeSinkTokenFilter$SinkTokenStream::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter$SinkTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TeeSinkTokenFilter$SinkTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter$SinkTokenStream__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkTokenStream, t_TeeSinkTokenFilter$SinkTokenStream, ::org::apache::lucene::analysis::TokenStream, TeeSinkTokenFilter$SinkTokenStream, abstract_init, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), module, "TeeSinkTokenFilter$SinkTokenStream", 0);
          }

          void t_TeeSinkTokenFilter$SinkTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(TeeSinkTokenFilter$SinkTokenStream(((t_TeeSinkTokenFilter$SinkTokenStream *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReadState::class$ = NULL;
        jmethodID *SegmentReadState::mids$ = NULL;
        jfieldID *SegmentReadState::fids$ = NULL;
        bool SegmentReadState::live$ = false;

        jclass SegmentReadState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReadState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_de7693af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;Ljava/lang/String;)V");
            mids$[mid_init$_2ca58583] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;I)V");
            mids$[mid_init$_29b19e65] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;ILjava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termsIndexDivisor] = env->getFieldID(cls, "termsIndexDivisor", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReadState::SegmentReadState(const SegmentReadState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_de7693af, a0.this$, a1.this$)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2ca58583, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4, const ::java::lang::String & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_29b19e65, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentReadState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::Directory SegmentReadState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReadState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentReadState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentReadState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentReadState::_get_termsIndexDivisor() const
        {
          return env->getIntField(this$, fids$[fid_termsIndexDivisor]);
        }

        void SegmentReadState::_set_termsIndexDivisor(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termsIndexDivisor], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data);
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentReadState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReadState, context),
          DECLARE_GET_FIELD(t_SegmentReadState, directory),
          DECLARE_GET_FIELD(t_SegmentReadState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentReadState, termsIndexDivisor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReadState__methods_[] = {
          DECLARE_METHOD(t_SegmentReadState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReadState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReadState, t_SegmentReadState, ::java::lang::Object, SegmentReadState, t_SegmentReadState_init_, 0, 0, t_SegmentReadState__fields_, 0, 0);

        void t_SegmentReadState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReadState), module, "SegmentReadState", 0);
        }

        void t_SegmentReadState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "class_", make_descriptor(SegmentReadState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "wrapfn_", make_descriptor(t_SegmentReadState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReadState::initializeClass, 1)))
            return NULL;
          return t_SegmentReadState::wrap_Object(SegmentReadState(((t_SegmentReadState *) arg)->object.this$));
        }
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReadState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              SegmentReadState a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "ks", SegmentReadState::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SegmentReadState(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkIs", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termsIndexDivisor(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termsIndexDivisor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IfFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IfFunction::class$ = NULL;
            jmethodID *IfFunction::mids$ = NULL;
            bool IfFunction::live$ = false;

            jclass IfFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IfFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b33eec32] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IfFunction::IfFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_b33eec32, a0.this$, a1.this$, a2.this$)) {}

            void IfFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String IfFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IfFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IfFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IfFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args);

            static PyMethodDef t_IfFunction__methods_[] = {
              DECLARE_METHOD(t_IfFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IfFunction, t_IfFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, IfFunction, t_IfFunction_init_, 0, 0, 0, 0, 0);

            void t_IfFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(IfFunction), module, "IfFunction", 0);
            }

            void t_IfFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "class_", make_descriptor(IfFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "wrapfn_", make_descriptor(t_IfFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IfFunction::initializeClass, 1)))
                return NULL;
              return t_IfFunction::wrap_Object(IfFunction(((t_IfFunction *) arg)->object.this$));
            }
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IfFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              IfFunction object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IfFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *WFSTCompletionLookup::class$ = NULL;
            jmethodID *WFSTCompletionLookup::mids$ = NULL;
            bool WFSTCompletionLookup::live$ = false;

            jclass WFSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/WFSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            WFSTCompletionLookup::WFSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            WFSTCompletionLookup::WFSTCompletionLookup(jboolean a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void WFSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object WFSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong WFSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List WFSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong WFSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data);
            static PyGetSetDef t_WFSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_WFSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_WFSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_WFSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_WFSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(WFSTCompletionLookup, t_WFSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, WFSTCompletionLookup, t_WFSTCompletionLookup_init_, 0, 0, t_WFSTCompletionLookup__fields_, 0, 0);

            void t_WFSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(WFSTCompletionLookup), module, "WFSTCompletionLookup", 0);
            }

            void t_WFSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "class_", make_descriptor(WFSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_WFSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, WFSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_WFSTCompletionLookup::wrap_Object(WFSTCompletionLookup(((t_WFSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, WFSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  WFSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = WFSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jboolean a0;
                  WFSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "Z", &a0))
                  {
                    INT_CALL(object = WFSTCompletionLookup(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilterFactory::class$ = NULL;
          jmethodID *IndicNormalizationFilterFactory::mids$ = NULL;
          bool IndicNormalizationFilterFactory::live$ = false;

          jclass IndicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilterFactory::IndicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IndicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self);
          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_IndicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IndicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory_init_, 0, 0, t_IndicNormalizationFilterFactory__fields_, 0, 0);

          void t_IndicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilterFactory), module, "IndicNormalizationFilterFactory", 0);
          }

          void t_IndicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(IndicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilterFactory::wrap_Object(IndicNormalizationFilterFactory(((t_IndicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IndicNormalizationFilterFactory_getMultiTermComponent(t_IndicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IndicNormalizationFilterFactory_get__multiTermComponent(t_IndicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler::class$ = NULL;
              jmethodID *StandardQueryConfigHandler::mids$ = NULL;
              bool StandardQueryConfigHandler::live$ = false;

              jclass StandardQueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler::StandardQueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler, t_StandardQueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler, StandardQueryConfigHandler, t_StandardQueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler), module, "StandardQueryConfigHandler", 0);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "Operator", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$Operator)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "ConfigurationKeys", make_descriptor(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys)));
              }

              void t_StandardQueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler::wrap_Object(StandardQueryConfigHandler(((t_StandardQueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CompactLabelToOrdinal::class$ = NULL;
            jmethodID *CompactLabelToOrdinal::mids$ = NULL;
            bool CompactLabelToOrdinal::live$ = false;
            jfloat CompactLabelToOrdinal::DefaultLoadFactor = (jfloat) 0;

            jclass CompactLabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_sizeOfMap_54c6a179] = env->getMethodID(cls, "sizeOfMap", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DefaultLoadFactor = env->getStaticFloatField(cls, "DefaultLoadFactor");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompactLabelToOrdinal::CompactLabelToOrdinal(jint a0, jfloat a1, jint a2) : ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void CompactLabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint CompactLabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            jint CompactLabelToOrdinal::sizeOfMap() const
            {
              return env->callIntMethod(this$, mids$[mid_sizeOfMap_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self);

            static PyMethodDef t_CompactLabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_CompactLabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, sizeOfMap, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CompactLabelToOrdinal, t_CompactLabelToOrdinal, ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal, CompactLabelToOrdinal, t_CompactLabelToOrdinal_init_, 0, 0, 0, 0, 0);

            void t_CompactLabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(CompactLabelToOrdinal), module, "CompactLabelToOrdinal", 0);
            }

            void t_CompactLabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "class_", make_descriptor(CompactLabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_CompactLabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(CompactLabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "DefaultLoadFactor", make_descriptor(CompactLabelToOrdinal::DefaultLoadFactor));
            }

            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompactLabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_CompactLabelToOrdinal::wrap_Object(CompactLabelToOrdinal(((t_CompactLabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompactLabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              CompactLabelToOrdinal object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = CompactLabelToOrdinal(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "addLabel", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.sizeOfMap());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$StandardReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$StandardReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$StandardReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$StandardReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$StandardReaderWrapper::FilterDirectoryReader$StandardReaderWrapper() : ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$StandardReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$StandardReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$StandardReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$StandardReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, wrap, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper, FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$StandardReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(const FilterDirectoryReader$StandardReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), module, "FilterDirectoryReader$StandardReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(FilterDirectoryReader$StandardReaderWrapper(((t_FilterDirectoryReader$StandardReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$StandardReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$StandardReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), (PyObject *) self, "wrap", args, 2);
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Comparator.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRef::class$ = NULL;
        jmethodID *CharsRef::mids$ = NULL;
        jfieldID *CharsRef::fids$ = NULL;
        bool CharsRef::live$ = false;
        JArray< jchar > *CharsRef::EMPTY_CHARS = NULL;

        jclass CharsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
            mids$[mid_append_6f0bb356] = env->getMethodID(cls, "append", "([CII)V");
            mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_charsEquals_ee7999ca] = env->getMethodID(cls, "charsEquals", "(Lorg/apache/lucene/util/CharsRef;)Z");
            mids$[mid_clone_399267bb] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_compareTo_ee7999d9] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/CharsRef;)I");
            mids$[mid_copyChars_ee7999c6] = env->getMethodID(cls, "copyChars", "(Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_copyChars_6f0bb356] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_deepCopyOf_abd75df7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF16SortedAsUTF8Comparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_chars] = env->getFieldID(cls, "chars", "[C");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_CHARS = new JArray< jchar >(env->getStaticObjectField(cls, "EMPTY_CHARS", "[C"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRef::CharsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        CharsRef::CharsRef(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CharsRef::CharsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        CharsRef::CharsRef(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

        void CharsRef::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_6f0bb356], a0.this$, a1, a2);
        }

        jchar CharsRef::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jboolean CharsRef::charsEquals(const CharsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_charsEquals_ee7999ca], a0.this$);
        }

        CharsRef CharsRef::clone() const
        {
          return CharsRef(env->callObjectMethod(this$, mids$[mid_clone_399267bb]));
        }

        jint CharsRef::compareTo(const CharsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ee7999d9], a0.this$);
        }

        void CharsRef::copyChars(const CharsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_ee7999c6], a0.this$);
        }

        void CharsRef::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6f0bb356], a0.this$, a1, a2);
        }

        CharsRef CharsRef::deepCopyOf(const CharsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_abd75df7], a0.this$));
        }

        jboolean CharsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator CharsRef::getUTF16SortedAsUTF8Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc]));
        }

        void CharsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint CharsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CharsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jint CharsRef::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        ::java::lang::CharSequence CharsRef::subSequence(jint a0, jint a1) const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String CharsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jchar > CharsRef::_get_chars() const
        {
          return JArray< jchar >(env->getObjectField(this$, fids$[fid_chars]));
        }

        void CharsRef::_set_chars(const JArray< jchar > & a0) const
        {
          env->setObjectField(this$, fids$[fid_chars], a0.this$);
        }

        jint CharsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void CharsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint CharsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void CharsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_clone(t_CharsRef *self);
        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type);
        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_isValid(t_CharsRef *self);
        static PyObject *t_CharsRef_length(t_CharsRef *self);
        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data);
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data);
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data);
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data);

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data);
        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data);
        static PyGetSetDef t_CharsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_CharsRef, chars),
          DECLARE_GETSET_FIELD(t_CharsRef, length),
          DECLARE_GETSET_FIELD(t_CharsRef, offset),
          DECLARE_GET_FIELD(t_CharsRef, uTF16SortedAsUTF8Comparator),
          DECLARE_GET_FIELD(t_CharsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharsRef__methods_[] = {
          DECLARE_METHOD(t_CharsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, append, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, charAt, METH_O),
          DECLARE_METHOD(t_CharsRef, charsEquals, METH_O),
          DECLARE_METHOD(t_CharsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, compareTo, METH_O),
          DECLARE_METHOD(t_CharsRef, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, getUTF16SortedAsUTF8Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, grow, METH_O),
          DECLARE_METHOD(t_CharsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, subSequence, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharsRef, t_CharsRef, ::java::lang::Object, CharsRef, t_CharsRef_init_, 0, 0, t_CharsRef__fields_, 0, 0);

        void t_CharsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRef), module, "CharsRef", 0);
        }

        void t_CharsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "class_", make_descriptor(CharsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "wrapfn_", make_descriptor(t_CharsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CharsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "EMPTY_CHARS", make_descriptor(CharsRef::EMPTY_CHARS->wrap()));
        }

        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRef::initializeClass, 1)))
            return NULL;
          return t_CharsRef::wrap_Object(CharsRef(((t_CharsRef *) arg)->object.this$));
        }
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              CharsRef object((jobject) NULL);

              INT_CALL(object = CharsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                INT_CALL(object = CharsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.append(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.charsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charsEquals", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_clone(t_CharsRef *self)
        {
          CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              CharsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", CharsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          CharsRef result((jobject) NULL);

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::deepCopyOf(a0));
            return t_CharsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(CharsRef));
        }

        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRef_isValid(t_CharsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CharsRef_length(t_CharsRef *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::lang::CharSequence result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSequence(a0, a1));
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subSequence", args);
          return NULL;
        }

        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_chars());
          return value.wrap();
        }
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          if (!parseArg(arg, "[C", &value))
          {
            INT_CALL(self->object._set_chars(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "chars", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilterFactory::mids$ = NULL;
          bool DelimitedPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::ENCODER_ATTR = NULL;

          jclass DelimitedPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca2c8453] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              ENCODER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "ENCODER_ATTR", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilterFactory::DelimitedPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter DelimitedPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ca2c8453], a0.this$));
          }

          void DelimitedPayloadTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DelimitedPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilterFactory), module, "DelimitedPayloadTokenFilterFactory", 0);
          }

          void t_DelimitedPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR)));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "ENCODER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::ENCODER_ATTR)));
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilterFactory::wrap_Object(DelimitedPayloadTokenFilterFactory(((t_DelimitedPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_DelimitedPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksum::class$ = NULL;
        jmethodID *BufferedChecksum::mids$ = NULL;
        bool BufferedChecksum::live$ = false;
        jint BufferedChecksum::DEFAULT_BUFFERSIZE = (jint) 0;

        jclass BufferedChecksum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValue_54c6a17a] = env->getMethodID(cls, "getValue", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_update_39c7bd3c] = env->getMethodID(cls, "update", "(I)V");
            mids$[mid_update_86f4435f] = env->getMethodID(cls, "update", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERSIZE = env->getStaticIntField(cls, "DEFAULT_BUFFERSIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BufferedChecksum::getValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getValue_54c6a17a]);
        }

        void BufferedChecksum::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void BufferedChecksum::update(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_update_39c7bd3c], a0);
        }

        void BufferedChecksum::update(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_update_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args);
        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data);
        static PyGetSetDef t_BufferedChecksum__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksum, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksum__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, getValue, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, reset, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, update, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksum, t_BufferedChecksum, ::java::lang::Object, BufferedChecksum, abstract_init, 0, 0, t_BufferedChecksum__fields_, 0, 0);

        void t_BufferedChecksum::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksum), module, "BufferedChecksum", 0);
        }

        void t_BufferedChecksum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "class_", make_descriptor(BufferedChecksum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedChecksum::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "DEFAULT_BUFFERSIZE", make_descriptor(BufferedChecksum::DEFAULT_BUFFERSIZE));
        }

        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksum::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksum::wrap_Object(BufferedChecksum(((t_BufferedChecksum *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.update(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.update(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "update", args);
          return NULL;
        }

        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelD.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelD::class$ = NULL;
          jmethodID *BasicModelD::mids$ = NULL;
          bool BasicModelD::live$ = false;

          jclass BasicModelD::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelD");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelD::BasicModelD() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelD::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelD::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args);
          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args);

          static PyMethodDef t_BasicModelD__methods_[] = {
            DECLARE_METHOD(t_BasicModelD, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelD, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelD, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelD, t_BasicModelD, ::org::apache::lucene::search::similarities::BasicModel, BasicModelD, t_BasicModelD_init_, 0, 0, 0, 0, 0);

          void t_BasicModelD::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelD), module, "BasicModelD", 0);
          }

          void t_BasicModelD::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "class_", make_descriptor(BasicModelD::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "wrapfn_", make_descriptor(t_BasicModelD::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelD).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelD_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelD::initializeClass, 1)))
              return NULL;
            return t_BasicModelD::wrap_Object(BasicModelD(((t_BasicModelD *) arg)->object.this$));
          }
          static PyObject *t_BasicModelD_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelD::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelD_init_(t_BasicModelD *self, PyObject *args, PyObject *kwds)
          {
            BasicModelD object((jobject) NULL);

            INT_CALL(object = BasicModelD());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelD_score(t_BasicModelD *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelD_toString(t_BasicModelD *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelD), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction::class$ = NULL;
            jmethodID *MultiFunction::mids$ = NULL;
            bool MultiFunction::live$ = false;

            jclass MultiFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_description_4a33a010] = env->getStaticMethodID(cls, "description", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_toString_6f3fdb48] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/String;[Lorg/apache/lucene/queries/function/FunctionValues;I)Ljava/lang/String;");
                mids$[mid_valsArr_4dc40b54] = env->getStaticMethodID(cls, "valsArr", "(Ljava/util/List;Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)[Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction::MultiFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            ::java::lang::String MultiFunction::description(const ::java::lang::String & a0, const ::java::util::List & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_description_4a33a010], a0.this$, a1.this$));
            }

            jboolean MultiFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint MultiFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MultiFunction::toString(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_6f3fdb48], a0.this$, a1.this$, a2));
            }

            JArray< ::org::apache::lucene::queries::function::FunctionValues > MultiFunction::valsArr(const ::java::util::List & a0, const ::java::util::Map & a1, const ::org::apache::lucene::index::AtomicReaderContext & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::org::apache::lucene::queries::function::FunctionValues >(env->callStaticObjectMethod(cls, mids$[mid_valsArr_4dc40b54], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_MultiFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description_, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, toString, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, valsArr, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction, t_MultiFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFunction, t_MultiFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction), module, "MultiFunction", 0);
            }

            void t_MultiFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "class_", make_descriptor(MultiFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFunction::wrap_Object(MultiFunction(((t_MultiFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::description(a0, a1));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "description_", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFunction), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[kI", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::toString(a0, a1, a2));
                return j2p(result);
              }

              return callSuper(type, "toString", args, 2);
            }

            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::index::AtomicReaderContext a2((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > result((jobject) NULL);

              if (!parseArgs(args, "KKk", ::java::util::List::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::valsArr(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::queries::function::t_FunctionValues::wrap_jobject);
              }

              PyErr_SetArgsError(type, "valsArr", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CollectionUtil::class$ = NULL;
        jmethodID *CollectionUtil::mids$ = NULL;
        bool CollectionUtil::live$ = false;

        jclass CollectionUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CollectionUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_introSort_1fde8fc3] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;)V");
            mids$[mid_introSort_b59215b8] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;Ljava/util/Comparator;)V");
            mids$[mid_timSort_1fde8fc3] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;)V");
            mids$[mid_timSort_b59215b8] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;Ljava/util/Comparator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CollectionUtil::introSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::introSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_b59215b8], a0.this$, a1.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_b59215b8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CollectionUtil__methods_[] = {
          DECLARE_METHOD(t_CollectionUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, timSort, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionUtil, t_CollectionUtil, ::java::lang::Object, CollectionUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CollectionUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionUtil), module, "CollectionUtil", 0);
        }

        void t_CollectionUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "class_", make_descriptor(CollectionUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "wrapfn_", make_descriptor(t_CollectionUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionUtil::initializeClass, 1)))
            return NULL;
          return t_CollectionUtil::wrap_Object(CollectionUtil(((t_CollectionUtil *) arg)->object.this$));
        }
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeFilter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeFilter::class$ = NULL;
        jmethodID *TermRangeFilter::mids$ = NULL;
        bool TermRangeFilter::live$ = false;

        jclass TermRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_Less_b14e87bd] = env->getStaticMethodID(cls, "Less", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_More_b14e87bd] = env->getStaticMethodID(cls, "More", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_f9802b7d] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeFilter::TermRangeFilter(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        TermRangeFilter TermRangeFilter::Less(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_Less_b14e87bd], a0.this$, a1.this$));
        }

        TermRangeFilter TermRangeFilter::More(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_More_b14e87bd], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jboolean TermRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeFilter TermRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_f9802b7d], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args);
        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data);
        static PyGetSetDef t_TermRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeFilter, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, upperTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeFilter__methods_[] = {
          DECLARE_METHOD(t_TermRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeFilter, Less, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, More, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeFilter, t_TermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, TermRangeFilter, t_TermRangeFilter_init_, 0, 0, t_TermRangeFilter__fields_, 0, 0);
        PyObject *t_TermRangeFilter::wrap_Object(const TermRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeFilter), module, "TermRangeFilter", 0);
        }

        void t_TermRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "class_", make_descriptor(TermRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_TermRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeFilter::initializeClass, 1)))
            return NULL;
          return t_TermRangeFilter::wrap_Object(TermRangeFilter(((t_TermRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeFilter(a0, a1, a2, a3, a4));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(TermRangeQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::Less(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "Less", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::More(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "More", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyQuery::class$ = NULL;
          jmethodID *SlowFuzzyQuery::mids$ = NULL;
          bool SlowFuzzyQuery::live$ = false;
          jint SlowFuzzyQuery::defaultMaxExpansions = (jint) 0;
          jfloat SlowFuzzyQuery::defaultMinSimilarity = (jfloat) 0;
          jint SlowFuzzyQuery::defaultPrefixLength = (jint) 0;

          jclass SlowFuzzyQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_init$_286d05ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;F)V");
              mids$[mid_init$_6199618c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_init$_b597dde2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FII)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
              mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
              defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
              defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_286d05ee, a0.this$, a1)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_6199618c, a0.this$, a1, a2)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2, jint a3) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_b597dde2, a0.this$, a1, a2, a3)) {}

          jboolean SlowFuzzyQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat SlowFuzzyQuery::getMinSimilarity() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
          }

          jint SlowFuzzyQuery::getPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
          }

          ::org::apache::lucene::index::Term SlowFuzzyQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SlowFuzzyQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SlowFuzzyQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data);
          static PyGetSetDef t_SlowFuzzyQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, minSimilarity),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, prefixLength),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowFuzzyQuery__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getMinSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyQuery, t_SlowFuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, SlowFuzzyQuery, t_SlowFuzzyQuery_init_, 0, 0, t_SlowFuzzyQuery__fields_, 0, 0);

          void t_SlowFuzzyQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyQuery), module, "SlowFuzzyQuery", 0);
          }

          void t_SlowFuzzyQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "class_", make_descriptor(SlowFuzzyQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SlowFuzzyQuery::initializeClass);
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(SlowFuzzyQuery::defaultMaxExpansions));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(SlowFuzzyQuery::defaultMinSimilarity));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(SlowFuzzyQuery::defaultPrefixLength));
          }

          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyQuery::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyQuery::wrap_Object(SlowFuzzyQuery(((t_SlowFuzzyQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                jint a3;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPrefixLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionLL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionLL::class$ = NULL;
          jmethodID *DistributionLL::mids$ = NULL;
          bool DistributionLL::live$ = false;

          jclass DistributionLL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionLL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionLL::DistributionLL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionLL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionLL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args);
          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args);

          static PyMethodDef t_DistributionLL__methods_[] = {
            DECLARE_METHOD(t_DistributionLL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionLL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionLL, t_DistributionLL, ::org::apache::lucene::search::similarities::Distribution, DistributionLL, t_DistributionLL_init_, 0, 0, 0, 0, 0);

          void t_DistributionLL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionLL), module, "DistributionLL", 0);
          }

          void t_DistributionLL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "class_", make_descriptor(DistributionLL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "wrapfn_", make_descriptor(t_DistributionLL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionLL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionLL::initializeClass, 1)))
              return NULL;
            return t_DistributionLL::wrap_Object(DistributionLL(((t_DistributionLL *) arg)->object.this$));
          }
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionLL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds)
          {
            DistributionLL object((jobject) NULL);

            INT_CALL(object = DistributionLL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionLL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil::class$ = NULL;
            jmethodID *FSTUtil::mids$ = NULL;
            bool FSTUtil::live$ = false;

            jclass FSTUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_intersectPrefixPaths_2ebdda9a] = env->getStaticMethodID(cls, "intersectPrefixPaths", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::List FSTUtil::intersectPrefixPaths(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::fst::FST & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_intersectPrefixPaths_2ebdda9a], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_FSTUtil__methods_[] = {
              DECLARE_METHOD(t_FSTUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, intersectPrefixPaths, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil, t_FSTUtil, ::java::lang::Object, FSTUtil, abstract_init, 0, 0, 0, 0, 0);

            void t_FSTUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil), module, "FSTUtil", 0);
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "Path", make_descriptor(&PY_TYPE(FSTUtil$Path)));
            }

            void t_FSTUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "class_", make_descriptor(FSTUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil::initializeClass, 1)))
                return NULL;
              return t_FSTUtil::wrap_Object(FSTUtil(((t_FSTUtil *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::FSTUtil::intersectPrefixPaths(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "intersectPrefixPaths", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector::class$ = NULL;
        jmethodID *TimeLimitingCollector::mids$ = NULL;
        bool TimeLimitingCollector::live$ = false;

        jclass TimeLimitingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d1481a7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;Lorg/apache/lucene/util/Counter;J)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getGlobalCounter_781dd30a] = env->getStaticMethodID(cls, "getGlobalCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_getGlobalTimerThread_91bdd0a8] = env->getStaticMethodID(cls, "getGlobalTimerThread", "()Lorg/apache/lucene/search/TimeLimitingCollector$TimerThread;");
            mids$[mid_isGreedy_54c6a16a] = env->getMethodID(cls, "isGreedy", "()Z");
            mids$[mid_setBaseline_54c6a166] = env->getMethodID(cls, "setBaseline", "()V");
            mids$[mid_setBaseline_0ee6df2f] = env->getMethodID(cls, "setBaseline", "(J)V");
            mids$[mid_setCollector_77379ce0] = env->getMethodID(cls, "setCollector", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setGreedy_bb0c767f] = env->getMethodID(cls, "setGreedy", "(Z)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector::TimeLimitingCollector(const ::org::apache::lucene::search::Collector & a0, const ::org::apache::lucene::util::Counter & a1, jlong a2) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d1481a7a, a0.this$, a1.this$, a2)) {}

        jboolean TimeLimitingCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TimeLimitingCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::Counter TimeLimitingCollector::getGlobalCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Counter(env->callStaticObjectMethod(cls, mids$[mid_getGlobalCounter_781dd30a]));
        }

        ::org::apache::lucene::search::TimeLimitingCollector$TimerThread TimeLimitingCollector::getGlobalTimerThread()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TimeLimitingCollector$TimerThread(env->callStaticObjectMethod(cls, mids$[mid_getGlobalTimerThread_91bdd0a8]));
        }

        jboolean TimeLimitingCollector::isGreedy() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isGreedy_54c6a16a]);
        }

        void TimeLimitingCollector::setBaseline() const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_54c6a166]);
        }

        void TimeLimitingCollector::setBaseline(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_0ee6df2f], a0);
        }

        void TimeLimitingCollector::setCollector(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCollector_77379ce0], a0.this$);
        }

        void TimeLimitingCollector::setGreedy(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGreedy_bb0c767f], a0);
        }

        void TimeLimitingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TimeLimitingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self);
        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args);
        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data);
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TimeLimitingCollector, baseline),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, collector),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalCounter),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalTimerThread),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector, greedy),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, nextReader),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalCounter, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalTimerThread, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, isGreedy, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setBaseline, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setCollector, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setGreedy, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector, t_TimeLimitingCollector, ::org::apache::lucene::search::Collector, TimeLimitingCollector, t_TimeLimitingCollector_init_, 0, 0, t_TimeLimitingCollector__fields_, 0, 0);

        void t_TimeLimitingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector), module, "TimeLimitingCollector", 0);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimerThread", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimerThread)));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "TimeExceededException", make_descriptor(&PY_TYPE(TimeLimitingCollector$TimeExceededException)));
        }

        void t_TimeLimitingCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "class_", make_descriptor(TimeLimitingCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector::wrap_Object(TimeLimitingCollector(((t_TimeLimitingCollector *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          ::org::apache::lucene::util::Counter a1((jobject) NULL);
          jlong a2;
          TimeLimitingCollector object((jobject) NULL);

          if (!parseArgs(args, "kkJ", ::org::apache::lucene::search::Collector::initializeClass, ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TimeLimitingCollector(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector_acceptsDocsOutOfOrder(t_TimeLimitingCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_collect(t_TimeLimitingCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isGreedy());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.setBaseline());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.setBaseline(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBaseline", args);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCollector(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCollector", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setGreedy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGreedy", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setNextReader(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TimeLimitingCollector_setScorer(t_TimeLimitingCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setBaseline(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "baseline", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Collector value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &value))
            {
              INT_CALL(self->object.setCollector(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "collector", arg);
          return -1;
        }

        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::util::Counter value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isGreedy());
          Py_RETURN_BOOL(value);
        }
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setGreedy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "greedy", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__nextReader(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__scorer(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$LMStats::class$ = NULL;
          jmethodID *LMSimilarity$LMStats::mids$ = NULL;
          bool LMSimilarity$LMStats::live$ = false;

          jclass LMSimilarity$LMStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$LMStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getCollectionProbability_54c6a176] = env->getMethodID(cls, "getCollectionProbability", "()F");
              mids$[mid_setCollectionProbability_06298cab] = env->getMethodID(cls, "setCollectionProbability", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$LMStats::LMSimilarity$LMStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::BasicStats(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat LMSimilarity$LMStats::getCollectionProbability() const
          {
            return env->callFloatMethod(this$, mids$[mid_getCollectionProbability_54c6a176]);
          }

          void LMSimilarity$LMStats::setCollectionProbability(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCollectionProbability_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self);
          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data);
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data);
          static PyGetSetDef t_LMSimilarity$LMStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_LMSimilarity$LMStats, collectionProbability),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$LMStats__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$LMStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, getCollectionProbability, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, setCollectionProbability, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$LMStats, t_LMSimilarity$LMStats, ::org::apache::lucene::search::similarities::BasicStats, LMSimilarity$LMStats, t_LMSimilarity$LMStats_init_, 0, 0, t_LMSimilarity$LMStats__fields_, 0, 0);

          void t_LMSimilarity$LMStats::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$LMStats), module, "LMSimilarity$LMStats", 0);
          }

          void t_LMSimilarity$LMStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "class_", make_descriptor(LMSimilarity$LMStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$LMStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$LMStats::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$LMStats::wrap_Object(LMSimilarity$LMStats(((t_LMSimilarity$LMStats *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$LMStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            LMSimilarity$LMStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = LMSimilarity$LMStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setCollectionProbability(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCollectionProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) value);
          }
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setCollectionProbability(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "collectionProbability", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map$Entry.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Map$Entry::class$ = NULL;
    jmethodID *Map$Entry::mids$ = NULL;
    bool Map$Entry::live$ = false;

    jclass Map$Entry::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Map$Entry");

        mids$ = new jmethodID[max_mid];
        mids$[mid_comparingByKey_5a7ff2fc] = env->getStaticMethodID(cls, "comparingByKey", "()Ljava/util/Comparator;");
        mids$[mid_comparingByKey_4ed2c59d] = env->getStaticMethodID(cls, "comparingByKey", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_comparingByValue_5a7ff2fc] = env->getStaticMethodID(cls, "comparingByValue", "()Ljava/util/Comparator;");
        mids$[mid_comparingByValue_4ed2c59d] = env->getStaticMethodID(cls, "comparingByValue", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getKey_846352c3] = env->getMethodID(cls, "getKey", "()Ljava/lang/Object;");
        mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::Comparator Map$Entry::comparingByKey()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByKey_5a7ff2fc]));
    }

    ::java::util::Comparator Map$Entry::comparingByKey(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByKey_4ed2c59d], a0.this$));
    }

    ::java::util::Comparator Map$Entry::comparingByValue()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByValue_5a7ff2fc]));
    }

    ::java::util::Comparator Map$Entry::comparingByValue(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByValue_4ed2c59d], a0.this$));
    }

    jboolean Map$Entry::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object Map$Entry::getKey() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getKey_846352c3]));
    }

    ::java::lang::Object Map$Entry::getValue() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
    }

    jint Map$Entry::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::Object Map$Entry::setValue(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_comparingByKey(PyTypeObject *type, PyObject *args);
    static PyObject *t_Map$Entry_comparingByValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self);
    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self);
    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg);
    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data);
    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data);
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data);
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data);
    static PyGetSetDef t_Map$Entry__fields_[] = {
      DECLARE_GET_FIELD(t_Map$Entry, key),
      DECLARE_GETSET_FIELD(t_Map$Entry, value),
      DECLARE_GET_FIELD(t_Map$Entry, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Map$Entry__methods_[] = {
      DECLARE_METHOD(t_Map$Entry, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, of_, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, comparingByKey, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, comparingByValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, equals, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, getKey, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, getValue, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, setValue, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Map$Entry, t_Map$Entry, ::java::lang::Object, Map$Entry, abstract_init, 0, 0, t_Map$Entry__fields_, 0, 0);
    PyObject *t_Map$Entry::wrap_Object(const Map$Entry& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_Map$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_Map$Entry::install(PyObject *module)
    {
      installType(&PY_TYPE(Map$Entry), module, "Map$Entry", 0);
    }

    void t_Map$Entry::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "class_", make_descriptor(Map$Entry::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "wrapfn_", make_descriptor(t_Map$Entry::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Map$Entry::initializeClass, 1)))
        return NULL;
      return t_Map$Entry::wrap_Object(Map$Entry(((t_Map$Entry *) arg)->object.this$));
    }
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Map$Entry::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Map$Entry_comparingByKey(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Map$Entry::comparingByKey());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Map$Entry::comparingByKey(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "comparingByKey", args);
      return NULL;
    }

    static PyObject *t_Map$Entry_comparingByValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Map$Entry::comparingByValue());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Map$Entry::comparingByValue(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "comparingByValue", args);
      return NULL;
    }

    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getKey());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getValue());
      return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[1], &a0))
      {
        OBJ_CALL(result = self->object.setValue(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "setValue", arg);
      return NULL;
    }
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getKey());
      return ::java::lang::t_Object::wrap_Object(value);
    }

    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getValue());
      return ::java::lang::t_Object::wrap_Object(value);
    }
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Object value((jobject) NULL);
        if (!parseArg(arg, "o", &value))
        {
          INT_CALL(self->object.setValue(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "value", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericRangeQueryNodeProcessor::mids$ = NULL;
              bool NumericRangeQueryNodeProcessor::live$ = false;

              jclass NumericRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeProcessor::NumericRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeProcessor), module, "NumericRangeQueryNodeProcessor", 0);
              }

              void t_NumericRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeProcessor::wrap_Object(NumericRangeQueryNodeProcessor(((t_NumericRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CreationPlaceholder::class$ = NULL;
        jmethodID *FieldCache$CreationPlaceholder::mids$ = NULL;
        bool FieldCache$CreationPlaceholder::live$ = false;

        jclass FieldCache$CreationPlaceholder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CreationPlaceholder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CreationPlaceholder::FieldCache$CreationPlaceholder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$CreationPlaceholder::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self);

        static PyMethodDef t_FieldCache$CreationPlaceholder__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder, ::java::lang::Object, FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$CreationPlaceholder::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CreationPlaceholder), module, "FieldCache$CreationPlaceholder", 0);
        }

        void t_FieldCache$CreationPlaceholder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "class_", make_descriptor(FieldCache$CreationPlaceholder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CreationPlaceholder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CreationPlaceholder::wrap_Object(FieldCache$CreationPlaceholder(((t_FieldCache$CreationPlaceholder *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$CreationPlaceholder object((jobject) NULL);

          INT_CALL(object = FieldCache$CreationPlaceholder());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BinaryDocValues::class$ = NULL;
        jmethodID *BinaryDocValues::mids$ = NULL;
        bool BinaryDocValues::live$ = false;

        jclass BinaryDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BinaryDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef BinaryDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg);

        static PyMethodDef t_BinaryDocValues__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValues, t_BinaryDocValues, ::java::lang::Object, BinaryDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_BinaryDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValues), module, "BinaryDocValues", 0);
        }

        void t_BinaryDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "class_", make_descriptor(BinaryDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValues::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValues::wrap_Object(BinaryDocValues(((t_BinaryDocValues *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BinaryDocValues_get(t_BinaryDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MMapDirectory::class$ = NULL;
        jmethodID *MMapDirectory::mids$ = NULL;
        bool MMapDirectory::live$ = false;
        jint MMapDirectory::DEFAULT_MAX_BUFF = (jint) 0;
        jboolean MMapDirectory::UNMAP_SUPPORTED = (jboolean) 0;

        jclass MMapDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MMapDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_4d8117f3] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;I)V");
            mids$[mid_getMaxChunkSize_54c6a179] = env->getMethodID(cls, "getMaxChunkSize", "()I");
            mids$[mid_getUseUnmap_54c6a16a] = env->getMethodID(cls, "getUseUnmap", "()Z");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setUseUnmap_bb0c767f] = env->getMethodID(cls, "setUseUnmap", "(Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_BUFF = env->getStaticIntField(cls, "DEFAULT_MAX_BUFF");
            UNMAP_SUPPORTED = env->getStaticBooleanField(cls, "UNMAP_SUPPORTED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MMapDirectory::MMapDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1, jint a2) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_4d8117f3, a0.this$, a1.this$, a2)) {}

        jint MMapDirectory::getMaxChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxChunkSize_54c6a179]);
        }

        jboolean MMapDirectory::getUseUnmap() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseUnmap_54c6a16a]);
        }

        ::org::apache::lucene::store::IndexInput MMapDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void MMapDirectory::setUseUnmap(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUseUnmap_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args);
        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg);
        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data);
        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data);
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_MMapDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_MMapDirectory, maxChunkSize),
          DECLARE_GETSET_FIELD(t_MMapDirectory, useUnmap),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MMapDirectory__methods_[] = {
          DECLARE_METHOD(t_MMapDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, getMaxChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, getUseUnmap, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_MMapDirectory, setUseUnmap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MMapDirectory, t_MMapDirectory, ::org::apache::lucene::store::FSDirectory, MMapDirectory, t_MMapDirectory_init_, 0, 0, t_MMapDirectory__fields_, 0, 0);

        void t_MMapDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(MMapDirectory), module, "MMapDirectory", 0);
        }

        void t_MMapDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "class_", make_descriptor(MMapDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "wrapfn_", make_descriptor(t_MMapDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MMapDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "DEFAULT_MAX_BUFF", make_descriptor(MMapDirectory::DEFAULT_MAX_BUFF));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "UNMAP_SUPPORTED", make_descriptor(MMapDirectory::UNMAP_SUPPORTED));
        }

        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MMapDirectory::initializeClass, 1)))
            return NULL;
          return t_MMapDirectory::wrap_Object(MMapDirectory(((t_MMapDirectory *) arg)->object.this$));
        }
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MMapDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = MMapDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MMapDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              jint a2;
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MMapDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseUnmap());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MMapDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUseUnmap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUseUnmap", arg);
          return NULL;
        }

        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseUnmap());
          Py_RETURN_BOOL(value);
        }
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseUnmap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useUnmap", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMerge::class$ = NULL;
        jmethodID *MergePolicy$OneMerge::mids$ = NULL;
        jfieldID *MergePolicy$OneMerge::fids$ = NULL;
        bool MergePolicy$OneMerge::live$ = false;

        jclass MergePolicy$OneMerge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMerge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_checkAborted_2e261ef2] = env->getMethodID(cls, "checkAborted", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDocMap_a6eb90c4] = env->getMethodID(cls, "getDocMap", "(Lorg/apache/lucene/index/MergeState;)Lorg/apache/lucene/index/MergePolicy$DocMap;");
            mids$[mid_getMergeInfo_e24ac350] = env->getMethodID(cls, "getMergeInfo", "()Lorg/apache/lucene/store/MergeInfo;");
            mids$[mid_getMergeReaders_87851566] = env->getMethodID(cls, "getMergeReaders", "()Ljava/util/List;");
            mids$[mid_getPause_54c6a16a] = env->getMethodID(cls, "getPause", "()Z");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_setInfo_6649cdf4] = env->getMethodID(cls, "setInfo", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setPause_bb0c767f] = env->getMethodID(cls, "setPause", "(Z)V");
            mids$[mid_totalBytesSize_54c6a17a] = env->getMethodID(cls, "totalBytesSize", "()J");
            mids$[mid_totalNumDocs_54c6a179] = env->getMethodID(cls, "totalNumDocs", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_segments] = env->getFieldID(cls, "segments", "Ljava/util/List;");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMerge::MergePolicy$OneMerge(const ::java::util::List & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        void MergePolicy$OneMerge::checkAborted(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_checkAborted_2e261ef2], a0.this$);
        }

        ::org::apache::lucene::index::MergePolicy$DocMap MergePolicy$OneMerge::getDocMap(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return ::org::apache::lucene::index::MergePolicy$DocMap(env->callObjectMethod(this$, mids$[mid_getDocMap_a6eb90c4], a0.this$));
        }

        ::org::apache::lucene::store::MergeInfo MergePolicy$OneMerge::getMergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->callObjectMethod(this$, mids$[mid_getMergeInfo_e24ac350]));
        }

        ::java::util::List MergePolicy$OneMerge::getMergeReaders() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMergeReaders_87851566]));
        }

        jboolean MergePolicy$OneMerge::getPause() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getPause_54c6a16a]);
        }

        ::java::lang::String MergePolicy$OneMerge::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        void MergePolicy$OneMerge::setInfo(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfo_6649cdf4], a0.this$);
        }

        void MergePolicy$OneMerge::setPause(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPause_bb0c767f], a0);
        }

        jlong MergePolicy$OneMerge::totalBytesSize() const
        {
          return env->callLongMethod(this$, mids$[mid_totalBytesSize_54c6a17a]);
        }

        jint MergePolicy$OneMerge::totalNumDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_totalNumDocs_54c6a179]);
        }

        jlong MergePolicy$OneMerge::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        void MergePolicy$OneMerge::_set_estimatedMergeBytes(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_estimatedMergeBytes], a0);
        }

        ::java::util::List MergePolicy$OneMerge::_get_segments() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segments]));
        }

        jint MergePolicy$OneMerge::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data);

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy$OneMerge__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, segments),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, totalDocCount),
          DECLARE_SET_FIELD(t_MergePolicy$OneMerge, info),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeInfo),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeReaders),
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, pause),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMerge__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMerge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, checkAborted, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getDocMap, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeInfo, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeReaders, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getPause, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, segString, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setInfo, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setPause, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalBytesSize, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalNumDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$OneMerge, t_MergePolicy$OneMerge, ::java::lang::Object, MergePolicy$OneMerge, t_MergePolicy$OneMerge_init_, 0, 0, t_MergePolicy$OneMerge__fields_, 0, 0);

        void t_MergePolicy$OneMerge::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMerge), module, "MergePolicy$OneMerge", 0);
        }

        void t_MergePolicy$OneMerge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "class_", make_descriptor(MergePolicy$OneMerge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$OneMerge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMerge::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMerge::wrap_Object(MergePolicy$OneMerge(((t_MergePolicy$OneMerge *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMerge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          MergePolicy$OneMerge object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = MergePolicy$OneMerge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.checkAborted(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "checkAborted", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocMap(a0));
            return ::org::apache::lucene::index::t_MergePolicy$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocMap", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::store::MergeInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReader));
        }

        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getPause());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPause(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPause", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalBytesSize());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalNumDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_estimatedMergeBytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "estimatedMergeBytes", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segments());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setInfo(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getPause());
          Py_RETURN_BOOL(value);
        }
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPause(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BaseDirectory.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BaseDirectory::class$ = NULL;
        jmethodID *BaseDirectory::mids$ = NULL;
        bool BaseDirectory::live$ = false;

        jclass BaseDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BaseDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BaseDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory BaseDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::org::apache::lucene::store::Lock BaseDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void BaseDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data);
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_BaseDirectory__fields_[] = {
          DECLARE_GETSET_FIELD(t_BaseDirectory, lockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseDirectory__methods_[] = {
          DECLARE_METHOD(t_BaseDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, setLockFactory, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseDirectory, t_BaseDirectory, ::org::apache::lucene::store::Directory, BaseDirectory, abstract_init, 0, 0, t_BaseDirectory__fields_, 0, 0);

        void t_BaseDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseDirectory), module, "BaseDirectory", 0);
        }

        void t_BaseDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "class_", make_descriptor(BaseDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "wrapfn_", make_descriptor(t_BaseDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseDirectory::initializeClass, 1)))
            return NULL;
          return t_BaseDirectory::wrap_Object(BaseDirectory(((t_BaseDirectory *) arg)->object.this$));
        }
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SortedIntSet$FrozenIntSet::class$ = NULL;
          jmethodID *SortedIntSet$FrozenIntSet::mids$ = NULL;
          bool SortedIntSet$FrozenIntSet::live$ = false;

          jclass SortedIntSet$FrozenIntSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8b58b7f9] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_init$_8bb61283] = env->getMethodID(cls, "<init>", "([IILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(jint a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b58b7f9, a0, a1.this$)) {}

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(const JArray< jint > & a0, jint a1, const ::org::apache::lucene::util::automaton::State & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8bb61283, a0.this$, a1, a2.this$)) {}

          jboolean SortedIntSet$FrozenIntSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SortedIntSet$FrozenIntSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SortedIntSet$FrozenIntSet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args);

          static PyMethodDef t_SortedIntSet$FrozenIntSet__methods_[] = {
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet, ::java::lang::Object, SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet_init_, 0, 0, 0, 0, 0);

          void t_SortedIntSet$FrozenIntSet::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedIntSet$FrozenIntSet), module, "SortedIntSet$FrozenIntSet", 0);
          }

          void t_SortedIntSet$FrozenIntSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "class_", make_descriptor(SortedIntSet$FrozenIntSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "wrapfn_", make_descriptor(t_SortedIntSet$FrozenIntSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedIntSet$FrozenIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 1)))
              return NULL;
            return t_SortedIntSet$FrozenIntSet::wrap_Object(SortedIntSet$FrozenIntSet(((t_SortedIntSet$FrozenIntSet *) arg)->object.this$));
          }
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::State a2((jobject) NULL);
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "[IIk", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/lang/Iterable.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Document::class$ = NULL;
        jmethodID *Document::mids$ = NULL;
        bool Document::live$ = false;

        jclass Document::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Document");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_d86aadad] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_get_97a5258f] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getBinaryValue_14551a1f] = env->getMethodID(cls, "getBinaryValue", "(Ljava/lang/String;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getBinaryValues_eb7e4f07] = env->getMethodID(cls, "getBinaryValues", "(Ljava/lang/String;)[Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getField_3e59ba6e] = env->getMethodID(cls, "getField", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getFields_87851566] = env->getMethodID(cls, "getFields", "()Ljava/util/List;");
            mids$[mid_getFields_0aa85a96] = env->getMethodID(cls, "getFields", "(Ljava/lang/String;)[Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getValues_1f6a174f] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_removeField_5fdc3f48] = env->getMethodID(cls, "removeField", "(Ljava/lang/String;)V");
            mids$[mid_removeFields_5fdc3f48] = env->getMethodID(cls, "removeFields", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Document::Document() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Document::add(const ::org::apache::lucene::index::IndexableField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_d86aadad], a0.this$);
        }

        ::java::lang::String Document::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_97a5258f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef Document::getBinaryValue(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBinaryValue_14551a1f], a0.this$));
        }

        JArray< ::org::apache::lucene::util::BytesRef > Document::getBinaryValues(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getBinaryValues_eb7e4f07], a0.this$));
        }

        ::org::apache::lucene::index::IndexableField Document::getField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::IndexableField(env->callObjectMethod(this$, mids$[mid_getField_3e59ba6e], a0.this$));
        }

        ::java::util::List Document::getFields() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFields_87851566]));
        }

        JArray< ::org::apache::lucene::index::IndexableField > Document::getFields(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexableField >(env->callObjectMethod(this$, mids$[mid_getFields_0aa85a96], a0.this$));
        }

        JArray< ::java::lang::String > Document::getValues(const ::java::lang::String & a0) const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getValues_1f6a174f], a0.this$));
        }

        ::java::util::Iterator Document::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void Document::removeField(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeField_5fdc3f48], a0.this$);
        }

        void Document::removeFields(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeFields_5fdc3f48], a0.this$);
        }

        ::java::lang::String Document::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Document_add(t_Document *self, PyObject *arg);
        static PyObject *t_Document_get(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getFields(t_Document *self, PyObject *args);
        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_iterator(t_Document *self);
        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg);
        static PyObject *t_Document_toString(t_Document *self, PyObject *args);
        static PyObject *t_Document_get__fields(t_Document *self, void *data);
        static PyGetSetDef t_Document__fields_[] = {
          DECLARE_GET_FIELD(t_Document, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Document__methods_[] = {
          DECLARE_METHOD(t_Document, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, add, METH_O),
          DECLARE_METHOD(t_Document, get, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValue, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValues, METH_O),
          DECLARE_METHOD(t_Document, getField, METH_O),
          DECLARE_METHOD(t_Document, getFields, METH_VARARGS),
          DECLARE_METHOD(t_Document, getValues, METH_O),
          DECLARE_METHOD(t_Document, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Document, removeField, METH_O),
          DECLARE_METHOD(t_Document, removeFields, METH_O),
          DECLARE_METHOD(t_Document, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyMappingMethods t_Document_as_mapping = {
          0,
          (binaryfunc) t_Document_get,
          0,
        };

        DECLARE_TYPE(Document, t_Document, ::java::lang::Object, Document, t_Document_init_, ((PyObject *(*)(t_Document *)) get_iterator< t_Document >), 0, t_Document__fields_, &t_Document_as_mapping, 0);

        void t_Document::install(PyObject *module)
        {
          installType(&PY_TYPE(Document), module, "Document", 0);
        }

        void t_Document::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "class_", make_descriptor(Document::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "wrapfn_", make_descriptor(t_Document::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Document::initializeClass, 1)))
            return NULL;
          return t_Document::wrap_Object(Document(((t_Document *) arg)->object.this$));
        }
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Document::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds)
        {
          Document object((jobject) NULL);

          INT_CALL(object = Document());
          self->object = object;

          return 0;
        }

        static PyObject *t_Document_add(t_Document *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexableField a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexableField::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_Document_get(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValue(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValue", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValues(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValues", arg);
          return NULL;
        }

        static PyObject *t_Document_getField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getField(a0));
            return ::org::apache::lucene::index::t_IndexableField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getField", arg);
          return NULL;
        }

        static PyObject *t_Document_getFields(t_Document *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFields());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::IndexableField > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getFields(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexableField::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFields", args);
          return NULL;
        }

        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValues(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", arg);
          return NULL;
        }

        static PyObject *t_Document_iterator(t_Document *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
        }

        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeField(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeField", arg);
          return NULL;
        }

        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeFields(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeFields", arg);
          return NULL;
        }

        static PyObject *t_Document_toString(t_Document *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Document), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Document_get__fields(t_Document *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getFields());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashMap.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/util/Map$Entry.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashMap::class$ = NULL;
    jmethodID *HashMap::mids$ = NULL;
    bool HashMap::live$ = false;

    jclass HashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_getOrDefault_537d5bdf] = env->getMethodID(cls, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_putIfAbsent_537d5bdf] = env->getMethodID(cls, "putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_remove_466982fe] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_replace_537d5bdf] = env->getMethodID(cls, "replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_replace_1f43c0be] = env->getMethodID(cls, "replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashMap::HashMap() : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashMap::HashMap(jint a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashMap::HashMap(const ::java::util::Map & a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    HashMap::HashMap(jint a0, jfloat a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    void HashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashMap::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean HashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set HashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    ::java::lang::Object HashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    ::java::lang::Object HashMap::getOrDefault(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getOrDefault_537d5bdf], a0.this$, a1.this$));
    }

    jboolean HashMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set HashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object HashMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void HashMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object HashMap::putIfAbsent(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_putIfAbsent_537d5bdf], a0.this$, a1.this$));
    }

    ::java::lang::Object HashMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jboolean HashMap::remove(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_466982fe], a0.this$, a1.this$);
    }

    ::java::lang::Object HashMap::replace(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_replace_537d5bdf], a0.this$, a1.this$));
    }

    jboolean HashMap::replace(const ::java::lang::Object & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2) const
    {
      return env->callBooleanMethod(this$, mids$[mid_replace_1f43c0be], a0.this$, a1.this$, a2.this$);
    }

    jint HashMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Collection HashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args);
    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_clone(t_HashMap *self);
    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_getOrDefault(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putIfAbsent(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_replace(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data);
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data);
    static PyGetSetDef t_HashMap__fields_[] = {
      DECLARE_GET_FIELD(t_HashMap, empty),
      DECLARE_GET_FIELD(t_HashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashMap__methods_[] = {
      DECLARE_METHOD(t_HashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashMap, containsKey, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, getOrDefault, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, put, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putAll, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putIfAbsent, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, replace, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, size, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashMap, t_HashMap, ::java::util::AbstractMap, HashMap, t_HashMap_init_, 0, 0, t_HashMap__fields_, 0, 0);
    PyObject *t_HashMap::wrap_Object(const HashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_HashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_HashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(HashMap), module, "HashMap", 0);
    }

    void t_HashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "class_", make_descriptor(HashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "wrapfn_", make_descriptor(t_HashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashMap::initializeClass, 1)))
        return NULL;
      return t_HashMap::wrap_Object(HashMap(((t_HashMap *) arg)->object.this$));
    }
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashMap object((jobject) NULL);

          INT_CALL(object = HashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashMap(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashMap_clone(t_HashMap *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsKey", args, 2);
    }

    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_HashMap_getOrDefault(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "oO", self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.getOrDefault(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "getOrDefault", args, 2);
    }

    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "put", args, 2);
    }

    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "putAll", args, 2);
    }

    static PyObject *t_HashMap_putIfAbsent(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.putIfAbsent(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "putIfAbsent", args, 2);
    }

    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.remove(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashMap_replace(t_HashMap *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "OOO", self->parameters[0], self->parameters[1], self->parameters[1], &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.replace(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "replace", args, 2);
    }

    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(&PY_TYPE(HashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListReader::class$ = NULL;
        jmethodID *MultiLevelSkipListReader::mids$ = NULL;
        bool MultiLevelSkipListReader::live$ = false;

        jclass MultiLevelSkipListReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getDoc_54c6a179] = env->getMethodID(cls, "getDoc", "()I");
            mids$[mid_init_25d05c8f] = env->getMethodID(cls, "init", "(JI)V");
            mids$[mid_skipTo_39c7bd23] = env->getMethodID(cls, "skipTo", "(I)I");
            mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
            mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
            mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint MultiLevelSkipListReader::getDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_getDoc_54c6a179]);
        }

        void MultiLevelSkipListReader::init(jlong a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_25d05c8f], a0, a1);
        }

        jint MultiLevelSkipListReader::skipTo(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_skipTo_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args);
        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data);
        static PyGetSetDef t_MultiLevelSkipListReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiLevelSkipListReader, doc),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiLevelSkipListReader__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, close, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, getDoc, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, init, METH_VARARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, skipTo, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListReader, t_MultiLevelSkipListReader, ::java::lang::Object, MultiLevelSkipListReader, abstract_init, 0, 0, t_MultiLevelSkipListReader__fields_, 0, 0);

        void t_MultiLevelSkipListReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListReader), module, "MultiLevelSkipListReader", 0);
        }

        void t_MultiLevelSkipListReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "class_", make_descriptor(MultiLevelSkipListReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListReader::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListReader::wrap_Object(MultiLevelSkipListReader(((t_MultiLevelSkipListReader *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args)
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.skipTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDoc());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SimpleMergedSegmentWarmer.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SimpleMergedSegmentWarmer::class$ = NULL;
        jmethodID *SimpleMergedSegmentWarmer::mids$ = NULL;
        bool SimpleMergedSegmentWarmer::live$ = false;

        jclass SimpleMergedSegmentWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SimpleMergedSegmentWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5e6dfa2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/InfoStream;)V");
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleMergedSegmentWarmer::SimpleMergedSegmentWarmer(const ::org::apache::lucene::util::InfoStream & a0) : ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->newObject(initializeClass, &mids$, mid_init$_a5e6dfa2, a0.this$)) {}

        void SimpleMergedSegmentWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args);

        static PyMethodDef t_SimpleMergedSegmentWarmer__methods_[] = {
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, warm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer, ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer, SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer_init_, 0, 0, 0, 0, 0);

        void t_SimpleMergedSegmentWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleMergedSegmentWarmer), module, "SimpleMergedSegmentWarmer", 0);
        }

        void t_SimpleMergedSegmentWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "class_", make_descriptor(SimpleMergedSegmentWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "wrapfn_", make_descriptor(t_SimpleMergedSegmentWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 1)))
            return NULL;
          return t_SimpleMergedSegmentWarmer::wrap_Object(SimpleMergedSegmentWarmer(((t_SimpleMergedSegmentWarmer *) arg)->object.this$));
        }
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
          SimpleMergedSegmentWarmer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
          {
            INT_CALL(object = SimpleMergedSegmentWarmer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleMergedSegmentWarmer), (PyObject *) self, "warm", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ShortParser::class$ = NULL;
        jmethodID *FieldCache$ShortParser::mids$ = NULL;
        bool FieldCache$ShortParser::live$ = false;

        jclass FieldCache$ShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jshort FieldCache$ShortParser::parseShort(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callShortMethod(this$, mids$[mid_parseShort_7bc03dc1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ShortParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ShortParser, parseShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ShortParser, t_FieldCache$ShortParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ShortParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ShortParser), module, "FieldCache$ShortParser", 0);
        }

        void t_FieldCache$ShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "class_", make_descriptor(FieldCache$ShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ShortParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ShortParser::wrap_Object(FieldCache$ShortParser(((t_FieldCache$ShortParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ShortParser_parseShort(t_FieldCache$ShortParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jshort result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CommandLineUtil.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/lang/IllegalAccessException.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CommandLineUtil::class$ = NULL;
        jmethodID *CommandLineUtil::mids$ = NULL;
        bool CommandLineUtil::live$ = false;

        jclass CommandLineUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CommandLineUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_loadDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_loadFSDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadFSDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_newFSDirectory_96268b7b] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/Class;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_75db4bef] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/String;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Class CommandLineUtil::loadDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadDirectoryClass_7d663d97], a0.this$));
        }

        ::java::lang::Class CommandLineUtil::loadFSDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadFSDirectoryClass_7d663d97], a0.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::Class & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_96268b7b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::String & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_75db4bef], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CommandLineUtil__methods_[] = {
          DECLARE_METHOD(t_CommandLineUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadFSDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, newFSDirectory, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommandLineUtil, t_CommandLineUtil, ::java::lang::Object, CommandLineUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CommandLineUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CommandLineUtil), module, "CommandLineUtil", 0);
        }

        void t_CommandLineUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "class_", make_descriptor(CommandLineUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "wrapfn_", make_descriptor(t_CommandLineUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommandLineUtil::initializeClass, 1)))
            return NULL;
          return t_CommandLineUtil::wrap_Object(CommandLineUtil(((t_CommandLineUtil *) arg)->object.this$));
        }
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommandLineUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadFSDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadFSDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::File::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newFSDirectory", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH3.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH3::class$ = NULL;
          jmethodID *NormalizationH3::mids$ = NULL;
          bool NormalizationH3::live$ = false;

          jclass NormalizationH3::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH3");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH3::NormalizationH3() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH3::NormalizationH3(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH3::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          jfloat NormalizationH3::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH3::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self);
          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data);
          static PyGetSetDef t_NormalizationH3__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH3, mu),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH3__methods_[] = {
            DECLARE_METHOD(t_NormalizationH3, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, getMu, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH3, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH3, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH3, t_NormalizationH3, ::org::apache::lucene::search::similarities::Normalization, NormalizationH3, t_NormalizationH3_init_, 0, 0, t_NormalizationH3__fields_, 0, 0);

          void t_NormalizationH3::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH3), module, "NormalizationH3", 0);
          }

          void t_NormalizationH3::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "class_", make_descriptor(NormalizationH3::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH3::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH3::initializeClass, 1)))
              return NULL;
            return t_NormalizationH3::wrap_Object(NormalizationH3(((t_NormalizationH3 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH3::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH3 object((jobject) NULL);

                INT_CALL(object = NormalizationH3());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH3 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH3(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilterFactory::class$ = NULL;
          jmethodID *SpanishLightStemFilterFactory::mids$ = NULL;
          bool SpanishLightStemFilterFactory::live$ = false;

          jclass SpanishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilterFactory::SpanishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SpanishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilterFactory), module, "SpanishLightStemFilterFactory", 0);
          }

          void t_SpanishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SpanishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilterFactory::wrap_Object(SpanishLightStemFilterFactory(((t_SpanishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SpanishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SpanishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiAnalyzer::class$ = NULL;
          jmethodID *ThaiAnalyzer::mids$ = NULL;
          bool ThaiAnalyzer::live$ = false;
          ::java::lang::String *ThaiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ThaiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ThaiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data);
          static PyGetSetDef t_ThaiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ThaiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ThaiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ThaiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiAnalyzer, t_ThaiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ThaiAnalyzer, t_ThaiAnalyzer_init_, 0, 0, t_ThaiAnalyzer__fields_, 0, 0);

          void t_ThaiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiAnalyzer), module, "ThaiAnalyzer", 0);
          }

          void t_ThaiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "class_", make_descriptor(ThaiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ThaiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ThaiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ThaiAnalyzer::wrap_Object(ThaiAnalyzer(((t_ThaiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::th::ThaiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemmer::class$ = NULL;
          jmethodID *GermanLightStemmer::mids$ = NULL;
          bool GermanLightStemmer::live$ = false;

          jclass GermanLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemmer::GermanLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args);

          static PyMethodDef t_GermanLightStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemmer, t_GermanLightStemmer, ::java::lang::Object, GermanLightStemmer, t_GermanLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemmer), module, "GermanLightStemmer", 0);
          }

          void t_GermanLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "class_", make_descriptor(GermanLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemmer::wrap_Object(GermanLightStemmer(((t_GermanLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanLightStemmer object((jobject) NULL);

            INT_CALL(object = GermanLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Gener.h"
#include "org/egothor/stemmer/Row.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Gener::class$ = NULL;
      jmethodID *Gener::mids$ = NULL;
      bool Gener::live$ = false;

      jclass Gener::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Gener");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_eat_9f3e69e2] = env->getMethodID(cls, "eat", "(Lorg/egothor/stemmer/Row;[I)Z");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Gener::Gener() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      jboolean Gener::eat(const ::org::egothor::stemmer::Row & a0, const JArray< jint > & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_eat_9f3e69e2], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Gener::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args);
      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args);

      static PyMethodDef t_Gener__methods_[] = {
        DECLARE_METHOD(t_Gener, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, eat, METH_VARARGS),
        DECLARE_METHOD(t_Gener, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Gener, t_Gener, ::org::egothor::stemmer::Reduce, Gener, t_Gener_init_, 0, 0, 0, 0, 0);

      void t_Gener::install(PyObject *module)
      {
        installType(&PY_TYPE(Gener), module, "Gener", 0);
      }

      void t_Gener::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "class_", make_descriptor(Gener::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "wrapfn_", make_descriptor(t_Gener::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Gener).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Gener::initializeClass, 1)))
          return NULL;
        return t_Gener::wrap_Object(Gener(((t_Gener *) arg)->object.this$));
      }
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Gener::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds)
      {
        Gener object((jobject) NULL);

        INT_CALL(object = Gener());
        self->object = object;

        return 0;
      }

      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        JArray< jint > a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "k[I", ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.eat(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "eat", args);
        return NULL;
      }

      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Gener), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageScorer::class$ = NULL;
          jmethodID *PassageScorer::mids$ = NULL;
          bool PassageScorer::live$ = false;

          jclass PassageScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5348eb2d] = env->getMethodID(cls, "<init>", "(FFF)V");
              mids$[mid_norm_39c7bd2c] = env->getMethodID(cls, "norm", "(I)F");
              mids$[mid_tf_d8d154b6] = env->getMethodID(cls, "tf", "(II)F");
              mids$[mid_weight_d8d154b6] = env->getMethodID(cls, "weight", "(II)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageScorer::PassageScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PassageScorer::PassageScorer(jfloat a0, jfloat a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5348eb2d, a0, a1, a2)) {}

          jfloat PassageScorer::norm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_norm_39c7bd2c], a0);
          }

          jfloat PassageScorer::tf(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_d8d154b6], a0, a1);
          }

          jfloat PassageScorer::weight(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_weight_d8d154b6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg);
          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args);
          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args);

          static PyMethodDef t_PassageScorer__methods_[] = {
            DECLARE_METHOD(t_PassageScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, norm, METH_O),
            DECLARE_METHOD(t_PassageScorer, tf, METH_VARARGS),
            DECLARE_METHOD(t_PassageScorer, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageScorer, t_PassageScorer, ::java::lang::Object, PassageScorer, t_PassageScorer_init_, 0, 0, 0, 0, 0);

          void t_PassageScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageScorer), module, "PassageScorer", 0);
          }

          void t_PassageScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "class_", make_descriptor(PassageScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "wrapfn_", make_descriptor(t_PassageScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageScorer::initializeClass, 1)))
              return NULL;
            return t_PassageScorer::wrap_Object(PassageScorer(((t_PassageScorer *) arg)->object.this$));
          }
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PassageScorer object((jobject) NULL);

                INT_CALL(object = PassageScorer());
                self->object = object;
                break;
              }
              goto err;
             case 3:
              {
                jfloat a0;
                jfloat a1;
                jfloat a2;
                PassageScorer object((jobject) NULL);

                if (!parseArgs(args, "FFF", &a0, &a1, &a2))
                {
                  INT_CALL(object = PassageScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.norm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "norm", arg);
            return NULL;
          }

          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.tf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", args);
            return NULL;
          }

          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.weight(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "weight", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *RuntimeException::class$ = NULL;
    jmethodID *RuntimeException::mids$ = NULL;
    bool RuntimeException::live$ = false;

    jclass RuntimeException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_RuntimeException__methods_[] = {
      DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(RuntimeException, t_RuntimeException, ::java::lang::Exception, RuntimeException, t_RuntimeException_init_, 0, 0, 0, 0, 0);

    void t_RuntimeException::install(PyObject *module)
    {
      installType(&PY_TYPE(RuntimeException), module, "RuntimeException", 0);
    }

    void t_RuntimeException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "class_", make_descriptor(RuntimeException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
        return NULL;
      return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
    }
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, RuntimeException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          RuntimeException object((jobject) NULL);

          INT_CALL(object = RuntimeException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RuntimeException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilterFactory::class$ = NULL;
          jmethodID *EnglishMinimalStemFilterFactory::mids$ = NULL;
          bool EnglishMinimalStemFilterFactory::live$ = false;

          jclass EnglishMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilterFactory::EnglishMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilterFactory), module, "EnglishMinimalStemFilterFactory", 0);
          }

          void t_EnglishMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilterFactory::wrap_Object(EnglishMinimalStemFilterFactory(((t_EnglishMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonDoubleParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonDoubleParser::class$ = NULL;
        jmethodID *PythonDoubleParser::mids$ = NULL;
        bool PythonDoubleParser::live$ = false;

        jclass PythonDoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonDoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDoubleParser::PythonDoubleParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDoubleParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDoubleParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDoubleParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self);
        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args);
        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data);
        static PyGetSetDef t_PythonDoubleParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDoubleParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDoubleParser__methods_[] = {
          DECLARE_METHOD(t_PythonDoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDoubleParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDoubleParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDoubleParser, t_PythonDoubleParser, ::java::lang::Object, PythonDoubleParser, t_PythonDoubleParser_init_, 0, 0, t_PythonDoubleParser__fields_, 0, 0);

        void t_PythonDoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDoubleParser), module, "PythonDoubleParser", 1);
        }

        void t_PythonDoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "class_", make_descriptor(PythonDoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "wrapfn_", make_descriptor(t_PythonDoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDoubleParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D", (void *) t_PythonDoubleParser_parseDouble0 },
            { "pythonDecRef", "()V", (void *) t_PythonDoubleParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonDoubleParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonDoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDoubleParser::initializeClass, 1)))
            return NULL;
          return t_PythonDoubleParser::wrap_Object(PythonDoubleParser(((t_PythonDoubleParser *) arg)->object.this$));
        }
        static PyObject *t_PythonDoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDoubleParser_init_(t_PythonDoubleParser *self, PyObject *args, PyObject *kwds)
        {
          PythonDoubleParser object((jobject) NULL);

          INT_CALL(object = PythonDoubleParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDoubleParser_finalize(t_PythonDoubleParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDoubleParser_pythonExtension(t_PythonDoubleParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jdouble JNICALL t_PythonDoubleParser_parseDouble0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jdouble value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseDouble", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "D", &value))
          {
            throwTypeError("parseDouble", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jdouble) 0;
        }

        static void JNICALL t_PythonDoubleParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonDoubleParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDoubleParser::mids$[PythonDoubleParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonDoubleParser_get__self(t_PythonDoubleParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilter::class$ = NULL;
          jmethodID *HindiStemFilter::mids$ = NULL;
          bool HindiStemFilter::live$ = false;

          jclass HindiStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilter::HindiStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args);

          static PyMethodDef t_HindiStemFilter__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilter, t_HindiStemFilter, ::org::apache::lucene::analysis::TokenFilter, HindiStemFilter, t_HindiStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilter), module, "HindiStemFilter", 0);
          }

          void t_HindiStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "class_", make_descriptor(HindiStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilter::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilter::wrap_Object(HindiStemFilter(((t_HindiStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RunAutomaton::class$ = NULL;
          jmethodID *RunAutomaton::mids$ = NULL;
          bool RunAutomaton::live$ = false;

          jclass RunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_930c56a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;IZ)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCharIntervals_dab10e75] = env->getMethodID(cls, "getCharIntervals", "()[I");
              mids$[mid_getInitialState_54c6a179] = env->getMethodID(cls, "getInitialState", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isAccept_39c7bd30] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_step_d8d154b9] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RunAutomaton::RunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_930c56a3, a0.this$, a1, a2)) {}

          jboolean RunAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          JArray< jint > RunAutomaton::getCharIntervals() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getCharIntervals_dab10e75]));
          }

          jint RunAutomaton::getInitialState() const
          {
            return env->callIntMethod(this$, mids$[mid_getInitialState_54c6a179]);
          }

          jint RunAutomaton::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint RunAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean RunAutomaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_39c7bd30], a0);
          }

          jint RunAutomaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_d8d154b9], a0, a1);
          }

          ::java::lang::String RunAutomaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg);
          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data);
          static PyGetSetDef t_RunAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_RunAutomaton, charIntervals),
            DECLARE_GET_FIELD(t_RunAutomaton, initialState),
            DECLARE_GET_FIELD(t_RunAutomaton, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RunAutomaton__methods_[] = {
            DECLARE_METHOD(t_RunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, getCharIntervals, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getSize, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, isAccept, METH_O),
            DECLARE_METHOD(t_RunAutomaton, step, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RunAutomaton, t_RunAutomaton, ::java::lang::Object, RunAutomaton, t_RunAutomaton_init_, 0, 0, t_RunAutomaton__fields_, 0, 0);

          void t_RunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(RunAutomaton), module, "RunAutomaton", 0);
          }

          void t_RunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "class_", make_descriptor(RunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_RunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RunAutomaton::initializeClass, 1)))
              return NULL;
            return t_RunAutomaton::wrap_Object(RunAutomaton(((t_RunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RunAutomaton_init_(t_RunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jboolean a2;
            RunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "kIZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = RunAutomaton(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getCharIntervals());
            return result.wrap();
          }

          static PyObject *t_RunAutomaton_getInitialState(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getInitialState());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RunAutomaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getCharIntervals());
            return value.wrap();
          }

          static PyObject *t_RunAutomaton_get__initialState(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getInitialState());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader$CachedOrds::class$ = NULL;
          jmethodID *CachedOrdinalsReader$CachedOrds::mids$ = NULL;
          jfieldID *CachedOrdinalsReader$CachedOrds::fids$ = NULL;
          bool CachedOrdinalsReader$CachedOrds::live$ = false;

          jclass CachedOrdinalsReader$CachedOrds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_76cf77a0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;I)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              fids$ = new jfieldID[max_fid];
              fids$[fid_offsets] = env->getFieldID(cls, "offsets", "[I");
              fids$[fid_ordinals] = env->getFieldID(cls, "ordinals", "[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader$CachedOrds::CachedOrdinalsReader$CachedOrds(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_76cf77a0, a0.this$, a1)) {}

          jlong CachedOrdinalsReader$CachedOrds::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_offsets() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_offsets]));
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_ordinals() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_ordinals]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data);

          static PyGetSetDef t_CachedOrdinalsReader$CachedOrds__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, offsets),
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, ordinals),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader$CachedOrds__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds, ::java::lang::Object, CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds_init_, 0, 0, t_CachedOrdinalsReader$CachedOrds__fields_, 0, 0);

          void t_CachedOrdinalsReader$CachedOrds::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader$CachedOrds), module, "CachedOrdinalsReader$CachedOrds", 0);
          }

          void t_CachedOrdinalsReader$CachedOrds::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "class_", make_descriptor(CachedOrdinalsReader$CachedOrds::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader$CachedOrds::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader$CachedOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader$CachedOrds::wrap_Object(CachedOrdinalsReader$CachedOrds(((t_CachedOrdinalsReader$CachedOrds *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader a0((jobject) NULL);
            jint a1;
            CachedOrdinalsReader$CachedOrds object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CachedOrdinalsReader$CachedOrds(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_offsets());
            return value.wrap();
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_ordinals());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsFormat::class$ = NULL;
        jmethodID *StoredFieldsFormat::mids$ = NULL;
        bool StoredFieldsFormat::live$ = false;

        jclass StoredFieldsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::StoredFieldsReader StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::StoredFieldsWriter StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args);
        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args);

        static PyMethodDef t_StoredFieldsFormat__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsFormat, t_StoredFieldsFormat, ::java::lang::Object, StoredFieldsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsFormat), module, "StoredFieldsFormat", 0);
        }

        void t_StoredFieldsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "class_", make_descriptor(StoredFieldsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsFormat::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsFormat::wrap_Object(StoredFieldsFormat(((t_StoredFieldsFormat *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsReader", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemmer::class$ = NULL;
          jmethodID *GreekStemmer::mids$ = NULL;
          bool GreekStemmer::live$ = false;

          jclass GreekStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemmer::GreekStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GreekStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args);

          static PyMethodDef t_GreekStemmer__methods_[] = {
            DECLARE_METHOD(t_GreekStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemmer, t_GreekStemmer, ::java::lang::Object, GreekStemmer, t_GreekStemmer_init_, 0, 0, 0, 0, 0);

          void t_GreekStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemmer), module, "GreekStemmer", 0);
          }

          void t_GreekStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "class_", make_descriptor(GreekStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "wrapfn_", make_descriptor(t_GreekStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemmer::initializeClass, 1)))
              return NULL;
            return t_GreekStemmer::wrap_Object(GreekStemmer(((t_GreekStemmer *) arg)->object.this$));
          }
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds)
          {
            GreekStemmer object((jobject) NULL);

            INT_CALL(object = GreekStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordFrequencyComparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordFrequencyComparator::class$ = NULL;
          jmethodID *SuggestWordFrequencyComparator::mids$ = NULL;
          bool SuggestWordFrequencyComparator::live$ = false;

          jclass SuggestWordFrequencyComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordFrequencyComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordFrequencyComparator::SuggestWordFrequencyComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordFrequencyComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordFrequencyComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator, ::java::lang::Object, SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordFrequencyComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordFrequencyComparator), module, "SuggestWordFrequencyComparator", 0);
          }

          void t_SuggestWordFrequencyComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "class_", make_descriptor(SuggestWordFrequencyComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordFrequencyComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordFrequencyComparator::wrap_Object(SuggestWordFrequencyComparator(((t_SuggestWordFrequencyComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordFrequencyComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordFrequencyComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *TFIDFSimilarity::class$ = NULL;
          jmethodID *TFIDFSimilarity::mids$ = NULL;
          bool TFIDFSimilarity::live$ = false;

          jclass TFIDFSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/TFIDFSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TFIDFSimilarity::TFIDFSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong TFIDFSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight TFIDFSimilarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat TFIDFSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat TFIDFSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong TFIDFSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jfloat TFIDFSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat TFIDFSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat TFIDFSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer TFIDFSimilarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat TFIDFSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg);

          static PyMethodDef t_TFIDFSimilarity__methods_[] = {
            DECLARE_METHOD(t_TFIDFSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, decodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, encodeNormValue, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, lengthNorm, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, sloppyFreq, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, tf, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TFIDFSimilarity, t_TFIDFSimilarity, ::org::apache::lucene::search::similarities::Similarity, TFIDFSimilarity, t_TFIDFSimilarity_init_, 0, 0, 0, 0, 0);

          void t_TFIDFSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(TFIDFSimilarity), module, "TFIDFSimilarity", 0);
          }

          void t_TFIDFSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "class_", make_descriptor(TFIDFSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "wrapfn_", make_descriptor(t_TFIDFSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TFIDFSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TFIDFSimilarity::initializeClass, 1)))
              return NULL;
            return t_TFIDFSimilarity::wrap_Object(TFIDFSimilarity(((t_TFIDFSimilarity *) arg)->object.this$));
          }
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TFIDFSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds)
          {
            TFIDFSimilarity object((jobject) NULL);

            INT_CALL(object = TFIDFSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_computeWeight(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_coord(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_decodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jlong a0;
            jfloat result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_encodeNormValue(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jlong result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNormValue", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "idf", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lengthNorm", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_queryNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_scorePayload(t_TFIDFSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "scorePayload", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_simScorer(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TFIDFSimilarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_sloppyFreq(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "sloppyFreq", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragListBuilder::class$ = NULL;
          jmethodID *SimpleFragListBuilder::mids$ = NULL;
          bool SimpleFragListBuilder::live$ = false;

          jclass SimpleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragListBuilder::SimpleFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragListBuilder::SimpleFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SimpleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragListBuilder, t_SimpleFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, SimpleFragListBuilder, t_SimpleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragListBuilder), module, "SimpleFragListBuilder", 0);
          }

          void t_SimpleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "class_", make_descriptor(SimpleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragListBuilder::wrap_Object(SimpleFragListBuilder(((t_SimpleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragListBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimpleFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataOutput::class$ = NULL;
        jmethodID *ByteArrayDataOutput::mids$ = NULL;
        bool ByteArrayDataOutput::live$ = false;

        jclass ByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataOutput::ByteArrayDataOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jint ByteArrayDataOutput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void ByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self);
        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data);
        static PyGetSetDef t_ByteArrayDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteArrayDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataOutput, t_ByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, ByteArrayDataOutput, t_ByteArrayDataOutput_init_, 0, 0, t_ByteArrayDataOutput__fields_, 0, 0);

        void t_ByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataOutput), module, "ByteArrayDataOutput", 0);
        }

        void t_ByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "class_", make_descriptor(ByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataOutput::wrap_Object(ByteArrayDataOutput(((t_ByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataOutput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataOutput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataOutput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataOutput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicStats::class$ = NULL;
          jmethodID *BasicStats::mids$ = NULL;
          bool BasicStats::live$ = false;

          jclass BasicStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getAvgFieldLength_54c6a176] = env->getMethodID(cls, "getAvgFieldLength", "()F");
              mids$[mid_getDocFreq_54c6a17a] = env->getMethodID(cls, "getDocFreq", "()J");
              mids$[mid_getNumberOfDocuments_54c6a17a] = env->getMethodID(cls, "getNumberOfDocuments", "()J");
              mids$[mid_getNumberOfFieldTokens_54c6a17a] = env->getMethodID(cls, "getNumberOfFieldTokens", "()J");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_getTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getTotalTermFreq", "()J");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_setAvgFieldLength_06298cab] = env->getMethodID(cls, "setAvgFieldLength", "(F)V");
              mids$[mid_setDocFreq_0ee6df2f] = env->getMethodID(cls, "setDocFreq", "(J)V");
              mids$[mid_setNumberOfDocuments_0ee6df2f] = env->getMethodID(cls, "setNumberOfDocuments", "(J)V");
              mids$[mid_setNumberOfFieldTokens_0ee6df2f] = env->getMethodID(cls, "setNumberOfFieldTokens", "(J)V");
              mids$[mid_setTotalTermFreq_0ee6df2f] = env->getMethodID(cls, "setTotalTermFreq", "(J)V");
              mids$[mid_rawNormalizationValue_54c6a176] = env->getMethodID(cls, "rawNormalizationValue", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicStats::BasicStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat BasicStats::getAvgFieldLength() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAvgFieldLength_54c6a176]);
          }

          jlong BasicStats::getDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getDocFreq_54c6a17a]);
          }

          jlong BasicStats::getNumberOfDocuments() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfDocuments_54c6a17a]);
          }

          jlong BasicStats::getNumberOfFieldTokens() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfFieldTokens_54c6a17a]);
          }

          jfloat BasicStats::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          jlong BasicStats::getTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotalTermFreq_54c6a17a]);
          }

          jfloat BasicStats::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void BasicStats::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          void BasicStats::setAvgFieldLength(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAvgFieldLength_06298cab], a0);
          }

          void BasicStats::setDocFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDocFreq_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfDocuments(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfDocuments_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfFieldTokens(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfFieldTokens_0ee6df2f], a0);
          }

          void BasicStats::setTotalTermFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTotalTermFreq_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self);
          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data);
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data);
          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data);
          static PyGetSetDef t_BasicStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_BasicStats, avgFieldLength),
            DECLARE_GETSET_FIELD(t_BasicStats, docFreq),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfDocuments),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfFieldTokens),
            DECLARE_GET_FIELD(t_BasicStats, totalBoost),
            DECLARE_GETSET_FIELD(t_BasicStats, totalTermFreq),
            DECLARE_GET_FIELD(t_BasicStats, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasicStats__methods_[] = {
            DECLARE_METHOD(t_BasicStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, getAvgFieldLength, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfDocuments, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfFieldTokens, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, normalize, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, setAvgFieldLength, METH_O),
            DECLARE_METHOD(t_BasicStats, setDocFreq, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfDocuments, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfFieldTokens, METH_O),
            DECLARE_METHOD(t_BasicStats, setTotalTermFreq, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicStats, t_BasicStats, ::org::apache::lucene::search::similarities::Similarity$SimWeight, BasicStats, t_BasicStats_init_, 0, 0, t_BasicStats__fields_, 0, 0);

          void t_BasicStats::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicStats), module, "BasicStats", 0);
          }

          void t_BasicStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "class_", make_descriptor(BasicStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "wrapfn_", make_descriptor(t_BasicStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicStats::initializeClass, 1)))
              return NULL;
            return t_BasicStats::wrap_Object(BasicStats(((t_BasicStats *) arg)->object.this$));
          }
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            BasicStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = BasicStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAvgFieldLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAvgFieldLength", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfDocuments(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfDocuments", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfFieldTokens(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfFieldTokens", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setTotalTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTotalTermFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) value);
          }
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAvgFieldLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "avgFieldLength", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfDocuments(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfDocuments", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfFieldTokens(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfFieldTokens", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setTotalTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixFilter.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixFilter::class$ = NULL;
        jmethodID *PrefixFilter::mids$ = NULL;
        bool PrefixFilter::live$ = false;

        jclass PrefixFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixFilter::PrefixFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term PrefixFilter::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        ::java::lang::String PrefixFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args);
        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self);
        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args);
        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data);
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data);
        static PyGetSetDef t_PrefixFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixFilter, prefix),
          DECLARE_GET_FIELD(t_PrefixFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixFilter__methods_[] = {
          DECLARE_METHOD(t_PrefixFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_PrefixFilter, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixFilter, t_PrefixFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, PrefixFilter, t_PrefixFilter_init_, 0, 0, t_PrefixFilter__fields_, 0, 0);
        PyObject *t_PrefixFilter::wrap_Object(const PrefixFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PrefixFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PrefixFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PrefixFilter *self = (t_PrefixFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PrefixFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixFilter), module, "PrefixFilter", 0);
        }

        void t_PrefixFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "class_", make_descriptor(PrefixFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixFilter::initializeClass, 1)))
            return NULL;
          return t_PrefixFilter::wrap_Object(PrefixFilter(((t_PrefixFilter *) arg)->object.this$));
        }
        static PyObject *t_PrefixFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PrefixFilter_of_(t_PrefixFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PrefixFilter_init_(t_PrefixFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixFilter(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(PrefixQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixFilter_getPrefix(t_PrefixFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixFilter_toString(t_PrefixFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_PrefixFilter_get__parameters_(t_PrefixFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_PrefixFilter_get__prefix(t_PrefixFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonCollector::class$ = NULL;
        jmethodID *PythonCollector::mids$ = NULL;
        bool PythonCollector::live$ = false;

        jclass PythonCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_collect_abdf2c51] = env->getMethodID(cls, "collect", "(IF)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCollector::PythonCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PythonCollector::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonCollector::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCollector::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self);
        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args);
        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args);
        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1);
        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data);
        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PythonCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PythonCollector, scorer),
          DECLARE_GET_FIELD(t_PythonCollector, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCollector__methods_[] = {
          DECLARE_METHOD(t_PythonCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCollector, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCollector, t_PythonCollector, ::org::apache::lucene::search::Collector, PythonCollector, t_PythonCollector_init_, 0, 0, t_PythonCollector__fields_, 0, 0);

        void t_PythonCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCollector), module, "PythonCollector", 1);
        }

        void t_PythonCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "class_", make_descriptor(PythonCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "wrapfn_", make_descriptor(t_PythonCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCollector::initializeClass);
          JNINativeMethod methods[] = {
            { "acceptsDocsOutOfOrder", "()Z", (void *) t_PythonCollector_acceptsDocsOutOfOrder0 },
            { "collect", "(IF)V", (void *) t_PythonCollector_collect1 },
            { "pythonDecRef", "()V", (void *) t_PythonCollector_pythonDecRef2 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V", (void *) t_PythonCollector_setNextReader3 },
          };
          env->registerNatives(cls, methods, 4);
        }

        static PyObject *t_PythonCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCollector::initializeClass, 1)))
            return NULL;
          return t_PythonCollector::wrap_Object(PythonCollector(((t_PythonCollector *) arg)->object.this$));
        }
        static PyObject *t_PythonCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCollector_init_(t_PythonCollector *self, PyObject *args, PyObject *kwds)
        {
          PythonCollector object((jobject) NULL);

          INT_CALL(object = PythonCollector());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCollector_collect(t_PythonCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PythonCollector_finalize(t_PythonCollector *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCollector_pythonExtension(t_PythonCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonCollector_setScorer(t_PythonCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static jboolean JNICALL t_PythonCollector_acceptsDocsOutOfOrder0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "acceptsDocsOutOfOrder", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("acceptsDocsOutOfOrder", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonCollector_collect1(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "collect", "if", (int) a0, (float) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonCollector_setNextReader3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCollector::mids$[PythonCollector::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonCollector_get__self(t_PythonCollector *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }

        static int t_PythonCollector_set__scorer(t_PythonCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleBoolFunction::class$ = NULL;
            jmethodID *SimpleBoolFunction::mids$ = NULL;
            bool SimpleBoolFunction::live$ = false;

            jclass SimpleBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_2223df3d] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleBoolFunction::SimpleBoolFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SimpleBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SimpleBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SimpleBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues SimpleBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint SimpleBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args);

            static PyMethodDef t_SimpleBoolFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleBoolFunction, t_SimpleBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, SimpleBoolFunction, t_SimpleBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleBoolFunction), module, "SimpleBoolFunction", 0);
            }

            void t_SimpleBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "class_", make_descriptor(SimpleBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleBoolFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleBoolFunction::wrap_Object(SimpleBoolFunction(((t_SimpleBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SimpleBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/Builder$FreezeTail.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder::class$ = NULL;
          jmethodID *Builder::mids$ = NULL;
          bool Builder::live$ = false;

          jclass Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_024447c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_bbea4f98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;IIZZILorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Builder$FreezeTail;ZFZI)V");
              mids$[mid_add_52197430] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");
              mids$[mid_finish_917b3659] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_fstRamBytesUsed_54c6a17a] = env->getMethodID(cls, "fstRamBytesUsed", "()J");
              mids$[mid_getMappedStateCount_54c6a17a] = env->getMethodID(cls, "getMappedStateCount", "()J");
              mids$[mid_getTermCount_54c6a17a] = env->getMethodID(cls, "getTermCount", "()J");
              mids$[mid_getTotStateCount_54c6a17a] = env->getMethodID(cls, "getTotStateCount", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_024447c3, a0.this$, a1.this$)) {}

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, jint a1, jint a2, jboolean a3, jboolean a4, jint a5, const ::org::apache::lucene::util::fst::Outputs & a6, const ::org::apache::lucene::util::fst::Builder$FreezeTail & a7, jboolean a8, jfloat a9, jboolean a10, jint a11) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bbea4f98, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8, a9, a10, a11)) {}

          void Builder::add(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_52197430], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST Builder::finish() const
          {
            return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_finish_917b3659]));
          }

          jlong Builder::fstRamBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_fstRamBytesUsed_54c6a17a]);
          }

          jlong Builder::getMappedStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getMappedStateCount_54c6a17a]);
          }

          jlong Builder::getTermCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTermCount_54c6a17a]);
          }

          jlong Builder::getTotStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotStateCount_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args);
          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder_add(t_Builder *self, PyObject *args);
          static PyObject *t_Builder_finish(t_Builder *self);
          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self);
          static PyObject *t_Builder_getMappedStateCount(t_Builder *self);
          static PyObject *t_Builder_getTermCount(t_Builder *self);
          static PyObject *t_Builder_getTotStateCount(t_Builder *self);
          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data);
          static PyGetSetDef t_Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Builder, mappedStateCount),
            DECLARE_GET_FIELD(t_Builder, termCount),
            DECLARE_GET_FIELD(t_Builder, totStateCount),
            DECLARE_GET_FIELD(t_Builder, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder__methods_[] = {
            DECLARE_METHOD(t_Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Builder, fstRamBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getMappedStateCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTermCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTotStateCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder, t_Builder, ::java::lang::Object, Builder, t_Builder_init_, 0, 0, t_Builder__fields_, 0, 0);
          PyObject *t_Builder::wrap_Object(const Builder& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder), module, "Builder", 0);
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "UnCompiledNode", make_descriptor(&PY_TYPE(Builder$UnCompiledNode)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "Arc", make_descriptor(&PY_TYPE(Builder$Arc)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "FreezeTail", make_descriptor(&PY_TYPE(Builder$FreezeTail)));
          }

          void t_Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "class_", make_descriptor(Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "wrapfn_", make_descriptor(t_Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder::initializeClass, 1)))
              return NULL;
            return t_Builder::wrap_Object(Builder(((t_Builder *) arg)->object.this$));
          }
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = Builder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 12:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                jboolean a3;
                jboolean a4;
                jint a5;
                ::org::apache::lucene::util::fst::Outputs a6((jobject) NULL);
                PyTypeObject **p6;
                ::org::apache::lucene::util::fst::Builder$FreezeTail a7((jobject) NULL);
                PyTypeObject **p7;
                jboolean a8;
                jfloat a9;
                jboolean a10;
                jint a11;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KIIZZIKKZFZI", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Builder$FreezeTail::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a7, &p7, ::org::apache::lucene::util::fst::t_Builder$FreezeTail::parameters_, &a8, &a9, &a10, &a11))
                {
                  INT_CALL(object = Builder(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder_add(t_Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "kO", ::org::apache::lucene::util::IntsRef::initializeClass, self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Builder_finish(t_Builder *self)
          {
            ::org::apache::lucene::util::fst::FST result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.fstRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getMappedStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTermCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTotStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesConsumer::class$ = NULL;
        jmethodID *DocValuesConsumer::mids$ = NULL;
        bool DocValuesConsumer::live$ = false;

        jclass DocValuesConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addBinaryField_1dd3fb83] = env->getMethodID(cls, "addBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addNumericField_1dd3fb83] = env->getMethodID(cls, "addNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedField_4e727c10] = env->getMethodID(cls, "addSortedField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedNumericField_4e727c10] = env->getMethodID(cls, "addSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedSetField_eef27e8b] = env->getMethodID(cls, "addSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_isSingleValued_d1cac209] = env->getStaticMethodID(cls, "isSingleValued", "(Ljava/lang/Iterable;)Z");
            mids$[mid_mergeBinaryField_1705fbe6] = env->getMethodID(cls, "mergeBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeNumericField_1705fbe6] = env->getMethodID(cls, "mergeNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeSortedField_eba53503] = env->getMethodID(cls, "mergeSortedField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedNumericField_eba53503] = env->getMethodID(cls, "mergeSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedSetField_eba53503] = env->getMethodID(cls, "mergeSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_singletonView_0e65223a] = env->getStaticMethodID(cls, "singletonView", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Number;)Ljava/lang/Iterable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesConsumer::addBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addBinaryField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addNumericField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedNumericField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2, const ::java::lang::Iterable & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedSetField_eef27e8b], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean DocValuesConsumer::isSingleValued(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSingleValued_d1cac209], a0.this$);
        }

        void DocValuesConsumer::mergeBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeBinaryField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeNumericField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedNumericField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedSetField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        ::java::lang::Iterable DocValuesConsumer::singletonView(const ::java::lang::Iterable & a0, const ::java::lang::Iterable & a1, const ::java::lang::Number & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Iterable(env->callStaticObjectMethod(cls, mids$[mid_singletonView_0e65223a], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocValuesConsumer__methods_[] = {
          DECLARE_METHOD(t_DocValuesConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, addBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, isSingleValued, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, singletonView, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesConsumer, t_DocValuesConsumer, ::java::lang::Object, DocValuesConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesConsumer), module, "DocValuesConsumer", 0);
        }

        void t_DocValuesConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "class_", make_descriptor(DocValuesConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesConsumer::initializeClass, 1)))
            return NULL;
          return t_DocValuesConsumer::wrap_Object(DocValuesConsumer(((t_DocValuesConsumer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addBinaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Iterable a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kKKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_, &a3, &p3, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedSetField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::isSingleValued(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isSingleValued", arg);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeBinaryField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeNumericField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedSetField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Number a2((jobject) NULL);
          ::java::lang::Iterable result((jobject) NULL);

          if (!parseArgs(args, "KKO", ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &::java::lang::PY_TYPE(Number), &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::singletonView(a0, a1, a2));
            return ::java::lang::t_Iterable::wrap_Object(result, &::java::lang::PY_TYPE(Number));
          }

          PyErr_SetArgsError(type, "singletonView", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xCodec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xCodec::class$ = NULL;
          jmethodID *Lucene3xCodec::mids$ = NULL;
          bool Lucene3xCodec::live$ = false;

          jclass Lucene3xCodec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xCodec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocStoreFiles_e7e0a956] = env->getStaticMethodID(cls, "getDocStoreFiles", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/util/Set;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xCodec::Lucene3xCodec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene3xCodec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene3xCodec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::java::util::Set Lucene3xCodec::getDocStoreFiles(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreFiles_e7e0a956], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene3xCodec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene3xCodec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene3xCodec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene3xCodec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene3xCodec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene3xCodec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args);

          static PyMethodDef t_Lucene3xCodec__methods_[] = {
            DECLARE_METHOD(t_Lucene3xCodec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, getDocStoreFiles, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xCodec, t_Lucene3xCodec, ::org::apache::lucene::codecs::Codec, Lucene3xCodec, t_Lucene3xCodec_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xCodec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xCodec), module, "Lucene3xCodec", 0);
          }

          void t_Lucene3xCodec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "class_", make_descriptor(Lucene3xCodec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xCodec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xCodec::initializeClass, 1)))
              return NULL;
            return t_Lucene3xCodec::wrap_Object(Lucene3xCodec(((t_Lucene3xCodec *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xCodec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xCodec object((jobject) NULL);

            INT_CALL(object = Lucene3xCodec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xCodec::getDocStoreFiles(a0));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getDocStoreFiles", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeFilter.h"
#include "java/lang/Number.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/Long.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeFilter::class$ = NULL;
        jmethodID *NumericRangeFilter::mids$ = NULL;
        bool NumericRangeFilter::live$ = false;

        jclass NumericRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_dba8ce37] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newDoubleRange_086f57c9] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_a2bb5c27] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newFloatRange_ba518bd5] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_0551a8cf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newIntRange_eeb70fc1] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_557bc96b] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");
            mids$[mid_newLongRange_b95b6e4d] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Number NumericRangeFilter::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeFilter::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeFilter::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericRangeFilter::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeFilter::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_dba8ce37], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_086f57c9], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_a2bb5c27], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ba518bd5], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_0551a8cf], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_eeb70fc1], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_557bc96b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeFilter NumericRangeFilter::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_b95b6e4d], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args);
        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self);
        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data);
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data);
        static PyGetSetDef t_NumericRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeFilter, max),
          DECLARE_GET_FIELD(t_NumericRangeFilter, min),
          DECLARE_GET_FIELD(t_NumericRangeFilter, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeFilter__methods_[] = {
          DECLARE_METHOD(t_NumericRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeFilter, t_NumericRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, NumericRangeFilter, abstract_init, 0, 0, t_NumericRangeFilter__fields_, 0, 0);
        PyObject *t_NumericRangeFilter::wrap_Object(const NumericRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeFilter *self = (t_NumericRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeFilter), module, "NumericRangeFilter", 0);
        }

        void t_NumericRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "class_", make_descriptor(NumericRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeFilter::initializeClass, 1)))
            return NULL;
          return t_NumericRangeFilter::wrap_Object(NumericRangeFilter(((t_NumericRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeFilter_of_(t_NumericRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeFilter_getMax(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getMin(t_NumericRangeFilter *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeFilter_getPrecisionStep(t_NumericRangeFilter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeFilter_includesMax(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_includesMin(t_NumericRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }
        static PyObject *t_NumericRangeFilter_get__parameters_(t_NumericRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeFilter_get__max(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__min(t_NumericRangeFilter *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeFilter_get__precisionStep(t_NumericRangeFilter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFieldFragList::class$ = NULL;
          jmethodID *SimpleFieldFragList::mids$ = NULL;
          bool SimpleFieldFragList::live$ = false;

          jclass SimpleFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFieldFragList::SimpleFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void SimpleFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args);

          static PyMethodDef t_SimpleFieldFragList__methods_[] = {
            DECLARE_METHOD(t_SimpleFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFieldFragList, t_SimpleFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, SimpleFieldFragList, t_SimpleFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_SimpleFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFieldFragList), module, "SimpleFieldFragList", 0);
          }

          void t_SimpleFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "class_", make_descriptor(SimpleFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_SimpleFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFieldFragList::initializeClass, 1)))
              return NULL;
            return t_SimpleFieldFragList::wrap_Object(SimpleFieldFragList(((t_SimpleFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SimpleFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SimpleFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SimpleFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixQuery::class$ = NULL;
        jmethodID *PrefixQuery::mids$ = NULL;
        bool PrefixQuery::live$ = false;

        jclass PrefixQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getPrefix_0f71f314] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixQuery::PrefixQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean PrefixQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::index::Term PrefixQuery::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_0f71f314]));
        }

        jint PrefixQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String PrefixQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self);
        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data);
        static PyGetSetDef t_PrefixQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixQuery, prefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixQuery__methods_[] = {
          DECLARE_METHOD(t_PrefixQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixQuery, t_PrefixQuery, ::org::apache::lucene::search::MultiTermQuery, PrefixQuery, t_PrefixQuery_init_, 0, 0, t_PrefixQuery__fields_, 0, 0);

        void t_PrefixQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixQuery), module, "PrefixQuery", 0);
        }

        void t_PrefixQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "class_", make_descriptor(PrefixQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_PrefixQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixQuery::initializeClass, 1)))
            return NULL;
          return t_PrefixQuery::wrap_Object(PrefixQuery(((t_PrefixQuery *) arg)->object.this$));
        }
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PrefixQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterFields::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterFields::mids$ = NULL;
        bool FilterAtomicReader$FilterFields::live$ = false;

        jclass FilterAtomicReader$FilterFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a2a6a1f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Fields;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterFields::FilterAtomicReader$FilterFields(const ::org::apache::lucene::index::Fields & a0) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_a2a6a1f4, a0.this$)) {}

        ::java::util::Iterator FilterAtomicReader$FilterFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FilterAtomicReader$FilterFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms FilterAtomicReader$FilterFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterFields__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, size, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields, ::org::apache::lucene::index::Fields, FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields_init_, ((PyObject *(*)(t_FilterAtomicReader$FilterFields *)) get_iterator< t_FilterAtomicReader$FilterFields >), 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterFields::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterFields), module, "FilterAtomicReader$FilterFields", 0);
        }

        void t_FilterAtomicReader$FilterFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterFields::wrap_Object(FilterAtomicReader$FilterFields(((t_FilterAtomicReader$FilterFields *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Fields a0((jobject) NULL);
          FilterAtomicReader$FilterFields object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Fields::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterFields(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilter::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilter::mids$ = NULL;
          bool TypeAsPayloadTokenFilter::live$ = false;

          jclass TypeAsPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilter::TypeAsPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TypeAsPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilter), module, "TypeAsPayloadTokenFilter", 0);
          }

          void t_TypeAsPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilter::wrap_Object(TypeAsPayloadTokenFilter(((t_TypeAsPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TypeAsPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TypeAsPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RefCount.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RefCount::class$ = NULL;
        jmethodID *RefCount::mids$ = NULL;
        bool RefCount::live$ = false;

        jclass RefCount::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RefCount");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RefCount::RefCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        void RefCount::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        ::java::lang::Object RefCount::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        jint RefCount::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        void RefCount::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args);
        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RefCount_decRef(t_RefCount *self);
        static PyObject *t_RefCount_get(t_RefCount *self);
        static PyObject *t_RefCount_getRefCount(t_RefCount *self);
        static PyObject *t_RefCount_incRef(t_RefCount *self);
        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data);
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data);
        static PyGetSetDef t_RefCount__fields_[] = {
          DECLARE_GET_FIELD(t_RefCount, refCount),
          DECLARE_GET_FIELD(t_RefCount, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RefCount__methods_[] = {
          DECLARE_METHOD(t_RefCount, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, of_, METH_VARARGS),
          DECLARE_METHOD(t_RefCount, decRef, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, get, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, incRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RefCount, t_RefCount, ::java::lang::Object, RefCount, t_RefCount_init_, 0, 0, t_RefCount__fields_, 0, 0);
        PyObject *t_RefCount::wrap_Object(const RefCount& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RefCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RefCount::install(PyObject *module)
        {
          installType(&PY_TYPE(RefCount), module, "RefCount", 0);
        }

        void t_RefCount::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "class_", make_descriptor(RefCount::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "wrapfn_", make_descriptor(t_RefCount::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RefCount).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RefCount::initializeClass, 1)))
            return NULL;
          return t_RefCount::wrap_Object(RefCount(((t_RefCount *) arg)->object.this$));
        }
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RefCount::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          RefCount object((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            INT_CALL(object = RefCount(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RefCount_decRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_RefCount_get(t_RefCount *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_RefCount_getRefCount(t_RefCount *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RefCount_incRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Formatter::class$ = NULL;
          jmethodID *Formatter::mids$ = NULL;
          bool Formatter::live$ = false;

          jclass Formatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Formatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Formatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args);

          static PyMethodDef t_Formatter__methods_[] = {
            DECLARE_METHOD(t_Formatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Formatter, t_Formatter, ::java::lang::Object, Formatter, abstract_init, 0, 0, 0, 0, 0);

          void t_Formatter::install(PyObject *module)
          {
            installType(&PY_TYPE(Formatter), module, "Formatter", 0);
          }

          void t_Formatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "class_", make_descriptor(Formatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "wrapfn_", make_descriptor(t_Formatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Formatter::initializeClass, 1)))
              return NULL;
            return t_Formatter::wrap_Object(Formatter(((t_Formatter *) arg)->object.this$));
          }
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Formatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax::class$ = NULL;
              jmethodID *EscapeQuerySyntax::mids$ = NULL;
              bool EscapeQuerySyntax::live$ = false;

              jclass EscapeQuerySyntax::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence EscapeQuerySyntax::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntax__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax, t_EscapeQuerySyntax, ::java::lang::Object, EscapeQuerySyntax, abstract_init, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntax::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax), module, "EscapeQuerySyntax", 0);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "Type", make_descriptor(&PY_TYPE(EscapeQuerySyntax$Type)));
              }

              void t_EscapeQuerySyntax::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "class_", make_descriptor(EscapeQuerySyntax::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax::wrap_Object(EscapeQuerySyntax(((t_EscapeQuerySyntax *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DutchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DutchStemmer::class$ = NULL;
        jmethodID *DutchStemmer::mids$ = NULL;
        bool DutchStemmer::live$ = false;

        jclass DutchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DutchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DutchStemmer::DutchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DutchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DutchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DutchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args);

        static PyMethodDef t_DutchStemmer__methods_[] = {
          DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::org::tartarus::snowball::SnowballProgram, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

        void t_DutchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
        }

        void t_DutchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
            return NULL;
          return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
        }
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DutchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
        {
          DutchStemmer object((jobject) NULL);

          INT_CALL(object = DutchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator$TermFreqIteratorWrapper::class$ = NULL;
          jmethodID *TermFreqIterator$TermFreqIteratorWrapper::mids$ = NULL;
          bool TermFreqIterator$TermFreqIteratorWrapper::live$ = false;

          jclass TermFreqIterator$TermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermFreqIterator$TermFreqIteratorWrapper::TermFreqIterator$TermFreqIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Comparator TermFreqIterator$TermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef TermFreqIterator$TermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong TermFreqIterator$TermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_TermFreqIterator$TermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_TermFreqIterator$TermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermFreqIterator$TermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper, ::java::lang::Object, TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_TermFreqIterator$TermFreqIteratorWrapper *)) get_next< t_TermFreqIterator$TermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_TermFreqIterator$TermFreqIteratorWrapper__fields_, 0, 0);

          void t_TermFreqIterator$TermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper), module, "TermFreqIterator$TermFreqIteratorWrapper", 0);
          }

          void t_TermFreqIterator$TermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator$TermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator$TermFreqIteratorWrapper::wrap_Object(TermFreqIterator$TermFreqIteratorWrapper(((t_TermFreqIterator$TermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            TermFreqIterator$TermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = TermFreqIterator$TermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ComplexExplanation.h"
#include "java/lang/String.h"
#include "java/lang/Boolean.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ComplexExplanation::class$ = NULL;
        jmethodID *ComplexExplanation::mids$ = NULL;
        bool ComplexExplanation::live$ = false;

        jclass ComplexExplanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ComplexExplanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_2ed007a2] = env->getMethodID(cls, "<init>", "(ZFLjava/lang/String;)V");
            mids$[mid_getMatch_34327cc3] = env->getMethodID(cls, "getMatch", "()Ljava/lang/Boolean;");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setMatch_d07f0c8e] = env->getMethodID(cls, "setMatch", "(Ljava/lang/Boolean;)V");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ComplexExplanation::ComplexExplanation() : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ComplexExplanation::ComplexExplanation(jboolean a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_2ed007a2, a0, a1, a2.this$)) {}

        ::java::lang::Boolean ComplexExplanation::getMatch() const
        {
          return ::java::lang::Boolean(env->callObjectMethod(this$, mids$[mid_getMatch_34327cc3]));
        }

        jboolean ComplexExplanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void ComplexExplanation::setMatch(const ::java::lang::Boolean & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMatch_d07f0c8e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self);
        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args);
        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg);
        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data);
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_ComplexExplanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_ComplexExplanation, match),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ComplexExplanation__methods_[] = {
          DECLARE_METHOD(t_ComplexExplanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, getMatch, METH_NOARGS),
          DECLARE_METHOD(t_ComplexExplanation, isMatch, METH_VARARGS),
          DECLARE_METHOD(t_ComplexExplanation, setMatch, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ComplexExplanation, t_ComplexExplanation, ::org::apache::lucene::search::Explanation, ComplexExplanation, t_ComplexExplanation_init_, 0, 0, t_ComplexExplanation__fields_, 0, 0);

        void t_ComplexExplanation::install(PyObject *module)
        {
          installType(&PY_TYPE(ComplexExplanation), module, "ComplexExplanation", 0);
        }

        void t_ComplexExplanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "class_", make_descriptor(ComplexExplanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "wrapfn_", make_descriptor(t_ComplexExplanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ComplexExplanation::initializeClass, 1)))
            return NULL;
          return t_ComplexExplanation::wrap_Object(ComplexExplanation(((t_ComplexExplanation *) arg)->object.this$));
        }
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ComplexExplanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ComplexExplanation object((jobject) NULL);

              INT_CALL(object = ComplexExplanation());
              self->object = object;
              break;
            }
            goto err;
           case 3:
            {
              jboolean a0;
              jfloat a1;
              ::java::lang::String a2((jobject) NULL);
              ComplexExplanation object((jobject) NULL);

              if (!parseArgs(args, "ZFs", &a0, &a1, &a2))
              {
                INT_CALL(object = ComplexExplanation(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self)
        {
          ::java::lang::Boolean result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(result);
        }

        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isMatch());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ComplexExplanation), (PyObject *) self, "isMatch", args, 2);
        }

        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg)
        {
          ::java::lang::Boolean a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
          {
            OBJ_CALL(self->object.setMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMatch", arg);
          return NULL;
        }

        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data)
        {
          ::java::lang::Boolean value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(value);
        }
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Boolean value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &value))
            {
              INT_CALL(self->object.setMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "match", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene40FieldInfosFormat::mids$ = NULL;
          bool Lucene40FieldInfosFormat::live$ = false;

          jclass Lucene40FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40FieldInfosFormat::Lucene40FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene40FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene40FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene40FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat_init_, 0, 0, t_Lucene40FieldInfosFormat__fields_, 0, 0);

          void t_Lucene40FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40FieldInfosFormat), module, "Lucene40FieldInfosFormat", 0);
          }

          void t_Lucene40FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene40FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40FieldInfosFormat::wrap_Object(Lucene40FieldInfosFormat(((t_Lucene40FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene40FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttribute::class$ = NULL;
        jmethodID *BoostAttribute::mids$ = NULL;
        bool BoostAttribute::live$ = false;

        jclass BoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat BoostAttribute::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttribute::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self);
        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg);
        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data);
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttribute, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttribute__methods_[] = {
          DECLARE_METHOD(t_BoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttribute, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttribute, t_BoostAttribute, ::org::apache::lucene::util::Attribute, BoostAttribute, abstract_init, 0, 0, t_BoostAttribute__fields_, 0, 0);

        void t_BoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttribute), module, "BoostAttribute", 0);
        }

        void t_BoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "class_", make_descriptor(BoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_BoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttribute::initializeClass, 1)))
            return NULL;
          return t_BoostAttribute::wrap_Object(BoostAttribute(((t_BoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeParseException::class$ = NULL;
            jmethodID *QueryNodeParseException::mids$ = NULL;
            bool QueryNodeParseException::live$ = false;

            jclass QueryNodeParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getErrorToken_14c7b5c5] = env->getMethodID(cls, "getErrorToken", "()Ljava/lang/String;");
                mids$[mid_getQuery_e0adba2f] = env->getMethodID(cls, "getQuery", "()Ljava/lang/CharSequence;");
                mids$[mid_setNonLocalizedMessage_1dde9d59] = env->getMethodID(cls, "setNonLocalizedMessage", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_setQuery_a8afc64a] = env->getMethodID(cls, "setQuery", "(Ljava/lang/CharSequence;)V");
                mids$[mid_setErrorToken_5fdc3f48] = env->getMethodID(cls, "setErrorToken", "(Ljava/lang/String;)V");
                mids$[mid_setBeginLine_39c7bd3c] = env->getMethodID(cls, "setBeginLine", "(I)V");
                mids$[mid_setBeginColumn_39c7bd3c] = env->getMethodID(cls, "setBeginColumn", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeParseException::QueryNodeParseException(const ::java::lang::Throwable & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            jint QueryNodeParseException::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint QueryNodeParseException::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            ::java::lang::String QueryNodeParseException::getErrorToken() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getErrorToken_14c7b5c5]));
            }

            ::java::lang::CharSequence QueryNodeParseException::getQuery() const
            {
              return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getQuery_e0adba2f]));
            }

            void QueryNodeParseException::setNonLocalizedMessage(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNonLocalizedMessage_1dde9d59], a0.this$);
            }

            void QueryNodeParseException::setQuery(const ::java::lang::CharSequence & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQuery_a8afc64a], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryNodeParseException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginColumn),
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginLine),
              DECLARE_GET_FIELD(t_QueryNodeParseException, errorToken),
              DECLARE_SET_FIELD(t_QueryNodeParseException, nonLocalizedMessage),
              DECLARE_GETSET_FIELD(t_QueryNodeParseException, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeParseException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getErrorToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, setNonLocalizedMessage, METH_O),
              DECLARE_METHOD(t_QueryNodeParseException, setQuery, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeParseException, t_QueryNodeParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeException, QueryNodeParseException, t_QueryNodeParseException_init_, 0, 0, t_QueryNodeParseException__fields_, 0, 0);

            void t_QueryNodeParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeParseException), module, "QueryNodeParseException", 0);
            }

            void t_QueryNodeParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "class_", make_descriptor(QueryNodeParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeParseException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeParseException::wrap_Object(QueryNodeParseException(((t_QueryNodeParseException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeParseException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getErrorToken());
              return j2p(result);
            }

            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self)
            {
              ::java::lang::CharSequence result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNonLocalizedMessage(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNonLocalizedMessage", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getErrorToken());
              return j2p(value);
            }

            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &value))
                {
                  INT_CALL(self->object.setNonLocalizedMessage(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nonLocalizedMessage", arg);
              return -1;
            }

            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::java::lang::CharSequence value((jobject) NULL);
                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setQuery(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "query", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRange::class$ = NULL;
          jmethodID *DoubleRange::mids$ = NULL;
          jfieldID *DoubleRange::fids$ = NULL;
          bool DoubleRange::live$ = false;

          jclass DoubleRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ac9f76c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DZDZ)V");
              mids$[mid_accept_5d1c7649] = env->getMethodID(cls, "accept", "(D)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "D");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "D");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRange::DoubleRange(const ::java::lang::String & a0, jdouble a1, jboolean a2, jdouble a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1ac9f76c, a0.this$, a1, a2, a3, a4)) {}

          jboolean DoubleRange::accept(jdouble a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_5d1c7649], a0);
          }

          ::org::apache::lucene::search::Filter DoubleRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String DoubleRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jdouble DoubleRange::_get_max() const
          {
            return env->getDoubleField(this$, fids$[fid_max]);
          }

          jboolean DoubleRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jdouble DoubleRange::_get_min() const
          {
            return env->getDoubleField(this$, fids$[fid_min]);
          }

          jboolean DoubleRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg);
          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data);

          static PyGetSetDef t_DoubleRange__fields_[] = {
            DECLARE_GET_FIELD(t_DoubleRange, max),
            DECLARE_GET_FIELD(t_DoubleRange, maxInclusive),
            DECLARE_GET_FIELD(t_DoubleRange, min),
            DECLARE_GET_FIELD(t_DoubleRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRange__methods_[] = {
            DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, accept, METH_O),
            DECLARE_METHOD(t_DoubleRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRange, t_DoubleRange, ::org::apache::lucene::facet::range::Range, DoubleRange, t_DoubleRange_init_, 0, 0, t_DoubleRange__fields_, 0, 0);

          void t_DoubleRange::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRange), module, "DoubleRange", 0);
          }

          void t_DoubleRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "class_", make_descriptor(DoubleRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
              return NULL;
            return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
          }
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            jboolean a2;
            jdouble a3;
            jboolean a4;
            DoubleRange object((jobject) NULL);

            if (!parseArgs(args, "sDZDZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = DoubleRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg)
          {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_max());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_min());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentValueSourceDictionary.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentValueSourceDictionary::class$ = NULL;
          jmethodID *DocumentValueSourceDictionary::mids$ = NULL;
          bool DocumentValueSourceDictionary::live$ = false;

          jclass DocumentValueSourceDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentValueSourceDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_11b82207] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_c3072aa9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;)V");
              mids$[mid_init$_8f8f3fa3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_11b82207, a0.this$, a1.this$, a2.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_c3072aa9, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_8f8f3fa3, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentValueSourceDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args);
          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data);
          static PyGetSetDef t_DocumentValueSourceDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentValueSourceDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentValueSourceDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentValueSourceDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, getEntryIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentValueSourceDictionary, t_DocumentValueSourceDictionary, ::org::apache::lucene::search::suggest::DocumentDictionary, DocumentValueSourceDictionary, t_DocumentValueSourceDictionary_init_, 0, 0, t_DocumentValueSourceDictionary__fields_, 0, 0);

          void t_DocumentValueSourceDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentValueSourceDictionary), module, "DocumentValueSourceDictionary", 0);
          }

          void t_DocumentValueSourceDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "class_", make_descriptor(DocumentValueSourceDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentValueSourceDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentValueSourceDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentValueSourceDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentValueSourceDictionary::wrap_Object(DocumentValueSourceDictionary(((t_DocumentValueSourceDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentValueSourceDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksks", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "kskss", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getEntryIterator());
              return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocumentValueSourceDictionary), (PyObject *) self, "getEntryIterator", args, 2);
          }

          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballFilter::class$ = NULL;
          jmethodID *SnowballFilter::mids$ = NULL;
          bool SnowballFilter::live$ = false;

          jclass SnowballFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7671c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/tartarus/snowball/SnowballProgram;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::tartarus::snowball::SnowballProgram & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a7671c33, a0.this$, a1.this$)) {}

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          jboolean SnowballFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args);

          static PyMethodDef t_SnowballFilter__methods_[] = {
            DECLARE_METHOD(t_SnowballFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballFilter, t_SnowballFilter, ::org::apache::lucene::analysis::TokenFilter, SnowballFilter, t_SnowballFilter_init_, 0, 0, 0, 0, 0);

          void t_SnowballFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballFilter), module, "SnowballFilter", 0);
          }

          void t_SnowballFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "class_", make_descriptor(SnowballFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "wrapfn_", make_descriptor(t_SnowballFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballFilter::initializeClass, 1)))
              return NULL;
            return t_SnowballFilter::wrap_Object(SnowballFilter(((t_SnowballFilter *) arg)->object.this$));
          }
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::tartarus::snowball::SnowballProgram a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SnowballFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
