#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramFilterFactory::class$ = NULL;
          jmethodID *EdgeNGramFilterFactory::mids$ = NULL;
          bool EdgeNGramFilterFactory::live$ = false;

          jclass EdgeNGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ad8ef474] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramFilterFactory::EdgeNGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter EdgeNGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ad8ef474], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramFilterFactory, t_EdgeNGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EdgeNGramFilterFactory, t_EdgeNGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramFilterFactory), module, "EdgeNGramFilterFactory", 0);
          }

          void t_EdgeNGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "class_", make_descriptor(EdgeNGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramFilterFactory::wrap_Object(EdgeNGramFilterFactory(((t_EdgeNGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsFilterBuilder::class$ = NULL;
            jmethodID *TermsFilterBuilder::mids$ = NULL;
            bool TermsFilterBuilder::live$ = false;

            jclass TermsFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsFilterBuilder::TermsFilterBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsFilterBuilder, t_TermsFilterBuilder, ::java::lang::Object, TermsFilterBuilder, t_TermsFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsFilterBuilder), module, "TermsFilterBuilder", 0);
            }

            void t_TermsFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "class_", make_descriptor(TermsFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsFilterBuilder::wrap_Object(TermsFilterBuilder(((t_TermsFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsFilterBuilder_init_(t_TermsFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils::class$ = NULL;
          jmethodID *CharacterUtils::mids$ = NULL;
          bool CharacterUtils::live$ = false;

          jclass CharacterUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_codePointAt_2fbf15bf] = env->getMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
              mids$[mid_codePointAt_6f0bb349] = env->getMethodID(cls, "codePointAt", "([CII)I");
              mids$[mid_codePointCount_a8afc655] = env->getMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;)I");
              mids$[mid_fill_4a603207] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;)Z");
              mids$[mid_fill_907fec5b] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;I)Z");
              mids$[mid_getInstance_c0e3b02e] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_getJava4Instance_2fcca481] = env->getStaticMethodID(cls, "getJava4Instance", "()Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_newCharacterBuffer_531f8606] = env->getStaticMethodID(cls, "newCharacterBuffer", "(I)Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;");
              mids$[mid_offsetByCodePoints_f453ace9] = env->getMethodID(cls, "offsetByCodePoints", "([CIIII)I");
              mids$[mid_toChars_4c08f211] = env->getMethodID(cls, "toChars", "([III[CI)I");
              mids$[mid_toCodePoints_625a1e21] = env->getMethodID(cls, "toCodePoints", "([CII[II)I");
              mids$[mid_toLowerCase_6f0bb356] = env->getMethodID(cls, "toLowerCase", "([CII)V");
              mids$[mid_toUpperCase_6f0bb356] = env->getMethodID(cls, "toUpperCase", "([CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterUtils::CharacterUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CharacterUtils::codePointAt(const ::java::lang::CharSequence & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
          }

          jint CharacterUtils::codePointAt(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
          }

          jint CharacterUtils::codePointCount(const ::java::lang::CharSequence & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointCount_a8afc655], a0.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_4a603207], a0.this$, a1.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_907fec5b], a0.this$, a1.this$, a2);
          }

          CharacterUtils CharacterUtils::getInstance(const ::org::apache::lucene::util::Version & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c0e3b02e], a0.this$));
          }

          CharacterUtils CharacterUtils::getJava4Instance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getJava4Instance_2fcca481]));
          }

          ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer CharacterUtils::newCharacterBuffer(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer(env->callStaticObjectMethod(cls, mids$[mid_newCharacterBuffer_531f8606], a0));
          }

          jint CharacterUtils::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
          }

          jint CharacterUtils::toChars(const JArray< jint > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toChars_4c08f211], a0.this$, a1, a2, a3.this$, a4);
          }

          jint CharacterUtils::toCodePoints(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toCodePoints_625a1e21], a0.this$, a1, a2, a3.this$, a4);
          }

          void CharacterUtils::toLowerCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toLowerCase_6f0bb356], a0.this$, a1, a2);
          }

          void CharacterUtils::toUpperCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toUpperCase_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg);
          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type);
          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data);
          static PyGetSetDef t_CharacterUtils__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils, java4Instance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, codePointAt, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, codePointCount, METH_O),
            DECLARE_METHOD(t_CharacterUtils, fill, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, getInstance, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, getJava4Instance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, newCharacterBuffer, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toChars, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toLowerCase, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toUpperCase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils, t_CharacterUtils, ::java::lang::Object, CharacterUtils, t_CharacterUtils_init_, 0, 0, t_CharacterUtils__fields_, 0, 0);

          void t_CharacterUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils), module, "CharacterUtils", 0);
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "CharacterBuffer", make_descriptor(&PY_TYPE(CharacterUtils$CharacterBuffer)));
          }

          void t_CharacterUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "class_", make_descriptor(CharacterUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils::wrap_Object(CharacterUtils(((t_CharacterUtils *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds)
          {
            CharacterUtils object((jobject) NULL);

            INT_CALL(object = CharacterUtils());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "codePointAt", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.codePointCount(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointCount", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jboolean result;

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            CharacterUtils result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getInstance(a0));
              return t_CharacterUtils::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type)
          {
            CharacterUtils result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getJava4Instance());
            return t_CharacterUtils::wrap_Object(result);
          }

          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::newCharacterBuffer(a0));
              return ::org::apache::lucene::analysis::util::t_CharacterUtils$CharacterBuffer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newCharacterBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jchar > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[III[CI", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toChars(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toChars", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jint > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[CII[II", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toLowerCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toUpperCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data)
          {
            CharacterUtils value((jobject) NULL);
            OBJ_CALL(value = self->object.getJava4Instance());
            return t_CharacterUtils::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilterFactory::class$ = NULL;
          jmethodID *CodepointCountFilterFactory::mids$ = NULL;
          bool CodepointCountFilterFactory::live$ = false;
          ::java::lang::String *CodepointCountFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *CodepointCountFilterFactory::MIN_KEY = NULL;

          jclass CodepointCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0d6a0318] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CodepointCountFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilterFactory::CodepointCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter CodepointCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter(env->callObjectMethod(this$, mids$[mid_create_0d6a0318], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_CodepointCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilterFactory, t_CodepointCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CodepointCountFilterFactory, t_CodepointCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilterFactory), module, "CodepointCountFilterFactory", 0);
          }

          void t_CodepointCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "class_", make_descriptor(CodepointCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CodepointCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MIN_KEY)));
          }

          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilterFactory::wrap_Object(CodepointCountFilterFactory(((t_CodepointCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CodepointCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CodepointCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CodepointCountFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CodepointCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Enumeration::class$ = NULL;
    jmethodID *Enumeration::mids$ = NULL;
    bool Enumeration::live$ = false;

    jclass Enumeration::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Enumeration");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
        mids$[mid_nextElement_846352c3] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Enumeration::hasMoreElements() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
    }

    ::java::lang::Object Enumeration::nextElement() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_846352c3]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
    static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
    static PyGetSetDef t_Enumeration__fields_[] = {
      DECLARE_GET_FIELD(t_Enumeration, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enumeration__methods_[] = {
      DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
      DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enumeration, t_Enumeration, ::java::lang::Object, Enumeration, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >), t_Enumeration__fields_, 0, 0);
    PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enumeration::install(PyObject *module)
    {
      installType(&PY_TYPE(Enumeration), module, "Enumeration", 0);
    }

    void t_Enumeration::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "class_", make_descriptor(Enumeration::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
        return NULL;
      return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
    }
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enumeration::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasMoreElements());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.nextElement());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanNearPayloadCheckQuery::mids$ = NULL;
          bool SpanNearPayloadCheckQuery::live$ = false;

          jclass SpanNearPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cc218b3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_efae1086] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearPayloadCheckQuery::SpanNearPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_cc218b3a, a0.this$, a1.this$)) {}

          SpanNearPayloadCheckQuery SpanNearPayloadCheckQuery::clone() const
          {
            return SpanNearPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_efae1086]));
          }

          jboolean SpanNearPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanNearPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanNearPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanNearPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanNearPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearPayloadCheckQuery), module, "SpanNearPayloadCheckQuery", 0);
          }

          void t_SpanNearPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanNearPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearPayloadCheckQuery::wrap_Object(SpanNearPayloadCheckQuery(((t_SpanNearPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanNearPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanNearPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            SpanNearPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BoundaryScanner::class$ = NULL;
          jmethodID *BoundaryScanner::mids$ = NULL;
          bool BoundaryScanner::live$ = false;

          jclass BoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint BoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args);
          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoundaryScanner, t_BoundaryScanner, ::java::lang::Object, BoundaryScanner, abstract_init, 0, 0, 0, 0, 0);

          void t_BoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BoundaryScanner), module, "BoundaryScanner", 0);
          }

          void t_BoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "class_", make_descriptor(BoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BoundaryScanner::wrap_Object(BoundaryScanner(((t_BoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizer::class$ = NULL;
          jmethodID *ThaiTokenizer::mids$ = NULL;
          bool ThaiTokenizer::live$ = false;
          jboolean ThaiTokenizer::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizer::ThaiTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ThaiTokenizer::ThaiTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ThaiTokenizer__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizer, t_ThaiTokenizer, ::org::apache::lucene::analysis::util::SegmentingTokenizerBase, ThaiTokenizer, t_ThaiTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizer), module, "ThaiTokenizer", 0);
          }

          void t_ThaiTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "class_", make_descriptor(ThaiTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiTokenizer::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizer::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizer::wrap_Object(ThaiTokenizer(((t_ThaiTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ThaiTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilder::class$ = NULL;
            jmethodID *SpanQueryBuilder::mids$ = NULL;
            bool SpanQueryBuilder::live$ = false;

            jclass SpanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_SpanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilder, t_SpanQueryBuilder, ::org::apache::lucene::queryparser::xml::QueryBuilder, SpanQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilder), module, "SpanQueryBuilder", 0);
            }

            void t_SpanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "class_", make_descriptor(SpanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilder::wrap_Object(SpanQueryBuilder(((t_SpanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AnalyzerQueryNodeProcessor::class$ = NULL;
              jmethodID *AnalyzerQueryNodeProcessor::mids$ = NULL;
              bool AnalyzerQueryNodeProcessor::live$ = false;

              jclass AnalyzerQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnalyzerQueryNodeProcessor::AnalyzerQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnalyzerQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_AnalyzerQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_AnalyzerQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AnalyzerQueryNodeProcessor), module, "AnalyzerQueryNodeProcessor", 0);
              }

              void t_AnalyzerQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "class_", make_descriptor(AnalyzerQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_AnalyzerQueryNodeProcessor::wrap_Object(AnalyzerQueryNodeProcessor(((t_AnalyzerQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                AnalyzerQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = AnalyzerQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnalyzerQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum::class$ = NULL;
        jmethodID *TermsEnum::mids$ = NULL;
        bool TermsEnum::live$ = false;
        TermsEnum *TermsEnum::EMPTY = NULL;

        jclass TermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_fb0743a7] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_ffc1634d] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new TermsEnum(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/index/TermsEnum;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource TermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint TermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_fb0743a7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_ffc1634d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        jlong TermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus TermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void TermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef TermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState TermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong TermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_ord(t_TermsEnum *self);
        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg);
        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_term(t_TermsEnum *self);
        static PyObject *t_TermsEnum_termState(t_TermsEnum *self);
        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self);

        static PyMethodDef t_TermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, ord, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, seekCeil, METH_O),
          DECLARE_METHOD(t_TermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, term, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, termState, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum, t_TermsEnum, ::java::lang::Object, TermsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_TermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum), module, "TermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "SeekStatus", make_descriptor(&PY_TYPE(TermsEnum$SeekStatus)));
        }

        void t_TermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "class_", make_descriptor(TermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "EMPTY", make_descriptor(t_TermsEnum::wrap_Object(*TermsEnum::EMPTY)));
        }

        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermsEnum::wrap_Object(TermsEnum(((t_TermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docs(a0, a1));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docs(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_ord(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ord());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
          return NULL;
        }

        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "seekExact", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_term(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_termState(t_TermsEnum *self)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.termState());
          return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexDeletionPolicy::class$ = NULL;
        jmethodID *IndexDeletionPolicy::mids$ = NULL;
        bool IndexDeletionPolicy::live$ = false;

        jclass IndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void IndexDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg);

        static PyMethodDef t_IndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_IndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, onCommit, METH_O),
          DECLARE_METHOD(t_IndexDeletionPolicy, onInit, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexDeletionPolicy, t_IndexDeletionPolicy, ::java::lang::Object, IndexDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexDeletionPolicy), module, "IndexDeletionPolicy", 0);
        }

        void t_IndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "class_", make_descriptor(IndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_IndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_IndexDeletionPolicy::wrap_Object(IndexDeletionPolicy(((t_IndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onInit", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizer::class$ = NULL;
          jmethodID *LowerCaseTokenizer::mids$ = NULL;
          bool LowerCaseTokenizer::live$ = false;

          jclass LowerCaseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LowerCaseTokenizer__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizer, t_LowerCaseTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, LowerCaseTokenizer, t_LowerCaseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizer), module, "LowerCaseTokenizer", 0);
          }

          void t_LowerCaseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "class_", make_descriptor(LowerCaseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizer::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizer::wrap_Object(LowerCaseTokenizer(((t_LowerCaseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *FilterClause::class$ = NULL;
        jmethodID *FilterClause::mids$ = NULL;
        bool FilterClause::live$ = false;

        jclass FilterClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/FilterClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7373f548] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getOccur_157730ed] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterClause::FilterClause(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7373f548, a0.this$, a1.this$)) {}

        jboolean FilterClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilterClause::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::BooleanClause$Occur FilterClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_157730ed]));
        }

        jint FilterClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FilterClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_getFilter(t_FilterClause *self);
        static PyObject *t_FilterClause_getOccur(t_FilterClause *self);
        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args);
        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data);
        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data);
        static PyGetSetDef t_FilterClause__fields_[] = {
          DECLARE_GET_FIELD(t_FilterClause, filter),
          DECLARE_GET_FIELD(t_FilterClause, occur),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterClause__methods_[] = {
          DECLARE_METHOD(t_FilterClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_FilterClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilterClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterClause, t_FilterClause, ::java::lang::Object, FilterClause, t_FilterClause_init_, 0, 0, t_FilterClause__fields_, 0, 0);

        void t_FilterClause::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterClause), module, "FilterClause", 0);
        }

        void t_FilterClause::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "class_", make_descriptor(FilterClause::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "wrapfn_", make_descriptor(t_FilterClause::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterClause).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterClause::initializeClass, 1)))
            return NULL;
          return t_FilterClause::wrap_Object(FilterClause(((t_FilterClause *) arg)->object.this$));
        }
        static PyObject *t_FilterClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterClause_init_(t_FilterClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Filter a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          FilterClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = FilterClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterClause_equals(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilterClause_getFilter(t_FilterClause *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilterClause_getOccur(t_FilterClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_FilterClause_hashCode(t_FilterClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilterClause_toString(t_FilterClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterClause_get__filter(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilterClause_get__occur(t_FilterClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilterFactory::class$ = NULL;
          jmethodID *CommonGramsFilterFactory::mids$ = NULL;
          bool CommonGramsFilterFactory::live$ = false;

          jclass CommonGramsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_getCommonWords_d2d3505c] = env->getMethodID(cls, "getCommonWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilterFactory::CommonGramsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CommonGramsFilterFactory::getCommonWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getCommonWords_d2d3505c]));
          }

          void CommonGramsFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean CommonGramsFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args);
          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data);
          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data);
          static PyGetSetDef t_CommonGramsFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, commonWords),
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, getCommonWords, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_CommonGramsFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilterFactory, t_CommonGramsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CommonGramsFilterFactory, t_CommonGramsFilterFactory_init_, 0, 0, t_CommonGramsFilterFactory__fields_, 0, 0);

          void t_CommonGramsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilterFactory), module, "CommonGramsFilterFactory", 0);
          }

          void t_CommonGramsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilterFactory::wrap_Object(CommonGramsFilterFactory(((t_CommonGramsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext$Context::class$ = NULL;
        jmethodID *IOContext$Context::mids$ = NULL;
        bool IOContext$Context::live$ = false;
        IOContext$Context *IOContext$Context::DEFAULT = NULL;
        IOContext$Context *IOContext$Context::FLUSH = NULL;
        IOContext$Context *IOContext$Context::MERGE = NULL;
        IOContext$Context *IOContext$Context::READ = NULL;

        jclass IOContext$Context::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext$Context");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_6cdc8b82] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/store/IOContext$Context;");
            mids$[mid_values_8c68e654] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/store/IOContext$Context;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext$Context(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext$Context;"));
            FLUSH = new IOContext$Context(env->getStaticObjectField(cls, "FLUSH", "Lorg/apache/lucene/store/IOContext$Context;"));
            MERGE = new IOContext$Context(env->getStaticObjectField(cls, "MERGE", "Lorg/apache/lucene/store/IOContext$Context;"));
            READ = new IOContext$Context(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext$Context;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext$Context IOContext$Context::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IOContext$Context(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6cdc8b82], a0.this$));
        }

        JArray< IOContext$Context > IOContext$Context::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IOContext$Context >(env->callStaticObjectMethod(cls, mids$[mid_values_8c68e654]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args);
        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOContext$Context_values(PyTypeObject *type);
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data);
        static PyGetSetDef t_IOContext$Context__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext$Context, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext$Context__methods_[] = {
          DECLARE_METHOD(t_IOContext$Context, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOContext$Context, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext$Context, t_IOContext$Context, ::java::lang::Enum, IOContext$Context, abstract_init, 0, 0, t_IOContext$Context__fields_, 0, 0);
        PyObject *t_IOContext$Context::wrap_Object(const IOContext$Context& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOContext$Context::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOContext$Context::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext$Context), module, "IOContext$Context", 0);
        }

        void t_IOContext$Context::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "class_", make_descriptor(IOContext$Context::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "wrapfn_", make_descriptor(t_IOContext$Context::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext$Context::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "DEFAULT", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "FLUSH", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::FLUSH)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "MERGE", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::MERGE)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "READ", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::READ)));
        }

        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext$Context::initializeClass, 1)))
            return NULL;
          return t_IOContext$Context::wrap_Object(IOContext$Context(((t_IOContext$Context *) arg)->object.this$));
        }
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext$Context::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IOContext$Context result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::valueOf(a0));
            return t_IOContext$Context::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IOContext$Context_values(PyTypeObject *type)
        {
          JArray< IOContext$Context > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::values());
          return JArray<jobject>(result.this$).wrap(t_IOContext$Context::wrap_jobject);
        }
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$primary_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$primary_return::class$ = NULL;
          jmethodID *JavascriptParser$primary_return::mids$ = NULL;
          bool JavascriptParser$primary_return::live$ = false;

          jclass JavascriptParser$primary_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$primary_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$primary_return::JavascriptParser$primary_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$primary_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$primary_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$primary_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$primary_return, t_JavascriptParser$primary_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$primary_return, t_JavascriptParser$primary_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$primary_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$primary_return), module, "JavascriptParser$primary_return", 0);
          }

          void t_JavascriptParser$primary_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "class_", make_descriptor(JavascriptParser$primary_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$primary_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$primary_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$primary_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$primary_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$primary_return::wrap_Object(JavascriptParser$primary_return(((t_JavascriptParser$primary_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$primary_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$primary_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$primary_return_init_(t_JavascriptParser$primary_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$primary_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$primary_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl40::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl40::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl40::live$ = false;
            jint UAX29URLEmailTokenizerImpl40::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl40::UAX29URLEmailTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl40__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40, ::java::lang::Object, UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40_init_, 0, 0, t_UAX29URLEmailTokenizerImpl40__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl40), module, "UAX29URLEmailTokenizerImpl40", 0);
            }

            void t_UAX29URLEmailTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl40::wrap_Object(UAX29URLEmailTokenizerImpl40(((t_UAX29URLEmailTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenSources.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenSources::class$ = NULL;
          jmethodID *TokenSources::mids$ = NULL;
          bool TokenSources::live$ = false;

          jclass TokenSources::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenSources");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAnyTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getAnyTokenStream_326e373c] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/document/Document;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_a3ddc01a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_6006da77] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;Z)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_f436def7] = env->getStaticMethodID(cls, "getTokenStream", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_5d782325] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/document/Document;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStreamWithOffsets_1c01cdda] = env->getStaticMethodID(cls, "getTokenStreamWithOffsets", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenSources::TokenSources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::document::Document & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_326e373c], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_a3ddc01a], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_6006da77], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_f436def7], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::document::Document & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_5d782325], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStreamWithOffsets(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStreamWithOffsets_1c01cdda], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TokenSources__methods_[] = {
            DECLARE_METHOD(t_TokenSources, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getAnyTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStreamWithOffsets, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenSources, t_TokenSources, ::java::lang::Object, TokenSources, t_TokenSources_init_, 0, 0, 0, 0, 0);

          void t_TokenSources::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenSources), module, "TokenSources", 0);
          }

          void t_TokenSources::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "class_", make_descriptor(TokenSources::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "wrapfn_", make_descriptor(t_TokenSources::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenSources::initializeClass, 1)))
              return NULL;
            return t_TokenSources::wrap_Object(TokenSources(((t_TokenSources *) arg)->object.this$));
          }
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenSources::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds)
          {
            TokenSources object((jobject) NULL);

            INT_CALL(object = TokenSources());
            self->object = object;

            return 0;
          }

          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::document::Document a3((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIskk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getAnyTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStreamWithOffsets(a0, a1, a2));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getTokenStreamWithOffsets", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoringRewrite::class$ = NULL;
        jmethodID *ScoringRewrite::mids$ = NULL;
        bool ScoringRewrite::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ScoringRewrite *ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass ScoringRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoringRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_checkMaxClauseCount_39c7bd3c] = env->getMethodID(cls, "checkMaxClauseCount", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ScoringRewrite(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/ScoringRewrite;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoringRewrite::ScoringRewrite() : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Query ScoringRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args);
        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args);
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data);
        static PyGetSetDef t_ScoringRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_ScoringRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoringRewrite__methods_[] = {
          DECLARE_METHOD(t_ScoringRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ScoringRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoringRewrite, t_ScoringRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ScoringRewrite, t_ScoringRewrite_init_, 0, 0, t_ScoringRewrite__fields_, 0, 0);
        PyObject *t_ScoringRewrite::wrap_Object(const ScoringRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ScoringRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ScoringRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoringRewrite), module, "ScoringRewrite", 0);
        }

        void t_ScoringRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "class_", make_descriptor(ScoringRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "wrapfn_", make_descriptor(t_ScoringRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ScoringRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*ScoringRewrite::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(ScoringRewrite).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(t_ScoringRewrite::wrap_Object(*ScoringRewrite::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoringRewrite::initializeClass, 1)))
            return NULL;
          return t_ScoringRewrite::wrap_Object(ScoringRewrite(((t_ScoringRewrite *) arg)->object.this$));
        }
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoringRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds)
        {
          ScoringRewrite object((jobject) NULL);

          INT_CALL(object = ScoringRewrite());
          self->object = object;

          return 0;
        }

        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ScoringRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$numeric_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$numeric_return::class$ = NULL;
          jmethodID *JavascriptParser$numeric_return::mids$ = NULL;
          bool JavascriptParser$numeric_return::live$ = false;

          jclass JavascriptParser$numeric_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$numeric_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$numeric_return::JavascriptParser$numeric_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$numeric_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$numeric_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$numeric_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$numeric_return, t_JavascriptParser$numeric_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$numeric_return, t_JavascriptParser$numeric_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$numeric_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$numeric_return), module, "JavascriptParser$numeric_return", 0);
          }

          void t_JavascriptParser$numeric_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "class_", make_descriptor(JavascriptParser$numeric_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$numeric_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$numeric_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$numeric_return::wrap_Object(JavascriptParser$numeric_return(((t_JavascriptParser$numeric_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$numeric_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$numeric_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$numeric_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanOrQuery::class$ = NULL;
          jmethodID *SpanOrQuery::mids$ = NULL;
          bool SpanOrQuery::live$ = false;

          jclass SpanOrQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanOrQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_272f3877] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_addClause_056c1897] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_clone_4d61402f] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanOrQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanOrQuery::SpanOrQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_272f3877, a0.this$)) {}

          void SpanOrQuery::addClause(const ::org::apache::lucene::search::spans::SpanQuery & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addClause_056c1897], a0.this$);
          }

          SpanOrQuery SpanOrQuery::clone() const
          {
            return SpanOrQuery(env->callObjectMethod(this$, mids$[mid_clone_4d61402f]));
          }

          jboolean SpanOrQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanOrQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanOrQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanOrQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanOrQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanOrQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanOrQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanOrQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg);
          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self);
          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data);
          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data);
          static PyGetSetDef t_SpanOrQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanOrQuery, clauses),
            DECLARE_GET_FIELD(t_SpanOrQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanOrQuery__methods_[] = {
            DECLARE_METHOD(t_SpanOrQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, addClause, METH_O),
            DECLARE_METHOD(t_SpanOrQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanOrQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanOrQuery, t_SpanOrQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanOrQuery, t_SpanOrQuery_init_, 0, 0, t_SpanOrQuery__fields_, 0, 0);

          void t_SpanOrQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanOrQuery), module, "SpanOrQuery", 0);
          }

          void t_SpanOrQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "class_", make_descriptor(SpanOrQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanOrQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanOrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanOrQuery::initializeClass, 1)))
              return NULL;
            return t_SpanOrQuery::wrap_Object(SpanOrQuery(((t_SpanOrQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanOrQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
            SpanOrQuery object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanOrQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanOrQuery_addClause(t_SpanOrQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addClause(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addClause", arg);
            return NULL;
          }

          static PyObject *t_SpanOrQuery_clone(t_SpanOrQuery *self, PyObject *args)
          {
            SpanOrQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanOrQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanOrQuery_extractTerms(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanOrQuery_getSpans(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanOrQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$FloatParser::class$ = NULL;
        jmethodID *FieldCache$FloatParser::mids$ = NULL;
        bool FieldCache$FloatParser::live$ = false;

        jclass FieldCache$FloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$FloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat FieldCache$FloatParser::parseFloat(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_parseFloat_7bc03dd4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$FloatParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$FloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, parseFloat, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$FloatParser, t_FieldCache$FloatParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$FloatParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$FloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$FloatParser), module, "FieldCache$FloatParser", 0);
        }

        void t_FieldCache$FloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "class_", make_descriptor(FieldCache$FloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$FloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$FloatParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$FloatParser::wrap_Object(FieldCache$FloatParser(((t_FieldCache$FloatParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$FloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jfloat result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseFloat", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ByteFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ByteFieldSource::class$ = NULL;
            jmethodID *ByteFieldSource::mids$ = NULL;
            bool ByteFieldSource::live$ = false;

            jclass ByteFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ByteFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_03909c56] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_03909c56, a0.this$, a1.this$)) {}

            ::java::lang::String ByteFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ByteFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ByteFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ByteFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args);

            static PyMethodDef t_ByteFieldSource__methods_[] = {
              DECLARE_METHOD(t_ByteFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteFieldSource, t_ByteFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ByteFieldSource, t_ByteFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ByteFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteFieldSource), module, "ByteFieldSource", 0);
            }

            void t_ByteFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "class_", make_descriptor(ByteFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ByteFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteFieldSource::initializeClass, 1)))
                return NULL;
              return t_ByteFieldSource::wrap_Object(ByteFieldSource(((t_ByteFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ByteFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ByteFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractCollection.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractCollection::class$ = NULL;
    jmethodID *AbstractCollection::mids$ = NULL;
    bool AbstractCollection::live$ = false;

    jclass AbstractCollection::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractCollection");

        mids$ = new jmethodID[max_mid];
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
        mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
        mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractCollection::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean AbstractCollection::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    void AbstractCollection::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractCollection::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean AbstractCollection::containsAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator AbstractCollection::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean AbstractCollection::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jboolean AbstractCollection::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }

    jboolean AbstractCollection::retainAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
    }

    jint AbstractCollection::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray(const JArray< ::java::lang::Object > & a0) const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
    }

    ::java::lang::String AbstractCollection::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data);
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data);
    static PyGetSetDef t_AbstractCollection__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractCollection, empty),
      DECLARE_GET_FIELD(t_AbstractCollection, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractCollection__methods_[] = {
      DECLARE_METHOD(t_AbstractCollection, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, add, METH_O),
      DECLARE_METHOD(t_AbstractCollection, addAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, contains, METH_O),
      DECLARE_METHOD(t_AbstractCollection, containsAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, iterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, remove, METH_O),
      DECLARE_METHOD(t_AbstractCollection, removeAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, retainAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, toArray, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractCollection, t_AbstractCollection, ::java::lang::Object, AbstractCollection, abstract_init, ((PyObject *(*)(t_AbstractCollection *)) get_generic_iterator< t_AbstractCollection >), 0, t_AbstractCollection__fields_, 0, 0);
    PyObject *t_AbstractCollection::wrap_Object(const AbstractCollection& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractCollection::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractCollection::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractCollection), module, "AbstractCollection", 0);
    }

    void t_AbstractCollection::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "class_", make_descriptor(AbstractCollection::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "wrapfn_", make_descriptor(t_AbstractCollection::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractCollection::initializeClass, 1)))
        return NULL;
      return t_AbstractCollection::wrap_Object(AbstractCollection(((t_AbstractCollection *) arg)->object.this$));
    }
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractCollection::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "add", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "addAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.containsAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.iterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.retainAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< ::java::lang::Object > result((jobject) NULL);
          OBJ_CALL(result = self->object.toArray());
          return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        break;
       case 1:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toArray", args);
      return NULL;
    }

    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilterFactory::class$ = NULL;
          jmethodID *CJKBigramFilterFactory::mids$ = NULL;
          bool CJKBigramFilterFactory::live$ = false;

          jclass CJKBigramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilterFactory::CJKBigramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKBigramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilterFactory, t_CJKBigramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKBigramFilterFactory, t_CJKBigramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilterFactory), module, "CJKBigramFilterFactory", 0);
          }

          void t_CJKBigramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "class_", make_descriptor(CJKBigramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilterFactory::wrap_Object(CJKBigramFilterFactory(((t_CJKBigramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKBigramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKBigramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Fragmenter::class$ = NULL;
          jmethodID *Fragmenter::mids$ = NULL;
          bool Fragmenter::live$ = false;

          jclass Fragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Fragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Fragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void Fragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self);
          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args);
          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data);
          static PyGetSetDef t_Fragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_Fragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Fragmenter__methods_[] = {
            DECLARE_METHOD(t_Fragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_Fragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Fragmenter, t_Fragmenter, ::java::lang::Object, Fragmenter, abstract_init, 0, 0, t_Fragmenter__fields_, 0, 0);

          void t_Fragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(Fragmenter), module, "Fragmenter", 0);
          }

          void t_Fragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "class_", make_descriptor(Fragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "wrapfn_", make_descriptor(t_Fragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Fragmenter::initializeClass, 1)))
              return NULL;
            return t_Fragmenter::wrap_Object(Fragmenter(((t_Fragmenter *) arg)->object.this$));
          }
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Fragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits::class$ = NULL;
        jmethodID *Bits::mids$ = NULL;
        bool Bits::live$ = false;
        JArray< Bits > *Bits::EMPTY_ARRAY = NULL;

        jclass Bits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Bits >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/util/Bits;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Bits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg);
        static PyObject *t_Bits_length(t_Bits *self);

        static PyMethodDef t_Bits__methods_[] = {
          DECLARE_METHOD(t_Bits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, get, METH_O),
          DECLARE_METHOD(t_Bits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits, t_Bits, ::java::lang::Object, Bits, abstract_init, 0, 0, 0, 0, 0);

        void t_Bits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits), module, "Bits", 0);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchNoBits", make_descriptor(&PY_TYPE(Bits$MatchNoBits)));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchAllBits", make_descriptor(&PY_TYPE(Bits$MatchAllBits)));
        }

        void t_Bits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "class_", make_descriptor(Bits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "wrapfn_", make_descriptor(t_Bits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Bits::initializeClass);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Bits::EMPTY_ARRAY->this$).wrap(t_Bits::wrap_jobject)));
        }

        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits::initializeClass, 1)))
            return NULL;
          return t_Bits::wrap_Object(Bits(((t_Bits *) arg)->object.this$));
        }
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits_length(t_Bits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$FreezeTail.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$FreezeTail::class$ = NULL;
          jmethodID *Builder$FreezeTail::mids$ = NULL;
          bool Builder$FreezeTail::live$ = false;

          jclass Builder$FreezeTail::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$FreezeTail");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeze_d975a767] = env->getMethodID(cls, "freeze", "([Lorg/apache/lucene/util/fst/Builder$UnCompiledNode;ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$FreezeTail::Builder$FreezeTail() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Builder$FreezeTail::freeze(const JArray< ::org::apache::lucene::util::fst::Builder$UnCompiledNode > & a0, jint a1, const ::org::apache::lucene::util::IntsRef & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_d975a767], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$FreezeTail_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$FreezeTail_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$FreezeTail_of_(t_Builder$FreezeTail *self, PyObject *args);
          static int t_Builder$FreezeTail_init_(t_Builder$FreezeTail *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$FreezeTail_freeze(t_Builder$FreezeTail *self, PyObject *args);
          static PyObject *t_Builder$FreezeTail_get__parameters_(t_Builder$FreezeTail *self, void *data);
          static PyGetSetDef t_Builder$FreezeTail__fields_[] = {
            DECLARE_GET_FIELD(t_Builder$FreezeTail, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$FreezeTail__methods_[] = {
            DECLARE_METHOD(t_Builder$FreezeTail, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$FreezeTail, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$FreezeTail, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$FreezeTail, freeze, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$FreezeTail, t_Builder$FreezeTail, ::java::lang::Object, Builder$FreezeTail, t_Builder$FreezeTail_init_, 0, 0, t_Builder$FreezeTail__fields_, 0, 0);
          PyObject *t_Builder$FreezeTail::wrap_Object(const Builder$FreezeTail& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$FreezeTail::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$FreezeTail *self = (t_Builder$FreezeTail *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$FreezeTail::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$FreezeTail::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$FreezeTail *self = (t_Builder$FreezeTail *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$FreezeTail::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$FreezeTail), module, "Builder$FreezeTail", 0);
          }

          void t_Builder$FreezeTail::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "class_", make_descriptor(Builder$FreezeTail::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "wrapfn_", make_descriptor(t_Builder$FreezeTail::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$FreezeTail_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$FreezeTail::initializeClass, 1)))
              return NULL;
            return t_Builder$FreezeTail::wrap_Object(Builder$FreezeTail(((t_Builder$FreezeTail *) arg)->object.this$));
          }
          static PyObject *t_Builder$FreezeTail_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$FreezeTail::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$FreezeTail_of_(t_Builder$FreezeTail *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$FreezeTail_init_(t_Builder$FreezeTail *self, PyObject *args, PyObject *kwds)
          {
            Builder$FreezeTail object((jobject) NULL);

            INT_CALL(object = Builder$FreezeTail());
            self->object = object;

            return 0;
          }

          static PyObject *t_Builder$FreezeTail_freeze(t_Builder$FreezeTail *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$UnCompiledNode > a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            ::org::apache::lucene::util::IntsRef a2((jobject) NULL);

            if (!parseArgs(args, "[KIk", ::org::apache::lucene::util::fst::Builder$UnCompiledNode::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder$UnCompiledNode::parameters_, &a1, &a2))
            {
              OBJ_CALL(self->object.freeze(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeze", args);
            return NULL;
          }
          static PyObject *t_Builder$FreezeTail_get__parameters_(t_Builder$FreezeTail *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilterFactory::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilterFactory::mids$ = NULL;
          bool ScandinavianNormalizationFilterFactory::live$ = false;

          jclass ScandinavianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c49b1257] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilterFactory::ScandinavianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter ScandinavianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_c49b1257], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilterFactory), module, "ScandinavianNormalizationFilterFactory", 0);
          }

          void t_ScandinavianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilterFactory::wrap_Object(ScandinavianNormalizationFilterFactory(((t_ScandinavianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilterFactory::class$ = NULL;
          jmethodID *FrenchMinimalStemFilterFactory::mids$ = NULL;
          bool FrenchMinimalStemFilterFactory::live$ = false;

          jclass FrenchMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilterFactory::FrenchMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilterFactory), module, "FrenchMinimalStemFilterFactory", 0);
          }

          void t_FrenchMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilterFactory::wrap_Object(FrenchMinimalStemFilterFactory(((t_FrenchMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballPorterFilterFactory::class$ = NULL;
          jmethodID *SnowballPorterFilterFactory::mids$ = NULL;
          bool SnowballPorterFilterFactory::live$ = false;
          ::java::lang::String *SnowballPorterFilterFactory::PROTECTED_TOKENS = NULL;

          jclass SnowballPorterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballPorterFilterFactory::SnowballPorterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter SnowballPorterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void SnowballPorterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args);
          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SnowballPorterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SnowballPorterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballPorterFilterFactory, t_SnowballPorterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SnowballPorterFilterFactory, t_SnowballPorterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SnowballPorterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballPorterFilterFactory), module, "SnowballPorterFilterFactory", 0);
          }

          void t_SnowballPorterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "class_", make_descriptor(SnowballPorterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SnowballPorterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SnowballPorterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*SnowballPorterFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballPorterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SnowballPorterFilterFactory::wrap_Object(SnowballPorterFilterFactory(((t_SnowballPorterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballPorterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SnowballPorterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SnowballPorterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SnowballPorterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectL::class$ = NULL;
          jmethodID *AfterEffectL::mids$ = NULL;
          bool AfterEffectL::live$ = false;

          jclass AfterEffectL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectL::AfterEffectL() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectL::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args);

          static PyMethodDef t_AfterEffectL__methods_[] = {
            DECLARE_METHOD(t_AfterEffectL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectL, t_AfterEffectL, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectL, t_AfterEffectL_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectL::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectL), module, "AfterEffectL", 0);
          }

          void t_AfterEffectL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "class_", make_descriptor(AfterEffectL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectL::initializeClass, 1)))
              return NULL;
            return t_AfterEffectL::wrap_Object(AfterEffectL(((t_AfterEffectL *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectL object((jobject) NULL);

            INT_CALL(object = AfterEffectL());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectL_score(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilterFactory::class$ = NULL;
          jmethodID *ElisionFilterFactory::mids$ = NULL;
          bool ElisionFilterFactory::live$ = false;

          jclass ElisionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_94c1814f] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/util/ElisionFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilterFactory::ElisionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::util::ElisionFilter ElisionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::util::ElisionFilter(env->callObjectMethod(this$, mids$[mid_create_94c1814f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ElisionFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void ElisionFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args);
          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self);
          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data);
          static PyGetSetDef t_ElisionFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ElisionFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ElisionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ElisionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilterFactory, t_ElisionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ElisionFilterFactory, t_ElisionFilterFactory_init_, 0, 0, t_ElisionFilterFactory__fields_, 0, 0);

          void t_ElisionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilterFactory), module, "ElisionFilterFactory", 0);
          }

          void t_ElisionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "class_", make_descriptor(ElisionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ElisionFilterFactory::wrap_Object(ElisionFilterFactory(((t_ElisionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ElisionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ElisionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::ElisionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::util::t_ElisionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ElisionFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues::class$ = NULL;
            jmethodID *DocTermsIndexDocValues::mids$ = NULL;
            bool DocTermsIndexDocValues::live$ = false;

            jclass DocTermsIndexDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_96c8ee4d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_toTerm_97a5258f] = env->getMethodID(cls, "toTerm", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues::DocTermsIndexDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::java::lang::String & a2) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_96c8ee4d, a0.this$, a1.this$, a2.this$)) {}

            jboolean DocTermsIndexDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jboolean DocTermsIndexDocValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
            }

            jboolean DocTermsIndexDocValues::exists(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DocTermsIndexDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DocTermsIndexDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DocTermsIndexDocValues::numOrd() const
            {
              return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
            }

            ::java::lang::Object DocTermsIndexDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jint DocTermsIndexDocValues::ordVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
            }

            ::java::lang::String DocTermsIndexDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DocTermsIndexDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data);
            static PyGetSetDef t_DocTermsIndexDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DocTermsIndexDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DocTermsIndexDocValues__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, bytesVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, exists, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, numOrd, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, ordVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues, t_DocTermsIndexDocValues, ::org::apache::lucene::queries::function::FunctionValues, DocTermsIndexDocValues, t_DocTermsIndexDocValues_init_, 0, 0, t_DocTermsIndexDocValues__fields_, 0, 0);

            void t_DocTermsIndexDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues), module, "DocTermsIndexDocValues", 0);
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "DocTermsIndexException", make_descriptor(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException)));
            }

            void t_DocTermsIndexDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues::wrap_Object(DocTermsIndexDocValues(((t_DocTermsIndexDocValues *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermsIndexDocValues object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermsIndexDocValues(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.bytesVal(a0, a1));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "bytesVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.exists(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "exists", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.numOrd());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "numOrd", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.ordVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "ordVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Longs::class$ = NULL;
        jmethodID *FieldCache$Longs::mids$ = NULL;
        bool FieldCache$Longs::live$ = false;
        FieldCache$Longs *FieldCache$Longs::EMPTY = NULL;

        jclass FieldCache$Longs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Longs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Longs(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Longs;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Longs::FieldCache$Longs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$Longs::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Longs__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Longs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Longs, t_FieldCache$Longs, ::java::lang::Object, FieldCache$Longs, t_FieldCache$Longs_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Longs::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Longs), module, "FieldCache$Longs", 0);
        }

        void t_FieldCache$Longs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "class_", make_descriptor(FieldCache$Longs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Longs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Longs::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Longs::wrap_Object(*FieldCache$Longs::EMPTY)));
        }

        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Longs::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Longs::wrap_Object(FieldCache$Longs(((t_FieldCache$Longs *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Longs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Longs object((jobject) NULL);

          INT_CALL(object = FieldCache$Longs());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *FieldReader::class$ = NULL;
          jmethodID *FieldReader::mids$ = NULL;
          bool FieldReader::live$ = false;

          jclass FieldReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/FieldReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeStats_30b35506] = env->getMethodID(cls, "computeStats", "()Lorg/apache/lucene/codecs/blocktree/Stats;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
              mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
              mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::blocktree::Stats FieldReader::computeStats() const
          {
            return ::org::apache::lucene::codecs::blocktree::Stats(env->callObjectMethod(this$, mids$[mid_computeStats_30b35506]));
          }

          ::java::util::Comparator FieldReader::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint FieldReader::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMax() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMin() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
          }

          jlong FieldReader::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
          }

          jlong FieldReader::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
          }

          jboolean FieldReader::hasFreqs() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
          }

          jboolean FieldReader::hasOffsets() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
          }

          jboolean FieldReader::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          jboolean FieldReader::hasPositions() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
          }

          jlong FieldReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong FieldReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_computeStats(t_FieldReader *self);
          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self);
          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data);
          static PyGetSetDef t_FieldReader__fields_[] = {
            DECLARE_GET_FIELD(t_FieldReader, comparator),
            DECLARE_GET_FIELD(t_FieldReader, docCount),
            DECLARE_GET_FIELD(t_FieldReader, max),
            DECLARE_GET_FIELD(t_FieldReader, min),
            DECLARE_GET_FIELD(t_FieldReader, sumDocFreq),
            DECLARE_GET_FIELD(t_FieldReader, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldReader__methods_[] = {
            DECLARE_METHOD(t_FieldReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, computeStats, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMax, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMin, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumDocFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumTotalTermFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasFreqs, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasOffsets, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPayloads, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPositions, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, intersect, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldReader, t_FieldReader, ::org::apache::lucene::index::Terms, FieldReader, abstract_init, 0, 0, t_FieldReader__fields_, 0, 0);

          void t_FieldReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldReader), module, "FieldReader", 0);
          }

          void t_FieldReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "class_", make_descriptor(FieldReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "wrapfn_", make_descriptor(t_FieldReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldReader::initializeClass, 1)))
              return NULL;
            return t_FieldReader::wrap_Object(FieldReader(((t_FieldReader *) arg)->object.this$));
          }
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldReader_computeStats(t_FieldReader *self)
          {
            ::org::apache::lucene::codecs::blocktree::Stats result((jobject) NULL);
            OBJ_CALL(result = self->object.computeStats());
            return ::org::apache::lucene::codecs::blocktree::t_Stats::wrap_Object(result);
          }

          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMax());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMax", args, 2);
          }

          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMin());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMin", args, 2);
          }

          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumDocFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumDocFreq", args, 2);
          }

          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumTotalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
          }

          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasFreqs());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasFreqs", args, 2);
          }

          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasOffsets());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasOffsets", args, 2);
          }

          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPayloads());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPayloads", args, 2);
          }

          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPositions());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPositions", args, 2);
          }

          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intersect(a0, a1));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.iterator(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocs::class$ = NULL;
        jmethodID *TopDocs::mids$ = NULL;
        jfieldID *TopDocs::fids$ = NULL;
        bool TopDocs::live$ = false;

        jclass TopDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63c9a885] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;F)V");
            mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
            mids$[mid_merge_732b94b7] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;I[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_merge_15bf4771] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;II[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setMaxScore_06298cab] = env->getMethodID(cls, "setMaxScore", "(F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopDocs::TopDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_63c9a885, a0, a1.this$, a2)) {}

        jfloat TopDocs::getMaxScore() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, const JArray< TopDocs > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_732b94b7], a0.this$, a1, a2.this$));
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, const JArray< TopDocs > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_15bf4771], a0.this$, a1, a2, a3.this$));
        }

        void TopDocs::setMaxScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxScore_06298cab], a0);
        }

        JArray< ::org::apache::lucene::search::ScoreDoc > TopDocs::_get_scoreDocs() const
        {
          return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
        }

        void TopDocs::_set_scoreDocs(const JArray< ::org::apache::lucene::search::ScoreDoc > & a0) const
        {
          env->setObjectField(this$, fids$[fid_scoreDocs], a0.this$);
        }

        jint TopDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }

        void TopDocs::_set_totalHits(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totalHits], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self);
        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg);
        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data);
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data);
        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data);
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data);

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data);
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data);
        static PyGetSetDef t_TopDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopDocs, scoreDocs),
          DECLARE_GETSET_FIELD(t_TopDocs, totalHits),
          DECLARE_GETSET_FIELD(t_TopDocs, maxScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocs__methods_[] = {
          DECLARE_METHOD(t_TopDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, getMaxScore, METH_NOARGS),
          DECLARE_METHOD(t_TopDocs, merge, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, setMaxScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocs, t_TopDocs, ::java::lang::Object, TopDocs, t_TopDocs_init_, 0, 0, t_TopDocs__fields_, 0, 0);

        void t_TopDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocs), module, "TopDocs", 0);
        }

        void t_TopDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "class_", make_descriptor(TopDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "wrapfn_", make_descriptor(t_TopDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocs::initializeClass, 1)))
            return NULL;
          return t_TopDocs::wrap_Object(TopDocs(((t_TopDocs *) arg)->object.this$));
        }
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          jfloat a2;
          TopDocs object((jobject) NULL);

          if (!parseArgs(args, "I[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TopDocs(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxScore());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              JArray< TopDocs > a2((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2));
                return t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< TopDocs > a3((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kII[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2, a3));
                return t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "merge", args);
          return NULL;
        }

        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxScore", arg);
          return NULL;
        }

        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scoreDocs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
        }
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::ScoreDoc::initializeClass, &value))
          {
            INT_CALL(self->object._set_scoreDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "scoreDocs", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totalHits(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalHits", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxScore());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderUtil::class$ = NULL;
        jmethodID *ReaderUtil::mids$ = NULL;
        bool ReaderUtil::live$ = false;

        jclass ReaderUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTopLevelContext_4ecc3919] = env->getStaticMethodID(cls, "getTopLevelContext", "(Lorg/apache/lucene/index/IndexReaderContext;)Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_subIndex_dd2db701] = env->getStaticMethodID(cls, "subIndex", "(I[I)I");
            mids$[mid_subIndex_f2e17962] = env->getStaticMethodID(cls, "subIndex", "(ILjava/util/List;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexReaderContext ReaderUtil::getTopLevelContext(const ::org::apache::lucene::index::IndexReaderContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::IndexReaderContext(env->callStaticObjectMethod(cls, mids$[mid_getTopLevelContext_4ecc3919], a0.this$));
        }

        jint ReaderUtil::subIndex(jint a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_dd2db701], a0, a1.this$);
        }

        jint ReaderUtil::subIndex(jint a0, const ::java::util::List & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_f2e17962], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ReaderUtil__methods_[] = {
          DECLARE_METHOD(t_ReaderUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, getTopLevelContext, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, subIndex, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderUtil, t_ReaderUtil, ::java::lang::Object, ReaderUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ReaderUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderUtil), module, "ReaderUtil", 0);
        }

        void t_ReaderUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "class_", make_descriptor(ReaderUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "wrapfn_", make_descriptor(t_ReaderUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderUtil::initializeClass, 1)))
            return NULL;
          return t_ReaderUtil::wrap_Object(ReaderUtil(((t_ReaderUtil *) arg)->object.this$));
        }
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::getTopLevelContext(a0));
            return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTopLevelContext", arg);
          return NULL;
        }

        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              JArray< jint > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "I[I", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jint a0;
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              jint result;

              if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "subIndex", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilter::class$ = NULL;
          jmethodID *CommonGramsFilter::mids$ = NULL;
          bool CommonGramsFilter::live$ = false;
          ::java::lang::String *CommonGramsFilter::GRAM_TYPE = NULL;

          jclass CommonGramsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GRAM_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "GRAM_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilter::CommonGramsFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          jboolean CommonGramsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CommonGramsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args);
          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args);

          static PyMethodDef t_CommonGramsFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilter, t_CommonGramsFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsFilter, t_CommonGramsFilter_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilter), module, "CommonGramsFilter", 0);
          }

          void t_CommonGramsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "class_", make_descriptor(CommonGramsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CommonGramsFilter).tp_dict, "GRAM_TYPE", make_descriptor(j2p(*CommonGramsFilter::GRAM_TYPE)));
          }

          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilter::wrap_Object(CommonGramsFilter(((t_CommonGramsFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
            PyTypeObject **p2;
            CommonGramsFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = CommonGramsFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache::class$ = NULL;
        jmethodID *FieldCache::mids$ = NULL;
        bool FieldCache::live$ = false;
        FieldCache *FieldCache::DEFAULT = NULL;
        ::org::apache::lucene::search::FieldCache$ByteParser *FieldCache::DEFAULT_BYTE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::DEFAULT_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::DEFAULT_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::DEFAULT_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::DEFAULT_LONG_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$ShortParser *FieldCache::DEFAULT_SHORT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::NUMERIC_UTILS_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::NUMERIC_UTILS_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::NUMERIC_UTILS_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::NUMERIC_UTILS_LONG_PARSER = NULL;

        jclass FieldCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBytes_5b2430b0] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getBytes_63e2679a] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getDocTermOrds_1498712e] = env->getMethodID(cls, "getDocTermOrds", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getDoubles_1da3b06b] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getDoubles_081c1232] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getFloats_d56c7f61] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getFloats_16f5ff86] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getInfoStream_00215d9e] = env->getMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getInts_09885a02] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getInts_428a6914] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getLongs_4d412004] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getLongs_ef1b546a] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getShorts_2d8fda45] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getShorts_cf5b3ec2] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getTerms_d17729c6] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTerms_4f27b8ab] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;ZF)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTermsIndex_e27a1341] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getTermsIndex_774ad832] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;F)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_purgeAllCaches_54c6a166] = env->getMethodID(cls, "purgeAllCaches", "()V");
            mids$[mid_purgeByCacheKey_290588ee] = env->getMethodID(cls, "purgeByCacheKey", "(Ljava/lang/Object;)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new FieldCache(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/search/FieldCache;"));
            DEFAULT_BYTE_PARSER = new ::org::apache::lucene::search::FieldCache$ByteParser(env->getStaticObjectField(cls, "DEFAULT_BYTE_PARSER", "Lorg/apache/lucene/search/FieldCache$ByteParser;"));
            DEFAULT_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "DEFAULT_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            DEFAULT_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "DEFAULT_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            DEFAULT_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "DEFAULT_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            DEFAULT_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "DEFAULT_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            DEFAULT_SHORT_PARSER = new ::org::apache::lucene::search::FieldCache$ShortParser(env->getStaticObjectField(cls, "DEFAULT_SHORT_PARSER", "Lorg/apache/lucene/search/FieldCache$ShortParser;"));
            NUMERIC_UTILS_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            NUMERIC_UTILS_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            NUMERIC_UTILS_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            NUMERIC_UTILS_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_5b2430b0], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ByteParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_63e2679a], a0.this$, a1.this$, a2.this$, a3));
        }

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCache::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::org::apache::lucene::index::SortedSetDocValues FieldCache::getDocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocTermOrds_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits FieldCache::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_1da3b06b], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$DoubleParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_081c1232], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_d56c7f61], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$FloatParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_16f5ff86], a0.this$, a1.this$, a2.this$, a3));
        }

        ::java::io::PrintStream FieldCache::getInfoStream() const
        {
          return ::java::io::PrintStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_00215d9e]));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_09885a02], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$IntParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_428a6914], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_4d412004], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$LongParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_ef1b546a], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_2d8fda45], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ShortParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_cf5b3ec2], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_d17729c6], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2, jfloat a3) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_4f27b8ab], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_774ad832], a0.this$, a1.this$, a2));
        }

        void FieldCache::purgeAllCaches() const
        {
          env->callVoidMethod(this$, mids$[mid_purgeAllCaches_54c6a166]);
        }

        void FieldCache::purgeByCacheKey(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_purgeByCacheKey_290588ee], a0.this$);
        }

        void FieldCache::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self);
        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self);
        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self);
        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data);
        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data);
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data);
        static PyGetSetDef t_FieldCache__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache, cacheEntries),
          DECLARE_GETSET_FIELD(t_FieldCache, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache__methods_[] = {
          DECLARE_METHOD(t_FieldCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, getBytes, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getDocTermOrds, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDoubles, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getFloats, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getInts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getLongs, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getShorts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTerms, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTermsIndex, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, purgeAllCaches, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, purgeByCacheKey, METH_O),
          DECLARE_METHOD(t_FieldCache, setInfoStream, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache, t_FieldCache, ::java::lang::Object, FieldCache, abstract_init, 0, 0, t_FieldCache__fields_, 0, 0);

        void t_FieldCache::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache), module, "FieldCache", 0);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CacheEntry", make_descriptor(&PY_TYPE(FieldCache$CacheEntry)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DoubleParser", make_descriptor(&PY_TYPE(FieldCache$DoubleParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "LongParser", make_descriptor(&PY_TYPE(FieldCache$LongParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "FloatParser", make_descriptor(&PY_TYPE(FieldCache$FloatParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "IntParser", make_descriptor(&PY_TYPE(FieldCache$IntParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ShortParser", make_descriptor(&PY_TYPE(FieldCache$ShortParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ByteParser", make_descriptor(&PY_TYPE(FieldCache$ByteParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Parser", make_descriptor(&PY_TYPE(FieldCache$Parser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CreationPlaceholder", make_descriptor(&PY_TYPE(FieldCache$CreationPlaceholder)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Doubles", make_descriptor(&PY_TYPE(FieldCache$Doubles)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Floats", make_descriptor(&PY_TYPE(FieldCache$Floats)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Longs", make_descriptor(&PY_TYPE(FieldCache$Longs)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Ints", make_descriptor(&PY_TYPE(FieldCache$Ints)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Shorts", make_descriptor(&PY_TYPE(FieldCache$Shorts)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Bytes", make_descriptor(&PY_TYPE(FieldCache$Bytes)));
        }

        void t_FieldCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "class_", make_descriptor(FieldCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "wrapfn_", make_descriptor(t_FieldCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT", make_descriptor(t_FieldCache::wrap_Object(*FieldCache::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_BYTE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ByteParser::wrap_Object(*FieldCache::DEFAULT_BYTE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::DEFAULT_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::DEFAULT_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::DEFAULT_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::DEFAULT_LONG_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_SHORT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ShortParser::wrap_Object(*FieldCache::DEFAULT_SHORT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::NUMERIC_UTILS_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::NUMERIC_UTILS_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::NUMERIC_UTILS_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::NUMERIC_UTILS_LONG_PARSER)));
        }

        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache::initializeClass, 1)))
            return NULL;
          return t_FieldCache::wrap_Object(FieldCache(((t_FieldCache *) arg)->object.this$));
        }
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getBytes", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocTermOrds(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocTermOrds", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getDoubles", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFloats", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getInts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getLongs", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getShorts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              jfloat a3;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTerms", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1, a2));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTermsIndex", args);
          return NULL;
        }

        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self)
        {
          OBJ_CALL(self->object.purgeAllCaches());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.purgeByCacheKey(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "purgeByCacheKey", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonDefaultSimilarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonDefaultSimilarity::class$ = NULL;
          jmethodID *PythonDefaultSimilarity::mids$ = NULL;
          bool PythonDefaultSimilarity::live$ = false;

          jclass PythonDefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonDefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonDefaultSimilarity::PythonDefaultSimilarity() : ::org::apache::lucene::search::similarities::DefaultSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PythonDefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_coord_d8d154b6], a0, a1);
          }

          void PythonDefaultSimilarity::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jfloat PythonDefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation PythonDefaultSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::TFIDFSimilarity::mids$[::org::apache::lucene::search::similarities::TFIDFSimilarity::mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat PythonDefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_lengthNorm_6ff84e02], a0.this$);
          }

          jlong PythonDefaultSimilarity::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonDefaultSimilarity::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }

          jfloat PythonDefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_queryNorm_06298cbb], a0);
          }

          jfloat PythonDefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat PythonDefaultSimilarity::tf(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self);
          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args);
          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1);
          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0);
          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj);
          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0);
          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data);
          static PyGetSetDef t_PythonDefaultSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_PythonDefaultSimilarity, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonDefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_PythonDefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, pythonExtension, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, tf, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonDefaultSimilarity, t_PythonDefaultSimilarity, ::org::apache::lucene::search::similarities::DefaultSimilarity, PythonDefaultSimilarity, t_PythonDefaultSimilarity_init_, 0, 0, t_PythonDefaultSimilarity__fields_, 0, 0);

          void t_PythonDefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonDefaultSimilarity), module, "PythonDefaultSimilarity", 1);
          }

          void t_PythonDefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "class_", make_descriptor(PythonDefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_PythonDefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonDefaultSimilarity::initializeClass);
            JNINativeMethod methods[] = {
              { "coord", "(II)F", (void *) t_PythonDefaultSimilarity_coord0 },
              { "idf", "(JJ)F", (void *) t_PythonDefaultSimilarity_idf1 },
              { "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;", (void *) t_PythonDefaultSimilarity_idfExplain2 },
              { "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F", (void *) t_PythonDefaultSimilarity_lengthNorm3 },
              { "pythonDecRef", "()V", (void *) t_PythonDefaultSimilarity_pythonDecRef4 },
              { "queryNorm", "(F)F", (void *) t_PythonDefaultSimilarity_queryNorm5 },
              { "sloppyFreq", "(I)F", (void *) t_PythonDefaultSimilarity_sloppyFreq6 },
              { "tf", "(F)F", (void *) t_PythonDefaultSimilarity_tf7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonDefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_PythonDefaultSimilarity::wrap_Object(PythonDefaultSimilarity(((t_PythonDefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonDefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            PythonDefaultSimilarity object((jobject) NULL);

            INT_CALL(object = PythonDefaultSimilarity());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.idfExplain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idfExplain", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "coord", "ii", (int) a0, (int) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("coord", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "idf", "LL", (long long) a0, (long long) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("idf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Explanation value((jobject) NULL);
            PyObject *o0 = ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(::org::apache::lucene::search::CollectionStatistics(a0));
            PyObject *o1 = JArray<jobject>(a1).wrap(::org::apache::lucene::search::t_TermStatistics::wrap_jobject);
            PyObject *result = PyObject_CallMethod(obj, "idfExplain", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Explanation::initializeClass, &value))
            {
              throwTypeError("idfExplain", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *o0 = ::org::apache::lucene::index::t_FieldInvertState::wrap_Object(::org::apache::lucene::index::FieldInvertState(a0));
            PyObject *result = PyObject_CallMethod(obj, "lengthNorm", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("lengthNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "queryNorm", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("queryNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "sloppyFreq", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("sloppyFreq", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "tf", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("tf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchNoDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchNoDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchNoDocsQueryNodeBuilder::live$ = false;

              jclass MatchNoDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNodeBuilder::MatchNoDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery MatchNoDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchNoDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder, ::java::lang::Object, MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNodeBuilder), module, "MatchNoDocsQueryNodeBuilder", 0);
              }

              void t_MatchNoDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNodeBuilder::wrap_Object(MatchNoDocsQueryNodeBuilder(((t_MatchNoDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSetIterator::class$ = NULL;
        jmethodID *DocIdSetIterator::mids$ = NULL;
        bool DocIdSetIterator::live$ = false;
        jint DocIdSetIterator::NO_MORE_DOCS = (jint) 0;

        jclass DocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_empty_dc23660c] = env->getStaticMethodID(cls, "empty", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_slowAdvance_39c7bd23] = env->getMethodID(cls, "slowAdvance", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_DOCS = env->getStaticIntField(cls, "NO_MORE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetIterator::DocIdSetIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint DocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong DocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint DocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        DocIdSetIterator DocIdSetIterator::empty()
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_empty_dc23660c]));
        }

        jint DocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg);
        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type);
        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self);

        static PyMethodDef t_DocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_DocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, advance, METH_O),
          DECLARE_METHOD(t_DocIdSetIterator, cost, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, docID, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, empty, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, nextDoc, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSetIterator, t_DocIdSetIterator, ::java::lang::Object, DocIdSetIterator, t_DocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_DocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetIterator), module, "DocIdSetIterator", 0);
        }

        void t_DocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "class_", make_descriptor(DocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_DocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSetIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSetIterator).tp_dict, "NO_MORE_DOCS", make_descriptor(DocIdSetIterator::NO_MORE_DOCS));
        }

        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_DocIdSetIterator::wrap_Object(DocIdSetIterator(((t_DocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          DocIdSetIterator object((jobject) NULL);

          INT_CALL(object = DocIdSetIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advance", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docID());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type)
        {
          DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::empty());
          return t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextDoc());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericRangeQueryNode::class$ = NULL;
              jmethodID *NumericRangeQueryNode::mids$ = NULL;
              jfieldID *NumericRangeQueryNode::fids$ = NULL;
              bool NumericRangeQueryNode::live$ = false;

              jclass NumericRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b6ec7fba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_getNumericConfig_4e1c9c59] = env->getMethodID(cls, "getNumericConfig", "()Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");
                  mids$[mid_setBounds_b6ec7fba] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_numericConfig] = env->getFieldID(cls, "numericConfig", "Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNode::NumericRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b6ec7fba, a0.this$, a1.this$, a2, a3, a4.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::getNumericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->callObjectMethod(this$, mids$[mid_getNumericConfig_4e1c9c59]));
              }

              void NumericRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b6ec7fba], a0.this$, a1.this$, a2, a3, a4.this$);
              }

              ::java::lang::String NumericRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::_get_numericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->getObjectField(this$, fids$[fid_numericConfig]));
              }

              void NumericRangeQueryNode::_set_numericConfig(const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a0) const
              {
                env->setObjectField(this$, fids$[fid_numericConfig], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args);
              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self);
              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args);
              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args);

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data);
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data);
              static PyGetSetDef t_NumericRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, numericConfig),
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, getNumericConfig, METH_NOARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNode, t_NumericRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, NumericRangeQueryNode, t_NumericRangeQueryNode_init_, 0, 0, t_NumericRangeQueryNode__fields_, 0, 0);
              PyObject *t_NumericRangeQueryNode::wrap_Object(const NumericRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_NumericRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_NumericRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNode), module, "NumericRangeQueryNode", 0);
              }

              void t_NumericRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "class_", make_descriptor(NumericRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNode::wrap_Object(NumericRangeQueryNode(((t_NumericRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);
                NumericRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NumericRangeQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::standard::nodes::PY_TYPE(NumericQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(result);
              }

              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "setBounds", args, 2);
              }

              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$DocMap::class$ = NULL;
        jmethodID *MergeState$DocMap::mids$ = NULL;
        bool MergeState$DocMap::live$ = false;

        jclass MergeState$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_a4668aa1] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/MergeState$DocMap;");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$DocMap MergeState$DocMap::build(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeState$DocMap(env->callStaticObjectMethod(cls, mids$[mid_build_a4668aa1], a0.this$));
        }

        jint MergeState$DocMap::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }

        jboolean MergeState$DocMap::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint MergeState$DocMap::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint MergeState$DocMap::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint MergeState$DocMap::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg);
        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self);

        static PyMethodDef t_MergeState$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergeState$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, build, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, get, METH_O),
          DECLARE_METHOD(t_MergeState$DocMap, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$DocMap, t_MergeState$DocMap, ::java::lang::Object, MergeState$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeState$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$DocMap), module, "MergeState$DocMap", 0);
        }

        void t_MergeState$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "class_", make_descriptor(MergeState$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergeState$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergeState$DocMap::wrap_Object(MergeState$DocMap(((t_MergeState$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          MergeState$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeState$DocMap::build(a0));
            return t_MergeState$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/AbstractEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *AbstractEncoder::class$ = NULL;
          jmethodID *AbstractEncoder::mids$ = NULL;
          bool AbstractEncoder::live$ = false;

          jclass AbstractEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/AbstractEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractEncoder::AbstractEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef AbstractEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg);

          static PyMethodDef t_AbstractEncoder__methods_[] = {
            DECLARE_METHOD(t_AbstractEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, encode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractEncoder, t_AbstractEncoder, ::java::lang::Object, AbstractEncoder, t_AbstractEncoder_init_, 0, 0, 0, 0, 0);

          void t_AbstractEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractEncoder), module, "AbstractEncoder", 0);
          }

          void t_AbstractEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "class_", make_descriptor(AbstractEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "wrapfn_", make_descriptor(t_AbstractEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractEncoder::initializeClass, 1)))
              return NULL;
            return t_AbstractEncoder::wrap_Object(AbstractEncoder(((t_AbstractEncoder *) arg)->object.this$));
          }
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds)
          {
            AbstractEncoder object((jobject) NULL);

            INT_CALL(object = AbstractEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg)
          {
            JArray< jchar > a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "[C", &a0))
            {
              OBJ_CALL(result = self->object.encode(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilterFactory::class$ = NULL;
          jmethodID *ApostropheFilterFactory::mids$ = NULL;
          bool ApostropheFilterFactory::live$ = false;

          jclass ApostropheFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilterFactory::ApostropheFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ApostropheFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args);

          static PyMethodDef t_ApostropheFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilterFactory, t_ApostropheFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ApostropheFilterFactory, t_ApostropheFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilterFactory), module, "ApostropheFilterFactory", 0);
          }

          void t_ApostropheFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "class_", make_descriptor(ApostropheFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilterFactory::wrap_Object(ApostropheFilterFactory(((t_ApostropheFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ApostropheFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ApostropheFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizer::class$ = NULL;
          jmethodID *IndicNormalizer::mids$ = NULL;
          bool IndicNormalizer::live$ = false;

          jclass IndicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizer::IndicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args);

          static PyMethodDef t_IndicNormalizer__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizer, t_IndicNormalizer, ::java::lang::Object, IndicNormalizer, t_IndicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizer), module, "IndicNormalizer", 0);
          }

          void t_IndicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "class_", make_descriptor(IndicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizer::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizer::wrap_Object(IndicNormalizer(((t_IndicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            IndicNormalizer object((jobject) NULL);

            INT_CALL(object = IndicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/BoostedQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *BoostedQuery::class$ = NULL;
          jmethodID *BoostedQuery::mids$ = NULL;
          bool BoostedQuery::live$ = false;

          jclass BoostedQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/BoostedQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59d41d93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BoostedQuery::BoostedQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_59d41d93, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight BoostedQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean BoostedQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void BoostedQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::Query BoostedQuery::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          ::org::apache::lucene::queries::function::ValueSource BoostedQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint BoostedQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query BoostedQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String BoostedQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data);
          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data);
          static PyGetSetDef t_BoostedQuery__fields_[] = {
            DECLARE_GET_FIELD(t_BoostedQuery, query),
            DECLARE_GET_FIELD(t_BoostedQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BoostedQuery__methods_[] = {
            DECLARE_METHOD(t_BoostedQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoostedQuery, t_BoostedQuery, ::org::apache::lucene::search::Query, BoostedQuery, t_BoostedQuery_init_, 0, 0, t_BoostedQuery__fields_, 0, 0);

          void t_BoostedQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(BoostedQuery), module, "BoostedQuery", 0);
          }

          void t_BoostedQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "class_", make_descriptor(BoostedQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostedQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoostedQuery::initializeClass, 1)))
              return NULL;
            return t_BoostedQuery::wrap_Object(BoostedQuery(((t_BoostedQuery *) arg)->object.this$));
          }
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoostedQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            BoostedQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BoostedQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStreamToAutomaton.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStreamToAutomaton::class$ = NULL;
        jmethodID *TokenStreamToAutomaton::mids$ = NULL;
        bool TokenStreamToAutomaton::live$ = false;
        jint TokenStreamToAutomaton::HOLE = (jint) 0;
        jint TokenStreamToAutomaton::POS_SEP = (jint) 0;

        jclass TokenStreamToAutomaton::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStreamToAutomaton");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setPreservePositionIncrements_bb0c767f] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_setUnicodeArcs_bb0c767f] = env->getMethodID(cls, "setUnicodeArcs", "(Z)V");
            mids$[mid_toAutomaton_6e59061f] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_changeToken_21e43cb7] = env->getMethodID(cls, "changeToken", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            HOLE = env->getStaticIntField(cls, "HOLE");
            POS_SEP = env->getStaticIntField(cls, "POS_SEP");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToAutomaton::TokenStreamToAutomaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TokenStreamToAutomaton::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_bb0c767f], a0);
        }

        void TokenStreamToAutomaton::setUnicodeArcs(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUnicodeArcs_bb0c767f], a0);
        }

        ::org::apache::lucene::util::automaton::Automaton TokenStreamToAutomaton::toAutomaton(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_6e59061f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg);
        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToAutomaton__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, preservePositionIncrements),
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, unicodeArcs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToAutomaton__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToAutomaton, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setUnicodeArcs, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, toAutomaton, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStreamToAutomaton, t_TokenStreamToAutomaton, ::java::lang::Object, TokenStreamToAutomaton, t_TokenStreamToAutomaton_init_, 0, 0, t_TokenStreamToAutomaton__fields_, 0, 0);

        void t_TokenStreamToAutomaton::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToAutomaton), module, "TokenStreamToAutomaton", 0);
        }

        void t_TokenStreamToAutomaton::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "class_", make_descriptor(TokenStreamToAutomaton::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamToAutomaton::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStreamToAutomaton::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "HOLE", make_descriptor(TokenStreamToAutomaton::HOLE));
          PyDict_SetItemString(PY_TYPE(TokenStreamToAutomaton).tp_dict, "POS_SEP", make_descriptor(TokenStreamToAutomaton::POS_SEP));
        }

        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToAutomaton::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToAutomaton::wrap_Object(TokenStreamToAutomaton(((t_TokenStreamToAutomaton *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToAutomaton::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToAutomaton object((jobject) NULL);

          INT_CALL(object = TokenStreamToAutomaton());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUnicodeArcs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUnicodeArcs", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
          return NULL;
        }

        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }

        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUnicodeArcs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "unicodeArcs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoEncoder::class$ = NULL;
          jmethodID *EliasFanoEncoder::mids$ = NULL;
          bool EliasFanoEncoder::live$ = false;
          jlong EliasFanoEncoder::DEFAULT_INDEX_INTERVAL = (jlong) 0;

          jclass EliasFanoEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7e12ca4] = env->getMethodID(cls, "<init>", "(JJ)V");
              mids$[mid_init$_16913989] = env->getMethodID(cls, "<init>", "(JJJ)V");
              mids$[mid_encodeNext_0ee6df2f] = env->getMethodID(cls, "encodeNext", "(J)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDecoder_38e2d30d] = env->getMethodID(cls, "getDecoder", "()Lorg/apache/lucene/util/packed/EliasFanoDecoder;");
              mids$[mid_getIndexBits_dab10e76] = env->getMethodID(cls, "getIndexBits", "()[J");
              mids$[mid_getLowerBits_dab10e76] = env->getMethodID(cls, "getLowerBits", "()[J");
              mids$[mid_getUpperBits_dab10e76] = env->getMethodID(cls, "getUpperBits", "()[J");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_INDEX_INTERVAL = env->getStaticLongField(cls, "DEFAULT_INDEX_INTERVAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a7e12ca4, a0, a1)) {}

          EliasFanoEncoder::EliasFanoEncoder(jlong a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_16913989, a0, a1, a2)) {}

          void EliasFanoEncoder::encodeNext(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeNext_0ee6df2f], a0);
          }

          jboolean EliasFanoEncoder::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::packed::EliasFanoDecoder EliasFanoEncoder::getDecoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoDecoder(env->callObjectMethod(this$, mids$[mid_getDecoder_38e2d30d]));
          }

          JArray< jlong > EliasFanoEncoder::getIndexBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getIndexBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getLowerBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getLowerBits_dab10e76]));
          }

          JArray< jlong > EliasFanoEncoder::getUpperBits() const
          {
            return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getUpperBits_dab10e76]));
          }

          jint EliasFanoEncoder::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong EliasFanoEncoder::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoEncoder::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }

          ::java::lang::String EliasFanoEncoder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg);
          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self);
          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args);
          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data);
          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data);
          static PyGetSetDef t_EliasFanoEncoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoEncoder, decoder),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, indexBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, lowerBits),
            DECLARE_GET_FIELD(t_EliasFanoEncoder, upperBits),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoEncoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, encodeNext, METH_O),
            DECLARE_METHOD(t_EliasFanoEncoder, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getDecoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getIndexBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getLowerBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, getUpperBits, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoEncoder, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoEncoder, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoEncoder, t_EliasFanoEncoder, ::java::lang::Object, EliasFanoEncoder, t_EliasFanoEncoder_init_, 0, 0, t_EliasFanoEncoder__fields_, 0, 0);

          void t_EliasFanoEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoEncoder), module, "EliasFanoEncoder", 0);
          }

          void t_EliasFanoEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "class_", make_descriptor(EliasFanoEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoEncoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoEncoder).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(EliasFanoEncoder::DEFAULT_INDEX_INTERVAL));
          }

          static PyObject *t_EliasFanoEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoEncoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoEncoder::wrap_Object(EliasFanoEncoder(((t_EliasFanoEncoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoEncoder_init_(t_EliasFanoEncoder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jlong a0;
                jlong a1;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJ", &a0, &a1))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jlong a0;
                jlong a1;
                jlong a2;
                EliasFanoEncoder object((jobject) NULL);

                if (!parseArgs(args, "JJJ", &a0, &a1, &a2))
                {
                  INT_CALL(object = EliasFanoEncoder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoEncoder_encodeNext(t_EliasFanoEncoder *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.encodeNext(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeNext", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_equals(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_getDecoder(t_EliasFanoEncoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoEncoder_getIndexBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getLowerBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_getUpperBits(t_EliasFanoEncoder *self)
          {
            JArray< jlong > result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperBits());
            return result.wrap();
          }

          static PyObject *t_EliasFanoEncoder_hashCode(t_EliasFanoEncoder *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_ramBytesUsed(t_EliasFanoEncoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoEncoder_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoEncoder::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoEncoder_toString(t_EliasFanoEncoder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(EliasFanoEncoder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_EliasFanoEncoder_get__decoder(t_EliasFanoEncoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoDecoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getDecoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoDecoder::wrap_Object(value);
          }

          static PyObject *t_EliasFanoEncoder_get__indexBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__lowerBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerBits());
            return value.wrap();
          }

          static PyObject *t_EliasFanoEncoder_get__upperBits(t_EliasFanoEncoder *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperBits());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Iterable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader::class$ = NULL;
        jmethodID *NamedSPILoader::mids$ = NULL;
        bool NamedSPILoader::live$ = false;

        jclass NamedSPILoader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
            mids$[mid_init$_6deee997] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)V");
            mids$[mid_availableServices_03e99967] = env->getMethodID(cls, "availableServices", "()Ljava/util/Set;");
            mids$[mid_checkServiceName_5fdc3f48] = env->getStaticMethodID(cls, "checkServiceName", "(Ljava/lang/String;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lookup_f2235407] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;)Lorg/apache/lucene/util/NamedSPILoader$NamedSPI;");
            mids$[mid_reload_9110048d] = env->getMethodID(cls, "reload", "(Ljava/lang/ClassLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6deee997, a0.this$, a1.this$)) {}

        ::java::util::Set NamedSPILoader::availableServices() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_availableServices_03e99967]));
        }

        void NamedSPILoader::checkServiceName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkServiceName_5fdc3f48], a0.this$);
        }

        ::java::util::Iterator NamedSPILoader::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::util::NamedSPILoader$NamedSPI NamedSPILoader::lookup(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::NamedSPILoader$NamedSPI(env->callObjectMethod(this$, mids$[mid_lookup_f2235407], a0.this$));
        }

        void NamedSPILoader::reload(const ::java::lang::ClassLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reload_9110048d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args);
        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data);
        static PyGetSetDef t_NamedSPILoader__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader, availableServices, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, checkServiceName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, iterator, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, lookup, METH_O),
          DECLARE_METHOD(t_NamedSPILoader, reload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader, t_NamedSPILoader, ::java::lang::Object, NamedSPILoader, t_NamedSPILoader_init_, ((PyObject *(*)(t_NamedSPILoader *)) get_generic_iterator< t_NamedSPILoader >), 0, t_NamedSPILoader__fields_, 0, 0);
        PyObject *t_NamedSPILoader::wrap_Object(const NamedSPILoader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader), module, "NamedSPILoader", 0);
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "NamedSPI", make_descriptor(&PY_TYPE(NamedSPILoader$NamedSPI)));
        }

        void t_NamedSPILoader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "class_", make_descriptor(NamedSPILoader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader::wrap_Object(NamedSPILoader(((t_NamedSPILoader *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                INT_CALL(object = NamedSPILoader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                INT_CALL(object = NamedSPILoader(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.availableServices());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::NamedSPILoader::checkServiceName(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkServiceName", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::NamedSPILoader$NamedSPI result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.lookup(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_NamedSPILoader$NamedSPI::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookup", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reload", arg);
          return NULL;
        }
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *VerifyingLockFactory::class$ = NULL;
        jmethodID *VerifyingLockFactory::mids$ = NULL;
        bool VerifyingLockFactory::live$ = false;

        jclass VerifyingLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/VerifyingLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_118c9b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;Ljava/io/InputStream;Ljava/io/OutputStream;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VerifyingLockFactory::VerifyingLockFactory(const ::org::apache::lucene::store::LockFactory & a0, const ::java::io::InputStream & a1, const ::java::io::OutputStream & a2) : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_118c9b94, a0.this$, a1.this$, a2.this$)) {}

        void VerifyingLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock VerifyingLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args);
        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args);

        static PyMethodDef t_VerifyingLockFactory__methods_[] = {
          DECLARE_METHOD(t_VerifyingLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_VerifyingLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VerifyingLockFactory, t_VerifyingLockFactory, ::org::apache::lucene::store::LockFactory, VerifyingLockFactory, t_VerifyingLockFactory_init_, 0, 0, 0, 0, 0);

        void t_VerifyingLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(VerifyingLockFactory), module, "VerifyingLockFactory", 0);
        }

        void t_VerifyingLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "class_", make_descriptor(VerifyingLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "wrapfn_", make_descriptor(t_VerifyingLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VerifyingLockFactory::initializeClass, 1)))
            return NULL;
          return t_VerifyingLockFactory::wrap_Object(VerifyingLockFactory(((t_VerifyingLockFactory *) arg)->object.this$));
        }
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VerifyingLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
          ::java::io::InputStream a1((jobject) NULL);
          ::java::io::OutputStream a2((jobject) NULL);
          VerifyingLockFactory object((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::LockFactory::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = VerifyingLockFactory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/TurkishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *TurkishStemmer::class$ = NULL;
        jmethodID *TurkishStemmer::mids$ = NULL;
        bool TurkishStemmer::live$ = false;

        jclass TurkishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/TurkishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TurkishStemmer::TurkishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TurkishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TurkishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TurkishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args);

        static PyMethodDef t_TurkishStemmer__methods_[] = {
          DECLARE_METHOD(t_TurkishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TurkishStemmer, t_TurkishStemmer, ::org::tartarus::snowball::SnowballProgram, TurkishStemmer, t_TurkishStemmer_init_, 0, 0, 0, 0, 0);

        void t_TurkishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(TurkishStemmer), module, "TurkishStemmer", 0);
        }

        void t_TurkishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "class_", make_descriptor(TurkishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "wrapfn_", make_descriptor(t_TurkishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TurkishStemmer::initializeClass, 1)))
            return NULL;
          return t_TurkishStemmer::wrap_Object(TurkishStemmer(((t_TurkishStemmer *) arg)->object.this$));
        }
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TurkishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds)
        {
          TurkishStemmer object((jobject) NULL);

          INT_CALL(object = TurkishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$Result::class$ = NULL;
          jmethodID *Util$Result::mids$ = NULL;
          jfieldID *Util$Result::fids$ = NULL;
          bool Util$Result::live$ = false;

          jclass Util$Result::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$Result");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_52197430] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$Result::Util$Result(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_52197430, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::IntsRef Util$Result::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          ::java::lang::Object Util$Result::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args);
          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data);
          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data);

          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data);
          static PyGetSetDef t_Util$Result__fields_[] = {
            DECLARE_GET_FIELD(t_Util$Result, input),
            DECLARE_GET_FIELD(t_Util$Result, output),
            DECLARE_GET_FIELD(t_Util$Result, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$Result__methods_[] = {
            DECLARE_METHOD(t_Util$Result, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$Result, t_Util$Result, ::java::lang::Object, Util$Result, t_Util$Result_init_, 0, 0, t_Util$Result__fields_, 0, 0);
          PyObject *t_Util$Result::wrap_Object(const Util$Result& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$Result::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$Result::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$Result), module, "Util$Result", 0);
          }

          void t_Util$Result::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "class_", make_descriptor(Util$Result::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "wrapfn_", make_descriptor(t_Util$Result::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$Result::initializeClass, 1)))
              return NULL;
            return t_Util$Result::wrap_Object(Util$Result(((t_Util$Result *) arg)->object.this$));
          }
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$Result::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Util$Result object((jobject) NULL);

            if (!parseArgs(args, "ko", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = Util$Result(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PackedTokenAttributeImpl::class$ = NULL;
          jmethodID *PackedTokenAttributeImpl::mids$ = NULL;
          bool PackedTokenAttributeImpl::live$ = false;

          jclass PackedTokenAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_2353e953] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedTokenAttributeImpl::PackedTokenAttributeImpl() : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedTokenAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PackedTokenAttributeImpl PackedTokenAttributeImpl::clone() const
          {
            return PackedTokenAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_2353e953]));
          }

          void PackedTokenAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint PackedTokenAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean PackedTokenAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PackedTokenAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PackedTokenAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PackedTokenAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PackedTokenAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          void PackedTokenAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          void PackedTokenAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          jint PackedTokenAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }

          ::java::lang::String PackedTokenAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PackedTokenAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionIncrement),
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedTokenAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PackedTokenAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionIncrement, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionLength, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, startOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedTokenAttributeImpl, t_PackedTokenAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, PackedTokenAttributeImpl, t_PackedTokenAttributeImpl_init_, 0, 0, t_PackedTokenAttributeImpl__fields_, 0, 0);

          void t_PackedTokenAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedTokenAttributeImpl), module, "PackedTokenAttributeImpl", 0);
          }

          void t_PackedTokenAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "class_", make_descriptor(PackedTokenAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PackedTokenAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedTokenAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PackedTokenAttributeImpl::wrap_Object(PackedTokenAttributeImpl(((t_PackedTokenAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedTokenAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PackedTokenAttributeImpl object((jobject) NULL);

            INT_CALL(object = PackedTokenAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            PackedTokenAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PackedTokenAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizer::class$ = NULL;
          jmethodID *ArabicNormalizer::mids$ = NULL;
          bool ArabicNormalizer::live$ = false;
          jchar ArabicNormalizer::ALEF = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_ABOVE = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_BELOW = (jchar) 0;
          jchar ArabicNormalizer::ALEF_MADDA = (jchar) 0;
          jchar ArabicNormalizer::DAMMA = (jchar) 0;
          jchar ArabicNormalizer::DAMMATAN = (jchar) 0;
          jchar ArabicNormalizer::DOTLESS_YEH = (jchar) 0;
          jchar ArabicNormalizer::FATHA = (jchar) 0;
          jchar ArabicNormalizer::FATHATAN = (jchar) 0;
          jchar ArabicNormalizer::HEH = (jchar) 0;
          jchar ArabicNormalizer::KASRA = (jchar) 0;
          jchar ArabicNormalizer::KASRATAN = (jchar) 0;
          jchar ArabicNormalizer::SHADDA = (jchar) 0;
          jchar ArabicNormalizer::SUKUN = (jchar) 0;
          jchar ArabicNormalizer::TATWEEL = (jchar) 0;
          jchar ArabicNormalizer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicNormalizer::YEH = (jchar) 0;

          jclass ArabicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              ALEF_HAMZA_ABOVE = env->getStaticCharField(cls, "ALEF_HAMZA_ABOVE");
              ALEF_HAMZA_BELOW = env->getStaticCharField(cls, "ALEF_HAMZA_BELOW");
              ALEF_MADDA = env->getStaticCharField(cls, "ALEF_MADDA");
              DAMMA = env->getStaticCharField(cls, "DAMMA");
              DAMMATAN = env->getStaticCharField(cls, "DAMMATAN");
              DOTLESS_YEH = env->getStaticCharField(cls, "DOTLESS_YEH");
              FATHA = env->getStaticCharField(cls, "FATHA");
              FATHATAN = env->getStaticCharField(cls, "FATHATAN");
              HEH = env->getStaticCharField(cls, "HEH");
              KASRA = env->getStaticCharField(cls, "KASRA");
              KASRATAN = env->getStaticCharField(cls, "KASRATAN");
              SHADDA = env->getStaticCharField(cls, "SHADDA");
              SUKUN = env->getStaticCharField(cls, "SUKUN");
              TATWEEL = env->getStaticCharField(cls, "TATWEEL");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              YEH = env->getStaticCharField(cls, "YEH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizer::ArabicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizer__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizer, t_ArabicNormalizer, ::java::lang::Object, ArabicNormalizer, t_ArabicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizer), module, "ArabicNormalizer", 0);
          }

          void t_ArabicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "class_", make_descriptor(ArabicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF", make_descriptor(ArabicNormalizer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_ABOVE", make_descriptor(ArabicNormalizer::ALEF_HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_HAMZA_BELOW", make_descriptor(ArabicNormalizer::ALEF_HAMZA_BELOW));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "ALEF_MADDA", make_descriptor(ArabicNormalizer::ALEF_MADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMA", make_descriptor(ArabicNormalizer::DAMMA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DAMMATAN", make_descriptor(ArabicNormalizer::DAMMATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "DOTLESS_YEH", make_descriptor(ArabicNormalizer::DOTLESS_YEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHA", make_descriptor(ArabicNormalizer::FATHA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "FATHATAN", make_descriptor(ArabicNormalizer::FATHATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "HEH", make_descriptor(ArabicNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRA", make_descriptor(ArabicNormalizer::KASRA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "KASRATAN", make_descriptor(ArabicNormalizer::KASRATAN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SHADDA", make_descriptor(ArabicNormalizer::SHADDA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "SUKUN", make_descriptor(ArabicNormalizer::SUKUN));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TATWEEL", make_descriptor(ArabicNormalizer::TATWEEL));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicNormalizer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizer).tp_dict, "YEH", make_descriptor(ArabicNormalizer::YEH));
          }

          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizer::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizer::wrap_Object(ArabicNormalizer(((t_ArabicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            ArabicNormalizer object((jobject) NULL);

            INT_CALL(object = ArabicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedIndexInput::class$ = NULL;
        jmethodID *BufferedIndexInput::mids$ = NULL;
        bool BufferedIndexInput::live$ = false;
        jint BufferedIndexInput::BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MERGE_BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MIN_BUFFER_SIZE = (jint) 0;

        jclass BufferedIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_bufferSize_e43288a5] = env->getStaticMethodID(cls, "bufferSize", "(Lorg/apache/lucene/store/IOContext;)I");
            mids$[mid_clone_c014db58] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_getBufferSize_54c6a179] = env->getMethodID(cls, "getBufferSize", "()I");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_wrap_3bd7a9bc] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/store/IndexInput;JJ)Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_flushBuffer_b3b465fc] = env->getMethodID(cls, "flushBuffer", "(Lorg/apache/lucene/store/IndexOutput;J)I");
            mids$[mid_newBuffer_49b4f12b] = env->getMethodID(cls, "newBuffer", "([B)V");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUFFER_SIZE = env->getStaticIntField(cls, "BUFFER_SIZE");
            MERGE_BUFFER_SIZE = env->getStaticIntField(cls, "MERGE_BUFFER_SIZE");
            MIN_BUFFER_SIZE = env->getStaticIntField(cls, "MIN_BUFFER_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        jint BufferedIndexInput::bufferSize(const ::org::apache::lucene::store::IOContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bufferSize_e43288a5], a0.this$);
        }

        BufferedIndexInput BufferedIndexInput::clone() const
        {
          return BufferedIndexInput(env->callObjectMethod(this$, mids$[mid_clone_c014db58]));
        }

        jint BufferedIndexInput::getBufferSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getBufferSize_54c6a179]);
        }

        jlong BufferedIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jbyte BufferedIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        jbyte BufferedIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint BufferedIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jint BufferedIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong BufferedIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jlong BufferedIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort BufferedIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jshort BufferedIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }

        jint BufferedIndexInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong BufferedIndexInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void BufferedIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        void BufferedIndexInput::setBufferSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
        }

        ::org::apache::lucene::store::IndexInput BufferedIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        BufferedIndexInput BufferedIndexInput::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::store::IndexInput & a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          return BufferedIndexInput(env->callStaticObjectMethod(cls, mids$[mid_wrap_3bd7a9bc], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self);
        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg);
        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data);
        static PyGetSetDef t_BufferedIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, bufferSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getBufferSize, METH_NOARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, setBufferSize, METH_O),
          DECLARE_METHOD(t_BufferedIndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedIndexInput, t_BufferedIndexInput, ::org::apache::lucene::store::IndexInput, BufferedIndexInput, t_BufferedIndexInput_init_, 0, 0, t_BufferedIndexInput__fields_, 0, 0);

        void t_BufferedIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedIndexInput), module, "BufferedIndexInput", 0);
        }

        void t_BufferedIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "class_", make_descriptor(BufferedIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedIndexInput::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "BUFFER_SIZE", make_descriptor(BufferedIndexInput::BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MERGE_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MERGE_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MIN_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MIN_BUFFER_SIZE));
        }

        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedIndexInput::wrap_Object(BufferedIndexInput(((t_BufferedIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BufferedIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IOContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::bufferSize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args)
        {
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BufferedIndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBufferSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBufferSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
          jlong a2;
          jlong a3;
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, "skJJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::wrap(a0, a1, a2, a3));
            return t_BufferedIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *StringUtils::class$ = NULL;
              jmethodID *StringUtils::mids$ = NULL;
              bool StringUtils::live$ = false;

              jclass StringUtils::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/StringUtils");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_c9db4eed] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/Object;)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StringUtils::StringUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String StringUtils::toString(const ::java::lang::Object & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c9db4eed], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_StringUtils__methods_[] = {
                DECLARE_METHOD(t_StringUtils, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, toString, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StringUtils, t_StringUtils, ::java::lang::Object, StringUtils, t_StringUtils_init_, 0, 0, 0, 0, 0);

              void t_StringUtils::install(PyObject *module)
              {
                installType(&PY_TYPE(StringUtils), module, "StringUtils", 0);
              }

              void t_StringUtils::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "class_", make_descriptor(StringUtils::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "wrapfn_", make_descriptor(t_StringUtils::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StringUtils::initializeClass, 1)))
                  return NULL;
                return t_StringUtils::wrap_Object(StringUtils(((t_StringUtils *) arg)->object.this$));
              }
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StringUtils::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds)
              {
                StringUtils object((jobject) NULL);

                INT_CALL(object = StringUtils());
                self->object = object;

                return 0;
              }

              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::StringUtils::toString(a0));
                  return j2p(result);
                }

                return callSuper(type, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6182367d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_855546e7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::queries::function::ValueSource & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_6182367d, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_855546e7, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource), module, "TaxonomyFacetSumValueSource", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "ScoreValueSource", make_descriptor(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource)));
          }

          void t_TaxonomyFacetSumValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource::wrap_Object(TaxonomyFacetSumValueSource(((t_TaxonomyFacetSumValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *AbstractQueryConfig::class$ = NULL;
              jmethodID *AbstractQueryConfig::mids$ = NULL;
              bool AbstractQueryConfig::live$ = false;

              jclass AbstractQueryConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_get_96b6da60] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Ljava/lang/Object;");
                  mids$[mid_has_d605f87f] = env->getMethodID(cls, "has", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");
                  mids$[mid_set_55cc58cf] = env->getMethodID(cls, "set", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;Ljava/lang/Object;)V");
                  mids$[mid_unset_d605f87f] = env->getMethodID(cls, "unset", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object AbstractQueryConfig::get(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_96b6da60], a0.this$));
              }

              jboolean AbstractQueryConfig::has(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_has_d605f87f], a0.this$);
              }

              void AbstractQueryConfig::set(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_set_55cc58cf], a0.this$, a1.this$);
              }

              jboolean AbstractQueryConfig::unset(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_unset_d605f87f], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args);
              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg);

              static PyMethodDef t_AbstractQueryConfig__methods_[] = {
                DECLARE_METHOD(t_AbstractQueryConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, get, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, has, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, set, METH_VARARGS),
                DECLARE_METHOD(t_AbstractQueryConfig, unset, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AbstractQueryConfig, t_AbstractQueryConfig, ::java::lang::Object, AbstractQueryConfig, abstract_init, 0, 0, 0, 0, 0);

              void t_AbstractQueryConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractQueryConfig), module, "AbstractQueryConfig", 0);
              }

              void t_AbstractQueryConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "class_", make_descriptor(AbstractQueryConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "wrapfn_", make_descriptor(t_AbstractQueryConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AbstractQueryConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractQueryConfig::initializeClass, 1)))
                  return NULL;
                return t_AbstractQueryConfig::wrap_Object(AbstractQueryConfig(((t_AbstractQueryConfig *) arg)->object.this$));
              }
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractQueryConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.has(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "has", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "Ko", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.unset(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "unset", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiTermRewriteMethodProcessor::class$ = NULL;
              jmethodID *MultiTermRewriteMethodProcessor::mids$ = NULL;
              bool MultiTermRewriteMethodProcessor::live$ = false;
              ::java::lang::String *MultiTermRewriteMethodProcessor::TAG_ID = NULL;

              jclass MultiTermRewriteMethodProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  TAG_ID = new ::java::lang::String(env->getStaticObjectField(cls, "TAG_ID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiTermRewriteMethodProcessor::MultiTermRewriteMethodProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiTermRewriteMethodProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiTermRewriteMethodProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiTermRewriteMethodProcessor), module, "MultiTermRewriteMethodProcessor", 0);
              }

              void t_MultiTermRewriteMethodProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "class_", make_descriptor(MultiTermRewriteMethodProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiTermRewriteMethodProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(MultiTermRewriteMethodProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(MultiTermRewriteMethodProcessor).tp_dict, "TAG_ID", make_descriptor(j2p(*MultiTermRewriteMethodProcessor::TAG_ID)));
              }

              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiTermRewriteMethodProcessor::wrap_Object(MultiTermRewriteMethodProcessor(((t_MultiTermRewriteMethodProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiTermRewriteMethodProcessor object((jobject) NULL);

                INT_CALL(object = MultiTermRewriteMethodProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsReader::mids$ = NULL;
          bool CompressingStoredFieldsReader::live$ = false;

          jclass CompressingStoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsReader::CompressingStoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingStoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsReader::clone() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
          }

          void CompressingStoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong CompressingStoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          void CompressingStoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsReader, t_CompressingStoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, CompressingStoredFieldsReader, t_CompressingStoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsReader), module, "CompressingStoredFieldsReader", 0);
          }

          void t_CompressingStoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsReader::wrap_Object(CompressingStoredFieldsReader(((t_CompressingStoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingStoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsFormat::class$ = NULL;
        jmethodID *NormsFormat::mids$ = NULL;
        bool NormsFormat::live$ = false;

        jclass NormsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesConsumer NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg);
        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg);

        static PyMethodDef t_NormsFormat__methods_[] = {
          DECLARE_METHOD(t_NormsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, normsConsumer, METH_O),
          DECLARE_METHOD(t_NormsFormat, normsProducer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NormsFormat, t_NormsFormat, ::java::lang::Object, NormsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_NormsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsFormat), module, "NormsFormat", 0);
        }

        void t_NormsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "class_", make_descriptor(NormsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_NormsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsFormat::initializeClass, 1)))
            return NULL;
          return t_NormsFormat::wrap_Object(NormsFormat(((t_NormsFormat *) arg)->object.this$));
        }
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsConsumer", arg);
          return NULL;
        }

        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsProducer", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer$Resettable::class$ = NULL;
        jmethodID *RollingBuffer$Resettable::mids$ = NULL;
        bool RollingBuffer$Resettable::live$ = false;

        jclass RollingBuffer$Resettable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer$Resettable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void RollingBuffer$Resettable::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args);
        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self);
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data);
        static PyGetSetDef t_RollingBuffer$Resettable__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer$Resettable, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer$Resettable__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer$Resettable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer$Resettable, t_RollingBuffer$Resettable, ::java::lang::Object, RollingBuffer$Resettable, abstract_init, 0, 0, t_RollingBuffer$Resettable__fields_, 0, 0);
        PyObject *t_RollingBuffer$Resettable::wrap_Object(const RollingBuffer$Resettable& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer$Resettable::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer$Resettable::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer$Resettable), module, "RollingBuffer$Resettable", 0);
        }

        void t_RollingBuffer$Resettable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "class_", make_descriptor(RollingBuffer$Resettable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer$Resettable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer$Resettable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer$Resettable::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer$Resettable::wrap_Object(RollingBuffer$Resettable(((t_RollingBuffer$Resettable *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer$Resettable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$PruneByAge::class$ = NULL;
        jmethodID *SearcherLifetimeManager$PruneByAge::mids$ = NULL;
        bool SearcherLifetimeManager$PruneByAge::live$ = false;

        jclass SearcherLifetimeManager$PruneByAge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$PruneByAge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager$PruneByAge::SearcherLifetimeManager$PruneByAge(jdouble a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jboolean SearcherLifetimeManager$PruneByAge::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$PruneByAge__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge, ::java::lang::Object, SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$PruneByAge::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$PruneByAge), module, "SearcherLifetimeManager$PruneByAge", 0);
        }

        void t_SearcherLifetimeManager$PruneByAge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$PruneByAge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$PruneByAge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$PruneByAge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$PruneByAge::wrap_Object(SearcherLifetimeManager$PruneByAge(((t_SearcherLifetimeManager$PruneByAge *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          SearcherLifetimeManager$PruneByAge object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = SearcherLifetimeManager$PruneByAge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42Codec::class$ = NULL;
          jmethodID *Lucene42Codec::mids$ = NULL;
          bool Lucene42Codec::live$ = false;

          jclass Lucene42Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42Codec::Lucene42Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene42Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene42Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene42Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene42Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene42Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene42Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args);

          static PyMethodDef t_Lucene42Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene42Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42Codec, t_Lucene42Codec, ::org::apache::lucene::codecs::Codec, Lucene42Codec, t_Lucene42Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene42Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42Codec), module, "Lucene42Codec", 0);
          }

          void t_Lucene42Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "class_", make_descriptor(Lucene42Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene42Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene42Codec::wrap_Object(Lucene42Codec(((t_Lucene42Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene42Codec object((jobject) NULL);

            INT_CALL(object = Lucene42Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiFieldQueryNodeProcessor::class$ = NULL;
              jmethodID *MultiFieldQueryNodeProcessor::mids$ = NULL;
              bool MultiFieldQueryNodeProcessor::live$ = false;

              jclass MultiFieldQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiFieldQueryNodeProcessor::MultiFieldQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiFieldQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiFieldQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiFieldQueryNodeProcessor), module, "MultiFieldQueryNodeProcessor", 0);
              }

              void t_MultiFieldQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "class_", make_descriptor(MultiFieldQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiFieldQueryNodeProcessor::wrap_Object(MultiFieldQueryNodeProcessor(((t_MultiFieldQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiFieldQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MultiFieldQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilter::class$ = NULL;
          jmethodID *ThaiWordFilter::mids$ = NULL;
          bool ThaiWordFilter::live$ = false;
          jboolean ThaiWordFilter::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilter::ThaiWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean ThaiWordFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ThaiWordFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args);
          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilter__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ThaiWordFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilter, t_ThaiWordFilter, ::org::apache::lucene::analysis::TokenFilter, ThaiWordFilter, t_ThaiWordFilter_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilter), module, "ThaiWordFilter", 0);
          }

          void t_ThaiWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "class_", make_descriptor(ThaiWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiWordFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiWordFilter::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilter::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilter::wrap_Object(ThaiWordFilter(((t_ThaiWordFilter *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ThaiWordFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = ThaiWordFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SpellChecker.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SpellChecker::class$ = NULL;
          jmethodID *SpellChecker::mids$ = NULL;
          bool SpellChecker::live$ = false;
          jfloat SpellChecker::DEFAULT_ACCURACY = (jfloat) 0;
          ::java::lang::String *SpellChecker::F_WORD = NULL;

          jclass SpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_init$_234c1a23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_init$_eced4abc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;Ljava/util/Comparator;)V");
              mids$[mid_clearIndex_54c6a166] = env->getMethodID(cls, "clearIndex", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_exist_5fdc3f44] = env->getMethodID(cls, "exist", "(Ljava/lang/String;)Z");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getStringDistance_a5face5e] = env->getMethodID(cls, "getStringDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_indexDictionary_dcfa1d99] = env->getMethodID(cls, "indexDictionary", "(Lorg/apache/lucene/search/spell/Dictionary;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setSpellIndex_2e261ef2] = env->getMethodID(cls, "setSpellIndex", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_setStringDistance_9c934047] = env->getMethodID(cls, "setStringDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_suggestSimilar_3384fe85] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_4d5d7778] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;IF)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_f64ed82d] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_b90725e0] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;F)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ACCURACY = env->getStaticFloatField(cls, "DEFAULT_ACCURACY");
              F_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "F_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_234c1a23, a0.this$, a1.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1, const ::java::util::Comparator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eced4abc, a0.this$, a1.this$, a2.this$)) {}

          void SpellChecker::clearIndex() const
          {
            env->callVoidMethod(this$, mids$[mid_clearIndex_54c6a166]);
          }

          void SpellChecker::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jboolean SpellChecker::exist(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exist_5fdc3f44], a0.this$);
          }

          jfloat SpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator SpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance SpellChecker::getStringDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getStringDistance_a5face5e]));
          }

          void SpellChecker::indexDictionary(const ::org::apache::lucene::search::spell::Dictionary & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_indexDictionary_dcfa1d99], a0.this$, a1.this$, a2);
          }

          void SpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void SpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void SpellChecker::setSpellIndex(const ::org::apache::lucene::store::Directory & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSpellIndex_2e261ef2], a0.this$);
          }

          void SpellChecker::setStringDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStringDistance_9c934047], a0.this$);
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_3384fe85], a0.this$, a1));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, jfloat a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_4d5d7778], a0.this$, a1, a2));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_f64ed82d], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4, jfloat a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_b90725e0], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self);
          static PyObject *t_SpellChecker_close(t_SpellChecker *self);
          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self);
          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data);
          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_SpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_SpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_SpellChecker, comparator),
            DECLARE_SET_FIELD(t_SpellChecker, spellIndex),
            DECLARE_GETSET_FIELD(t_SpellChecker, stringDistance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpellChecker__methods_[] = {
            DECLARE_METHOD(t_SpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, clearIndex, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, close, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, exist, METH_O),
            DECLARE_METHOD(t_SpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getStringDistance, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, indexDictionary, METH_VARARGS),
            DECLARE_METHOD(t_SpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_SpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_SpellChecker, setSpellIndex, METH_O),
            DECLARE_METHOD(t_SpellChecker, setStringDistance, METH_O),
            DECLARE_METHOD(t_SpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpellChecker, t_SpellChecker, ::java::lang::Object, SpellChecker, t_SpellChecker_init_, 0, 0, t_SpellChecker__fields_, 0, 0);

          void t_SpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(SpellChecker), module, "SpellChecker", 0);
          }

          void t_SpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "class_", make_descriptor(SpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "wrapfn_", make_descriptor(t_SpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "DEFAULT_ACCURACY", make_descriptor(SpellChecker::DEFAULT_ACCURACY));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "F_WORD", make_descriptor(j2p(*SpellChecker::F_WORD)));
          }

          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpellChecker::initializeClass, 1)))
              return NULL;
            return t_SpellChecker::wrap_Object(SpellChecker(((t_SpellChecker *) arg)->object.this$));
          }
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                {
                  INT_CALL(object = SpellChecker(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpellChecker(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                ::java::util::Comparator a2((jobject) NULL);
                PyTypeObject **p2;
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SpellChecker(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.clearIndex());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_close(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.exist(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exist", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);
            ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::spell::Dictionary::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.indexDictionary(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "indexDictionary", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSpellIndex(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSpellIndex", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStringDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStringDistance", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                jfloat a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksK", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksKF", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a5))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
              {
                INT_CALL(self->object.setSpellIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "spellIndex", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setStringDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stringDistance", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/IrishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *IrishStemmer::class$ = NULL;
        jmethodID *IrishStemmer::mids$ = NULL;
        bool IrishStemmer::live$ = false;

        jclass IrishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/IrishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IrishStemmer::IrishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean IrishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IrishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IrishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args);

        static PyMethodDef t_IrishStemmer__methods_[] = {
          DECLARE_METHOD(t_IrishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IrishStemmer, t_IrishStemmer, ::org::tartarus::snowball::SnowballProgram, IrishStemmer, t_IrishStemmer_init_, 0, 0, 0, 0, 0);

        void t_IrishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IrishStemmer), module, "IrishStemmer", 0);
        }

        void t_IrishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "class_", make_descriptor(IrishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "wrapfn_", make_descriptor(t_IrishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IrishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IrishStemmer::initializeClass, 1)))
            return NULL;
          return t_IrishStemmer::wrap_Object(IrishStemmer(((t_IrishStemmer *) arg)->object.this$));
        }
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IrishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds)
        {
          IrishStemmer object((jobject) NULL);

          INT_CALL(object = IrishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IrishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/LongDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *LongDocValues::class$ = NULL;
            jmethodID *LongDocValues::mids$ = NULL;
            bool LongDocValues::live$ = false;

            jclass LongDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/LongDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongDocValues::LongDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean LongDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte LongDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble LongDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat LongDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer LongDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller LongDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint LongDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong LongDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object LongDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort LongDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String LongDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String LongDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data);
            static PyGetSetDef t_LongDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_LongDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LongDocValues__methods_[] = {
              DECLARE_METHOD(t_LongDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongDocValues, t_LongDocValues, ::org::apache::lucene::queries::function::FunctionValues, LongDocValues, t_LongDocValues_init_, 0, 0, t_LongDocValues__fields_, 0, 0);

            void t_LongDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(LongDocValues), module, "LongDocValues", 0);
            }

            void t_LongDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "class_", make_descriptor(LongDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "wrapfn_", make_descriptor(t_LongDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongDocValues::initializeClass, 1)))
                return NULL;
              return t_LongDocValues::wrap_Object(LongDocValues(((t_LongDocValues *) arg)->object.this$));
            }
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              LongDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = LongDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimeExceededException::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimeExceededException::mids$ = NULL;
        bool TimeLimitingCollector$TimeExceededException::live$ = false;

        jclass TimeLimitingCollector$TimeExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimeExceededException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLastDocCollected_54c6a179] = env->getMethodID(cls, "getLastDocCollected", "()I");
            mids$[mid_getTimeAllowed_54c6a17a] = env->getMethodID(cls, "getTimeAllowed", "()J");
            mids$[mid_getTimeElapsed_54c6a17a] = env->getMethodID(cls, "getTimeElapsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TimeLimitingCollector$TimeExceededException::getLastDocCollected() const
        {
          return env->callIntMethod(this$, mids$[mid_getLastDocCollected_54c6a179]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeAllowed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeAllowed_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeElapsed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeElapsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimeExceededException__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, lastDocCollected),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeAllowed),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeElapsed),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimeExceededException__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getLastDocCollected, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeElapsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimeExceededException, t_TimeLimitingCollector$TimeExceededException, ::java::lang::RuntimeException, TimeLimitingCollector$TimeExceededException, abstract_init, 0, 0, t_TimeLimitingCollector$TimeExceededException__fields_, 0, 0);

        void t_TimeLimitingCollector$TimeExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimeExceededException), module, "TimeLimitingCollector$TimeExceededException", 0);
        }

        void t_TimeLimitingCollector$TimeExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimeExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimeExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimeExceededException::wrap_Object(TimeLimitingCollector$TimeExceededException(((t_TimeLimitingCollector$TimeExceededException *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLastDocCollected());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLastDocCollected());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilterFactory::class$ = NULL;
          jmethodID *SoraniStemFilterFactory::mids$ = NULL;
          bool SoraniStemFilterFactory::live$ = false;

          jclass SoraniStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84ba1585] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilterFactory::SoraniStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniStemFilter SoraniStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniStemFilter(env->callObjectMethod(this$, mids$[mid_create_84ba1585], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilterFactory, t_SoraniStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniStemFilterFactory, t_SoraniStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilterFactory), module, "SoraniStemFilterFactory", 0);
          }

          void t_SoraniStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "class_", make_descriptor(SoraniStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilterFactory::wrap_Object(SoraniStemFilterFactory(((t_SoraniStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordScoreComparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordScoreComparator::class$ = NULL;
          jmethodID *SuggestWordScoreComparator::mids$ = NULL;
          bool SuggestWordScoreComparator::live$ = false;

          jclass SuggestWordScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordScoreComparator::SuggestWordScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordScoreComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordScoreComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordScoreComparator, t_SuggestWordScoreComparator, ::java::lang::Object, SuggestWordScoreComparator, t_SuggestWordScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordScoreComparator), module, "SuggestWordScoreComparator", 0);
          }

          void t_SuggestWordScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "class_", make_descriptor(SuggestWordScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordScoreComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordScoreComparator::wrap_Object(SuggestWordScoreComparator(((t_SuggestWordScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordScoreComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimerThread::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimerThread::mids$ = NULL;
        bool TimeLimitingCollector$TimerThread::live$ = false;
        jint TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION = (jint) 0;
        ::java::lang::String *TimeLimitingCollector$TimerThread::THREAD_NAME = NULL;

        jclass TimeLimitingCollector$TimerThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimerThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_dfcea312] = env->getMethodID(cls, "<init>", "(JLorg/apache/lucene/util/Counter;)V");
            mids$[mid_getMilliseconds_54c6a17a] = env->getMethodID(cls, "getMilliseconds", "()J");
            mids$[mid_getResolution_54c6a17a] = env->getMethodID(cls, "getResolution", "()J");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_setResolution_0ee6df2f] = env->getMethodID(cls, "setResolution", "(J)V");
            mids$[mid_stopTimer_54c6a166] = env->getMethodID(cls, "stopTimer", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_RESOLUTION = env->getStaticIntField(cls, "DEFAULT_RESOLUTION");
            THREAD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "THREAD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(jlong a0, const ::org::apache::lucene::util::Counter & a1) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_dfcea312, a0, a1.this$)) {}

        jlong TimeLimitingCollector$TimerThread::getMilliseconds() const
        {
          return env->callLongMethod(this$, mids$[mid_getMilliseconds_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimerThread::getResolution() const
        {
          return env->callLongMethod(this$, mids$[mid_getResolution_54c6a17a]);
        }

        void TimeLimitingCollector$TimerThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void TimeLimitingCollector$TimerThread::setResolution(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setResolution_0ee6df2f], a0);
        }

        void TimeLimitingCollector$TimerThread::stopTimer() const
        {
          env->callVoidMethod(this$, mids$[mid_stopTimer_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data);
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimerThread__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimerThread, milliseconds),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector$TimerThread, resolution),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimerThread__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getMilliseconds, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getResolution, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, run, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, setResolution, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, stopTimer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread, ::java::lang::Thread, TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread_init_, 0, 0, t_TimeLimitingCollector$TimerThread__fields_, 0, 0);

        void t_TimeLimitingCollector$TimerThread::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimerThread), module, "TimeLimitingCollector$TimerThread", 0);
        }

        void t_TimeLimitingCollector$TimerThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimerThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimerThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TimeLimitingCollector$TimerThread::initializeClass);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "DEFAULT_RESOLUTION", make_descriptor(TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "THREAD_NAME", make_descriptor(j2p(*TimeLimitingCollector$TimerThread::THREAD_NAME)));
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimerThread::wrap_Object(TimeLimitingCollector$TimerThread(((t_TimeLimitingCollector$TimerThread *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jlong a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "Jk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector$TimerThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setResolution(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setResolution", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self)
        {
          OBJ_CALL(self->object.stopTimer());
          Py_RETURN_NONE;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setResolution(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "resolution", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$PerFieldReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$PerFieldReuseStrategy::mids$ = NULL;
        bool Analyzer$PerFieldReuseStrategy::live$ = false;

        jclass Analyzer$PerFieldReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$PerFieldReuseStrategy::Analyzer$PerFieldReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$PerFieldReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$PerFieldReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$PerFieldReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$PerFieldReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$PerFieldReuseStrategy), module, "Analyzer$PerFieldReuseStrategy", 0);
        }

        void t_Analyzer$PerFieldReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$PerFieldReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$PerFieldReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$PerFieldReuseStrategy::wrap_Object(Analyzer$PerFieldReuseStrategy(((t_Analyzer$PerFieldReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$PerFieldReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$PerFieldReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CorruptIndexException::class$ = NULL;
        jmethodID *CorruptIndexException::mids$ = NULL;
        bool CorruptIndexException::live$ = false;

        jclass CorruptIndexException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CorruptIndexException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CorruptIndexException__methods_[] = {
          DECLARE_METHOD(t_CorruptIndexException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CorruptIndexException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CorruptIndexException, t_CorruptIndexException, ::java::io::IOException, CorruptIndexException, t_CorruptIndexException_init_, 0, 0, 0, 0, 0);

        void t_CorruptIndexException::install(PyObject *module)
        {
          installType(&PY_TYPE(CorruptIndexException), module, "CorruptIndexException", 0);
        }

        void t_CorruptIndexException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "class_", make_descriptor(CorruptIndexException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "wrapfn_", make_descriptor(t_CorruptIndexException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CorruptIndexException::initializeClass, 1)))
            return NULL;
          return t_CorruptIndexException::wrap_Object(CorruptIndexException(((t_CorruptIndexException *) arg)->object.this$));
        }
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CorruptIndexException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CorruptIndexException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization$NoNormalization::class$ = NULL;
          jmethodID *Normalization$NoNormalization::mids$ = NULL;
          bool Normalization$NoNormalization::live$ = false;

          jclass Normalization$NoNormalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization$NoNormalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization$NoNormalization::Normalization$NoNormalization() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization$NoNormalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization$NoNormalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization$NoNormalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args);

          static PyMethodDef t_Normalization$NoNormalization__methods_[] = {
            DECLARE_METHOD(t_Normalization$NoNormalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization$NoNormalization, t_Normalization$NoNormalization, ::org::apache::lucene::search::similarities::Normalization, Normalization$NoNormalization, t_Normalization$NoNormalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization$NoNormalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization$NoNormalization), module, "Normalization$NoNormalization", 0);
          }

          void t_Normalization$NoNormalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "class_", make_descriptor(Normalization$NoNormalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization$NoNormalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization$NoNormalization::initializeClass, 1)))
              return NULL;
            return t_Normalization$NoNormalization::wrap_Object(Normalization$NoNormalization(((t_Normalization$NoNormalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization$NoNormalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization$NoNormalization object((jobject) NULL);

            INT_CALL(object = Normalization$NoNormalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet::class$ = NULL;
        jmethodID *FixedBitSet::mids$ = NULL;
        bool FixedBitSet::live$ = false;

        jclass FixedBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_ef674644] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_and_c2b5607d] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNot_ef674644] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_andNot_c2b5607d] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNotCount_a42679f6] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_39c7bd23] = env->getStaticMethodID(cls, "bits2words", "(I)I");
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_28209941] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_ensureCapacity_7d813305] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/FixedBitSet;I)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_d8d154a6] = env->getMethodID(cls, "flip", "(II)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndClear_39c7bd30] = env->getMethodID(cls, "getAndClear", "(I)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersectionCount_a42679f6] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_intersects_ef674648] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/FixedBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_ef674644] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_or_c2b5607d] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_set_39c7bd3c] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_set_d8d154a6] = env->getMethodID(cls, "set", "(II)V");
            mids$[mid_unionCount_a42679f6] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_xor_ef674644] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_xor_c2b5607d] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet::FixedBitSet(jint a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        FixedBitSet::FixedBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void FixedBitSet::and$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_ef674644], a0.this$);
        }

        void FixedBitSet::and$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2b5607d], a0.this$);
        }

        void FixedBitSet::andNot(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_ef674644], a0.this$);
        }

        void FixedBitSet::andNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2b5607d], a0.this$);
        }

        jlong FixedBitSet::andNotCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_a42679f6], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits FixedBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint FixedBitSet::bits2words(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_39c7bd23], a0);
        }

        jint FixedBitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        void FixedBitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }

        void FixedBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        FixedBitSet FixedBitSet::clone() const
        {
          return FixedBitSet(env->callObjectMethod(this$, mids$[mid_clone_28209941]));
        }

        FixedBitSet FixedBitSet::ensureCapacity(const FixedBitSet & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_7d813305], a0.this$, a1));
        }

        jboolean FixedBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FixedBitSet::flip(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_d8d154a6], a0, a1);
        }

        jboolean FixedBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndClear(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        JArray< jlong > FixedBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint FixedBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong FixedBitSet::intersectionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_a42679f6], a0.this$, a1.this$);
        }

        jboolean FixedBitSet::intersects(const FixedBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_ef674648], a0.this$);
        }

        jboolean FixedBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FixedBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint FixedBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint FixedBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        void FixedBitSet::or$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_ef674644], a0.this$);
        }

        void FixedBitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2b5607d], a0.this$);
        }

        jint FixedBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong FixedBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void FixedBitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_39c7bd3c], a0);
        }

        void FixedBitSet::set(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d8d154a6], a0, a1);
        }

        jlong FixedBitSet::unionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_a42679f6], a0.this$, a1.this$);
        }

        void FixedBitSet::xor$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_ef674644], a0.this$);
        }

        void FixedBitSet::xor$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data);
        static PyGetSetDef t_FixedBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_FixedBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FixedBitSet__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, and, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNot, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, get, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, intersects, METH_O),
          DECLARE_METHOD(t_FixedBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, or, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, xor, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet, t_FixedBitSet, ::org::apache::lucene::search::DocIdSet, FixedBitSet, t_FixedBitSet_init_, 0, 0, t_FixedBitSet__fields_, 0, 0);

        void t_FixedBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet), module, "FixedBitSet", 0);
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "FixedBitSetIterator", make_descriptor(&PY_TYPE(FixedBitSet$FixedBitSetIterator)));
        }

        void t_FixedBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "class_", make_descriptor(FixedBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet::wrap_Object(FixedBitSet(((t_FixedBitSet *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = FixedBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = FixedBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "and", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self)
        {
          FixedBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_FixedBitSet::wrap_Object(result);
        }

        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          jint a1;
          FixedBitSet result((jobject) NULL);

          if (!parseArgs(args, "kI", FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::ensureCapacity(a0, a1));
            return t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "or", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "xor", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilterFactory::class$ = NULL;
          jmethodID *HunspellStemFilterFactory::mids$ = NULL;
          bool HunspellStemFilterFactory::live$ = false;

          jclass HunspellStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilterFactory::HunspellStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HunspellStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void HunspellStemFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args);
          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HunspellStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilterFactory, t_HunspellStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HunspellStemFilterFactory, t_HunspellStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilterFactory), module, "HunspellStemFilterFactory", 0);
          }

          void t_HunspellStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "class_", make_descriptor(HunspellStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilterFactory::wrap_Object(HunspellStemFilterFactory(((t_HunspellStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HunspellStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HunspellStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Enum::class$ = NULL;
    jmethodID *Enum::mids$ = NULL;
    bool Enum::live$ = false;

    jclass Enum::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Enum");

        mids$ = new jmethodID[max_mid];
        mids$[mid_compareTo_618aa849] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
        mids$[mid_ordinal_54c6a179] = env->getMethodID(cls, "ordinal", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_valueOf_46e8491f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint Enum::compareTo(const Enum & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_618aa849], a0.this$);
    }

    jboolean Enum::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Enum::getDeclaringClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    jint Enum::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::String Enum::name() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
    }

    jint Enum::ordinal() const
    {
      return env->callIntMethod(this$, mids$[mid_ordinal_54c6a179]);
    }

    ::java::lang::String Enum::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e8491f], a0.this$, a1.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg);
    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_name(t_Enum *self);
    static PyObject *t_Enum_ordinal(t_Enum *self);
    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
    static PyGetSetDef t_Enum__fields_[] = {
      DECLARE_GET_FIELD(t_Enum, declaringClass),
      DECLARE_GET_FIELD(t_Enum, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enum__methods_[] = {
      DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enum, compareTo, METH_O),
      DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
      DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Enum, name, METH_NOARGS),
      DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
      DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
      DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enum, t_Enum, ::java::lang::Object, Enum, abstract_init, 0, 0, t_Enum__fields_, 0, 0);
    PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enum::install(PyObject *module)
    {
      installType(&PY_TYPE(Enum), module, "Enum", 0);
    }

    void t_Enum::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "class_", make_descriptor(Enum::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
        return NULL;
      return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
    }
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enum::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg)
    {
      Enum a0((jobject) NULL);
      PyTypeObject **p0;
      jint result;

      if (!parseArg(arg, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Enum_name(t_Enum *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.name());
      return j2p(result);
    }

    static PyObject *t_Enum_ordinal(t_Enum *self)
    {
      jint result;
      OBJ_CALL(result = self->object.ordinal());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Class a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::String a1((jobject) NULL);
      Enum result((jobject) NULL);

      if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
        return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilter::class$ = NULL;
          jmethodID *LowerCaseFilter::mids$ = NULL;
          bool LowerCaseFilter::live$ = false;

          jclass LowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean LowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_LowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilter, t_LowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, LowerCaseFilter, t_LowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilter), module, "LowerCaseFilter", 0);
          }

          void t_LowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "class_", make_descriptor(LowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilter::wrap_Object(LowerCaseFilter(((t_LowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            LowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = LowerCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {

          ::java::lang::Class *ComplexPhraseQueryParser::class$ = NULL;
          jmethodID *ComplexPhraseQueryParser::mids$ = NULL;
          bool ComplexPhraseQueryParser::live$ = false;

          jclass ComplexPhraseQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setInOrder_bb0c767f] = env->getMethodID(cls, "setInOrder", "(Z)V");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newTermQuery_c8bbbdc7] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRangeQuery_75fd45b6] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ComplexPhraseQueryParser::ComplexPhraseQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query ComplexPhraseQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void ComplexPhraseQueryParser::setInOrder(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInOrder_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {
          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args);
          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg);
          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_ComplexPhraseQueryParser__fields_[] = {
            DECLARE_SET_FIELD(t_ComplexPhraseQueryParser, inOrder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ComplexPhraseQueryParser__methods_[] = {
            DECLARE_METHOD(t_ComplexPhraseQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, parse, METH_VARARGS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, setInOrder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ComplexPhraseQueryParser, t_ComplexPhraseQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ComplexPhraseQueryParser, t_ComplexPhraseQueryParser_init_, 0, 0, t_ComplexPhraseQueryParser__fields_, 0, 0);

          void t_ComplexPhraseQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ComplexPhraseQueryParser), module, "ComplexPhraseQueryParser", 0);
          }

          void t_ComplexPhraseQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "class_", make_descriptor(ComplexPhraseQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ComplexPhraseQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ComplexPhraseQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ComplexPhraseQueryParser::initializeClass, 1)))
              return NULL;
            return t_ComplexPhraseQueryParser::wrap_Object(ComplexPhraseQueryParser(((t_ComplexPhraseQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ComplexPhraseQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ComplexPhraseQueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = ComplexPhraseQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ComplexPhraseQueryParser), (PyObject *) self, "parse", args, 2);
          }

          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setInOrder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInOrder", arg);
            return NULL;
          }

          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setInOrder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "inOrder", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReader::class$ = NULL;
        jmethodID *SegmentReader::mids$ = NULL;
        bool SegmentReader::live$ = false;

        jclass SegmentReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20f5bc6a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getFieldsReader_ef585f0d] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSegmentInfo_5df298a9] = env->getMethodID(cls, "getSegmentInfo", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_getSegmentName_14c7b5c5] = env->getMethodID(cls, "getSegmentName", "()Ljava/lang/String;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermInfosIndexDivisor_54c6a179] = env->getMethodID(cls, "getTermInfosIndexDivisor", "()I");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getTermVectorsReader_475a2624] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReader::SegmentReader(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_20f5bc6a, a0.this$, a1, a2.this$)) {}

        void SegmentReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SegmentReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::store::Directory SegmentReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        void SegmentReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SegmentReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SegmentReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SegmentReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SegmentReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader SegmentReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ef585f0d]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentReader::getSegmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_getSegmentInfo_5df298a9]));
        }

        ::java::lang::String SegmentReader::getSegmentName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentName_14c7b5c5]));
        }

        ::org::apache::lucene::index::SortedDocValues SegmentReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SegmentReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SegmentReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jint SegmentReader::getTermInfosIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermInfosIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::index::Fields SegmentReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        ::org::apache::lucene::codecs::TermVectorsReader SegmentReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_475a2624]));
        }

        jint SegmentReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SegmentReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong SegmentReader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SegmentReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SegmentReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_directory(t_SegmentReader *self);
        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self);
        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data);
        static PyGetSetDef t_SegmentReader__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SegmentReader, coreCacheKey),
          DECLARE_GET_FIELD(t_SegmentReader, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReader, fieldsReader),
          DECLARE_GET_FIELD(t_SegmentReader, liveDocs),
          DECLARE_GET_FIELD(t_SegmentReader, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReader, segmentName),
          DECLARE_GET_FIELD(t_SegmentReader, termInfosIndexDivisor),
          DECLARE_GET_FIELD(t_SegmentReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReader__methods_[] = {
          DECLARE_METHOD(t_SegmentReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, document, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentInfo, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermInfosIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectorsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReader, t_SegmentReader, ::org::apache::lucene::index::AtomicReader, SegmentReader, t_SegmentReader_init_, 0, 0, t_SegmentReader__fields_, 0, 0);

        void t_SegmentReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReader), module, "SegmentReader", 0);
        }

        void t_SegmentReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "class_", make_descriptor(SegmentReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReader::initializeClass, 1)))
            return NULL;
          return t_SegmentReader::wrap_Object(SegmentReader(((t_SegmentReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          SegmentReader object((jobject) NULL);

          if (!parseArgs(args, "kIk", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = SegmentReader(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SegmentReader_directory(t_SegmentReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self)
        {
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentName());
          return j2p(result);
        }

        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentName());
          return j2p(value);
        }

        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilter::class$ = NULL;
          jmethodID *PatternReplaceCharFilter::mids$ = NULL;
          bool PatternReplaceCharFilter::live$ = false;
          jint PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS = (jint) 0;

          jclass PatternReplaceCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0e77162] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_init$_ee751df6] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;ILjava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_CHARS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_CHARS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_e0e77162, a0.this$, a1.this$, a2.this$)) {}

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3, const ::java::io::Reader & a4) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_ee751df6, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint PatternReplaceCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PatternReplaceCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilter, t_PatternReplaceCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, PatternReplaceCharFilter, t_PatternReplaceCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilter), module, "PatternReplaceCharFilter", 0);
          }

          void t_PatternReplaceCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "class_", make_descriptor(PatternReplaceCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternReplaceCharFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "DEFAULT_MAX_BLOCK_CHARS", make_descriptor(PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS));
          }

          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilter::wrap_Object(PatternReplaceCharFilter(((t_PatternReplaceCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::io::Reader a4((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksIsk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilter::class$ = NULL;
          jmethodID *FrenchLightStemFilter::mids$ = NULL;
          bool FrenchLightStemFilter::live$ = false;

          jclass FrenchLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilter::FrenchLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilter, t_FrenchLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchLightStemFilter, t_FrenchLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilter), module, "FrenchLightStemFilter", 0);
          }

          void t_FrenchLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "class_", make_descriptor(FrenchLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilter::wrap_Object(FrenchLightStemFilter(((t_FrenchLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FilterDirectory::class$ = NULL;
        jmethodID *FilterDirectory::mids$ = NULL;
        bool FilterDirectory::live$ = false;

        jclass FilterDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FilterDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FilterDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void FilterDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FilterDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FilterDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FilterDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FilterDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory FilterDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory FilterDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String FilterDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > FilterDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock FilterDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput FilterDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FilterDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FilterDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FilterDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self);
        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data);
        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data);
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data);
        static PyGetSetDef t_FilterDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectory, delegate),
          DECLARE_GETSET_FIELD(t_FilterDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FilterDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectory__methods_[] = {
          DECLARE_METHOD(t_FilterDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectory, t_FilterDirectory, ::org::apache::lucene::store::Directory, FilterDirectory, abstract_init, 0, 0, t_FilterDirectory__fields_, 0, 0);

        void t_FilterDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectory), module, "FilterDirectory", 0);
        }

        void t_FilterDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "class_", make_descriptor(FilterDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectory::initializeClass, 1)))
            return NULL;
          return t_FilterDirectory::wrap_Object(FilterDirectory(((t_FilterDirectory *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLEncoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLEncoder::class$ = NULL;
          jmethodID *SimpleHTMLEncoder::mids$ = NULL;
          bool SimpleHTMLEncoder::live$ = false;

          jclass SimpleHTMLEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_htmlEncode_97a5258f] = env->getStaticMethodID(cls, "htmlEncode", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLEncoder::SimpleHTMLEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String SimpleHTMLEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }

          ::java::lang::String SimpleHTMLEncoder::htmlEncode(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_htmlEncode_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SimpleHTMLEncoder__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, encodeText, METH_O),
            DECLARE_METHOD(t_SimpleHTMLEncoder, htmlEncode, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLEncoder, t_SimpleHTMLEncoder, ::java::lang::Object, SimpleHTMLEncoder, t_SimpleHTMLEncoder_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLEncoder), module, "SimpleHTMLEncoder", 0);
          }

          void t_SimpleHTMLEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "class_", make_descriptor(SimpleHTMLEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLEncoder::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLEncoder::wrap_Object(SimpleHTMLEncoder(((t_SimpleHTMLEncoder *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds)
          {
            SimpleHTMLEncoder object((jobject) NULL);

            INT_CALL(object = SimpleHTMLEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }

          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::SimpleHTMLEncoder::htmlEncode(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "htmlEncode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanQueryBuilder::class$ = NULL;
            jmethodID *BooleanQueryBuilder::mids$ = NULL;
            bool BooleanQueryBuilder::live$ = false;

            jclass BooleanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanQueryBuilder::BooleanQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanQueryBuilder, t_BooleanQueryBuilder, ::java::lang::Object, BooleanQueryBuilder, t_BooleanQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanQueryBuilder), module, "BooleanQueryBuilder", 0);
            }

            void t_BooleanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "class_", make_descriptor(BooleanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanQueryBuilder::wrap_Object(BooleanQueryBuilder(((t_BooleanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BooleanQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/BlockGroupingCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *BlockGroupingCollector::class$ = NULL;
          jmethodID *BlockGroupingCollector::mids$ = NULL;
          bool BlockGroupingCollector::live$ = false;

          jclass BlockGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/BlockGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_418a7963] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZLorg/apache/lucene/search/Filter;)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_79cd6253] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockGroupingCollector::BlockGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_418a7963, a0.this$, a1, a2, a3.this$)) {}

          jboolean BlockGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void BlockGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups BlockGroupingCollector::getTopGroups(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_79cd6253], a0.this$, a1, a2, a3, a4));
          }

          void BlockGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void BlockGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args);
          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_BlockGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_BlockGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_BlockGroupingCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_BlockGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockGroupingCollector, t_BlockGroupingCollector, ::org::apache::lucene::search::Collector, BlockGroupingCollector, t_BlockGroupingCollector_init_, 0, 0, t_BlockGroupingCollector__fields_, 0, 0);

          void t_BlockGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockGroupingCollector), module, "BlockGroupingCollector", 0);
          }

          void t_BlockGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "class_", make_descriptor(BlockGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_BlockGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_BlockGroupingCollector::wrap_Object(BlockGroupingCollector(((t_BlockGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::Filter a3((jobject) NULL);
            BlockGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZk", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockGroupingCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleFieldSource::class$ = NULL;
            jmethodID *DoubleFieldSource::mids$ = NULL;
            bool DoubleFieldSource::live$ = false;

            jclass DoubleFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_5456b073] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5456b073, a0.this$, a1.this$)) {}

            ::java::lang::String DoubleFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args);

            static PyMethodDef t_DoubleFieldSource__methods_[] = {
              DECLARE_METHOD(t_DoubleFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleFieldSource, t_DoubleFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, DoubleFieldSource, t_DoubleFieldSource_init_, 0, 0, 0, 0, 0);

            void t_DoubleFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleFieldSource), module, "DoubleFieldSource", 0);
            }

            void t_DoubleFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "class_", make_descriptor(DoubleFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleFieldSource::initializeClass, 1)))
                return NULL;
              return t_DoubleFieldSource::wrap_Object(DoubleFieldSource(((t_DoubleFieldSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = DoubleFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = DoubleFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModel::class$ = NULL;
          jmethodID *BasicModel::mids$ = NULL;
          bool BasicModel::live$ = false;

          jclass BasicModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModel::BasicModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModel::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModel::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args);

          static PyMethodDef t_BasicModel__methods_[] = {
            DECLARE_METHOD(t_BasicModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModel, t_BasicModel, ::java::lang::Object, BasicModel, t_BasicModel_init_, 0, 0, 0, 0, 0);

          void t_BasicModel::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModel), module, "BasicModel", 0);
          }

          void t_BasicModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "class_", make_descriptor(BasicModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "wrapfn_", make_descriptor(t_BasicModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModel::initializeClass, 1)))
              return NULL;
            return t_BasicModel::wrap_Object(BasicModel(((t_BasicModel *) arg)->object.this$));
          }
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds)
          {
            BasicModel object((jobject) NULL);

            INT_CALL(object = BasicModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModel), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilter::class$ = NULL;
          jmethodID *CodepointCountFilter::mids$ = NULL;
          bool CodepointCountFilter::live$ = false;

          jclass CodepointCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilter::CodepointCountFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean CodepointCountFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self);

          static PyMethodDef t_CodepointCountFilter__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilter, t_CodepointCountFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, CodepointCountFilter, t_CodepointCountFilter_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilter), module, "CodepointCountFilter", 0);
          }

          void t_CodepointCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "class_", make_descriptor(CodepointCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilter::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilter::wrap_Object(CodepointCountFilter(((t_CodepointCountFilter *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            jint a2;
            jint a3;
            CodepointCountFilter object((jobject) NULL);

            if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = CodepointCountFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *StandardTokenizerImpl31::class$ = NULL;
            jmethodID *StandardTokenizerImpl31::mids$ = NULL;
            bool StandardTokenizerImpl31::live$ = false;
            jint StandardTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::YYEOF = (jint) 0;
            jint StandardTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl31::StandardTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl31__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl31, t_StandardTokenizerImpl31, ::java::lang::Object, StandardTokenizerImpl31, t_StandardTokenizerImpl31_init_, 0, 0, t_StandardTokenizerImpl31__fields_, 0, 0);

            void t_StandardTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl31), module, "StandardTokenizerImpl31", 0);
            }

            void t_StandardTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "class_", make_descriptor(StandardTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl31::wrap_Object(StandardTokenizerImpl31(((t_StandardTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/Fields.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsReader::class$ = NULL;
        jmethodID *TermVectorsReader::mids$ = NULL;
        bool TermVectorsReader::live$ = false;

        jclass TermVectorsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        TermVectorsReader TermVectorsReader::clone() const
        {
          return TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
        }

        ::org::apache::lucene::index::Fields TermVectorsReader::get(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg);

        static PyMethodDef t_TermVectorsReader__methods_[] = {
          DECLARE_METHOD(t_TermVectorsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsReader, t_TermVectorsReader, ::java::lang::Object, TermVectorsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsReader), module, "TermVectorsReader", 0);
        }

        void t_TermVectorsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "class_", make_descriptor(TermVectorsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsReader::initializeClass, 1)))
            return NULL;
          return t_TermVectorsReader::wrap_Object(TermVectorsReader(((t_TermVectorsReader *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self)
        {
          TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Filter::class$ = NULL;
        jmethodID *Filter::mids$ = NULL;
        bool Filter::live$ = false;

        jclass Filter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Filter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Filter::Filter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::DocIdSet Filter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args);

        static PyMethodDef t_Filter__methods_[] = {
          DECLARE_METHOD(t_Filter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, getDocIdSet, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Filter, t_Filter, ::java::lang::Object, Filter, t_Filter_init_, 0, 0, 0, 0, 0);

        void t_Filter::install(PyObject *module)
        {
          installType(&PY_TYPE(Filter), module, "Filter", 0);
        }

        void t_Filter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "class_", make_descriptor(Filter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "wrapfn_", make_descriptor(t_Filter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Filter::initializeClass, 1)))
            return NULL;
          return t_Filter::wrap_Object(Filter(((t_Filter *) arg)->object.this$));
        }
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Filter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds)
        {
          Filter object((jobject) NULL);

          INT_CALL(object = Filter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocIdSet", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$GroupedFacetResult::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$GroupedFacetResult::mids$ = NULL;
          bool AbstractGroupFacetCollector$GroupedFacetResult::live$ = false;

          jclass AbstractGroupFacetCollector$GroupedFacetResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$GroupedFacetResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90d4781f] = env->getMethodID(cls, "<init>", "(IIZII)V");
              mids$[mid_addFacetCount_738fc2ce] = env->getMethodID(cls, "addFacetCount", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_getFacetEntries_6bc635fe] = env->getMethodID(cls, "getFacetEntries", "(II)Ljava/util/List;");
              mids$[mid_getTotalCount_54c6a179] = env->getMethodID(cls, "getTotalCount", "()I");
              mids$[mid_getTotalMissingCount_54c6a179] = env->getMethodID(cls, "getTotalMissingCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$GroupedFacetResult::AbstractGroupFacetCollector$GroupedFacetResult(jint a0, jint a1, jboolean a2, jint a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_90d4781f, a0, a1, a2, a3, a4)) {}

          void AbstractGroupFacetCollector$GroupedFacetResult::addFacetCount(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFacetCount_738fc2ce], a0.this$, a1);
          }

          ::java::util::List AbstractGroupFacetCollector$GroupedFacetResult::getFacetEntries(jint a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFacetEntries_6bc635fe], a0, a1));
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalCount_54c6a179]);
          }

          jint AbstractGroupFacetCollector$GroupedFacetResult::getTotalMissingCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalMissingCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$GroupedFacetResult__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalCount),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$GroupedFacetResult, totalMissingCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$GroupedFacetResult__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, addFacetCount, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getFacetEntries, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$GroupedFacetResult, getTotalMissingCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult, ::java::lang::Object, AbstractGroupFacetCollector$GroupedFacetResult, t_AbstractGroupFacetCollector$GroupedFacetResult_init_, 0, 0, t_AbstractGroupFacetCollector$GroupedFacetResult__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$GroupedFacetResult::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult), module, "AbstractGroupFacetCollector$GroupedFacetResult", 0);
          }

          void t_AbstractGroupFacetCollector$GroupedFacetResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$GroupedFacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$GroupedFacetResult::wrap_Object(AbstractGroupFacetCollector$GroupedFacetResult(((t_AbstractGroupFacetCollector$GroupedFacetResult *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$GroupedFacetResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$GroupedFacetResult_init_(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jboolean a2;
            jint a3;
            jint a4;
            AbstractGroupFacetCollector$GroupedFacetResult object((jobject) NULL);

            if (!parseArgs(args, "IIZII", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = AbstractGroupFacetCollector$GroupedFacetResult(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_addFacetCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFacetCount(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFacetCount", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getFacetEntries(t_AbstractGroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFacetEntries(a0, a1));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::PY_TYPE(AbstractGroupFacetCollector$FacetEntry));
            }

            PyErr_SetArgsError((PyObject *) self, "getFacetEntries", args);
            return NULL;
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_AbstractGroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalMissingCount());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilter::class$ = NULL;
          jmethodID *LimitTokenCountFilter::mids$ = NULL;
          bool LimitTokenCountFilter::live$ = false;

          jclass LimitTokenCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenCountFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenCountFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args);
          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenCountFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilter, t_LimitTokenCountFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenCountFilter, t_LimitTokenCountFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilter), module, "LimitTokenCountFilter", 0);
          }

          void t_LimitTokenCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "class_", make_descriptor(LimitTokenCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilter::wrap_Object(LimitTokenCountFilter(((t_LimitTokenCountFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilter::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilter::mids$ = NULL;
          bool RemoveDuplicatesTokenFilter::live$ = false;

          jclass RemoveDuplicatesTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilter::RemoveDuplicatesTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RemoveDuplicatesTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void RemoveDuplicatesTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args);
          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilter__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter, ::org::apache::lucene::analysis::TokenFilter, RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilter), module, "RemoveDuplicatesTokenFilter", 0);
          }

          void t_RemoveDuplicatesTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilter::wrap_Object(RemoveDuplicatesTokenFilter(((t_RemoveDuplicatesTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RemoveDuplicatesTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AndQueryNode::class$ = NULL;
              jmethodID *AndQueryNode::mids$ = NULL;
              bool AndQueryNode::live$ = false;

              jclass AndQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AndQueryNode::AndQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence AndQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AndQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args);
              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args);

              static PyMethodDef t_AndQueryNode__methods_[] = {
                DECLARE_METHOD(t_AndQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AndQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AndQueryNode, t_AndQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, AndQueryNode, t_AndQueryNode_init_, 0, 0, 0, 0, 0);

              void t_AndQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AndQueryNode), module, "AndQueryNode", 0);
              }

              void t_AndQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "class_", make_descriptor(AndQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AndQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AndQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AndQueryNode::wrap_Object(AndQueryNode(((t_AndQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AndQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                AndQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = AndQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FileSwitchDirectory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FileSwitchDirectory::class$ = NULL;
        jmethodID *FileSwitchDirectory::mids$ = NULL;
        bool FileSwitchDirectory::live$ = false;

        jclass FileSwitchDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FileSwitchDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4575167f] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getPrimaryDir_1f3934bb] = env->getMethodID(cls, "getPrimaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getSecondaryDir_1f3934bb] = env->getMethodID(cls, "getSecondaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FileSwitchDirectory::FileSwitchDirectory(const ::java::util::Set & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_4575167f, a0.this$, a1.this$, a2.this$, a3)) {}

        void FileSwitchDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FileSwitchDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FileSwitchDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FileSwitchDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String FileSwitchDirectory::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getPrimaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getPrimaryDir_1f3934bb]));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getSecondaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getSecondaryDir_1f3934bb]));
        }

        JArray< ::java::lang::String > FileSwitchDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput FileSwitchDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data);
        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data);
        static PyGetSetDef t_FileSwitchDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FileSwitchDirectory, primaryDir),
          DECLARE_GET_FIELD(t_FileSwitchDirectory, secondaryDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FileSwitchDirectory__methods_[] = {
          DECLARE_METHOD(t_FileSwitchDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, getPrimaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getSecondaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FileSwitchDirectory, t_FileSwitchDirectory, ::org::apache::lucene::store::BaseDirectory, FileSwitchDirectory, t_FileSwitchDirectory_init_, 0, 0, t_FileSwitchDirectory__fields_, 0, 0);

        void t_FileSwitchDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FileSwitchDirectory), module, "FileSwitchDirectory", 0);
        }

        void t_FileSwitchDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "class_", make_descriptor(FileSwitchDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "wrapfn_", make_descriptor(t_FileSwitchDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FileSwitchDirectory::initializeClass, 1)))
            return NULL;
          return t_FileSwitchDirectory::wrap_Object(FileSwitchDirectory(((t_FileSwitchDirectory *) arg)->object.this$));
        }
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FileSwitchDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory a2((jobject) NULL);
          jboolean a3;
          FileSwitchDirectory object((jobject) NULL);

          if (!parseArgs(args, "KkkZ", ::java::util::Set::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &a2, &a3))
          {
            INT_CALL(object = FileSwitchDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FileSwitchDirectory::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeSpecification::class$ = NULL;
        jmethodID *MergePolicy$MergeSpecification::mids$ = NULL;
        jfieldID *MergePolicy$MergeSpecification::fids$ = NULL;
        bool MergePolicy$MergeSpecification::live$ = false;

        jclass MergePolicy$MergeSpecification::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeSpecification");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_54badd95] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_merges] = env->getFieldID(cls, "merges", "Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeSpecification::MergePolicy$MergeSpecification() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy$MergeSpecification::add(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_54badd95], a0.this$);
        }

        ::java::lang::String MergePolicy$MergeSpecification::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        ::java::util::List MergePolicy$MergeSpecification::_get_merges() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_merges]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data);

        static PyGetSetDef t_MergePolicy$MergeSpecification__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeSpecification, merges),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeSpecification__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, add, METH_O),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, segString, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification, ::java::lang::Object, MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification_init_, 0, 0, t_MergePolicy$MergeSpecification__fields_, 0, 0);

        void t_MergePolicy$MergeSpecification::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeSpecification), module, "MergePolicy$MergeSpecification", 0);
        }

        void t_MergePolicy$MergeSpecification::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "class_", make_descriptor(MergePolicy$MergeSpecification::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeSpecification::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeSpecification::wrap_Object(MergePolicy$MergeSpecification(((t_MergePolicy$MergeSpecification *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy$MergeSpecification object((jobject) NULL);

          INT_CALL(object = MergePolicy$MergeSpecification());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_merges());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumTotalTermFreqValueSource::class$ = NULL;
            jmethodID *SumTotalTermFreqValueSource::mids$ = NULL;
            bool SumTotalTermFreqValueSource::live$ = false;

            jclass SumTotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumTotalTermFreqValueSource::SumTotalTermFreqValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void SumTotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SumTotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SumTotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues SumTotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint SumTotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String SumTotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self);

            static PyMethodDef t_SumTotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_SumTotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(SumTotalTermFreqValueSource), module, "SumTotalTermFreqValueSource", 0);
            }

            void t_SumTotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "class_", make_descriptor(SumTotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_SumTotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SumTotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_SumTotalTermFreqValueSource::wrap_Object(SumTotalTermFreqValueSource(((t_SumTotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              SumTotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SumTotalTermFreqValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/NumericDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *NumericDocValuesField::class$ = NULL;
        jmethodID *NumericDocValuesField::mids$ = NULL;
        bool NumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *NumericDocValuesField::TYPE = NULL;

        jclass NumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/NumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericDocValuesField::NumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_NumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValuesField, t_NumericDocValuesField, ::org::apache::lucene::document::Field, NumericDocValuesField, t_NumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_NumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValuesField), module, "NumericDocValuesField", 0);
        }

        void t_NumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "class_", make_descriptor(NumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*NumericDocValuesField::TYPE)));
        }

        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_NumericDocValuesField::wrap_Object(NumericDocValuesField(((t_NumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          NumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = NumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongBitSet::class$ = NULL;
        jmethodID *LongBitSet::mids$ = NULL;
        bool LongBitSet::live$ = false;

        jclass LongBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_4c830bd0] = env->getMethodID(cls, "<init>", "([JJ)V");
            mids$[mid_and_6e24e395] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_andNot_6e24e395] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clone_47551698] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_ensureCapacity_b4f3a668] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/LongBitSet;J)Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_getAndClear_0ee6df23] = env->getMethodID(cls, "getAndClear", "(J)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersects_6e24e399] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/LongBitSet;)Z");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_6e24e395] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_xor_6e24e395] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/LongBitSet;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongBitSet::LongBitSet(jlong a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        LongBitSet::LongBitSet(const JArray< jlong > & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c830bd0, a0.this$, a1)) {}

        void LongBitSet::and$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_6e24e395], a0.this$);
        }

        void LongBitSet::andNot(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_6e24e395], a0.this$);
        }

        jint LongBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong LongBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void LongBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void LongBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        LongBitSet LongBitSet::clone() const
        {
          return LongBitSet(env->callObjectMethod(this$, mids$[mid_clone_47551698]));
        }

        LongBitSet LongBitSet::ensureCapacity(const LongBitSet & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return LongBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_b4f3a668], a0.this$, a1));
        }

        jboolean LongBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean LongBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndClear(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        JArray< jlong > LongBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint LongBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongBitSet::intersects(const LongBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_6e24e399], a0.this$);
        }

        jlong LongBitSet::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jlong LongBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void LongBitSet::or$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_6e24e395], a0.this$);
        }

        jlong LongBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        void LongBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void LongBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        void LongBitSet::xor$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_6e24e395], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self);
        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_clone(t_LongBitSet *self);
        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self);
        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_length(t_LongBitSet *self);
        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data);
        static PyGetSetDef t_LongBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_LongBitSet, bits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongBitSet__methods_[] = {
          DECLARE_METHOD(t_LongBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, and, METH_O),
          DECLARE_METHOD(t_LongBitSet, andNot, METH_O),
          DECLARE_METHOD(t_LongBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, get, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_LongBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, intersects, METH_O),
          DECLARE_METHOD(t_LongBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, or, METH_O),
          DECLARE_METHOD(t_LongBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, xor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongBitSet, t_LongBitSet, ::java::lang::Object, LongBitSet, t_LongBitSet_init_, 0, 0, t_LongBitSet__fields_, 0, 0);

        void t_LongBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(LongBitSet), module, "LongBitSet", 0);
        }

        void t_LongBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "class_", make_descriptor(LongBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "wrapfn_", make_descriptor(t_LongBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongBitSet::initializeClass, 1)))
            return NULL;
          return t_LongBitSet::wrap_Object(LongBitSet(((t_LongBitSet *) arg)->object.this$));
        }
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = LongBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jlong a1;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JJ", &a0, &a1))
              {
                INT_CALL(object = LongBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_clone(t_LongBitSet *self)
        {
          LongBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongBitSet::wrap_Object(result);
        }

        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          LongBitSet a0((jobject) NULL);
          jlong a1;
          LongBitSet result((jobject) NULL);

          if (!parseArgs(args, "kJ", LongBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::ensureCapacity(a0, a1));
            return t_LongBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args)
        {
          jlong a0;
          jlong a1;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_length(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBits());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferedInputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferedInputIterator::class$ = NULL;
          jmethodID *BufferedInputIterator::mids$ = NULL;
          bool BufferedInputIterator::live$ = false;

          jclass BufferedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferedInputIterator::BufferedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set BufferedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator BufferedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean BufferedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean BufferedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong BufferedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data);
          static PyGetSetDef t_BufferedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_BufferedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferedInputIterator__methods_[] = {
            DECLARE_METHOD(t_BufferedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferedInputIterator, t_BufferedInputIterator, ::java::lang::Object, BufferedInputIterator, t_BufferedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferedInputIterator *)) get_next< t_BufferedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferedInputIterator__fields_, 0, 0);

          void t_BufferedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferedInputIterator), module, "BufferedInputIterator", 0);
          }

          void t_BufferedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "class_", make_descriptor(BufferedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_BufferedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferedInputIterator::initializeClass, 1)))
              return NULL;
            return t_BufferedInputIterator::wrap_Object(BufferedInputIterator(((t_BufferedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            BufferedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter$Side::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter$Side::mids$ = NULL;
          bool EdgeNGramTokenFilter$Side::live$ = false;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::BACK = NULL;
          EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter$Side::FRONT = NULL;

          jclass EdgeNGramTokenFilter$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_e04ee6cc] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_valueOf_e04ee6cc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");
              mids$[mid_values_16957b8a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              FRONT = new EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String EdgeNGramTokenFilter$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_e04ee6cc], a0.this$));
          }

          EdgeNGramTokenFilter$Side EdgeNGramTokenFilter$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return EdgeNGramTokenFilter$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e04ee6cc], a0.this$));
          }

          JArray< EdgeNGramTokenFilter$Side > EdgeNGramTokenFilter$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< EdgeNGramTokenFilter$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_16957b8a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self);
          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data);
          static PyGetSetDef t_EdgeNGramTokenFilter$Side__fields_[] = {
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, label),
            DECLARE_GET_FIELD(t_EdgeNGramTokenFilter$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EdgeNGramTokenFilter$Side__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter$Side, t_EdgeNGramTokenFilter$Side, ::java::lang::Enum, EdgeNGramTokenFilter$Side, abstract_init, 0, 0, t_EdgeNGramTokenFilter$Side__fields_, 0, 0);
          PyObject *t_EdgeNGramTokenFilter$Side::wrap_Object(const EdgeNGramTokenFilter$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_EdgeNGramTokenFilter$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_EdgeNGramTokenFilter$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_EdgeNGramTokenFilter$Side *self = (t_EdgeNGramTokenFilter$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_EdgeNGramTokenFilter$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter$Side), module, "EdgeNGramTokenFilter$Side", 0);
          }

          void t_EdgeNGramTokenFilter$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "BACK", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter$Side).tp_dict, "FRONT", make_descriptor(t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter$Side::FRONT)));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter$Side::wrap_Object(EdgeNGramTokenFilter$Side(((t_EdgeNGramTokenFilter$Side *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_of_(t_EdgeNGramTokenFilter$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getLabel(t_EdgeNGramTokenFilter$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::getSide(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            EdgeNGramTokenFilter$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::valueOf(a0));
              return t_EdgeNGramTokenFilter$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_values(PyTypeObject *type)
          {
            JArray< EdgeNGramTokenFilter$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::values());
            return JArray<jobject>(result.this$).wrap(t_EdgeNGramTokenFilter$Side::wrap_jobject);
          }
          static PyObject *t_EdgeNGramTokenFilter$Side_get__parameters_(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_EdgeNGramTokenFilter$Side_get__label(t_EdgeNGramTokenFilter$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator::live$ = false;

          jclass ToParentBlockJoinFieldComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
              mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ToParentBlockJoinFieldComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          void ToParentBlockJoinFieldComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinFieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void ToParentBlockJoinFieldComparator::setTopValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
          }

          ::java::lang::Object ToParentBlockJoinFieldComparator::value(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator__fields_[] = {
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, bottom),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, topValue),
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator, t_ToParentBlockJoinFieldComparator, ::org::apache::lucene::search::FieldComparator, ToParentBlockJoinFieldComparator, abstract_init, 0, 0, t_ToParentBlockJoinFieldComparator__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator::wrap_Object(const ToParentBlockJoinFieldComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator), module, "ToParentBlockJoinFieldComparator", 0);
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Highest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest)));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Lowest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest)));
          }

          void t_ToParentBlockJoinFieldComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator::wrap_Object(ToParentBlockJoinFieldComparator(((t_ToParentBlockJoinFieldComparator *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonComparable.h"
#include "java/lang/Throwable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonComparable::class$ = NULL;
        jmethodID *PythonComparable::mids$ = NULL;
        bool PythonComparable::live$ = false;

        jclass PythonComparable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonComparable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonComparable::PythonComparable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonComparable::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonComparable::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonComparable::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self);
        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args);
        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data);
        static PyGetSetDef t_PythonComparable__fields_[] = {
          DECLARE_GET_FIELD(t_PythonComparable, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonComparable__methods_[] = {
          DECLARE_METHOD(t_PythonComparable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonComparable, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonComparable, t_PythonComparable, ::java::lang::Object, PythonComparable, t_PythonComparable_init_, 0, 0, t_PythonComparable__fields_, 0, 0);

        void t_PythonComparable::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonComparable), module, "PythonComparable", 1);
        }

        void t_PythonComparable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "class_", make_descriptor(PythonComparable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "wrapfn_", make_descriptor(t_PythonComparable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonComparable::initializeClass);
          JNINativeMethod methods[] = {
            { "compareTo", "(Ljava/lang/Object;)I", (void *) t_PythonComparable_compareTo0 },
            { "pythonDecRef", "()V", (void *) t_PythonComparable_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonComparable::initializeClass, 1)))
            return NULL;
          return t_PythonComparable::wrap_Object(PythonComparable(((t_PythonComparable *) arg)->object.this$));
        }
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonComparable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds)
        {
          PythonComparable object((jobject) NULL);

          INT_CALL(object = PythonComparable());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "compareTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTo", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SingleInstanceLockFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SingleInstanceLockFactory::class$ = NULL;
        jmethodID *SingleInstanceLockFactory::mids$ = NULL;
        bool SingleInstanceLockFactory::live$ = false;

        jclass SingleInstanceLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SingleInstanceLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleInstanceLockFactory::SingleInstanceLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SingleInstanceLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SingleInstanceLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args);
        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args);

        static PyMethodDef t_SingleInstanceLockFactory__methods_[] = {
          DECLARE_METHOD(t_SingleInstanceLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleInstanceLockFactory, t_SingleInstanceLockFactory, ::org::apache::lucene::store::LockFactory, SingleInstanceLockFactory, t_SingleInstanceLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SingleInstanceLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleInstanceLockFactory), module, "SingleInstanceLockFactory", 0);
        }

        void t_SingleInstanceLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "class_", make_descriptor(SingleInstanceLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SingleInstanceLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleInstanceLockFactory::initializeClass, 1)))
            return NULL;
          return t_SingleInstanceLockFactory::wrap_Object(SingleInstanceLockFactory(((t_SingleInstanceLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleInstanceLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds)
        {
          SingleInstanceLockFactory object((jobject) NULL);

          INT_CALL(object = SingleInstanceLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$FloatComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$FloatComparator::class$ = NULL;
        jmethodID *FieldComparator$FloatComparator::mids$ = NULL;
        bool FieldComparator$FloatComparator::live$ = false;

        jclass FieldComparator$FloatComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$FloatComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3177756] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Float;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");
            mids$[mid_getFloatValues_e61237ca] = env->getMethodID(cls, "getFloatValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Floats;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$FloatComparator::FieldComparator$FloatComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Float & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_d3177756, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$FloatComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$FloatComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$FloatComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$FloatComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$FloatComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$FloatComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$FloatComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$FloatComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args);
        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$FloatComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$FloatComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$FloatComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$FloatComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$FloatComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$FloatComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$FloatComparator, t_FieldComparator$FloatComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$FloatComparator, t_FieldComparator$FloatComparator_init_, 0, 0, t_FieldComparator$FloatComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$FloatComparator::wrap_Object(const FieldComparator$FloatComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$FloatComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$FloatComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$FloatComparator *self = (t_FieldComparator$FloatComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$FloatComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$FloatComparator), module, "FieldComparator$FloatComparator", 0);
        }

        void t_FieldComparator$FloatComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "class_", make_descriptor(FieldComparator$FloatComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$FloatComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$FloatComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$FloatComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$FloatComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$FloatComparator::wrap_Object(FieldComparator$FloatComparator(((t_FieldComparator$FloatComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$FloatComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$FloatComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$FloatComparator_of_(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$FloatComparator_init_(t_FieldComparator$FloatComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Float a3((jobject) NULL);
          FieldComparator$FloatComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$FloatComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Float);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$FloatComparator_compare(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_compareTop(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_copy(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setBottom(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setNextReader(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_setTopValue(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$FloatComparator_value(t_FieldComparator$FloatComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$FloatComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$FloatComparator_get__parameters_(t_FieldComparator$FloatComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$FloatComparator_set__bottom(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__nextReader(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$FloatComparator_set__topValue(t_FieldComparator$FloatComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_or_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_or_return::mids$ = NULL;
          bool JavascriptParser$bitwise_or_return::live$ = false;

          jclass JavascriptParser$bitwise_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_or_return::JavascriptParser$bitwise_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_or_return), module, "JavascriptParser$bitwise_or_return", 0);
          }

          void t_JavascriptParser$bitwise_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_or_return::wrap_Object(JavascriptParser$bitwise_or_return(((t_JavascriptParser$bitwise_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermToBytesRefAttribute::class$ = NULL;
          jmethodID *TermToBytesRefAttribute::mids$ = NULL;
          bool TermToBytesRefAttribute::live$ = false;

          jclass TermToBytesRefAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TermToBytesRefAttribute::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef TermToBytesRefAttribute::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data);
          static PyGetSetDef t_TermToBytesRefAttribute__fields_[] = {
            DECLARE_GET_FIELD(t_TermToBytesRefAttribute, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermToBytesRefAttribute__methods_[] = {
            DECLARE_METHOD(t_TermToBytesRefAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, getBytesRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermToBytesRefAttribute, t_TermToBytesRefAttribute, ::org::apache::lucene::util::Attribute, TermToBytesRefAttribute, abstract_init, 0, 0, t_TermToBytesRefAttribute__fields_, 0, 0);

          void t_TermToBytesRefAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TermToBytesRefAttribute), module, "TermToBytesRefAttribute", 0);
          }

          void t_TermToBytesRefAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "class_", make_descriptor(TermToBytesRefAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "wrapfn_", make_descriptor(t_TermToBytesRefAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermToBytesRefAttribute::initializeClass, 1)))
              return NULL;
            return t_TermToBytesRefAttribute::wrap_Object(TermToBytesRefAttribute(((t_TermToBytesRefAttribute *) arg)->object.this$));
          }
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermToBytesRefAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilterFactory::class$ = NULL;
          jmethodID *LengthFilterFactory::mids$ = NULL;
          bool LengthFilterFactory::live$ = false;
          ::java::lang::String *LengthFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *LengthFilterFactory::MIN_KEY = NULL;

          jclass LengthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c5f48534] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/LengthFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilterFactory::LengthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::LengthFilter LengthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::LengthFilter(env->callObjectMethod(this$, mids$[mid_create_c5f48534], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args);

          static PyMethodDef t_LengthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LengthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilterFactory, t_LengthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LengthFilterFactory, t_LengthFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LengthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilterFactory), module, "LengthFilterFactory", 0);
          }

          void t_LengthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "class_", make_descriptor(LengthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LengthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LengthFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*LengthFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*LengthFilterFactory::MIN_KEY)));
          }

          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LengthFilterFactory::wrap_Object(LengthFilterFactory(((t_LengthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LengthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LengthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::LengthFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_LengthFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LengthFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryWrapperFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryWrapperFilter::class$ = NULL;
        jmethodID *QueryWrapperFilter::mids$ = NULL;
        bool QueryWrapperFilter::live$ = false;

        jclass QueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryWrapperFilter::QueryWrapperFilter(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        jboolean QueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet QueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryWrapperFilter::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint QueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String QueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self);
        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data);
        static PyGetSetDef t_QueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_QueryWrapperFilter, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_QueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryWrapperFilter, t_QueryWrapperFilter, ::org::apache::lucene::search::Filter, QueryWrapperFilter, t_QueryWrapperFilter_init_, 0, 0, t_QueryWrapperFilter__fields_, 0, 0);

        void t_QueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryWrapperFilter), module, "QueryWrapperFilter", 0);
        }

        void t_QueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "class_", make_descriptor(QueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_QueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_QueryWrapperFilter::wrap_Object(QueryWrapperFilter(((t_QueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsWriter::class$ = NULL;
          jmethodID *BlockTreeTermsWriter::mids$ = NULL;
          bool BlockTreeTermsWriter::live$ = false;
          jint BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_APPEND_ONLY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CHECKSUM = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_META_ARRAY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass BlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3f2db6e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_APPEND_ONLY = env->getStaticIntField(cls, "VERSION_APPEND_ONLY");
              VERSION_CHECKSUM = env->getStaticIntField(cls, "VERSION_CHECKSUM");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_META_ARRAY = env->getStaticIntField(cls, "VERSION_META_ARRAY");
              VERSION_MIN_MAX_TERMS = env->getStaticIntField(cls, "VERSION_MIN_MAX_TERMS");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsWriter::BlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_3f2db6e1, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::codecs::TermsConsumer BlockTreeTermsWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
          }

          void BlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsWriter, t_BlockTreeTermsWriter, ::org::apache::lucene::codecs::FieldsConsumer, BlockTreeTermsWriter, t_BlockTreeTermsWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsWriter), module, "BlockTreeTermsWriter", 0);
          }

          void t_BlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "class_", make_descriptor(BlockTreeTermsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeTermsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_APPEND_ONLY", make_descriptor(BlockTreeTermsWriter::VERSION_APPEND_ONLY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CHECKSUM", make_descriptor(BlockTreeTermsWriter::VERSION_CHECKSUM));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CURRENT", make_descriptor(BlockTreeTermsWriter::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_META_ARRAY", make_descriptor(BlockTreeTermsWriter::VERSION_META_ARRAY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_MIN_MAX_TERMS", make_descriptor(BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_START", make_descriptor(BlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsWriter::wrap_Object(BlockTreeTermsWriter(((t_BlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            BlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addField(a0));
              return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader::class$ = NULL;
          jmethodID *CachedOrdinalsReader::mids$ = NULL;
          bool CachedOrdinalsReader::live$ = false;

          jclass CachedOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90116188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader::CachedOrdinalsReader(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_90116188, a0.this$)) {}

          ::java::lang::String CachedOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader CachedOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }

          jlong CachedOrdinalsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self);
          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data);
          static PyGetSetDef t_CachedOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getReader, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader, t_CachedOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, CachedOrdinalsReader, t_CachedOrdinalsReader_init_, 0, 0, t_CachedOrdinalsReader__fields_, 0, 0);

          void t_CachedOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader), module, "CachedOrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "CachedOrds", make_descriptor(&PY_TYPE(CachedOrdinalsReader$CachedOrds)));
          }

          void t_CachedOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "class_", make_descriptor(CachedOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader::wrap_Object(CachedOrdinalsReader(((t_CachedOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            CachedOrdinalsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, &a0))
            {
              INT_CALL(object = CachedOrdinalsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanSingleChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanSingleChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool BooleanSingleChildOptimizationQueryNodeProcessor::live$ = false;

              jclass BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanSingleChildOptimizationQueryNodeProcessor::BooleanSingleChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanSingleChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), module, "BooleanSingleChildOptimizationQueryNodeProcessor", 0);
              }

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_Object(BooleanSingleChildOptimizationQueryNodeProcessor(((t_BooleanSingleChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanSingleChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanSingleChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Comparator.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Iterable.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *String::class$ = NULL;
    jmethodID *String::mids$ = NULL;
    bool String::live$ = false;
    ::java::util::Comparator *String::CASE_INSENSITIVE_ORDER = NULL;

    jclass String::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/String");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9f94ae34] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
        mids$[mid_init$_44634788] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
        mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
        mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
        mids$[mid_init$_1a0c6fd5] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
        mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
        mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
        mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
        mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
        mids$[mid_init$_5ab96441] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
        mids$[mid_init$_96a25f0b] = env->getMethodID(cls, "<init>", "([BIII)V");
        mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
        mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
        mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
        mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
        mids$[mid_compareTo_5fdc3f57] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
        mids$[mid_compareToIgnoreCase_5fdc3f57] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
        mids$[mid_concat_97a5258f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_a8afc646] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_44634784] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
        mids$[mid_copyValueOf_c783d655] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
        mids$[mid_copyValueOf_ddb60785] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
        mids$[mid_endsWith_5fdc3f44] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equalsIgnoreCase_5fdc3f44] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
        mids$[mid_format_0fb26e3b] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_format_84ed7d06] = env->getStaticMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_getBytes_dab10e7e] = env->getMethodID(cls, "getBytes", "()[B");
        mids$[mid_getBytes_94a731a4] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
        mids$[mid_getBytes_fdf97d27] = env->getMethodID(cls, "getBytes", "(II[BI)V");
        mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_indexOf_39c7bd23] = env->getMethodID(cls, "indexOf", "(I)I");
        mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
        mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
        mids$[mid_indexOf_d8d154b9] = env->getMethodID(cls, "indexOf", "(II)I");
        mids$[mid_intern_14c7b5c5] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_join_914ef00d] = env->getStaticMethodID(cls, "join", "(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_join_900052c8] = env->getStaticMethodID(cls, "join", "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;");
        mids$[mid_lastIndexOf_39c7bd23] = env->getMethodID(cls, "lastIndexOf", "(I)I");
        mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
        mids$[mid_lastIndexOf_d8d154b9] = env->getMethodID(cls, "lastIndexOf", "(II)I");
        mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
        mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
        mids$[mid_matches_5fdc3f44] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
        mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
        mids$[mid_regionMatches_344d8cb6] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
        mids$[mid_regionMatches_35f2560d] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
        mids$[mid_replace_f1c62e0d] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
        mids$[mid_replace_103b702d] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_replaceAll_aacea7e9] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_replaceFirst_aacea7e9] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_split_1f6a174f] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
        mids$[mid_split_3384fe85] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
        mids$[mid_startsWith_5fdc3f44] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
        mids$[mid_startsWith_6e53ccca] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
        mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
        mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
        mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
        mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
        mids$[mid_toLowerCase_14c7b5c5] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
        mids$[mid_toLowerCase_c0fb304e] = env->getMethodID(cls, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_14c7b5c5] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_c0fb304e] = env->getMethodID(cls, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_trim_14c7b5c5] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
        mids$[mid_valueOf_445a175e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_c9db4eed] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_valueOf_5ded254a] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_1b4624f8] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_141401b3] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
        mids$[mid_valueOf_c783d655] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
        mids$[mid_valueOf_7611a535] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
        mids$[mid_valueOf_3e02f30e] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
        mids$[mid_valueOf_ddb60785] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CASE_INSENSITIVE_ORDER = new ::java::util::Comparator(env->getStaticObjectField(cls, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f94ae34, a0.this$)) {}

    String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44634788, a0.this$)) {}

    String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

    String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

    String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a0c6fd5, a0.this$, a1.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

    String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

    String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab96441, a0.this$, a1, a2, a3.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_96a25f0b, a0.this$, a1, a2, a3)) {}

    jchar String::charAt(jint a0) const
    {
      return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
    }

    jint String::codePointAt(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
    }

    jint String::codePointBefore(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
    }

    jint String::codePointCount(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
    }

    jint String::compareTo(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_5fdc3f57], a0.this$);
    }

    jint String::compareToIgnoreCase(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_5fdc3f57], a0.this$);
    }

    String String::concat(const String & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_concat_97a5258f], a0.this$));
    }

    jboolean String::contains(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_44634784], a0.this$);
    }

    String String::copyValueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_c783d655], a0.this$));
    }

    String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_ddb60785], a0.this$, a1, a2));
    }

    jboolean String::endsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_endsWith_5fdc3f44], a0.this$);
    }

    jboolean String::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean String::equalsIgnoreCase(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_5fdc3f44], a0.this$);
    }

    String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_0fb26e3b], a0.this$, a1.this$));
    }

    String String::format(const ::java::util::Locale & a0, const String & a1, const JArray< ::java::lang::Object > & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_84ed7d06], a0.this$, a1.this$, a2.this$));
    }

    JArray< jbyte > String::getBytes() const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_dab10e7e]));
    }

    JArray< jbyte > String::getBytes(const String & a0) const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_94a731a4], a0.this$));
    }

    void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getBytes_fdf97d27], a0, a1, a2.this$, a3);
    }

    void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
    }

    jint String::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint String::indexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_39c7bd23], a0);
    }

    jint String::indexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
    }

    jint String::indexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::indexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_d8d154b9], a0, a1);
    }

    String String::intern() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_intern_14c7b5c5]));
    }

    jboolean String::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    String String::join(const ::java::lang::CharSequence & a0, const JArray< ::java::lang::CharSequence > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_join_914ef00d], a0.this$, a1.this$));
    }

    String String::join(const ::java::lang::CharSequence & a0, const ::java::lang::Iterable & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_join_900052c8], a0.this$, a1.this$));
    }

    jint String::lastIndexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_39c7bd23], a0);
    }

    jint String::lastIndexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
    }

    jint String::lastIndexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_d8d154b9], a0, a1);
    }

    jint String::lastIndexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::length() const
    {
      return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
    }

    jboolean String::matches(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_matches_5fdc3f44], a0.this$);
    }

    jint String::offsetByCodePoints(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
    }

    jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_344d8cb6], a0, a1.this$, a2, a3);
    }

    jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_35f2560d], a0, a1, a2.this$, a3, a4);
    }

    String String::replace(jchar a0, jchar a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_f1c62e0d], a0, a1));
    }

    String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_103b702d], a0.this$, a1.this$));
    }

    String String::replaceAll(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceAll_aacea7e9], a0.this$, a1.this$));
    }

    String String::replaceFirst(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_aacea7e9], a0.this$, a1.this$));
    }

    JArray< String > String::split(const String & a0) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1f6a174f], a0.this$));
    }

    JArray< String > String::split(const String & a0, jint a1) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_3384fe85], a0.this$, a1));
    }

    jboolean String::startsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_5fdc3f44], a0.this$);
    }

    jboolean String::startsWith(const String & a0, jint a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_6e53ccca], a0.this$, a1);
    }

    ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
    {
      return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
    }

    String String::substring(jint a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
    }

    String String::substring(jint a0, jint a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
    }

    JArray< jchar > String::toCharArray() const
    {
      return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
    }

    String String::toLowerCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_14c7b5c5]));
    }

    String String::toLowerCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_c0fb304e], a0.this$));
    }

    String String::toString() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    String String::toUpperCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_14c7b5c5]));
    }

    String String::toUpperCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_c0fb304e], a0.this$));
    }

    String String::trim() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_trim_14c7b5c5]));
    }

    String String::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_445a175e], a0));
    }

    String String::valueOf(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c9db4eed], a0.this$));
    }

    String String::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ded254a], a0));
    }

    String String::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1b4624f8], a0));
    }

    String String::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_141401b3], a0));
    }

    String String::valueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c783d655], a0.this$));
    }

    String String::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7611a535], a0));
    }

    String String::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3e02f30e], a0));
    }

    String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ddb60785], a0.this$, a1, a2));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
    static PyObject *t_String_charAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
    static PyObject *t_String_compareTo(t_String *self, PyObject *arg);
    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_concat(t_String *self, PyObject *arg);
    static PyObject *t_String_contains(t_String *self, PyObject *arg);
    static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
    static PyObject *t_String_equals(t_String *self, PyObject *args);
    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_getBytes(t_String *self, PyObject *args);
    static PyObject *t_String_getChars(t_String *self, PyObject *args);
    static PyObject *t_String_hashCode(t_String *self, PyObject *args);
    static PyObject *t_String_indexOf(t_String *self, PyObject *args);
    static PyObject *t_String_intern(t_String *self);
    static PyObject *t_String_isEmpty(t_String *self);
    static PyObject *t_String_join(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
    static PyObject *t_String_length(t_String *self);
    static PyObject *t_String_matches(t_String *self, PyObject *arg);
    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
    static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
    static PyObject *t_String_replace(t_String *self, PyObject *args);
    static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
    static PyObject *t_String_split(t_String *self, PyObject *args);
    static PyObject *t_String_startsWith(t_String *self, PyObject *args);
    static PyObject *t_String_subSequence(t_String *self, PyObject *args);
    static PyObject *t_String_substring(t_String *self, PyObject *args);
    static PyObject *t_String_toCharArray(t_String *self);
    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args);
    static PyObject *t_String_toString(t_String *self, PyObject *args);
    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args);
    static PyObject *t_String_trim(t_String *self);
    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_get__bytes(t_String *self, void *data);
    static PyObject *t_String_get__empty(t_String *self, void *data);
    static PyGetSetDef t_String__fields_[] = {
      DECLARE_GET_FIELD(t_String, bytes),
      DECLARE_GET_FIELD(t_String, empty),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_String__methods_[] = {
      DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, charAt, METH_O),
      DECLARE_METHOD(t_String, codePointAt, METH_O),
      DECLARE_METHOD(t_String, codePointBefore, METH_O),
      DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
      DECLARE_METHOD(t_String, compareTo, METH_O),
      DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, concat, METH_O),
      DECLARE_METHOD(t_String, contains, METH_O),
      DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
      DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, endsWith, METH_O),
      DECLARE_METHOD(t_String, equals, METH_VARARGS),
      DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
      DECLARE_METHOD(t_String, getChars, METH_VARARGS),
      DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, intern, METH_NOARGS),
      DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_String, join, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, length, METH_NOARGS),
      DECLARE_METHOD(t_String, matches, METH_O),
      DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
      DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
      DECLARE_METHOD(t_String, replace, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
      DECLARE_METHOD(t_String, split, METH_VARARGS),
      DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
      DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
      DECLARE_METHOD(t_String, substring, METH_VARARGS),
      DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
      DECLARE_METHOD(t_String, toLowerCase, METH_VARARGS),
      DECLARE_METHOD(t_String, toString, METH_VARARGS),
      DECLARE_METHOD(t_String, toUpperCase, METH_VARARGS),
      DECLARE_METHOD(t_String, trim, METH_NOARGS),
      DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(String, t_String, ::java::lang::Object, String, t_String_init_, 0, 0, t_String__fields_, 0, 0);

    void t_String::install(PyObject *module)
    {
      installType(&PY_TYPE(String), module, "String", 0);
    }

    void t_String::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "class_", make_descriptor(String::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "wrapfn_", make_descriptor(unboxString));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "boxfn_", make_descriptor(boxString));
      env->getClass(String::initializeClass);
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "CASE_INSENSITIVE_ORDER", make_descriptor(::java::util::t_Comparator::wrap_Object(*String::CASE_INSENSITIVE_ORDER)));
    }

    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, String::initializeClass, 1)))
        return NULL;
      return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
    }
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, String::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String object((jobject) NULL);

          INT_CALL(object = String());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          String a1((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[Bs", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String a3((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_String_charAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.charAt(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError((PyObject *) self, "charAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointAt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointBefore(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
      return NULL;
    }

    static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.codePointCount(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_String_compareTo(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_concat(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.concat(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "concat", arg);
      return NULL;
    }

    static PyObject *t_String_contains(t_String *self, PyObject *arg)
    {
      ::java::lang::CharSequence a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
      return NULL;
    }

    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "copyValueOf", args);
      return NULL;
    }

    static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.endsWith(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
      return NULL;
    }

    static PyObject *t_String_equals(t_String *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "format", args);
      return NULL;
    }

    static PyObject *t_String_getBytes(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }
        break;
       case 1:
        {
          String a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBytes(a0));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          jint a3;

          if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "getBytes", args);
      return NULL;
    }

    static PyObject *t_String_getChars(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      JArray< jchar > a2((jobject) NULL);
      jint a3;

      if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "getChars", args);
      return NULL;
    }

    static PyObject *t_String_hashCode(t_String *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_String_indexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "indexOf", args);
      return NULL;
    }

    static PyObject *t_String_intern(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.intern());
      return j2p(result);
    }

    static PyObject *t_String_isEmpty(t_String *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_String_join(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          JArray< ::java::lang::CharSequence > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "O[O", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::join(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          String result((jobject) NULL);

          if (!parseArgs(args, "OK", &::java::lang::PY_TYPE(CharSequence), ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::java::lang::String::join(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "join", args);
      return NULL;
    }

    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
      return NULL;
    }

    static PyObject *t_String_length(t_String *self)
    {
      jint result;
      OBJ_CALL(result = self->object.length());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_String_matches(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.matches(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "matches", arg);
      return NULL;
    }

    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 4:
        {
          jint a0;
          String a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean result;

          if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 5:
        {
          jboolean a0;
          jint a1;
          String a2((jobject) NULL);
          jint a3;
          jint a4;
          jboolean result;

          if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
      return NULL;
    }

    static PyObject *t_String_replace(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jchar a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "CC", &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::CharSequence a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "replace", args);
      return NULL;
    }

    static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceAll(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceFirst(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
      return NULL;
    }

    static PyObject *t_String_split(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.split(a0));
            return JArray<jstring>(result.this$).wrap();
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.split(a0, a1));
            return JArray<jstring>(result.this$).wrap();
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "split", args);
      return NULL;
    }

    static PyObject *t_String_startsWith(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.startsWith(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "startsWith", args);
      return NULL;
    }

    static PyObject *t_String_subSequence(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      ::java::lang::CharSequence result((jobject) NULL);

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.subSequence(a0, a1));
        return ::java::lang::t_CharSequence::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "subSequence", args);
      return NULL;
    }

    static PyObject *t_String_substring(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.substring(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.substring(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "substring", args);
      return NULL;
    }

    static PyObject *t_String_toCharArray(t_String *self)
    {
      JArray< jchar > result((jobject) NULL);
      OBJ_CALL(result = self->object.toCharArray());
      return result.wrap();
    }

    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toLowerCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toLowerCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_String_toString(t_String *self, PyObject *args)
    {
      String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toUpperCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toUpperCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_String_trim(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.trim());
      return j2p(result);
    }

    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jfloat a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jdouble a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jchar a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_String_get__bytes(t_String *self, void *data)
    {
      JArray< jbyte > value((jobject) NULL);
      OBJ_CALL(value = self->object.getBytes());
      return value.wrap();
    }

    static PyObject *t_String_get__empty(t_String *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoader::class$ = NULL;
          jmethodID *ResourceLoader::mids$ = NULL;
          bool ResourceLoader::live$ = false;

          jclass ResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Class ResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoader, t_ResourceLoader, ::java::lang::Object, ResourceLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoader), module, "ResourceLoader", 0);
          }

          void t_ResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "class_", make_descriptor(ResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ResourceLoader::wrap_Object(ResourceLoader(((t_ResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ProductFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ProductFloatFunction::class$ = NULL;
            jmethodID *ProductFloatFunction::mids$ = NULL;
            bool ProductFloatFunction::live$ = false;

            jclass ProductFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ProductFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ProductFloatFunction::ProductFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ProductFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ProductFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ProductFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ProductFloatFunction, t_ProductFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, ProductFloatFunction, t_ProductFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ProductFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ProductFloatFunction), module, "ProductFloatFunction", 0);
            }

            void t_ProductFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "class_", make_descriptor(ProductFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ProductFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ProductFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ProductFloatFunction::wrap_Object(ProductFloatFunction(((t_ProductFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ProductFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              ProductFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = ProductFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThisQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThisQuery::class$ = NULL;
          jmethodID *MoreLikeThisQuery::mids$ = NULL;
          bool MoreLikeThisQuery::live$ = false;

          jclass MoreLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e36f88de] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getLikeText_14c7b5c5] = env->getMethodID(cls, "getLikeText", "()Ljava/lang/String;");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFrequency_54c6a179] = env->getMethodID(cls, "getMinTermFrequency", "()I");
              mids$[mid_getMoreLikeFields_2e6d5245] = env->getMethodID(cls, "getMoreLikeFields", "()[Ljava/lang/String;");
              mids$[mid_getPercentTermsToMatch_54c6a176] = env->getMethodID(cls, "getPercentTermsToMatch", "()F");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setLikeText_5fdc3f48] = env->getMethodID(cls, "setLikeText", "(Ljava/lang/String;)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFrequency_39c7bd3c] = env->getMethodID(cls, "setMinTermFrequency", "(I)V");
              mids$[mid_setMoreLikeFields_4dd4540c] = env->getMethodID(cls, "setMoreLikeFields", "([Ljava/lang/String;)V");
              mids$[mid_setPercentTermsToMatch_06298cab] = env->getMethodID(cls, "setPercentTermsToMatch", "(F)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThisQuery::MoreLikeThisQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e36f88de, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jboolean MoreLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThisQuery::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          ::java::lang::String MoreLikeThisQuery::getLikeText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLikeText_14c7b5c5]));
          }

          jint MoreLikeThisQuery::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFrequency_54c6a179]);
          }

          JArray< ::java::lang::String > MoreLikeThisQuery::getMoreLikeFields() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getMoreLikeFields_2e6d5245]));
          }

          jfloat MoreLikeThisQuery::getPercentTermsToMatch() const
          {
            return env->callFloatMethod(this$, mids$[mid_getPercentTermsToMatch_54c6a176]);
          }

          ::java::util::Set MoreLikeThisQuery::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jint MoreLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query MoreLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void MoreLikeThisQuery::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThisQuery::setLikeText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLikeText_5fdc3f48], a0.this$);
          }

          void MoreLikeThisQuery::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFrequency_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMoreLikeFields(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMoreLikeFields_4dd4540c], a0.this$);
          }

          void MoreLikeThisQuery::setPercentTermsToMatch(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPercentTermsToMatch_06298cab], a0);
          }

          void MoreLikeThisQuery::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }

          ::java::lang::String MoreLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, likeText),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minTermFrequency),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, moreLikeFields),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, percentTermsToMatch),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getLikeText, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMoreLikeFields, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getPercentTermsToMatch, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setLikeText, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinTermFrequency, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMoreLikeFields, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setPercentTermsToMatch, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setStopWords, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThisQuery, t_MoreLikeThisQuery, ::org::apache::lucene::search::Query, MoreLikeThisQuery, t_MoreLikeThisQuery_init_, 0, 0, t_MoreLikeThisQuery__fields_, 0, 0);

          void t_MoreLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThisQuery), module, "MoreLikeThisQuery", 0);
          }

          void t_MoreLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "class_", make_descriptor(MoreLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThisQuery::wrap_Object(MoreLikeThisQuery(((t_MoreLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            MoreLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "s[sks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = MoreLikeThisQuery(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLikeText());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMoreLikeFields());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setLikeText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLikeText", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setMoreLikeFields(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMoreLikeFields", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setPercentTermsToMatch(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPercentTermsToMatch", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLikeText());
            return j2p(value);
          }
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setLikeText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "likeText", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFrequency", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMoreLikeFields());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setMoreLikeFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "moreLikeFields", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setPercentTermsToMatch(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "percentTermsToMatch", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery::class$ = NULL;
        jmethodID *MultiTermQuery::mids$ = NULL;
        bool MultiTermQuery::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass MultiTermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getRewriteMethod_8919154b] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRewriteMethod_c3c3909e] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_FILTER_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_FILTER_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery::MultiTermQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jboolean MultiTermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String MultiTermQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod MultiTermQuery::getRewriteMethod() const
        {
          return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_8919154b]));
        }

        jint MultiTermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiTermQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiTermQuery::setRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setRewriteMethod_c3c3909e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg);
        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data);
        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data);
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiTermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery, field),
          DECLARE_GETSET_FIELD(t_MultiTermQuery, rewriteMethod),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, getRewriteMethod, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, setRewriteMethod, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery, t_MultiTermQuery, ::org::apache::lucene::search::Query, MultiTermQuery, t_MultiTermQuery_init_, 0, 0, t_MultiTermQuery__fields_, 0, 0);

        void t_MultiTermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery), module, "MultiTermQuery", 0);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "ConstantScoreAutoRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsBoostOnlyBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsScoringBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "RewriteMethod", make_descriptor(&PY_TYPE(MultiTermQuery$RewriteMethod)));
        }

        void t_MultiTermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "class_", make_descriptor(MultiTermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MultiTermQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_FILTER_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery::wrap_Object(MultiTermQuery(((t_MultiTermQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          MultiTermQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = MultiTermQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
          OBJ_CALL(result = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
        }

        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setRewriteMethod(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
          return NULL;
        }

        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
          OBJ_CALL(value = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
        }
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
            {
              INT_CALL(self->object.setRewriteMethod(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardBooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *StandardBooleanQueryNodeBuilder::mids$ = NULL;
              bool StandardBooleanQueryNodeBuilder::live$ = false;

              jclass StandardBooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNodeBuilder::StandardBooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery StandardBooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_StandardBooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder, ::java::lang::Object, StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardBooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNodeBuilder), module, "StandardBooleanQueryNodeBuilder", 0);
              }

              void t_StandardBooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(StandardBooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNodeBuilder::wrap_Object(StandardBooleanQueryNodeBuilder(((t_StandardBooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardBooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = StandardBooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadHelper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadHelper::class$ = NULL;
          jmethodID *PayloadHelper::mids$ = NULL;
          bool PayloadHelper::live$ = false;

          jclass PayloadHelper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadHelper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_decodeFloat_49b4f13b] = env->getStaticMethodID(cls, "decodeFloat", "([B)F");
              mids$[mid_decodeFloat_b8354c53] = env->getStaticMethodID(cls, "decodeFloat", "([BI)F");
              mids$[mid_decodeInt_b8354c5c] = env->getStaticMethodID(cls, "decodeInt", "([BI)I");
              mids$[mid_encodeFloat_909f9221] = env->getStaticMethodID(cls, "encodeFloat", "(F)[B");
              mids$[mid_encodeFloat_a555a4d0] = env->getStaticMethodID(cls, "encodeFloat", "(F[BI)[B");
              mids$[mid_encodeInt_b4292e98] = env->getStaticMethodID(cls, "encodeInt", "(I)[B");
              mids$[mid_encodeInt_1bd14047] = env->getStaticMethodID(cls, "encodeInt", "(I[BI)[B");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadHelper::PayloadHelper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_49b4f13b], a0.this$);
          }

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_b8354c53], a0.this$, a1);
          }

          jint PayloadHelper::decodeInt(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_decodeInt_b8354c5c], a0.this$, a1);
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_909f9221], a0));
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_a555a4d0], a0, a1.this$, a2));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_b4292e98], a0));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_1bd14047], a0, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PayloadHelper__methods_[] = {
            DECLARE_METHOD(t_PayloadHelper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeInt, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadHelper, t_PayloadHelper, ::java::lang::Object, PayloadHelper, t_PayloadHelper_init_, 0, 0, 0, 0, 0);

          void t_PayloadHelper::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadHelper), module, "PayloadHelper", 0);
          }

          void t_PayloadHelper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "class_", make_descriptor(PayloadHelper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "wrapfn_", make_descriptor(t_PayloadHelper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadHelper::initializeClass, 1)))
              return NULL;
            return t_PayloadHelper::wrap_Object(PayloadHelper(((t_PayloadHelper *) arg)->object.this$));
          }
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadHelper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds)
          {
            PayloadHelper object((jobject) NULL);

            INT_CALL(object = PayloadHelper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jbyte > a0((jobject) NULL);
                jfloat result;

                if (!parseArgs(args, "[B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                jfloat result;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError(type, "decodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[BI", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeInt(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "decodeInt", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jfloat a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeInt", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeScheduler::class$ = NULL;
        jmethodID *MergeScheduler::mids$ = NULL;
        bool MergeScheduler::live$ = false;

        jclass MergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void MergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self);
        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args);

        static PyMethodDef t_MergeScheduler__methods_[] = {
          DECLARE_METHOD(t_MergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, close, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeScheduler, t_MergeScheduler, ::java::lang::Object, MergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeScheduler), module, "MergeScheduler", 0);
        }

        void t_MergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "class_", make_descriptor(MergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_MergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeScheduler::initializeClass, 1)))
            return NULL;
          return t_MergeScheduler::wrap_Object(MergeScheduler(((t_MergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizerFactory::class$ = NULL;
          jmethodID *WikipediaTokenizerFactory::mids$ = NULL;
          bool WikipediaTokenizerFactory::live$ = false;

          jclass WikipediaTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_8727c66d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/wikipedia/WikipediaTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizerFactory::WikipediaTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer WikipediaTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer(env->callObjectMethod(this$, mids$[mid_create_8727c66d], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizerFactory, t_WikipediaTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WikipediaTokenizerFactory, t_WikipediaTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizerFactory), module, "WikipediaTokenizerFactory", 0);
          }

          void t_WikipediaTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "class_", make_descriptor(WikipediaTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizerFactory::wrap_Object(WikipediaTokenizerFactory(((t_WikipediaTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WikipediaTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WikipediaTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::wikipedia::t_WikipediaTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizerFactory.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizerFactory::class$ = NULL;
          jmethodID *LetterTokenizerFactory::mids$ = NULL;
          bool LetterTokenizerFactory::live$ = false;

          jclass LetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_5d87cc2c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizerFactory::LetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LetterTokenizer LetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_5d87cc2c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_LetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizerFactory, t_LetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LetterTokenizerFactory, t_LetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizerFactory), module, "LetterTokenizerFactory", 0);
          }

          void t_LetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "class_", make_descriptor(LetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizerFactory::wrap_Object(LetterTokenizerFactory(((t_LetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/RandomSamplingFacetsCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *RandomSamplingFacetsCollector::class$ = NULL;
        jmethodID *RandomSamplingFacetsCollector::mids$ = NULL;
        bool RandomSamplingFacetsCollector::live$ = false;

        jclass RandomSamplingFacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/RandomSamplingFacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_amortizeFacetCounts_25b169d3] = env->getMethodID(cls, "amortizeFacetCounts", "(Lorg/apache/lucene/facet/FacetResult;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getOriginalMatchingDocs_87851566] = env->getMethodID(cls, "getOriginalMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getSamplingRate_54c6a174] = env->getMethodID(cls, "getSamplingRate", "()D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0, jlong a1) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        ::org::apache::lucene::facet::FacetResult RandomSamplingFacetsCollector::amortizeFacetCounts(const ::org::apache::lucene::facet::FacetResult & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::search::IndexSearcher & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_amortizeFacetCounts_25b169d3], a0.this$, a1.this$, a2.this$));
        }

        ::java::util::List RandomSamplingFacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::java::util::List RandomSamplingFacetsCollector::getOriginalMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getOriginalMatchingDocs_87851566]));
        }

        jdouble RandomSamplingFacetsCollector::getSamplingRate() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSamplingRate_54c6a174]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data);
        static PyGetSetDef t_RandomSamplingFacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, matchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, originalMatchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, samplingRate),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RandomSamplingFacetsCollector__methods_[] = {
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, amortizeFacetCounts, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getMatchingDocs, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getOriginalMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getSamplingRate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector, ::org::apache::lucene::facet::FacetsCollector, RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector_init_, 0, 0, t_RandomSamplingFacetsCollector__fields_, 0, 0);

        void t_RandomSamplingFacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomSamplingFacetsCollector), module, "RandomSamplingFacetsCollector", 0);
        }

        void t_RandomSamplingFacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "class_", make_descriptor(RandomSamplingFacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_RandomSamplingFacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 1)))
            return NULL;
          return t_RandomSamplingFacetsCollector::wrap_Object(RandomSamplingFacetsCollector(((t_RandomSamplingFacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jlong a1;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "IJ", &a0, &a1))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::facet::FacetResult a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::FacetResult::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.amortizeFacetCounts(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "amortizeFacetCounts", args);
          return NULL;
        }

        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMatchingDocs());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
          }

          return callSuper(&PY_TYPE(RandomSamplingFacetsCollector), (PyObject *) self, "getMatchingDocs", args, 2);
        }

        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenFilter::class$ = NULL;
          jmethodID *NGramTokenFilter::mids$ = NULL;
          bool NGramTokenFilter::live$ = false;
          jint NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean NGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args);
          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_NGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenFilter, t_NGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NGramTokenFilter, t_NGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenFilter), module, "NGramTokenFilter", 0);
          }

          void t_NGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "class_", make_descriptor(NGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NGramTokenFilter::wrap_Object(NGramTokenFilter(((t_NGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Builder::class$ = NULL;
          jmethodID *SynonymMap$Builder::mids$ = NULL;
          bool SynonymMap$Builder::live$ = false;

          jclass SynonymMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_2c2b250f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;Z)V");
              mids$[mid_build_6def3d42] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/synonym/SynonymMap;");
              mids$[mid_join_215e6a35] = env->getStaticMethodID(cls, "join", "([Ljava/lang/String;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Builder::SynonymMap$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void SynonymMap$Builder::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_2c2b250f], a0.this$, a1.this$, a2);
          }

          ::org::apache::lucene::analysis::synonym::SynonymMap SynonymMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::synonym::SynonymMap(env->callObjectMethod(this$, mids$[mid_build_6def3d42]));
          }

          ::org::apache::lucene::util::CharsRef SynonymMap$Builder::join(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::util::CharsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::CharsRef(env->callStaticObjectMethod(cls, mids$[mid_join_215e6a35], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args);
          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self);
          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_SynonymMap$Builder__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, join, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Builder, t_SynonymMap$Builder, ::java::lang::Object, SynonymMap$Builder, t_SynonymMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Builder), module, "SynonymMap$Builder", 0);
          }

          void t_SynonymMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "class_", make_descriptor(SynonymMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Builder::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Builder::wrap_Object(SynonymMap$Builder(((t_SynonymMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            SynonymMap$Builder object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = SynonymMap$Builder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self)
          {
            ::org::apache::lucene::analysis::synonym::SynonymMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::synonym::t_SynonymMap::wrap_Object(result);
          }

          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "[sk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::synonym::SynonymMap$Builder::join(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "join", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianAnalyzer::class$ = NULL;
          jmethodID *RussianAnalyzer::mids$ = NULL;
          bool RussianAnalyzer::live$ = false;
          ::java::lang::String *RussianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RussianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RussianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data);
          static PyGetSetDef t_RussianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RussianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RussianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RussianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianAnalyzer, t_RussianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RussianAnalyzer, t_RussianAnalyzer_init_, 0, 0, t_RussianAnalyzer__fields_, 0, 0);

          void t_RussianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianAnalyzer), module, "RussianAnalyzer", 0);
          }

          void t_RussianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "class_", make_descriptor(RussianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RussianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RussianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RussianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RussianAnalyzer::wrap_Object(RussianAnalyzer(((t_RussianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ru::RussianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/DefaultEncoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *DefaultEncoder::class$ = NULL;
          jmethodID *DefaultEncoder::mids$ = NULL;
          bool DefaultEncoder::live$ = false;

          jclass DefaultEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/DefaultEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultEncoder::DefaultEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DefaultEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg);

          static PyMethodDef t_DefaultEncoder__methods_[] = {
            DECLARE_METHOD(t_DefaultEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultEncoder, t_DefaultEncoder, ::java::lang::Object, DefaultEncoder, t_DefaultEncoder_init_, 0, 0, 0, 0, 0);

          void t_DefaultEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultEncoder), module, "DefaultEncoder", 0);
          }

          void t_DefaultEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "class_", make_descriptor(DefaultEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "wrapfn_", make_descriptor(t_DefaultEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultEncoder::initializeClass, 1)))
              return NULL;
            return t_DefaultEncoder::wrap_Object(DefaultEncoder(((t_DefaultEncoder *) arg)->object.this$));
          }
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds)
          {
            DefaultEncoder object((jobject) NULL);

            INT_CALL(object = DefaultEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilterFactory::class$ = NULL;
          jmethodID *KeywordRepeatFilterFactory::mids$ = NULL;
          bool KeywordRepeatFilterFactory::live$ = false;

          jclass KeywordRepeatFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilterFactory::KeywordRepeatFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordRepeatFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilterFactory), module, "KeywordRepeatFilterFactory", 0);
          }

          void t_KeywordRepeatFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "class_", make_descriptor(KeywordRepeatFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilterFactory::wrap_Object(KeywordRepeatFilterFactory(((t_KeywordRepeatFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordRepeatFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordRepeatFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilter::class$ = NULL;
          jmethodID *GermanLightStemFilter::mids$ = NULL;
          bool GermanLightStemFilter::live$ = false;

          jclass GermanLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilter::GermanLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilter, t_GermanLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanLightStemFilter, t_GermanLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilter), module, "GermanLightStemFilter", 0);
          }

          void t_GermanLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "class_", make_descriptor(GermanLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilter::wrap_Object(GermanLightStemFilter(((t_GermanLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos$FindSegmentsFile::class$ = NULL;
        jmethodID *SegmentInfos$FindSegmentsFile::mids$ = NULL;
        bool SegmentInfos$FindSegmentsFile::live$ = false;

        jclass SegmentInfos$FindSegmentsFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos$FindSegmentsFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_run_38d34040] = env->getMethodID(cls, "run", "(Lorg/apache/lucene/index/IndexCommit;)Ljava/lang/Object;");
            mids$[mid_doBody_2a1c4d09] = env->getMethodID(cls, "doBody", "(Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos$FindSegmentsFile::SegmentInfos$FindSegmentsFile(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_38d34040], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args);

        static PyMethodDef t_SegmentInfos$FindSegmentsFile__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, run, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile, ::java::lang::Object, SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile_init_, 0, 0, 0, 0, 0);

        void t_SegmentInfos$FindSegmentsFile::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos$FindSegmentsFile), module, "SegmentInfos$FindSegmentsFile", 0);
        }

        void t_SegmentInfos$FindSegmentsFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "class_", make_descriptor(SegmentInfos$FindSegmentsFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos$FindSegmentsFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos$FindSegmentsFile::wrap_Object(SegmentInfos$FindSegmentsFile(((t_SegmentInfos$FindSegmentsFile *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          SegmentInfos$FindSegmentsFile object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = SegmentInfos$FindSegmentsFile(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.run());
              return ::java::lang::t_Object::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.run(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "run", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LiteralValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LiteralValueSource::class$ = NULL;
            jmethodID *LiteralValueSource::mids$ = NULL;
            bool LiteralValueSource::live$ = false;
            jint LiteralValueSource::hash = (jint) 0;

            jclass LiteralValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LiteralValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValue_14c7b5c5] = env->getMethodID(cls, "getValue", "()Ljava/lang/String;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                hash = env->getStaticIntField(cls, "hash");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LiteralValueSource::LiteralValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String LiteralValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LiteralValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String LiteralValueSource::getValue() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValue_14c7b5c5]));
            }

            ::org::apache::lucene::queries::function::FunctionValues LiteralValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LiteralValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self);
            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data);
            static PyGetSetDef t_LiteralValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_LiteralValueSource, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LiteralValueSource__methods_[] = {
              DECLARE_METHOD(t_LiteralValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValue, METH_NOARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LiteralValueSource, t_LiteralValueSource, ::org::apache::lucene::queries::function::ValueSource, LiteralValueSource, t_LiteralValueSource_init_, 0, 0, t_LiteralValueSource__fields_, 0, 0);

            void t_LiteralValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LiteralValueSource), module, "LiteralValueSource", 0);
            }

            void t_LiteralValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "class_", make_descriptor(LiteralValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "wrapfn_", make_descriptor(t_LiteralValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LiteralValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(LiteralValueSource).tp_dict, "hash", make_descriptor(LiteralValueSource::hash));
            }

            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LiteralValueSource::initializeClass, 1)))
                return NULL;
              return t_LiteralValueSource::wrap_Object(LiteralValueSource(((t_LiteralValueSource *) arg)->object.this$));
            }
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LiteralValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              LiteralValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LiteralValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return j2p(result);
            }

            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LiteralValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttributeImpl.h"
#include "java/lang/Object.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttributeImpl::class$ = NULL;
        jmethodID *PythonAttributeImpl::mids$ = NULL;
        bool PythonAttributeImpl::live$ = false;

        jclass PythonAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAttributeImpl::PythonAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonAttributeImpl::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonAttributeImpl::hashCode() const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_hashCode_54c6a179]);
        }

        jlong PythonAttributeImpl::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonAttributeImpl::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self);
        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args);
        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data);
        static PyGetSetDef t_PythonAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAttributeImpl, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_PythonAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttributeImpl, t_PythonAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PythonAttributeImpl, t_PythonAttributeImpl_init_, 0, 0, t_PythonAttributeImpl__fields_, 0, 0);

        void t_PythonAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttributeImpl), module, "PythonAttributeImpl", 1);
        }

        void t_PythonAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "class_", make_descriptor(PythonAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PythonAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAttributeImpl::initializeClass);
          JNINativeMethod methods[] = {
            { "clear", "()V", (void *) t_PythonAttributeImpl_clear0 },
            { "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V", (void *) t_PythonAttributeImpl_copyTo1 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonAttributeImpl_equals2 },
            { "hashCode", "()I", (void *) t_PythonAttributeImpl_hashCode3 },
            { "pythonDecRef", "()V", (void *) t_PythonAttributeImpl_pythonDecRef4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_PythonAttributeImpl::wrap_Object(PythonAttributeImpl(((t_PythonAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          PythonAttributeImpl object((jobject) NULL);

          INT_CALL(object = PythonAttributeImpl());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PythonAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(::org::apache::lucene::util::AttributeImpl(a0));
          PyObject *result = PyObject_CallMethod(obj, "copyTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "hashCode", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("hashCode", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "java/lang/Long.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Number.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NumericRangeQuery::class$ = NULL;
        jmethodID *NumericRangeQuery::mids$ = NULL;
        bool NumericRangeQuery::live$ = false;

        jclass NumericRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NumericRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getMax_ee47e3e1] = env->getMethodID(cls, "getMax", "()Ljava/lang/Number;");
            mids$[mid_getMin_ee47e3e1] = env->getMethodID(cls, "getMin", "()Ljava/lang/Number;");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesMax_54c6a16a] = env->getMethodID(cls, "includesMax", "()Z");
            mids$[mid_includesMin_54c6a16a] = env->getMethodID(cls, "includesMin", "()Z");
            mids$[mid_newDoubleRange_132cc8c2] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newDoubleRange_b1350bd0] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;ILjava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_ff7ed1ca] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newFloatRange_3f37d14c] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;ILjava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_dfaf9ce2] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newIntRange_25dc6448] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;ILjava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_8e5c5fbe] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_newLongRange_d325b43c] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;ILjava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/NumericRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean NumericRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Number NumericRangeQuery::getMax() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMax_ee47e3e1]));
        }

        ::java::lang::Number NumericRangeQuery::getMin() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getMin_ee47e3e1]));
        }

        jint NumericRangeQuery::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jint NumericRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NumericRangeQuery::includesMax() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMax_54c6a16a]);
        }

        jboolean NumericRangeQuery::includesMin() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesMin_54c6a16a]);
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_132cc8c2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newDoubleRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_b1350bd0], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ff7ed1ca], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newFloatRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_3f37d14c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dfaf9ce2], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newIntRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_25dc6448], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_8e5c5fbe], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        NumericRangeQuery NumericRangeQuery::newLongRange(const ::java::lang::String & a0, jint a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return NumericRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_d325b43c], a0.this$, a1, a2.this$, a3.this$, a4, a5));
        }

        ::java::lang::String NumericRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self);
        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args);
        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data);
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data);
        static PyGetSetDef t_NumericRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_NumericRangeQuery, max),
          DECLARE_GET_FIELD(t_NumericRangeQuery, min),
          DECLARE_GET_FIELD(t_NumericRangeQuery, precisionStep),
          DECLARE_GET_FIELD(t_NumericRangeQuery, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericRangeQuery__methods_[] = {
          DECLARE_METHOD(t_NumericRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, of_, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMax, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, includesMin, METH_NOARGS),
          DECLARE_METHOD(t_NumericRangeQuery, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericRangeQuery, t_NumericRangeQuery, ::org::apache::lucene::search::MultiTermQuery, NumericRangeQuery, abstract_init, 0, 0, t_NumericRangeQuery__fields_, 0, 0);
        PyObject *t_NumericRangeQuery::wrap_Object(const NumericRangeQuery& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NumericRangeQuery::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NumericRangeQuery::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NumericRangeQuery *self = (t_NumericRangeQuery *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NumericRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericRangeQuery), module, "NumericRangeQuery", 0);
        }

        void t_NumericRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "class_", make_descriptor(NumericRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericRangeQuery::initializeClass, 1)))
            return NULL;
          return t_NumericRangeQuery::wrap_Object(NumericRangeQuery(((t_NumericRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_NumericRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericRangeQuery_of_(t_NumericRangeQuery *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NumericRangeQuery_equals(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NumericRangeQuery_getMax(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getMin(t_NumericRangeQuery *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_NumericRangeQuery_getPrecisionStep(t_NumericRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericRangeQuery_hashCode(t_NumericRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NumericRangeQuery_includesMax(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMax());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_includesMin(t_NumericRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesMin());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_NumericRangeQuery_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              NumericRangeQuery result((jobject) NULL);

              if (!parseArgs(args, "sIOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::NumericRangeQuery::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_NumericRangeQuery::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_NumericRangeQuery_toString(t_NumericRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NumericRangeQuery), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_NumericRangeQuery_get__parameters_(t_NumericRangeQuery *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NumericRangeQuery_get__max(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__min(t_NumericRangeQuery *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::java::lang::t_Number::wrap_Object(value);
        }

        static PyObject *t_NumericRangeQuery_get__precisionStep(t_NumericRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragmentsBuilder::class$ = NULL;
          jmethodID *FragmentsBuilder::mids$ = NULL;
          bool FragmentsBuilder::live$ = false;

          jclass FragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args);
          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_FragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_FragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragments, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragmentsBuilder, t_FragmentsBuilder, ::java::lang::Object, FragmentsBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragmentsBuilder), module, "FragmentsBuilder", 0);
          }

          void t_FragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "class_", make_descriptor(FragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_FragmentsBuilder::wrap_Object(FragmentsBuilder(((t_FragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_efced3c4] = env->getMethodID(cls, "<init>", "(IILjava/util/List;F)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getSubInfos_87851566] = env->getMethodID(cls, "getSubInfos", "()Ljava/util/List;");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo::FieldFragList$WeightedFragInfo(jint a0, jint a1, const ::java::util::List & a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_efced3c4, a0, a1, a2.this$, a3)) {}

          jint FieldFragList$WeightedFragInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldFragList$WeightedFragInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo::getSubInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSubInfos_87851566]));
          }

          jfloat FieldFragList$WeightedFragInfo::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          ::java::lang::String FieldFragList$WeightedFragInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, subInfos),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, totalBoost),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getSubInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo), module, "FieldFragList$WeightedFragInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "SubInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo)));
          }

          void t_FieldFragList$WeightedFragInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo::wrap_Object(FieldFragList$WeightedFragInfo(((t_FieldFragList$WeightedFragInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            jfloat a3;
            FieldFragList$WeightedFragInfo object((jobject) NULL);

            if (!parseArgs(args, "IIKF", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$FieldNormStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$FieldNormStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$FieldNormStatus::fids$ = NULL;
        bool CheckIndex$Status$FieldNormStatus::live$ = false;

        jclass CheckIndex$Status$FieldNormStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$FieldNormStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$FieldNormStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$FieldNormStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$FieldNormStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$FieldNormStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$FieldNormStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$FieldNormStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$FieldNormStatus, t_CheckIndex$Status$FieldNormStatus, ::java::lang::Object, CheckIndex$Status$FieldNormStatus, abstract_init, 0, 0, t_CheckIndex$Status$FieldNormStatus__fields_, 0, 0);

        void t_CheckIndex$Status$FieldNormStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$FieldNormStatus), module, "CheckIndex$Status$FieldNormStatus", 0);
        }

        void t_CheckIndex$Status$FieldNormStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$FieldNormStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$FieldNormStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$FieldNormStatus::wrap_Object(CheckIndex$Status$FieldNormStatus(((t_CheckIndex$Status$FieldNormStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Compile.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Compile::class$ = NULL;
      jmethodID *Compile::mids$ = NULL;
      bool Compile::live$ = false;

      jclass Compile::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Compile");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void Compile::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Compile__methods_[] = {
        DECLARE_METHOD(t_Compile, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Compile, t_Compile, ::java::lang::Object, Compile, abstract_init, 0, 0, 0, 0, 0);

      void t_Compile::install(PyObject *module)
      {
        installType(&PY_TYPE(Compile), module, "Compile", 0);
      }

      void t_Compile::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "class_", make_descriptor(Compile::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "wrapfn_", make_descriptor(t_Compile::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Compile::initializeClass, 1)))
          return NULL;
        return t_Compile::wrap_Object(Compile(((t_Compile *) arg)->object.this$));
      }
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Compile::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::Compile::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsReader::class$ = NULL;
          jmethodID *CompressingTermVectorsReader::mids$ = NULL;
          bool CompressingTermVectorsReader::live$ = false;

          jclass CompressingTermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsReader::CompressingTermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingTermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void CompressingTermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields CompressingTermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong CompressingTermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsReader, t_CompressingTermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, CompressingTermVectorsReader, t_CompressingTermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsReader), module, "CompressingTermVectorsReader", 0);
          }

          void t_CompressingTermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "class_", make_descriptor(CompressingTermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsReader::wrap_Object(CompressingTermVectorsReader(((t_CompressingTermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingTermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SingleFunction.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SingleFunction::class$ = NULL;
            jmethodID *SingleFunction::mids$ = NULL;
            bool SingleFunction::live$ = false;

            jclass SingleFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SingleFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SingleFunction::SingleFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SingleFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SingleFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SingleFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint SingleFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args);

            static PyMethodDef t_SingleFunction__methods_[] = {
              DECLARE_METHOD(t_SingleFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SingleFunction, t_SingleFunction, ::org::apache::lucene::queries::function::ValueSource, SingleFunction, t_SingleFunction_init_, 0, 0, 0, 0, 0);

            void t_SingleFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SingleFunction), module, "SingleFunction", 0);
            }

            void t_SingleFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "class_", make_descriptor(SingleFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "wrapfn_", make_descriptor(t_SingleFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SingleFunction::initializeClass, 1)))
                return NULL;
              return t_SingleFunction::wrap_Object(SingleFunction(((t_SingleFunction *) arg)->object.this$));
            }
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SingleFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SingleFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SingleFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilter::class$ = NULL;
          jmethodID *RussianLightStemFilter::mids$ = NULL;
          bool RussianLightStemFilter::live$ = false;

          jclass RussianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilter::RussianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RussianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilter, t_RussianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, RussianLightStemFilter, t_RussianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilter), module, "RussianLightStemFilter", 0);
          }

          void t_RussianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "class_", make_descriptor(RussianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilter::wrap_Object(RussianLightStemFilter(((t_RussianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RussianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RussianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Object.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Object::class$ = NULL;
    jmethodID *Object::mids$ = NULL;
    bool Object::live$ = false;

    jclass Object::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Object");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getClass_44a5f2c9] = env->getMethodID(cls, "getClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_notify_54c6a166] = env->getMethodID(cls, "notify", "()V");
        mids$[mid_notifyAll_54c6a166] = env->getMethodID(cls, "notifyAll", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_wait_54c6a166] = env->getMethodID(cls, "wait", "()V");
        mids$[mid_wait_0ee6df2f] = env->getMethodID(cls, "wait", "(J)V");
        mids$[mid_wait_25d05c8f] = env->getMethodID(cls, "wait", "(JI)V");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Object::Object() : ::JObject(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jboolean Object::equals(const Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Object::getClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getClass_44a5f2c9]));
    }

    jint Object::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Object::notify() const
    {
      env->callVoidMethod(this$, mids$[mid_notify_54c6a166]);
    }

    void Object::notifyAll() const
    {
      env->callVoidMethod(this$, mids$[mid_notifyAll_54c6a166]);
    }

    ::java::lang::String Object::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Object::wait() const
    {
      env->callVoidMethod(this$, mids$[mid_wait_54c6a166]);
    }

    void Object::wait(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_0ee6df2f], a0);
    }

    void Object::wait(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_25d05c8f], a0, a1);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Object_equals(t_Object *self, PyObject *arg);
    static PyObject *t_Object_getClass(t_Object *self);
    static PyObject *t_Object_hashCode(t_Object *self);
    static PyObject *t_Object_notify(t_Object *self);
    static PyObject *t_Object_notifyAll(t_Object *self);
    static PyObject *t_Object_toString(t_Object *self);
    static PyObject *t_Object_wait(t_Object *self, PyObject *args);
    static PyObject *t_Object_get__class(t_Object *self, void *data);
    static PyGetSetDef t_Object__fields_[] = {
      DECLARE_GET_FIELD(t_Object, class),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Object__methods_[] = {
      DECLARE_METHOD(t_Object, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, equals, METH_O),
      DECLARE_METHOD(t_Object, getClass, METH_NOARGS),
      DECLARE_METHOD(t_Object, hashCode, METH_NOARGS),
      DECLARE_METHOD(t_Object, notify, METH_NOARGS),
      DECLARE_METHOD(t_Object, notifyAll, METH_NOARGS),
      DECLARE_METHOD(t_Object, toString, METH_NOARGS),
      DECLARE_METHOD(t_Object, wait, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Object, t_Object, JObject, Object, t_Object_init_, 0, 0, t_Object__fields_, 0, 0);

    void t_Object::install(PyObject *module)
    {
      installType(&PY_TYPE(Object), module, "Object", 0);
    }

    void t_Object::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "class_", make_descriptor(Object::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "wrapfn_", make_descriptor(t_Object::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Object::initializeClass, 1)))
        return NULL;
      return t_Object::wrap_Object(Object(((t_Object *) arg)->object.this$));
    }
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Object::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds)
    {
      Object object((jobject) NULL);

      INT_CALL(object = Object());
      self->object = object;

      return 0;
    }

    static PyObject *t_Object_equals(t_Object *self, PyObject *arg)
    {
      Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equals", arg);
      return NULL;
    }

    static PyObject *t_Object_getClass(t_Object *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(result);
    }

    static PyObject *t_Object_hashCode(t_Object *self)
    {
      jint result;
      OBJ_CALL(result = self->object.hashCode());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Object_notify(t_Object *self)
    {
      OBJ_CALL(self->object.notify());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_notifyAll(t_Object *self)
    {
      OBJ_CALL(self->object.notifyAll());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_toString(t_Object *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toString());
      return j2p(result);
    }

    static PyObject *t_Object_wait(t_Object *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.wait());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.wait(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.wait(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "wait", args);
      return NULL;
    }

    static PyObject *t_Object_get__class(t_Object *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/SimilarityBase.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *SimilarityBase::class$ = NULL;
          jmethodID *SimilarityBase::mids$ = NULL;
          bool SimilarityBase::live$ = false;

          jclass SimilarityBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/SimilarityBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_log2_5d1c7657] = env->getStaticMethodID(cls, "log2", "(D)D");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_explain_be9c5a0c] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;ILorg/apache/lucene/search/Explanation;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");
              mids$[mid_encodeNormValue_f1b0c010] = env->getMethodID(cls, "encodeNormValue", "(FF)B");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimilarityBase::SimilarityBase() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong SimilarityBase::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight SimilarityBase::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jboolean SimilarityBase::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jdouble SimilarityBase::log2(jdouble a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_log2_5d1c7657], a0);
          }

          void SimilarityBase::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer SimilarityBase::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String SimilarityBase::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self);
          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg);
          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data);
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimilarityBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimilarityBase, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimilarityBase__methods_[] = {
            DECLARE_METHOD(t_SimilarityBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_SimilarityBase, log2, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_SimilarityBase, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimilarityBase, t_SimilarityBase, ::org::apache::lucene::search::similarities::Similarity, SimilarityBase, t_SimilarityBase_init_, 0, 0, t_SimilarityBase__fields_, 0, 0);

          void t_SimilarityBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SimilarityBase), module, "SimilarityBase", 0);
          }

          void t_SimilarityBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "class_", make_descriptor(SimilarityBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "wrapfn_", make_descriptor(t_SimilarityBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimilarityBase::initializeClass, 1)))
              return NULL;
            return t_SimilarityBase::wrap_Object(SimilarityBase(((t_SimilarityBase *) arg)->object.this$));
          }
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimilarityBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds)
          {
            SimilarityBase object((jobject) NULL);

            INT_CALL(object = SimilarityBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::similarities::SimilarityBase::log2(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "log2", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DefaultSimilarity.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DefaultSimilarity::class$ = NULL;
          jmethodID *DefaultSimilarity::mids$ = NULL;
          bool DefaultSimilarity::live$ = false;

          jclass DefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_decodeNormValue_0ee6df3f] = env->getMethodID(cls, "decodeNormValue", "(J)F");
              mids$[mid_encodeNormValue_06298cb7] = env->getMethodID(cls, "encodeNormValue", "(F)J");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSimilarity::DefaultSimilarity() : ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat DefaultSimilarity::decodeNormValue(jlong a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_decodeNormValue_0ee6df3f], a0);
          }

          jlong DefaultSimilarity::encodeNormValue(jfloat a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodeNormValue_06298cb7], a0);
          }

          jboolean DefaultSimilarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat DefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_a7e12cb4], a0, a1);
          }

          jfloat DefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_6ff84e02], a0.this$);
          }

          jfloat DefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          jfloat DefaultSimilarity::scorePayload(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_scorePayload_ffd34a82], a0, a1, a2, a3.this$);
          }

          void DefaultSimilarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          jfloat DefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat DefaultSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_06298cbb], a0);
          }

          ::java::lang::String DefaultSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self);
          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg);
          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args);
          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data);
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data);
          static PyGetSetDef t_DefaultSimilarity__fields_[] = {
            DECLARE_GETSET_FIELD(t_DefaultSimilarity, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_DefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, decodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, encodeNormValue, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_DefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, scorePayload, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_DefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, tf, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSimilarity, t_DefaultSimilarity, ::org::apache::lucene::search::similarities::TFIDFSimilarity, DefaultSimilarity, t_DefaultSimilarity_init_, 0, 0, t_DefaultSimilarity__fields_, 0, 0);

          void t_DefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSimilarity), module, "DefaultSimilarity", 0);
          }

          void t_DefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "class_", make_descriptor(DefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_DefaultSimilarity::wrap_Object(DefaultSimilarity(((t_DefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSimilarity_init_(t_DefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            DefaultSimilarity object((jobject) NULL);

            INT_CALL(object = DefaultSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultSimilarity_coord(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_DefaultSimilarity_decodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jfloat result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeNormValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "decodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_encodeNormValue(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jlong result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.encodeNormValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "encodeNormValue", args, 2);
          }

          static PyObject *t_DefaultSimilarity_getDiscountOverlaps(t_DefaultSimilarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DefaultSimilarity_idf(t_DefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_lengthNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_queryNorm(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_DefaultSimilarity_scorePayload(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.scorePayload(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "scorePayload", args, 2);
          }

          static PyObject *t_DefaultSimilarity_setDiscountOverlaps(t_DefaultSimilarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_DefaultSimilarity_sloppyFreq(t_DefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_DefaultSimilarity_tf(t_DefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static PyObject *t_DefaultSimilarity_toString(t_DefaultSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DefaultSimilarity_get__discountOverlaps(t_DefaultSimilarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_DefaultSimilarity_set__discountOverlaps(t_DefaultSimilarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray::class$ = NULL;
        jmethodID *BytesRefArray::mids$ = NULL;
        bool BytesRefArray::live$ = false;

        jclass BytesRefArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_append_7bc03ddb] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_get_708d2c55] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_iterator_8d21877c] = env->getMethodID(cls, "iterator", "(Ljava/util/Comparator;)Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefArray::BytesRefArray(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        jint BytesRefArray::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_append_7bc03ddb], a0.this$);
        }

        void BytesRefArray::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef BytesRefArray::get(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_708d2c55], a0.this$, a1));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator() const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator(const ::java::util::Comparator & a0) const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_8d21877c], a0.this$));
        }

        jint BytesRefArray::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg);
        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self);
        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self);

        static PyMethodDef t_BytesRefArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, append, METH_O),
          DECLARE_METHOD(t_BytesRefArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefArray, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, iterator, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefArray, t_BytesRefArray, ::java::lang::Object, BytesRefArray, t_BytesRefArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray), module, "BytesRefArray", 0);
        }

        void t_BytesRefArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "class_", make_descriptor(BytesRefArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray::wrap_Object(BytesRefArray(((t_BytesRefArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Counter a0((jobject) NULL);
          BytesRefArray object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
          {
            INT_CALL(object = BytesRefArray(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(result = self->object.iterator(a0));
                return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLS::class$ = NULL;
            jmethodID *NLS::mids$ = NULL;
            bool NLS::live$ = false;

            jclass NLS::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLS");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLocalizedMessage_97a5258f] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_6ffeebd8] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_0fb26e3b] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c901cda2] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_initializeMessages_c13be9ce] = env->getStaticMethodID(cls, "initializeMessages", "(Ljava/lang/String;Ljava/lang/Class;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_97a5258f], a0.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_6ffeebd8], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_0fb26e3b], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1, const JArray< ::java::lang::Object > & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_c901cda2], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_NLS__methods_[] = {
              DECLARE_METHOD(t_NLS, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, getLocalizedMessage, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLS, t_NLS, ::java::lang::Object, NLS, abstract_init, 0, 0, 0, 0, 0);

            void t_NLS::install(PyObject *module)
            {
              installType(&PY_TYPE(NLS), module, "NLS", 0);
            }

            void t_NLS::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "class_", make_descriptor(NLS::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "wrapfn_", make_descriptor(t_NLS::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLS::initializeClass, 1)))
                return NULL;
              return t_NLS::wrap_Object(NLS(((t_NLS *) arg)->object.this$));
            }
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLS::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  JArray< ::java::lang::Object > a2((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1, a2));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "getLocalizedMessage", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttributeImpl::class$ = NULL;
          jmethodID *PositionLengthAttributeImpl::mids$ = NULL;
          bool PositionLengthAttributeImpl::live$ = false;

          jclass PositionLengthAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionLengthAttributeImpl::PositionLengthAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionLengthAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionLengthAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionLengthAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionLengthAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PositionLengthAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionLengthAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self);
          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data);
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttributeImpl, t_PositionLengthAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionLengthAttributeImpl, t_PositionLengthAttributeImpl_init_, 0, 0, t_PositionLengthAttributeImpl__fields_, 0, 0);

          void t_PositionLengthAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttributeImpl), module, "PositionLengthAttributeImpl", 0);
          }

          void t_PositionLengthAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "class_", make_descriptor(PositionLengthAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttributeImpl::wrap_Object(PositionLengthAttributeImpl(((t_PositionLengthAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionLengthAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionLengthAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReverseOrdFieldSource::class$ = NULL;
            jmethodID *ReverseOrdFieldSource::mids$ = NULL;
            jfieldID *ReverseOrdFieldSource::fids$ = NULL;
            bool ReverseOrdFieldSource::live$ = false;

            jclass ReverseOrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                fids$ = new jfieldID[max_fid];
                fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReverseOrdFieldSource::ReverseOrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String ReverseOrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReverseOrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReverseOrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReverseOrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String ReverseOrdFieldSource::_get_field() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data);

            static PyGetSetDef t_ReverseOrdFieldSource__fields_[] = {
              DECLARE_GET_FIELD(t_ReverseOrdFieldSource, field),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReverseOrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_ReverseOrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReverseOrdFieldSource, t_ReverseOrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, ReverseOrdFieldSource, t_ReverseOrdFieldSource_init_, 0, 0, t_ReverseOrdFieldSource__fields_, 0, 0);

            void t_ReverseOrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ReverseOrdFieldSource), module, "ReverseOrdFieldSource", 0);
            }

            void t_ReverseOrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "class_", make_descriptor(ReverseOrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ReverseOrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReverseOrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_ReverseOrdFieldSource::wrap_Object(ReverseOrdFieldSource(((t_ReverseOrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReverseOrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ReverseOrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = ReverseOrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_field());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *ByteSequenceOutputs::class$ = NULL;
          jmethodID *ByteSequenceOutputs::mids$ = NULL;
          bool ByteSequenceOutputs::live$ = false;

          jclass ByteSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/ByteSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0991fadd] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_common_0991fadd] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNoOutput_4ae19461] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSingleton_f61c4f3f] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/ByteSequenceOutputs;");
              mids$[mid_outputToString_edfda73b] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_7bc03dd8] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_read_78c77a42] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_0991fadd] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_write_178211b1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::add(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_add_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::common(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_common_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_4ae19461]));
          }

          ByteSequenceOutputs ByteSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return ByteSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_f61c4f3f]));
          }

          ::java::lang::String ByteSequenceOutputs::outputToString(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_edfda73b], a0.this$));
          }

          jlong ByteSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_read_78c77a42], a0.this$));
          }

          void ByteSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::subtract(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_subtract_0991fadd], a0.this$, a1.this$));
          }

          void ByteSequenceOutputs::write(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_178211b1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data);
          static PyGetSetDef t_ByteSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ByteSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_ByteSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteSequenceOutputs, t_ByteSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, ByteSequenceOutputs, abstract_init, 0, 0, t_ByteSequenceOutputs__fields_, 0, 0);
          PyObject *t_ByteSequenceOutputs::wrap_Object(const ByteSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ByteSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ByteSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteSequenceOutputs), module, "ByteSequenceOutputs", 0);
          }

          void t_ByteSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "class_", make_descriptor(ByteSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_ByteSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_ByteSequenceOutputs::wrap_Object(ByteSequenceOutputs(((t_ByteSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            ByteSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::ByteSequenceOutputs::getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data)
          {
            ByteSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceWriter::class$ = NULL;
        jmethodID *IntBlockPool$SliceWriter::mids$ = NULL;
        bool IntBlockPool$SliceWriter::live$ = false;

        jclass IntBlockPool$SliceWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_getCurrentOffset_54c6a179] = env->getMethodID(cls, "getCurrentOffset", "()I");
            mids$[mid_reset_39c7bd3c] = env->getMethodID(cls, "reset", "(I)V");
            mids$[mid_startNewSlice_54c6a179] = env->getMethodID(cls, "startNewSlice", "()I");
            mids$[mid_writeInt_39c7bd3c] = env->getMethodID(cls, "writeInt", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceWriter::IntBlockPool$SliceWriter(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jint IntBlockPool$SliceWriter::getCurrentOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getCurrentOffset_54c6a179]);
        }

        void IntBlockPool$SliceWriter::reset(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_39c7bd3c], a0);
        }

        jint IntBlockPool$SliceWriter::startNewSlice() const
        {
          return env->callIntMethod(this$, mids$[mid_startNewSlice_54c6a179]);
        }

        void IntBlockPool$SliceWriter::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data);
        static PyGetSetDef t_IntBlockPool$SliceWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$SliceWriter, currentOffset),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$SliceWriter__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, getCurrentOffset, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, reset, METH_O),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, startNewSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, writeInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter, ::java::lang::Object, IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter_init_, 0, 0, t_IntBlockPool$SliceWriter__fields_, 0, 0);

        void t_IntBlockPool$SliceWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceWriter), module, "IntBlockPool$SliceWriter", 0);
        }

        void t_IntBlockPool$SliceWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "class_", make_descriptor(IntBlockPool$SliceWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceWriter::wrap_Object(IntBlockPool$SliceWriter(((t_IntBlockPool$SliceWriter *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getCurrentOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.reset(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startNewSlice());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getCurrentOffset());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LiveFieldValues.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LiveFieldValues::class$ = NULL;
        jmethodID *LiveFieldValues::mids$ = NULL;
        bool LiveFieldValues::live$ = false;

        jclass LiveFieldValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LiveFieldValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_48ea9202] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/ReferenceManager;Ljava/lang/Object;)V");
            mids$[mid_add_2da4da24] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/Object;)V");
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_delete_5fdc3f48] = env->getMethodID(cls, "delete", "(Ljava/lang/String;)V");
            mids$[mid_get_2a1c4d09] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_lookupFromSearcher_e0270375] = env->getMethodID(cls, "lookupFromSearcher", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LiveFieldValues::LiveFieldValues(const ::org::apache::lucene::search::ReferenceManager & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_48ea9202, a0.this$, a1.this$)) {}

        void LiveFieldValues::add(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_2da4da24], a0.this$, a1.this$);
        }

        void LiveFieldValues::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void LiveFieldValues::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }

        void LiveFieldValues::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void LiveFieldValues::delete$(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_delete_5fdc3f48], a0.this$);
        }

        ::java::lang::Object LiveFieldValues::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_2a1c4d09], a0.this$));
        }

        jint LiveFieldValues::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args);
        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args);
        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data);
        static PyGetSetDef t_LiveFieldValues__fields_[] = {
          DECLARE_GET_FIELD(t_LiveFieldValues, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveFieldValues__methods_[] = {
          DECLARE_METHOD(t_LiveFieldValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, of_, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, add, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, afterRefresh, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, beforeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, close, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, delete, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, get, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveFieldValues, t_LiveFieldValues, ::java::lang::Object, LiveFieldValues, t_LiveFieldValues_init_, 0, 0, t_LiveFieldValues__fields_, 0, 0);
        PyObject *t_LiveFieldValues::wrap_Object(const LiveFieldValues& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_LiveFieldValues::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_LiveFieldValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveFieldValues), module, "LiveFieldValues", 0);
        }

        void t_LiveFieldValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "class_", make_descriptor(LiveFieldValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "wrapfn_", make_descriptor(t_LiveFieldValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveFieldValues::initializeClass, 1)))
            return NULL;
          return t_LiveFieldValues::wrap_Object(LiveFieldValues(((t_LiveFieldValues *) arg)->object.this$));
        }
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveFieldValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::ReferenceManager a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          LiveFieldValues object((jobject) NULL);

          if (!parseArgs(args, "Ko", ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a1))
          {
            INT_CALL(object = LiveFieldValues(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "sO", self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.delete$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "delete", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status::class$ = NULL;
        jmethodID *CheckIndex$Status::mids$ = NULL;
        jfieldID *CheckIndex$Status::fids$ = NULL;
        bool CheckIndex$Status::live$ = false;

        jclass CheckIndex$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status");

            fids$ = new jfieldID[max_fid];
            fids$[fid_cantOpenSegments] = env->getFieldID(cls, "cantOpenSegments", "Z");
            fids$[fid_clean] = env->getFieldID(cls, "clean", "Z");
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_maxSegmentName] = env->getFieldID(cls, "maxSegmentName", "I");
            fids$[fid_missingSegmentVersion] = env->getFieldID(cls, "missingSegmentVersion", "Z");
            fids$[fid_missingSegments] = env->getFieldID(cls, "missingSegments", "Z");
            fids$[fid_numBadSegments] = env->getFieldID(cls, "numBadSegments", "I");
            fids$[fid_numSegments] = env->getFieldID(cls, "numSegments", "I");
            fids$[fid_partial] = env->getFieldID(cls, "partial", "Z");
            fids$[fid_segmentInfos] = env->getFieldID(cls, "segmentInfos", "Ljava/util/List;");
            fids$[fid_segmentsChecked] = env->getFieldID(cls, "segmentsChecked", "Ljava/util/List;");
            fids$[fid_segmentsFileName] = env->getFieldID(cls, "segmentsFileName", "Ljava/lang/String;");
            fids$[fid_toolOutOfDate] = env->getFieldID(cls, "toolOutOfDate", "Z");
            fids$[fid_totLoseDocCount] = env->getFieldID(cls, "totLoseDocCount", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_validCounter] = env->getFieldID(cls, "validCounter", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CheckIndex$Status::_get_cantOpenSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_cantOpenSegments]);
        }

        void CheckIndex$Status::_set_cantOpenSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_cantOpenSegments], a0);
        }

        jboolean CheckIndex$Status::_get_clean() const
        {
          return env->getBooleanField(this$, fids$[fid_clean]);
        }

        void CheckIndex$Status::_set_clean(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_clean], a0);
        }

        ::org::apache::lucene::store::Directory CheckIndex$Status::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        void CheckIndex$Status::_set_dir(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->setObjectField(this$, fids$[fid_dir], a0.this$);
        }

        jint CheckIndex$Status::_get_maxSegmentName() const
        {
          return env->getIntField(this$, fids$[fid_maxSegmentName]);
        }

        void CheckIndex$Status::_set_maxSegmentName(jint a0) const
        {
          env->setIntField(this$, fids$[fid_maxSegmentName], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegmentVersion() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegmentVersion]);
        }

        void CheckIndex$Status::_set_missingSegmentVersion(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegmentVersion], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegments]);
        }

        void CheckIndex$Status::_set_missingSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegments], a0);
        }

        jint CheckIndex$Status::_get_numBadSegments() const
        {
          return env->getIntField(this$, fids$[fid_numBadSegments]);
        }

        void CheckIndex$Status::_set_numBadSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numBadSegments], a0);
        }

        jint CheckIndex$Status::_get_numSegments() const
        {
          return env->getIntField(this$, fids$[fid_numSegments]);
        }

        void CheckIndex$Status::_set_numSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numSegments], a0);
        }

        jboolean CheckIndex$Status::_get_partial() const
        {
          return env->getBooleanField(this$, fids$[fid_partial]);
        }

        void CheckIndex$Status::_set_partial(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_partial], a0);
        }

        ::java::util::List CheckIndex$Status::_get_segmentInfos() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentInfos]));
        }

        void CheckIndex$Status::_set_segmentInfos(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentInfos], a0.this$);
        }

        ::java::util::List CheckIndex$Status::_get_segmentsChecked() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentsChecked]));
        }

        void CheckIndex$Status::_set_segmentsChecked(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsChecked], a0.this$);
        }

        ::java::lang::String CheckIndex$Status::_get_segmentsFileName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentsFileName]));
        }

        void CheckIndex$Status::_set_segmentsFileName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsFileName], a0.this$);
        }

        jboolean CheckIndex$Status::_get_toolOutOfDate() const
        {
          return env->getBooleanField(this$, fids$[fid_toolOutOfDate]);
        }

        void CheckIndex$Status::_set_toolOutOfDate(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_toolOutOfDate], a0);
        }

        jint CheckIndex$Status::_get_totLoseDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totLoseDocCount]);
        }

        void CheckIndex$Status::_set_totLoseDocCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totLoseDocCount], a0);
        }

        ::java::util::Map CheckIndex$Status::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void CheckIndex$Status::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jboolean CheckIndex$Status::_get_validCounter() const
        {
          return env->getBooleanField(this$, fids$[fid_validCounter]);
        }

        void CheckIndex$Status::_set_validCounter(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_validCounter], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, cantOpenSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, clean),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, dir),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, maxSegmentName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegmentVersion),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numBadSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, partial),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentInfos),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsChecked),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsFileName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, toolOutOfDate),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, totLoseDocCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, userData),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, validCounter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status, t_CheckIndex$Status, ::java::lang::Object, CheckIndex$Status, abstract_init, 0, 0, t_CheckIndex$Status__fields_, 0, 0);

        void t_CheckIndex$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status), module, "CheckIndex$Status", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "DocValuesStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$DocValuesStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermVectorStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermVectorStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "StoredFieldStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$StoredFieldStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "TermIndexStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$TermIndexStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "FieldNormStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$FieldNormStatus)));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "SegmentInfoStatus", make_descriptor(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus)));
        }

        void t_CheckIndex$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "class_", make_descriptor(CheckIndex$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status::wrap_Object(CheckIndex$Status(((t_CheckIndex$Status *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status_get__cantOpenSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_cantOpenSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__cantOpenSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_cantOpenSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "cantOpenSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_clean());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_clean(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "clean", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
          {
            INT_CALL(self->object._set_dir(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "dir", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_maxSegmentName());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_maxSegmentName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "maxSegmentName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegmentVersion(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegmentVersion());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegmentVersion(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegmentVersion(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegmentVersion", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numBadSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numBadSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numBadSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numSegments());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_partial());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_partial(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "partial", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfos());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentInfos", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsChecked());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentsChecked(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsChecked", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsFileName());
          return j2p(value);
        }
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_segmentsFileName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsFileName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_toolOutOfDate());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_toolOutOfDate(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "toolOutOfDate", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totLoseDocCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totLoseDocCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totLoseDocCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_userData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_userData(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "userData", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_validCounter());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_validCounter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "validCounter", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilterFactory::class$ = NULL;
          jmethodID *ASCIIFoldingFilterFactory::mids$ = NULL;
          bool ASCIIFoldingFilterFactory::live$ = false;

          jclass ASCIIFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_7c6dfdbe] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilterFactory::ASCIIFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter ASCIIFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_7c6dfdbe], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ASCIIFoldingFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self);
          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory_init_, 0, 0, t_ASCIIFoldingFilterFactory__fields_, 0, 0);

          void t_ASCIIFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilterFactory), module, "ASCIIFoldingFilterFactory", 0);
          }

          void t_ASCIIFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "class_", make_descriptor(ASCIIFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilterFactory::wrap_Object(ASCIIFoldingFilterFactory(((t_ASCIIFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ASCIIFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ASCIIFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ASCIIFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/DataOutput.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Reduce.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie::class$ = NULL;
      jmethodID *MultiTrie::mids$ = NULL;
      bool MultiTrie::live$ = false;

      jclass MultiTrie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie::MultiTrie(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie::MultiTrie(jboolean a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      ::java::lang::CharSequence MultiTrie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void MultiTrie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie MultiTrie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args);

      static PyMethodDef t_MultiTrie__methods_[] = {
        DECLARE_METHOD(t_MultiTrie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie, t_MultiTrie, ::org::egothor::stemmer::Trie, MultiTrie, t_MultiTrie_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie), module, "MultiTrie", 0);
      }

      void t_MultiTrie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "class_", make_descriptor(MultiTrie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie::initializeClass, 1)))
          return NULL;
        return t_MultiTrie::wrap_Object(MultiTrie(((t_MultiTrie *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "add", args);
        return NULL;
      }

      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "printInfo", args, 2);
      }

      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CharacterRunAutomaton::class$ = NULL;
          jmethodID *CharacterRunAutomaton::mids$ = NULL;
          bool CharacterRunAutomaton::live$ = false;

          jclass CharacterRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CharacterRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_run_5fdc3f44] = env->getMethodID(cls, "run", "(Ljava/lang/String;)Z");
              mids$[mid_run_6f0bb35a] = env->getMethodID(cls, "run", "([CII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterRunAutomaton::CharacterRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          jboolean CharacterRunAutomaton::run(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_5fdc3f44], a0.this$);
          }

          jboolean CharacterRunAutomaton::run(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_6f0bb35a], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args);

          static PyMethodDef t_CharacterRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_CharacterRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterRunAutomaton, t_CharacterRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, CharacterRunAutomaton, t_CharacterRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_CharacterRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterRunAutomaton), module, "CharacterRunAutomaton", 0);
          }

          void t_CharacterRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "class_", make_descriptor(CharacterRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CharacterRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_CharacterRunAutomaton::wrap_Object(CharacterRunAutomaton(((t_CharacterRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            CharacterRunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              INT_CALL(object = CharacterRunAutomaton(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.run(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.run(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectReader.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectReader::class$ = NULL;
          jmethodID *DirectReader::mids$ = NULL;
          bool DirectReader::live$ = false;

          jclass DirectReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getInstance_9b696251] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/RandomAccessInput;I)Lorg/apache/lucene/util/LongValues;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectReader::DirectReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::LongValues DirectReader::getInstance(const ::org::apache::lucene::store::RandomAccessInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::LongValues(env->callStaticObjectMethod(cls, mids$[mid_getInstance_9b696251], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DirectReader__methods_[] = {
            DECLARE_METHOD(t_DirectReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, getInstance, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectReader, t_DirectReader, ::java::lang::Object, DirectReader, t_DirectReader_init_, 0, 0, 0, 0, 0);

          void t_DirectReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectReader), module, "DirectReader", 0);
          }

          void t_DirectReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "class_", make_descriptor(DirectReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "wrapfn_", make_descriptor(t_DirectReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectReader::initializeClass, 1)))
              return NULL;
            return t_DirectReader::wrap_Object(DirectReader(((t_DirectReader *) arg)->object.this$));
          }
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds)
          {
            DirectReader object((jobject) NULL);

            INT_CALL(object = DirectReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::RandomAccessInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::LongValues result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectReader::getInstance(a0, a1));
              return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InMemorySorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InMemorySorter::class$ = NULL;
          jmethodID *InMemorySorter::mids$ = NULL;
          bool InMemorySorter::live$ = false;

          jclass InMemorySorter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InMemorySorter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
              mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InMemorySorter::InMemorySorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

          void InMemorySorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
          }

          ::java::util::Comparator InMemorySorter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRefIterator InMemorySorter::iterator() const
          {
            return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg);
          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data);
          static PyGetSetDef t_InMemorySorter__fields_[] = {
            DECLARE_GET_FIELD(t_InMemorySorter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InMemorySorter__methods_[] = {
            DECLARE_METHOD(t_InMemorySorter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, add, METH_O),
            DECLARE_METHOD(t_InMemorySorter, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InMemorySorter, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InMemorySorter, t_InMemorySorter, ::java::lang::Object, InMemorySorter, t_InMemorySorter_init_, 0, 0, t_InMemorySorter__fields_, 0, 0);

          void t_InMemorySorter::install(PyObject *module)
          {
            installType(&PY_TYPE(InMemorySorter), module, "InMemorySorter", 0);
          }

          void t_InMemorySorter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "class_", make_descriptor(InMemorySorter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "wrapfn_", make_descriptor(t_InMemorySorter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InMemorySorter::initializeClass, 1)))
              return NULL;
            return t_InMemorySorter::wrap_Object(InMemorySorter(((t_InMemorySorter *) arg)->object.this$));
          }
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InMemorySorter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;
            InMemorySorter object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = InMemorySorter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self)
          {
            ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
          }

          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilter::class$ = NULL;
          jmethodID *PortugueseLightStemFilter::mids$ = NULL;
          bool PortugueseLightStemFilter::live$ = false;

          jclass PortugueseLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilter::PortugueseLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilter, t_PortugueseLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseLightStemFilter, t_PortugueseLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilter), module, "PortugueseLightStemFilter", 0);
          }

          void t_PortugueseLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "class_", make_descriptor(PortugueseLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilter::wrap_Object(PortugueseLightStemFilter(((t_PortugueseLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/Facets.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *Facets::class$ = NULL;
        jmethodID *Facets::mids$ = NULL;
        bool Facets::live$ = false;

        jclass Facets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/Facets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Facets::Facets() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List Facets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number Facets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult Facets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg);
        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args);
        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args);

        static PyMethodDef t_Facets__methods_[] = {
          DECLARE_METHOD(t_Facets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, getAllDims, METH_O),
          DECLARE_METHOD(t_Facets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_Facets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Facets, t_Facets, ::java::lang::Object, Facets, t_Facets_init_, 0, 0, 0, 0, 0);

        void t_Facets::install(PyObject *module)
        {
          installType(&PY_TYPE(Facets), module, "Facets", 0);
        }

        void t_Facets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "class_", make_descriptor(Facets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "wrapfn_", make_descriptor(t_Facets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Facets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Facets::initializeClass, 1)))
            return NULL;
          return t_Facets::wrap_Object(Facets(((t_Facets *) arg)->object.this$));
        }
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Facets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds)
        {
          Facets object((jobject) NULL);

          INT_CALL(object = Facets());
          self->object = object;

          return 0;
        }

        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          PyErr_SetArgsError((PyObject *) self, "getAllDims", arg);
          return NULL;
        }

        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSpecificValue", args);
          return NULL;
        }

        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTopChildren", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharFilter::class$ = NULL;
        jmethodID *CharFilter::mids$ = NULL;
        bool CharFilter::live$ = false;

        jclass CharFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");
            mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharFilter::CharFilter(const ::java::io::Reader & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void CharFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint CharFilter::correctOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_correctOffset_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args);
        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg);

        static PyMethodDef t_CharFilter__methods_[] = {
          DECLARE_METHOD(t_CharFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_CharFilter, correctOffset, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharFilter, t_CharFilter, ::java::io::Reader, CharFilter, t_CharFilter_init_, 0, 0, 0, 0, 0);

        void t_CharFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CharFilter), module, "CharFilter", 0);
        }

        void t_CharFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "class_", make_descriptor(CharFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "wrapfn_", make_descriptor(t_CharFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharFilter::initializeClass, 1)))
            return NULL;
          return t_CharFilter::wrap_Object(CharFilter(((t_CharFilter *) arg)->object.this$));
        }
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          CharFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = CharFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CharFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.correctOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "correctOffset", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttribute::class$ = NULL;
          jmethodID *PayloadAttribute::mids$ = NULL;
          bool PayloadAttribute::live$ = false;

          jclass PayloadAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadAttribute::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          void PayloadAttribute::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self);
          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg);
          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data);
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttribute, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttribute__methods_[] = {
            DECLARE_METHOD(t_PayloadAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttribute, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttribute, t_PayloadAttribute, ::org::apache::lucene::util::Attribute, PayloadAttribute, abstract_init, 0, 0, t_PayloadAttribute__fields_, 0, 0);

          void t_PayloadAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttribute), module, "PayloadAttribute", 0);
          }

          void t_PayloadAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "class_", make_descriptor(PayloadAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttribute::initializeClass, 1)))
              return NULL;
            return t_PayloadAttribute::wrap_Object(PayloadAttribute(((t_PayloadAttribute *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedNumericDocValues::class$ = NULL;
        jmethodID *SortedNumericDocValues::mids$ = NULL;
        bool SortedNumericDocValues::live$ = false;

        jclass SortedNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_count_54c6a179] = env->getMethodID(cls, "count", "()I");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_valueAt_39c7bd20] = env->getMethodID(cls, "valueAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint SortedNumericDocValues::count() const
        {
          return env->callIntMethod(this$, mids$[mid_count_54c6a179]);
        }

        void SortedNumericDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        jlong SortedNumericDocValues::valueAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_valueAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self);
        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg);
        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data);
        static PyGetSetDef t_SortedNumericDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericDocValues, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, count, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedNumericDocValues, valueAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValues, t_SortedNumericDocValues, ::java::lang::Object, SortedNumericDocValues, abstract_init, 0, 0, t_SortedNumericDocValues__fields_, 0, 0);

        void t_SortedNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValues), module, "SortedNumericDocValues", 0);
        }

        void t_SortedNumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "class_", make_descriptor(SortedNumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValues::wrap_Object(SortedNumericDocValues(((t_SortedNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.count());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.valueAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "valueAt", arg);
          return NULL;
        }

        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttribute::class$ = NULL;
          jmethodID *KeywordAttribute::mids$ = NULL;
          bool KeywordAttribute::live$ = false;

          jclass KeywordAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordAttribute::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttribute::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self);
          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg);
          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data);
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttribute, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttribute__methods_[] = {
            DECLARE_METHOD(t_KeywordAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttribute, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttribute, t_KeywordAttribute, ::org::apache::lucene::util::Attribute, KeywordAttribute, abstract_init, 0, 0, t_KeywordAttribute__fields_, 0, 0);

          void t_KeywordAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttribute), module, "KeywordAttribute", 0);
          }

          void t_KeywordAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "class_", make_descriptor(KeywordAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttribute::initializeClass, 1)))
              return NULL;
            return t_KeywordAttribute::wrap_Object(KeywordAttribute(((t_KeywordAttribute *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermsFilter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermsFilter::class$ = NULL;
        jmethodID *TermsFilter::mids$ = NULL;
        bool TermsFilter::live$ = false;

        jclass TermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9f85e01] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_04719c9d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsFilter::TermsFilter(const JArray< ::org::apache::lucene::index::Term > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_c9f85e01, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::util::List & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const ::java::util::List & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_04719c9d, a0.this$, a1.this$)) {}

        jboolean TermsFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint TermsFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermsFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args);

        static PyMethodDef t_TermsFilter__methods_[] = {
          DECLARE_METHOD(t_TermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsFilter, t_TermsFilter, ::org::apache::lucene::search::Filter, TermsFilter, t_TermsFilter_init_, 0, 0, 0, 0, 0);

        void t_TermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsFilter), module, "TermsFilter", 0);
        }

        void t_TermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "class_", make_descriptor(TermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "wrapfn_", make_descriptor(t_TermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsFilter::initializeClass, 1)))
            return NULL;
          return t_TermsFilter::wrap_Object(TermsFilter(((t_TermsFilter *) arg)->object.this$));
        }
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Lambda::class$ = NULL;
          jmethodID *Lambda::mids$ = NULL;
          bool Lambda::live$ = false;

          jclass Lambda::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Lambda");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lambda::Lambda() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Lambda::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat Lambda::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String Lambda::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args);

          static PyMethodDef t_Lambda__methods_[] = {
            DECLARE_METHOD(t_Lambda, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, explain, METH_O),
            DECLARE_METHOD(t_Lambda, lambda, METH_O),
            DECLARE_METHOD(t_Lambda, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lambda, t_Lambda, ::java::lang::Object, Lambda, t_Lambda_init_, 0, 0, 0, 0, 0);

          void t_Lambda::install(PyObject *module)
          {
            installType(&PY_TYPE(Lambda), module, "Lambda", 0);
          }

          void t_Lambda::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "class_", make_descriptor(Lambda::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "wrapfn_", make_descriptor(t_Lambda::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lambda::initializeClass, 1)))
              return NULL;
            return t_Lambda::wrap_Object(Lambda(((t_Lambda *) arg)->object.this$));
          }
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lambda::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds)
          {
            Lambda object((jobject) NULL);

            INT_CALL(object = Lambda());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lambda", arg);
            return NULL;
          }

          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lambda), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilter::class$ = NULL;
          jmethodID *KeepWordFilter::mids$ = NULL;
          bool KeepWordFilter::live$ = false;

          jclass KeepWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c97b7f85] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c97b7f85, a0.this$, a1, a2.this$, a3.this$)) {}

          jboolean KeepWordFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self);

          static PyMethodDef t_KeepWordFilter__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilter, t_KeepWordFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, KeepWordFilter, t_KeepWordFilter_init_, 0, 0, 0, 0, 0);

          void t_KeepWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilter), module, "KeepWordFilter", 0);
          }

          void t_KeepWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "class_", make_descriptor(KeepWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilter::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilter::wrap_Object(KeepWordFilter(((t_KeepWordFilter *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                KeepWordFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = KeepWordFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeException::class$ = NULL;
        jmethodID *MergePolicy$MergeException::mids$ = NULL;
        bool MergePolicy$MergeException::live$ = false;

        jclass MergePolicy$MergeException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_972c7504] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_1f8035c0] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::String & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_972c7504, a0.this$, a1.this$)) {}

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_1f8035c0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::Directory MergePolicy$MergeException::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self);
        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data);
        static PyGetSetDef t_MergePolicy$MergeException__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeException, directory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, getDirectory, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeException, t_MergePolicy$MergeException, ::java::lang::RuntimeException, MergePolicy$MergeException, t_MergePolicy$MergeException_init_, 0, 0, t_MergePolicy$MergeException__fields_, 0, 0);

        void t_MergePolicy$MergeException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeException), module, "MergePolicy$MergeException", 0);
        }

        void t_MergePolicy$MergeException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "class_", make_descriptor(MergePolicy$MergeException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeException::wrap_Object(MergePolicy$MergeException(((t_MergePolicy$MergeException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::Throwable a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MergePolicy$MergeException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$MergeException_getDirectory(t_MergePolicy$MergeException *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$MergeException_get__directory(t_MergePolicy$MergeException *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedDocValues::class$ = NULL;
        jmethodID *SortedDocValues::mids$ = NULL;
        bool SortedDocValues::live$ = false;

        jclass SortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03ddb] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }

        jint SortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint SortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        jint SortedDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_lookupTerm_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::index::TermsEnum SortedDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args);
        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data);
        static PyGetSetDef t_SortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_SortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, get, METH_VARARGS),
          DECLARE_METHOD(t_SortedDocValues, getOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValues, t_SortedDocValues, ::org::apache::lucene::index::BinaryDocValues, SortedDocValues, abstract_init, 0, 0, t_SortedDocValues__fields_, 0, 0);

        void t_SortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValues), module, "SortedDocValues", 0);
        }

        void t_SortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "class_", make_descriptor(SortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedDocValues::wrap_Object(SortedDocValues(((t_SortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedDocValues), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeAbortedException::class$ = NULL;
        jmethodID *MergePolicy$MergeAbortedException::mids$ = NULL;
        bool MergePolicy$MergeAbortedException::live$ = false;

        jclass MergePolicy$MergeAbortedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeAbortedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MergePolicy$MergeAbortedException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException, ::java::io::IOException, MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException_init_, 0, 0, 0, 0, 0);

        void t_MergePolicy$MergeAbortedException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeAbortedException), module, "MergePolicy$MergeAbortedException", 0);
        }

        void t_MergePolicy$MergeAbortedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "class_", make_descriptor(MergePolicy$MergeAbortedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeAbortedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeAbortedException::wrap_Object(MergePolicy$MergeAbortedException(((t_MergePolicy$MergeAbortedException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MergePolicy$MergeAbortedException object((jobject) NULL);

              INT_CALL(object = MergePolicy$MergeAbortedException());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MergePolicy$MergeAbortedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MergePolicy$MergeAbortedException(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/GrowableByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *GrowableByteArrayDataOutput::class$ = NULL;
        jmethodID *GrowableByteArrayDataOutput::mids$ = NULL;
        jfieldID *GrowableByteArrayDataOutput::fids$ = NULL;
        bool GrowableByteArrayDataOutput::live$ = false;

        jclass GrowableByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/GrowableByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GrowableByteArrayDataOutput::GrowableByteArrayDataOutput(jint a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void GrowableByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void GrowableByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        JArray< jbyte > GrowableByteArrayDataOutput::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void GrowableByteArrayDataOutput::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint GrowableByteArrayDataOutput::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void GrowableByteArrayDataOutput::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);
        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);

        static PyGetSetDef t_GrowableByteArrayDataOutput__fields_[] = {
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, bytes),
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GrowableByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput_init_, 0, 0, t_GrowableByteArrayDataOutput__fields_, 0, 0);

        void t_GrowableByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(GrowableByteArrayDataOutput), module, "GrowableByteArrayDataOutput", 0);
        }

        void t_GrowableByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "class_", make_descriptor(GrowableByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_GrowableByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_GrowableByteArrayDataOutput::wrap_Object(GrowableByteArrayDataOutput(((t_GrowableByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          GrowableByteArrayDataOutput object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = GrowableByteArrayDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilterFactory::class$ = NULL;
          jmethodID *MappingCharFilterFactory::mids$ = NULL;
          bool MappingCharFilterFactory::live$ = false;

          jclass MappingCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_parseRules_c71ecf97] = env->getMethodID(cls, "parseRules", "(Ljava/util/List;Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder;)V");
              mids$[mid_parseString_97a5258f] = env->getMethodID(cls, "parseString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilterFactory::MappingCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::java::io::Reader MappingCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MappingCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void MappingCharFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args);
          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self);
          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data);
          static PyGetSetDef t_MappingCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_MappingCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MappingCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilterFactory, t_MappingCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, MappingCharFilterFactory, t_MappingCharFilterFactory_init_, 0, 0, t_MappingCharFilterFactory__fields_, 0, 0);

          void t_MappingCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilterFactory), module, "MappingCharFilterFactory", 0);
          }

          void t_MappingCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "class_", make_descriptor(MappingCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilterFactory::wrap_Object(MappingCharFilterFactory(((t_MappingCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            MappingCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = MappingCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MappingCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_MappingCharFilterFactory_getMultiTermComponent(t_MappingCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_MappingCharFilterFactory_get__multiTermComponent(t_MappingCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IBSimilarity.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IBSimilarity::class$ = NULL;
          jmethodID *IBSimilarity::mids$ = NULL;
          bool IBSimilarity::live$ = false;

          jclass IBSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IBSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c1a9dba4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Distribution;Lorg/apache/lucene/search/similarities/Lambda;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getDistribution_997d9b00] = env->getMethodID(cls, "getDistribution", "()Lorg/apache/lucene/search/similarities/Distribution;");
              mids$[mid_getLambda_c82cedff] = env->getMethodID(cls, "getLambda", "()Lorg/apache/lucene/search/similarities/Lambda;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IBSimilarity::IBSimilarity(const ::org::apache::lucene::search::similarities::Distribution & a0, const ::org::apache::lucene::search::similarities::Lambda & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_c1a9dba4, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::Distribution IBSimilarity::getDistribution() const
          {
            return ::org::apache::lucene::search::similarities::Distribution(env->callObjectMethod(this$, mids$[mid_getDistribution_997d9b00]));
          }

          ::org::apache::lucene::search::similarities::Lambda IBSimilarity::getLambda() const
          {
            return ::org::apache::lucene::search::similarities::Lambda(env->callObjectMethod(this$, mids$[mid_getLambda_c82cedff]));
          }

          ::org::apache::lucene::search::similarities::Normalization IBSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String IBSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args);
          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data);
          static PyGetSetDef t_IBSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_IBSimilarity, distribution),
            DECLARE_GET_FIELD(t_IBSimilarity, lambda),
            DECLARE_GET_FIELD(t_IBSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IBSimilarity__methods_[] = {
            DECLARE_METHOD(t_IBSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, getDistribution, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IBSimilarity, t_IBSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, IBSimilarity, t_IBSimilarity_init_, 0, 0, t_IBSimilarity__fields_, 0, 0);

          void t_IBSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(IBSimilarity), module, "IBSimilarity", 0);
          }

          void t_IBSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "class_", make_descriptor(IBSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "wrapfn_", make_descriptor(t_IBSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IBSimilarity::initializeClass, 1)))
              return NULL;
            return t_IBSimilarity::wrap_Object(IBSimilarity(((t_IBSimilarity *) arg)->object.this$));
          }
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IBSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::Distribution a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Lambda a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            IBSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::Distribution::initializeClass, ::org::apache::lucene::search::similarities::Lambda::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = IBSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Distribution result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Lambda result((jobject) NULL);
            OBJ_CALL(result = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IBSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Distribution value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Lambda value((jobject) NULL);
            OBJ_CALL(value = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexWriter::mids$ = NULL;
          bool CompressingStoredFieldsIndexWriter::live$ = false;

          jclass CompressingStoredFieldsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CompressingStoredFieldsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self);

          static PyMethodDef t_CompressingStoredFieldsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, close, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexWriter, t_CompressingStoredFieldsIndexWriter, ::java::lang::Object, CompressingStoredFieldsIndexWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexWriter), module, "CompressingStoredFieldsIndexWriter", 0);
          }

          void t_CompressingStoredFieldsIndexWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexWriter::wrap_Object(CompressingStoredFieldsIndexWriter(((t_CompressingStoredFieldsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector$GroupHead::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector$GroupHead::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector$GroupHead::live$ = false;

            jclass FunctionAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
                mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FunctionAllGroupHeadsCollector$GroupHead::compare(jint a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
            }

            void FunctionAllGroupHeadsCollector$GroupHead::updateDocHead(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_updateDocHead_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector$GroupHead__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector$GroupHead, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector$GroupHead__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, compare, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, updateDocHead, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector$GroupHead, t_FunctionAllGroupHeadsCollector$GroupHead, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector$GroupHead, FunctionAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_FunctionAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(const FunctionAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead), module, "FunctionAllGroupHeadsCollector$GroupHead", 0);
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(FunctionAllGroupHeadsCollector$GroupHead(((t_FunctionAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.compare(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compare", args);
              return NULL;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.updateDocHead(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "updateDocHead", arg);
              return NULL;
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups$ScoreMergeMode::class$ = NULL;
          jmethodID *TopGroups$ScoreMergeMode::mids$ = NULL;
          bool TopGroups$ScoreMergeMode::live$ = false;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Avg = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::None = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Total = NULL;

          jclass TopGroups$ScoreMergeMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_10e490e6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");
              mids$[mid_values_88270724] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              None = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              Total = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups$ScoreMergeMode TopGroups$ScoreMergeMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups$ScoreMergeMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_10e490e6], a0.this$));
          }

          JArray< TopGroups$ScoreMergeMode > TopGroups$ScoreMergeMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< TopGroups$ScoreMergeMode >(env->callStaticObjectMethod(cls, mids$[mid_values_88270724]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type);
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data);
          static PyGetSetDef t_TopGroups$ScoreMergeMode__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups$ScoreMergeMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups$ScoreMergeMode__methods_[] = {
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups$ScoreMergeMode, t_TopGroups$ScoreMergeMode, ::java::lang::Enum, TopGroups$ScoreMergeMode, abstract_init, 0, 0, t_TopGroups$ScoreMergeMode__fields_, 0, 0);
          PyObject *t_TopGroups$ScoreMergeMode::wrap_Object(const TopGroups$ScoreMergeMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups$ScoreMergeMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups$ScoreMergeMode::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups$ScoreMergeMode), module, "TopGroups$ScoreMergeMode", 0);
          }

          void t_TopGroups$ScoreMergeMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "class_", make_descriptor(TopGroups$ScoreMergeMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "wrapfn_", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TopGroups$ScoreMergeMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Avg", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Avg)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "None", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::None)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Total", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Total)));
          }

          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 1)))
              return NULL;
            return t_TopGroups$ScoreMergeMode::wrap_Object(TopGroups$ScoreMergeMode(((t_TopGroups$ScoreMergeMode *) arg)->object.this$));
          }
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            TopGroups$ScoreMergeMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::valueOf(a0));
              return t_TopGroups$ScoreMergeMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type)
          {
            JArray< TopGroups$ScoreMergeMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::values());
            return JArray<jobject>(result.this$).wrap(t_TopGroups$ScoreMergeMode::wrap_jobject);
          }
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/German2Stemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *German2Stemmer::class$ = NULL;
        jmethodID *German2Stemmer::mids$ = NULL;
        bool German2Stemmer::live$ = false;

        jclass German2Stemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/German2Stemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        German2Stemmer::German2Stemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean German2Stemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint German2Stemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean German2Stemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args);

        static PyMethodDef t_German2Stemmer__methods_[] = {
          DECLARE_METHOD(t_German2Stemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(German2Stemmer, t_German2Stemmer, ::org::tartarus::snowball::SnowballProgram, German2Stemmer, t_German2Stemmer_init_, 0, 0, 0, 0, 0);

        void t_German2Stemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(German2Stemmer), module, "German2Stemmer", 0);
        }

        void t_German2Stemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "class_", make_descriptor(German2Stemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "wrapfn_", make_descriptor(t_German2Stemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, German2Stemmer::initializeClass, 1)))
            return NULL;
          return t_German2Stemmer::wrap_Object(German2Stemmer(((t_German2Stemmer *) arg)->object.this$));
        }
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, German2Stemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds)
        {
          German2Stemmer object((jobject) NULL);

          INT_CALL(object = German2Stemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/MultiFieldQueryParser.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *MultiFieldQueryParser::class$ = NULL;
          jmethodID *MultiFieldQueryParser::mids$ = NULL;
          bool MultiFieldQueryParser::live$ = false;

          jclass MultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/MultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_84717d3b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_parse_8e084329] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_6b08888f] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_5707fee1] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_84717d3b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_8e084329], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_6b08888f], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_5707fee1], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_MultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, parse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiFieldQueryParser, t_MultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, MultiFieldQueryParser, t_MultiFieldQueryParser_init_, 0, 0, 0, 0, 0);

          void t_MultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiFieldQueryParser), module, "MultiFieldQueryParser", 0);
          }

          void t_MultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "class_", make_descriptor(MultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_MultiFieldQueryParser::wrap_Object(MultiFieldQueryParser(((t_MultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "K[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "K[skK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K[s[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "Ks[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K[s[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            return callSuper(type, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilter::class$ = NULL;
          jmethodID *CzechStemFilter::mids$ = NULL;
          bool CzechStemFilter::live$ = false;

          jclass CzechStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilter::CzechStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CzechStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args);

          static PyMethodDef t_CzechStemFilter__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemFilter, t_CzechStemFilter, ::org::apache::lucene::analysis::TokenFilter, CzechStemFilter, t_CzechStemFilter_init_, 0, 0, 0, 0, 0);

          void t_CzechStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilter), module, "CzechStemFilter", 0);
          }

          void t_CzechStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "class_", make_descriptor(CzechStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "wrapfn_", make_descriptor(t_CzechStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilter::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilter::wrap_Object(CzechStemFilter(((t_CzechStemFilter *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CzechStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CzechStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CzechStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesFormat::class$ = NULL;
        jmethodID *DocValuesFormat::mids$ = NULL;
        bool DocValuesFormat::live$ = false;

        jclass DocValuesFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableDocValuesFormats_03e99967] = env->getStaticMethodID(cls, "availableDocValuesFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_forName_36ef78ba] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadDocValuesFormats_9110048d] = env->getStaticMethodID(cls, "reloadDocValuesFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set DocValuesFormat::availableDocValuesFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableDocValuesFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesConsumer DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
        }

        DocValuesFormat DocValuesFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocValuesFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_36ef78ba], a0.this$));
        }

        ::java::lang::String DocValuesFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void DocValuesFormat::reloadDocValuesFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadDocValuesFormats_9110048d], a0.this$);
        }

        ::java::lang::String DocValuesFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type);
        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self);
        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args);
        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data);
        static PyGetSetDef t_DocValuesFormat__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesFormat__methods_[] = {
          DECLARE_METHOD(t_DocValuesFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, availableDocValuesFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesFormat, reloadDocValuesFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesFormat, t_DocValuesFormat, ::java::lang::Object, DocValuesFormat, abstract_init, 0, 0, t_DocValuesFormat__fields_, 0, 0);

        void t_DocValuesFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesFormat), module, "DocValuesFormat", 0);
        }

        void t_DocValuesFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "class_", make_descriptor(DocValuesFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_DocValuesFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesFormat::initializeClass, 1)))
            return NULL;
          return t_DocValuesFormat::wrap_Object(DocValuesFormat(((t_DocValuesFormat *) arg)->object.this$));
        }
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::availableDocValuesFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::forName(a0));
            return t_DocValuesFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::DocValuesFormat::reloadDocValuesFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadDocValuesFormats", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocValuesFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilter::class$ = NULL;
          jmethodID *FinnishLightStemFilter::mids$ = NULL;
          bool FinnishLightStemFilter::live$ = false;

          jclass FinnishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilter::FinnishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FinnishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilter, t_FinnishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FinnishLightStemFilter, t_FinnishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilter), module, "FinnishLightStemFilter", 0);
          }

          void t_FinnishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "class_", make_descriptor(FinnishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilter::wrap_Object(FinnishLightStemFilter(((t_FinnishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FinnishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FinnishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Row.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/Character.h"
#include "java/io/DataOutput.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Row::class$ = NULL;
      jmethodID *Row::mids$ = NULL;
      bool Row::live$ = false;

      jclass Row::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Row");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getCmd_35927258] = env->getMethodID(cls, "getCmd", "(Ljava/lang/Character;)I");
          mids$[mid_getCnt_35927258] = env->getMethodID(cls, "getCnt", "(Ljava/lang/Character;)I");
          mids$[mid_getRef_35927258] = env->getMethodID(cls, "getRef", "(Ljava/lang/Character;)I");
          mids$[mid_print_1b7c898b] = env->getMethodID(cls, "print", "(Ljava/io/PrintStream;)V");
          mids$[mid_setCmd_d2bbdccf] = env->getMethodID(cls, "setCmd", "(Ljava/lang/Character;I)V");
          mids$[mid_setRef_d2bbdccf] = env->getMethodID(cls, "setRef", "(Ljava/lang/Character;I)V");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");
          mids$[mid_uniformCmd_bb0c7660] = env->getMethodID(cls, "uniformCmd", "(Z)I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Row::Row() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Row::Row(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      jint Row::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Row::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Row::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      jint Row::getCmd(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCmd_35927258], a0.this$);
      }

      jint Row::getCnt(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCnt_35927258], a0.this$);
      }

      jint Row::getRef(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getRef_35927258], a0.this$);
      }

      void Row::print(const ::java::io::PrintStream & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_1b7c898b], a0.this$);
      }

      void Row::setCmd(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCmd_d2bbdccf], a0.this$, a1);
      }

      void Row::setRef(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setRef_d2bbdccf], a0.this$, a1);
      }

      void Row::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }

      jint Row::uniformCmd(jboolean a0) const
      {
        return env->callIntMethod(this$, mids$[mid_uniformCmd_bb0c7660], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Row_getCells(t_Row *self);
      static PyObject *t_Row_getCellsPnt(t_Row *self);
      static PyObject *t_Row_getCellsVal(t_Row *self);
      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg);
      static PyObject *t_Row_print(t_Row *self, PyObject *arg);
      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args);
      static PyObject *t_Row_setRef(t_Row *self, PyObject *args);
      static PyObject *t_Row_store(t_Row *self, PyObject *arg);
      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_get__cells(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data);
      static PyGetSetDef t_Row__fields_[] = {
        DECLARE_GET_FIELD(t_Row, cells),
        DECLARE_GET_FIELD(t_Row, cellsPnt),
        DECLARE_GET_FIELD(t_Row, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Row__methods_[] = {
        DECLARE_METHOD(t_Row, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCmd, METH_O),
        DECLARE_METHOD(t_Row, getCnt, METH_O),
        DECLARE_METHOD(t_Row, getRef, METH_O),
        DECLARE_METHOD(t_Row, print, METH_O),
        DECLARE_METHOD(t_Row, setCmd, METH_VARARGS),
        DECLARE_METHOD(t_Row, setRef, METH_VARARGS),
        DECLARE_METHOD(t_Row, store, METH_O),
        DECLARE_METHOD(t_Row, uniformCmd, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Row, t_Row, ::java::lang::Object, Row, t_Row_init_, 0, 0, t_Row__fields_, 0, 0);

      void t_Row::install(PyObject *module)
      {
        installType(&PY_TYPE(Row), module, "Row", 0);
      }

      void t_Row::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "class_", make_descriptor(Row::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "wrapfn_", make_descriptor(t_Row::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Row::initializeClass, 1)))
          return NULL;
        return t_Row::wrap_Object(Row(((t_Row *) arg)->object.this$));
      }
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Row::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Row object((jobject) NULL);

            INT_CALL(object = Row());
            self->object = object;
            break;
          }
          goto err;
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Row object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Row(a0));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Row_getCells(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsPnt(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsVal(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCnt(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCnt", arg);
        return NULL;
      }

      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getRef(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRef", arg);
        return NULL;
      }

      static PyObject *t_Row_print(t_Row *self, PyObject *arg)
      {
        ::java::io::PrintStream a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
        {
          OBJ_CALL(self->object.print(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "print", arg);
        return NULL;
      }

      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setCmd(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCmd", args);
        return NULL;
      }

      static PyObject *t_Row_setRef(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setRef(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRef", args);
        return NULL;
      }

      static PyObject *t_Row_store(t_Row *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg)
      {
        jboolean a0;
        jint result;

        if (!parseArg(arg, "Z", &a0))
        {
          OBJ_CALL(result = self->object.uniformCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "uniformCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_get__cells(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentWriteState::class$ = NULL;
        jmethodID *SegmentWriteState::mids$ = NULL;
        jfieldID *SegmentWriteState::fids$ = NULL;
        bool SegmentWriteState::live$ = false;

        jclass SegmentWriteState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentWriteState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bde10a1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_delCountOnFlush] = env->getFieldID(cls, "delCountOnFlush", "I");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_liveDocs] = env->getFieldID(cls, "liveDocs", "Lorg/apache/lucene/util/MutableBits;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termIndexInterval] = env->getFieldID(cls, "termIndexInterval", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentWriteState::SegmentWriteState(const SegmentWriteState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bde10a1b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentWriteState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        jint SegmentWriteState::_get_delCountOnFlush() const
        {
          return env->getIntField(this$, fids$[fid_delCountOnFlush]);
        }

        void SegmentWriteState::_set_delCountOnFlush(jint a0) const
        {
          env->setIntField(this$, fids$[fid_delCountOnFlush], a0);
        }

        ::org::apache::lucene::store::Directory SegmentWriteState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentWriteState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::util::InfoStream SegmentWriteState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        ::org::apache::lucene::util::MutableBits SegmentWriteState::_get_liveDocs() const
        {
          return ::org::apache::lucene::util::MutableBits(env->getObjectField(this$, fids$[fid_liveDocs]));
        }

        void SegmentWriteState::_set_liveDocs(const ::org::apache::lucene::util::MutableBits & a0) const
        {
          env->setObjectField(this$, fids$[fid_liveDocs], a0.this$);
        }

        ::org::apache::lucene::index::SegmentInfo SegmentWriteState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentWriteState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentWriteState::_get_termIndexInterval() const
        {
          return env->getIntField(this$, fids$[fid_termIndexInterval]);
        }

        void SegmentWriteState::_set_termIndexInterval(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termIndexInterval], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentWriteState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentWriteState, context),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, delCountOnFlush),
          DECLARE_GET_FIELD(t_SegmentWriteState, directory),
          DECLARE_GET_FIELD(t_SegmentWriteState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentWriteState, infoStream),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, liveDocs),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, termIndexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentWriteState__methods_[] = {
          DECLARE_METHOD(t_SegmentWriteState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentWriteState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentWriteState, t_SegmentWriteState, ::java::lang::Object, SegmentWriteState, t_SegmentWriteState_init_, 0, 0, t_SegmentWriteState__fields_, 0, 0);

        void t_SegmentWriteState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentWriteState), module, "SegmentWriteState", 0);
        }

        void t_SegmentWriteState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "class_", make_descriptor(SegmentWriteState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "wrapfn_", make_descriptor(t_SegmentWriteState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentWriteState::initializeClass, 1)))
            return NULL;
          return t_SegmentWriteState::wrap_Object(SegmentWriteState(((t_SegmentWriteState *) arg)->object.this$));
        }
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentWriteState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds)
        {
          SegmentWriteState a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          SegmentWriteState object((jobject) NULL);

          if (!parseArgs(args, "ks", SegmentWriteState::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SegmentWriteState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_delCountOnFlush());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_delCountOnFlush(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delCountOnFlush", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocs());
          return ::org::apache::lucene::util::t_MutableBits::wrap_Object(value);
        }
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::MutableBits::initializeClass, &value))
          {
            INT_CALL(self->object._set_liveDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "liveDocs", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termIndexInterval(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/io/IOException.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *Spans::class$ = NULL;
          jmethodID *Spans::mids$ = NULL;
          bool Spans::live$ = false;

          jclass Spans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/Spans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Spans::Spans() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Spans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint Spans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint Spans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection Spans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          jboolean Spans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean Spans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean Spans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint Spans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Spans_cost(t_Spans *self);
          static PyObject *t_Spans_doc(t_Spans *self);
          static PyObject *t_Spans_end(t_Spans *self);
          static PyObject *t_Spans_getPayload(t_Spans *self);
          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self);
          static PyObject *t_Spans_next(t_Spans *self);
          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg);
          static PyObject *t_Spans_start(t_Spans *self);
          static PyObject *t_Spans_get__payload(t_Spans *self, void *data);
          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data);
          static PyGetSetDef t_Spans__fields_[] = {
            DECLARE_GET_FIELD(t_Spans, payload),
            DECLARE_GET_FIELD(t_Spans, payloadAvailable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Spans__methods_[] = {
            DECLARE_METHOD(t_Spans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, cost, METH_NOARGS),
            DECLARE_METHOD(t_Spans, doc, METH_NOARGS),
            DECLARE_METHOD(t_Spans, end, METH_NOARGS),
            DECLARE_METHOD(t_Spans, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_Spans, isPayloadAvailable, METH_NOARGS),
            DECLARE_METHOD(t_Spans, next, METH_NOARGS),
            DECLARE_METHOD(t_Spans, skipTo, METH_O),
            DECLARE_METHOD(t_Spans, start, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Spans, t_Spans, ::java::lang::Object, Spans, t_Spans_init_, 0, 0, t_Spans__fields_, 0, 0);

          void t_Spans::install(PyObject *module)
          {
            installType(&PY_TYPE(Spans), module, "Spans", 0);
          }

          void t_Spans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "class_", make_descriptor(Spans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "wrapfn_", make_descriptor(t_Spans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Spans::initializeClass, 1)))
              return NULL;
            return t_Spans::wrap_Object(Spans(((t_Spans *) arg)->object.this$));
          }
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Spans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds)
          {
            Spans object((jobject) NULL);

            INT_CALL(object = Spans());
            self->object = object;

            return 0;
          }

          static PyObject *t_Spans_cost(t_Spans *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Spans_doc(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.doc());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_end(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.end());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_getPayload(t_Spans *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
          }

          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_next(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
            return NULL;
          }

          static PyObject *t_Spans_start(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.start());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_get__payload(t_Spans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilterFactory::mids$ = NULL;
          bool PortugueseMinimalStemFilterFactory::live$ = false;

          jclass PortugueseMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilterFactory::PortugueseMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilterFactory), module, "PortugueseMinimalStemFilterFactory", 0);
          }

          void t_PortugueseMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilterFactory::wrap_Object(PortugueseMinimalStemFilterFactory(((t_PortugueseMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermsConsumer::class$ = NULL;
        jmethodID *TermsConsumer::mids$ = NULL;
        bool TermsConsumer::live$ = false;

        jclass TermsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_finish_42663baa] = env->getMethodID(cls, "finish", "(JJI)V");
            mids$[mid_finishTerm_e998e763] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_90e0102b] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_startTerm_0765d42f] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/codecs/PostingsConsumer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermsConsumer::finish(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_42663baa], a0, a1, a2);
        }

        void TermsConsumer::finishTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_e998e763], a0.this$, a1.this$);
        }

        ::java::util::Comparator TermsConsumer::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        void TermsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::TermsEnum & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_90e0102b], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::codecs::PostingsConsumer TermsConsumer::startTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsConsumer(env->callObjectMethod(this$, mids$[mid_startTerm_0765d42f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self);
        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg);
        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data);
        static PyGetSetDef t_TermsConsumer__fields_[] = {
          DECLARE_GET_FIELD(t_TermsConsumer, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsConsumer__methods_[] = {
          DECLARE_METHOD(t_TermsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, finishTerm, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, startTerm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsConsumer, t_TermsConsumer, ::java::lang::Object, TermsConsumer, abstract_init, 0, 0, t_TermsConsumer__fields_, 0, 0);

        void t_TermsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsConsumer), module, "TermsConsumer", 0);
        }

        void t_TermsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "class_", make_descriptor(TermsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "wrapfn_", make_descriptor(t_TermsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsConsumer::initializeClass, 1)))
            return NULL;
          return t_TermsConsumer::wrap_Object(TermsConsumer(((t_TermsConsumer *) arg)->object.this$));
        }
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jint a2;

          if (!parseArgs(args, "JJI", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.finish(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finishTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::TermsEnum a2((jobject) NULL);

          if (!parseArgs(args, "kKk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.startTerm(a0));
            return ::org::apache::lucene::codecs::t_PostingsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", arg);
          return NULL;
        }

        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$DefaultCollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$DefaultCollectionModel::mids$ = NULL;
          bool LMSimilarity$DefaultCollectionModel::live$ = false;

          jclass LMSimilarity$DefaultCollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$DefaultCollectionModel::LMSimilarity$DefaultCollectionModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LMSimilarity$DefaultCollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$DefaultCollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$DefaultCollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$DefaultCollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$DefaultCollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel, ::java::lang::Object, LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel_init_, 0, 0, t_LMSimilarity$DefaultCollectionModel__fields_, 0, 0);

          void t_LMSimilarity$DefaultCollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$DefaultCollectionModel), module, "LMSimilarity$DefaultCollectionModel", 0);
          }

          void t_LMSimilarity$DefaultCollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$DefaultCollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$DefaultCollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$DefaultCollectionModel::wrap_Object(LMSimilarity$DefaultCollectionModel(((t_LMSimilarity$DefaultCollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds)
          {
            LMSimilarity$DefaultCollectionModel object((jobject) NULL);

            INT_CALL(object = LMSimilarity$DefaultCollectionModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedStringComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/text/Collator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedStringComparator::class$ = NULL;
          jmethodID *SlowCollatedStringComparator::mids$ = NULL;
          bool SlowCollatedStringComparator::live$ = false;

          jclass SlowCollatedStringComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedStringComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4353060] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/text/Collator;)V");
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_compareValues_4a26475d] = env->getMethodID(cls, "compareValues", "(Ljava/lang/String;Ljava/lang/String;)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_5fdc3f48] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/String;)V");
              mids$[mid_value_141401b3] = env->getMethodID(cls, "value", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedStringComparator::SlowCollatedStringComparator(jint a0, const ::java::lang::String & a1, const ::java::text::Collator & a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f4353060, a0, a1.this$, a2.this$)) {}

          jint SlowCollatedStringComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          jint SlowCollatedStringComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareValues(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compareValues_4a26475d], a0.this$, a1.this$);
          }

          void SlowCollatedStringComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }

          void SlowCollatedStringComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator SlowCollatedStringComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void SlowCollatedStringComparator::setTopValue(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_5fdc3f48], a0.this$);
          }

          ::java::lang::String SlowCollatedStringComparator::value(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_value_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data);
          static PyGetSetDef t_SlowCollatedStringComparator__fields_[] = {
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, bottom),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, nextReader),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, topValue),
            DECLARE_GET_FIELD(t_SlowCollatedStringComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedStringComparator__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedStringComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareValues, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedStringComparator, t_SlowCollatedStringComparator, ::org::apache::lucene::search::FieldComparator, SlowCollatedStringComparator, t_SlowCollatedStringComparator_init_, 0, 0, t_SlowCollatedStringComparator__fields_, 0, 0);
          PyObject *t_SlowCollatedStringComparator::wrap_Object(const SlowCollatedStringComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedStringComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedStringComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedStringComparator), module, "SlowCollatedStringComparator", 0);
          }

          void t_SlowCollatedStringComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "class_", make_descriptor(SlowCollatedStringComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedStringComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedStringComparator::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedStringComparator::wrap_Object(SlowCollatedStringComparator(((t_SlowCollatedStringComparator *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedStringComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::text::Collator a2((jobject) NULL);
            SlowCollatedStringComparator object((jobject) NULL);

            if (!parseArgs(args, "Isk", ::java::text::Collator::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SlowCollatedStringComparator(a0, a1, a2));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(String);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compareValues(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareValues", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *RandomAccessOrds::class$ = NULL;
        jmethodID *RandomAccessOrds::mids$ = NULL;
        bool RandomAccessOrds::live$ = false;

        jclass RandomAccessOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/RandomAccessOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_ordAt_39c7bd20] = env->getMethodID(cls, "ordAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint RandomAccessOrds::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jlong RandomAccessOrds::ordAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_ordAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self);
        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg);

        static PyMethodDef t_RandomAccessOrds__methods_[] = {
          DECLARE_METHOD(t_RandomAccessOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_RandomAccessOrds, ordAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessOrds, t_RandomAccessOrds, ::org::apache::lucene::index::SortedSetDocValues, RandomAccessOrds, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessOrds), module, "RandomAccessOrds", 0);
        }

        void t_RandomAccessOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "class_", make_descriptor(RandomAccessOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessOrds::initializeClass, 1)))
            return NULL;
          return t_RandomAccessOrds::wrap_Object(RandomAccessOrds(((t_RandomAccessOrds *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.ordAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "ordAt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameHashIntCacheLRU::class$ = NULL;
            jmethodID *NameHashIntCacheLRU::mids$ = NULL;
            bool NameHashIntCacheLRU::live$ = false;

            jclass NameHashIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_NameHashIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameHashIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameHashIntCacheLRU, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameHashIntCacheLRU, t_NameHashIntCacheLRU, ::org::apache::lucene::facet::taxonomy::writercache::NameIntCacheLRU, NameHashIntCacheLRU, abstract_init, 0, 0, 0, 0, 0);

            void t_NameHashIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameHashIntCacheLRU), module, "NameHashIntCacheLRU", 0);
            }

            void t_NameHashIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "class_", make_descriptor(NameHashIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameHashIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameHashIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameHashIntCacheLRU::wrap_Object(NameHashIntCacheLRU(((t_NameHashIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameHashIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$ReaderClosedListener::class$ = NULL;
        jmethodID *IndexReader$ReaderClosedListener::mids$ = NULL;
        bool IndexReader$ReaderClosedListener::live$ = false;

        jclass IndexReader$ReaderClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$ReaderClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_7d7eaea9] = env->getMethodID(cls, "onClose", "(Lorg/apache/lucene/index/IndexReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader$ReaderClosedListener::onClose(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_7d7eaea9], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg);

        static PyMethodDef t_IndexReader$ReaderClosedListener__methods_[] = {
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ReaderClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader$ReaderClosedListener, t_IndexReader$ReaderClosedListener, ::java::lang::Object, IndexReader$ReaderClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexReader$ReaderClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$ReaderClosedListener), module, "IndexReader$ReaderClosedListener", 0);
        }

        void t_IndexReader$ReaderClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "class_", make_descriptor(IndexReader$ReaderClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "wrapfn_", make_descriptor(t_IndexReader$ReaderClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader$ReaderClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$ReaderClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 1)))
            return NULL;
          return t_IndexReader$ReaderClosedListener::wrap_Object(IndexReader$ReaderClosedListener(((t_IndexReader$ReaderClosedListener *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$ReaderClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$ReaderClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader$ReaderClosedListener_onClose(t_IndexReader$ReaderClosedListener *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher$LeafSlice::class$ = NULL;
        jmethodID *IndexSearcher$LeafSlice::mids$ = NULL;
        bool IndexSearcher$LeafSlice::live$ = false;

        jclass IndexSearcher$LeafSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher$LeafSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_683a6c7f] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReaderContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher$LeafSlice::IndexSearcher$LeafSlice(const JArray< ::org::apache::lucene::index::AtomicReaderContext > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_683a6c7f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexSearcher$LeafSlice__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice, ::java::lang::Object, IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice_init_, 0, 0, 0, 0, 0);

        void t_IndexSearcher$LeafSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher$LeafSlice), module, "IndexSearcher$LeafSlice", 0);
        }

        void t_IndexSearcher$LeafSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "class_", make_descriptor(IndexSearcher$LeafSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher$LeafSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher$LeafSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher$LeafSlice::wrap_Object(IndexSearcher$LeafSlice(((t_IndexSearcher$LeafSlice *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::AtomicReaderContext > a0((jobject) NULL);
          IndexSearcher$LeafSlice object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = IndexSearcher$LeafSlice(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentCommitInfo::class$ = NULL;
        jmethodID *SegmentCommitInfo::mids$ = NULL;
        jfieldID *SegmentCommitInfo::fids$ = NULL;
        bool SegmentCommitInfo::live$ = false;

        jclass SegmentCommitInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentCommitInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f66c7cbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentInfo;IJJJ)V");
            mids$[mid_clone_5df298a9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_files_2d2d7de4] = env->getMethodID(cls, "files", "()Ljava/util/Collection;");
            mids$[mid_getDelCount_54c6a179] = env->getMethodID(cls, "getDelCount", "()I");
            mids$[mid_getDelGen_54c6a17a] = env->getMethodID(cls, "getDelGen", "()J");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesUpdatesFiles_db60befd] = env->getMethodID(cls, "getDocValuesUpdatesFiles", "()Ljava/util/Map;");
            mids$[mid_getFieldInfosFiles_03e99967] = env->getMethodID(cls, "getFieldInfosFiles", "()Ljava/util/Set;");
            mids$[mid_getFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getFieldInfosGen", "()J");
            mids$[mid_getNextDelGen_54c6a17a] = env->getMethodID(cls, "getNextDelGen", "()J");
            mids$[mid_getNextDocValuesGen_54c6a17a] = env->getMethodID(cls, "getNextDocValuesGen", "()J");
            mids$[mid_getNextFieldInfosGen_54c6a17a] = env->getMethodID(cls, "getNextFieldInfosGen", "()J");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasFieldUpdates_54c6a16a] = env->getMethodID(cls, "hasFieldUpdates", "()Z");
            mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setDocValuesUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_setFieldInfosFiles_fb4f2b26] = env->getMethodID(cls, "setFieldInfosFiles", "(Ljava/util/Set;)V");
            mids$[mid_setGenUpdatesFiles_4c9e2b1c] = env->getMethodID(cls, "setGenUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_sizeInBytes_54c6a17a] = env->getMethodID(cls, "sizeInBytes", "()J");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_info] = env->getFieldID(cls, "info", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentCommitInfo::SegmentCommitInfo(const ::org::apache::lucene::index::SegmentInfo & a0, jint a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f66c7cbe, a0.this$, a1, a2, a3, a4)) {}

        SegmentCommitInfo SegmentCommitInfo::clone() const
        {
          return SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_clone_5df298a9]));
        }

        ::java::util::Collection SegmentCommitInfo::files() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_2d2d7de4]));
        }

        jint SegmentCommitInfo::getDelCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDelCount_54c6a179]);
        }

        jlong SegmentCommitInfo::getDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::java::util::Map SegmentCommitInfo::getDocValuesUpdatesFiles() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDocValuesUpdatesFiles_db60befd]));
        }

        ::java::util::Set SegmentCommitInfo::getFieldInfosFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getFieldInfosFiles_03e99967]));
        }

        jlong SegmentCommitInfo::getFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getFieldInfosGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDelGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDocValuesGen_54c6a17a]);
        }

        jlong SegmentCommitInfo::getNextFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextFieldInfosGen_54c6a17a]);
        }

        jboolean SegmentCommitInfo::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean SegmentCommitInfo::hasFieldUpdates() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFieldUpdates_54c6a16a]);
        }

        void SegmentCommitInfo::setDocValuesUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesUpdatesFiles_4c9e2b1c], a0.this$);
        }

        void SegmentCommitInfo::setFieldInfosFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFieldInfosFiles_fb4f2b26], a0.this$);
        }

        void SegmentCommitInfo::setGenUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGenUpdatesFiles_4c9e2b1c], a0.this$);
        }

        jlong SegmentCommitInfo::sizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_sizeInBytes_54c6a17a]);
        }

        ::java::lang::String SegmentCommitInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentCommitInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentCommitInfo::_get_info() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_info]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args);
        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data);

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static PyGetSetDef t_SegmentCommitInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentCommitInfo, info),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delCount),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, docValuesGen),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, docValuesUpdatesFiles),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, fieldInfosFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, fieldInfosGen),
          DECLARE_SET_FIELD(t_SegmentCommitInfo, genUpdatesFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDelGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDocValuesGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextFieldInfosGen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentCommitInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentCommitInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesUpdatesFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasFieldUpdates, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, setDocValuesUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setFieldInfosFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setGenUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, sizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentCommitInfo, t_SegmentCommitInfo, ::java::lang::Object, SegmentCommitInfo, t_SegmentCommitInfo_init_, 0, 0, t_SegmentCommitInfo__fields_, 0, 0);

        void t_SegmentCommitInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentCommitInfo), module, "SegmentCommitInfo", 0);
        }

        void t_SegmentCommitInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "class_", make_descriptor(SegmentCommitInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentCommitInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentCommitInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentCommitInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentCommitInfo::wrap_Object(SegmentCommitInfo(((t_SegmentCommitInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentCommitInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;
          jlong a4;
          SegmentCommitInfo object((jobject) NULL);

          if (!parseArgs(args, "kIJJJ", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = SegmentCommitInfo(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self)
        {
          SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDelCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFieldUpdates());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFieldInfosFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFieldInfosFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setGenUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setGenUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGenUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentCommitInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_info());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDelCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setDocValuesUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Set value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
            {
              INT_CALL(self->object.setFieldInfosFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfosFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static int t_SegmentCommitInfo_set__genUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setGenUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "genUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *NoTokenFoundQueryNode::class$ = NULL;
              jmethodID *NoTokenFoundQueryNode::mids$ = NULL;
              bool NoTokenFoundQueryNode::live$ = false;

              jclass NoTokenFoundQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoTokenFoundQueryNode::NoTokenFoundQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode NoTokenFoundQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence NoTokenFoundQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NoTokenFoundQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args);

              static PyMethodDef t_NoTokenFoundQueryNode__methods_[] = {
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoTokenFoundQueryNode, t_NoTokenFoundQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, NoTokenFoundQueryNode, t_NoTokenFoundQueryNode_init_, 0, 0, 0, 0, 0);

              void t_NoTokenFoundQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NoTokenFoundQueryNode), module, "NoTokenFoundQueryNode", 0);
              }

              void t_NoTokenFoundQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "class_", make_descriptor(NoTokenFoundQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NoTokenFoundQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoTokenFoundQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoTokenFoundQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NoTokenFoundQueryNode::wrap_Object(NoTokenFoundQueryNode(((t_NoTokenFoundQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoTokenFoundQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds)
              {
                NoTokenFoundQueryNode object((jobject) NULL);

                INT_CALL(object = NoTokenFoundQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/MinimizationOperations.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *MinimizationOperations::class$ = NULL;
          jmethodID *MinimizationOperations::mids$ = NULL;
          bool MinimizationOperations::live$ = false;

          jclass MinimizationOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/MinimizationOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_minimize_fc7cf394] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_minimizeHopcroft_fc7cf394] = env->getStaticMethodID(cls, "minimizeHopcroft", "(Lorg/apache/lucene/util/automaton/Automaton;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void MinimizationOperations::minimize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_minimize_fc7cf394], a0.this$);
          }

          void MinimizationOperations::minimizeHopcroft(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_minimizeHopcroft_fc7cf394], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_MinimizationOperations__methods_[] = {
            DECLARE_METHOD(t_MinimizationOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimizeHopcroft, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinimizationOperations, t_MinimizationOperations, ::java::lang::Object, MinimizationOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_MinimizationOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(MinimizationOperations), module, "MinimizationOperations", 0);
          }

          void t_MinimizationOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "class_", make_descriptor(MinimizationOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "wrapfn_", make_descriptor(t_MinimizationOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinimizationOperations::initializeClass, 1)))
              return NULL;
            return t_MinimizationOperations::wrap_Object(MinimizationOperations(((t_MinimizationOperations *) arg)->object.this$));
          }
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinimizationOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::MinimizationOperations::minimize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::MinimizationOperations::minimizeHopcroft(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "minimizeHopcroft", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyReader::class$ = NULL;
            jmethodID *DirectoryTaxonomyReader::mids$ = NULL;
            bool DirectoryTaxonomyReader::live$ = false;

            jclass DirectoryTaxonomyReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_49dc27eb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
                mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_setCacheSize_39c7bd3c] = env->getMethodID(cls, "setCacheSize", "(I)V");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
                mids$[mid_doOpenIfChanged_57c99022] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");
                mids$[mid_openIndexReader_109b8ac7] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
                mids$[mid_openIndexReader_880937e0] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_49dc27eb, a0.this$)) {}

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            ::java::util::Map DirectoryTaxonomyReader::getCommitUserData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
            }

            jint DirectoryTaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays DirectoryTaxonomyReader::getParallelTaxonomyArrays() const
            {
              return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
            }

            ::org::apache::lucene::facet::taxonomy::FacetLabel DirectoryTaxonomyReader::getPath(jint a0) const
            {
              return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
            }

            jint DirectoryTaxonomyReader::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            void DirectoryTaxonomyReader::setCacheSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheSize_39c7bd3c], a0);
            }

            ::java::lang::String DirectoryTaxonomyReader::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args);
            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyReader__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyReader, cacheSize),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, commitUserData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, parallelTaxonomyArrays),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyReader__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getCommitUserData, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getParallelTaxonomyArrays, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getPath, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getSize, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, setCacheSize, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyReader, t_DirectoryTaxonomyReader, ::org::apache::lucene::facet::taxonomy::TaxonomyReader, DirectoryTaxonomyReader, t_DirectoryTaxonomyReader_init_, 0, 0, t_DirectoryTaxonomyReader__fields_, 0, 0);

            void t_DirectoryTaxonomyReader::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyReader), module, "DirectoryTaxonomyReader", 0);
            }

            void t_DirectoryTaxonomyReader::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "class_", make_descriptor(DirectoryTaxonomyReader::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyReader::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyReader::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyReader::wrap_Object(DirectoryTaxonomyReader(((t_DirectoryTaxonomyReader *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::java::util::Map result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCommitUserData());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getCommitUserData", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
                return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getParallelTaxonomyArrays", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPath(a0));
                return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getPath", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getSize());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getSize", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "toString", args, 2);
            }

            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheSize", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitUserData());
              return ::java::util::t_Map::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
              OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
              return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *SyntaxParser::class$ = NULL;
              jmethodID *SyntaxParser::mids$ = NULL;
              bool SyntaxParser::live$ = false;

              jclass SyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args);

              static PyMethodDef t_SyntaxParser__methods_[] = {
                DECLARE_METHOD(t_SyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SyntaxParser, t_SyntaxParser, ::java::lang::Object, SyntaxParser, abstract_init, 0, 0, 0, 0, 0);

              void t_SyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(SyntaxParser), module, "SyntaxParser", 0);
              }

              void t_SyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "class_", make_descriptor(SyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_SyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_SyntaxParser::wrap_Object(SyntaxParser(((t_SyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap$Builder::class$ = NULL;
          jmethodID *NormalizeCharMap$Builder::mids$ = NULL;
          bool NormalizeCharMap$Builder::live$ = false;

          jclass NormalizeCharMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_4a264742] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_build_bf8be9b0] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizeCharMap$Builder::NormalizeCharMap$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void NormalizeCharMap$Builder::add(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_4a264742], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::charfilter::NormalizeCharMap NormalizeCharMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::charfilter::NormalizeCharMap(env->callObjectMethod(this$, mids$[mid_build_bf8be9b0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args);
          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self);

          static PyMethodDef t_NormalizeCharMap$Builder__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap$Builder, t_NormalizeCharMap$Builder, ::java::lang::Object, NormalizeCharMap$Builder, t_NormalizeCharMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap$Builder), module, "NormalizeCharMap$Builder", 0);
          }

          void t_NormalizeCharMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "class_", make_descriptor(NormalizeCharMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap$Builder::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap$Builder::wrap_Object(NormalizeCharMap$Builder(((t_NormalizeCharMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            NormalizeCharMap$Builder object((jobject) NULL);

            INT_CALL(object = NormalizeCharMap$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::charfilter::t_NormalizeCharMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilterFactory::class$ = NULL;
          jmethodID *TruncateTokenFilterFactory::mids$ = NULL;
          bool TruncateTokenFilterFactory::live$ = false;
          ::java::lang::String *TruncateTokenFilterFactory::PREFIX_LENGTH_KEY = NULL;

          jclass TruncateTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PREFIX_LENGTH_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PREFIX_LENGTH_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilterFactory::TruncateTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TruncateTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilterFactory, t_TruncateTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TruncateTokenFilterFactory, t_TruncateTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilterFactory), module, "TruncateTokenFilterFactory", 0);
          }

          void t_TruncateTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "class_", make_descriptor(TruncateTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TruncateTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilterFactory).tp_dict, "PREFIX_LENGTH_KEY", make_descriptor(j2p(*TruncateTokenFilterFactory::PREFIX_LENGTH_KEY)));
          }

          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilterFactory::wrap_Object(TruncateTokenFilterFactory(((t_TruncateTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TruncateTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TruncateTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource$ScoreValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource$ScoreValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource$ScoreValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource$ScoreValueSource::TaxonomyFacetSumValueSource$ScoreValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String TaxonomyFacetSumValueSource$ScoreValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean TaxonomyFacetSumValueSource$ScoreValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::queries::function::FunctionValues TaxonomyFacetSumValueSource$ScoreValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint TaxonomyFacetSumValueSource$ScoreValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacetSumValueSource$ScoreValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, description, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource$ScoreValueSource, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource, ::org::apache::lucene::queries::function::ValueSource, TaxonomyFacetSumValueSource$ScoreValueSource, t_TaxonomyFacetSumValueSource$ScoreValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), module, "TaxonomyFacetSumValueSource$ScoreValueSource", 0);
          }

          void t_TaxonomyFacetSumValueSource$ScoreValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource$ScoreValueSource::wrap_Object(TaxonomyFacetSumValueSource$ScoreValueSource(((t_TaxonomyFacetSumValueSource$ScoreValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource$ScoreValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource$ScoreValueSource_init_(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyFacetSumValueSource$ScoreValueSource object((jobject) NULL);

            INT_CALL(object = TaxonomyFacetSumValueSource$ScoreValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_description(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.description());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "description", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_equals(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_getValues(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "getValues", args, 2);
          }

          static PyObject *t_TaxonomyFacetSumValueSource$ScoreValueSource_hashCode(t_TaxonomyFacetSumValueSource$ScoreValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilter::class$ = NULL;
          jmethodID *StopFilter::mids$ = NULL;
          bool StopFilter::live$ = false;

          jclass StopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_makeStopSet_9f4ce96f] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_bbdc7fc0] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_08a7acff] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;Ljava/util/List;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_makeStopSet_81b79166] = env->getStaticMethodID(cls, "makeStopSet", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilter::StopFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_9f4ce96f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_bbdc7fc0], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const ::java::util::List & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_08a7acff], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilter::makeStopSet(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_81b79166], a0.this$, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StopFilter__methods_[] = {
            DECLARE_METHOD(t_StopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, makeStopSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilter, t_StopFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, StopFilter, t_StopFilter_init_, 0, 0, 0, 0, 0);

          void t_StopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilter), module, "StopFilter", 0);
          }

          void t_StopFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "class_", make_descriptor(StopFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "wrapfn_", make_descriptor(t_StopFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilter::initializeClass, 1)))
              return NULL;
            return t_StopFilter::wrap_Object(StopFilter(((t_StopFilter *) arg)->object.this$));
          }
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
            PyTypeObject **p2;
            StopFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = StopFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "K[sZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::core::StopFilter::makeStopSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeStopSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilter::class$ = NULL;
          jmethodID *UpperCaseFilter::mids$ = NULL;
          bool UpperCaseFilter::live$ = false;

          jclass UpperCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilter::UpperCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean UpperCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args);

          static PyMethodDef t_UpperCaseFilter__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilter, t_UpperCaseFilter, ::org::apache::lucene::analysis::TokenFilter, UpperCaseFilter, t_UpperCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_UpperCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilter), module, "UpperCaseFilter", 0);
          }

          void t_UpperCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "class_", make_descriptor(UpperCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilter::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilter::wrap_Object(UpperCaseFilter(((t_UpperCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            UpperCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = UpperCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeQueryBuilder::class$ = NULL;
            jmethodID *NumericRangeQueryBuilder::mids$ = NULL;
            bool NumericRangeQueryBuilder::live$ = false;

            jclass NumericRangeQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeQueryBuilder::NumericRangeQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_NumericRangeQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeQueryBuilder, t_NumericRangeQueryBuilder, ::java::lang::Object, NumericRangeQueryBuilder, t_NumericRangeQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_NumericRangeQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeQueryBuilder), module, "NumericRangeQueryBuilder", 0);
            }

            void t_NumericRangeQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeQueryBuilder::wrap_Object(NumericRangeQueryBuilder(((t_NumericRangeQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeQueryBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *MessageImpl::class$ = NULL;
            jmethodID *MessageImpl::mids$ = NULL;
            bool MessageImpl::live$ = false;

            jclass MessageImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/MessageImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_ddea115c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/Object;)V");
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MessageImpl::MessageImpl(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            MessageImpl::MessageImpl(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ddea115c, a0.this$, a1.this$)) {}

            JArray< ::java::lang::Object > MessageImpl::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String MessageImpl::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String MessageImpl::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data);
            static PyGetSetDef t_MessageImpl__fields_[] = {
              DECLARE_GET_FIELD(t_MessageImpl, arguments),
              DECLARE_GET_FIELD(t_MessageImpl, key),
              DECLARE_GET_FIELD(t_MessageImpl, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MessageImpl__methods_[] = {
              DECLARE_METHOD(t_MessageImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getKey, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_MessageImpl, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MessageImpl, t_MessageImpl, ::java::lang::Object, MessageImpl, t_MessageImpl_init_, 0, 0, t_MessageImpl__fields_, 0, 0);

            void t_MessageImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(MessageImpl), module, "MessageImpl", 0);
            }

            void t_MessageImpl::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "class_", make_descriptor(MessageImpl::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "wrapfn_", make_descriptor(t_MessageImpl::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MessageImpl::initializeClass, 1)))
                return NULL;
              return t_MessageImpl::wrap_Object(MessageImpl(((t_MessageImpl *) arg)->object.this$));
            }
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MessageImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = MessageImpl(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    INT_CALL(object = MessageImpl(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MessageImpl), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ByteParser::class$ = NULL;
        jmethodID *FieldCache$ByteParser::mids$ = NULL;
        bool FieldCache$ByteParser::live$ = false;

        jclass FieldCache$ByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte FieldCache$ByteParser::parseByte(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callByteMethod(this$, mids$[mid_parseByte_7bc03dd0], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ByteParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, parseByte, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ByteParser, t_FieldCache$ByteParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ByteParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ByteParser), module, "FieldCache$ByteParser", 0);
        }

        void t_FieldCache$ByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "class_", make_descriptor(FieldCache$ByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ByteParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ByteParser::wrap_Object(FieldCache$ByteParser(((t_FieldCache$ByteParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jbyte result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseByte", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$expression_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$expression_return::class$ = NULL;
          jmethodID *JavascriptParser$expression_return::mids$ = NULL;
          bool JavascriptParser$expression_return::live$ = false;

          jclass JavascriptParser$expression_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$expression_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$expression_return::JavascriptParser$expression_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$expression_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$expression_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$expression_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$expression_return, t_JavascriptParser$expression_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$expression_return, t_JavascriptParser$expression_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$expression_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$expression_return), module, "JavascriptParser$expression_return", 0);
          }

          void t_JavascriptParser$expression_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "class_", make_descriptor(JavascriptParser$expression_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$expression_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$expression_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$expression_return::wrap_Object(JavascriptParser$expression_return(((t_JavascriptParser$expression_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$expression_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$expression_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$expression_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttributeImpl::class$ = NULL;
          jmethodID *KeywordAttributeImpl::mids$ = NULL;
          bool KeywordAttributeImpl::live$ = false;

          jclass KeywordAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAttributeImpl::KeywordAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void KeywordAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void KeywordAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean KeywordAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint KeywordAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean KeywordAttributeImpl::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttributeImpl::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self);
          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data);
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttributeImpl, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_KeywordAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttributeImpl, t_KeywordAttributeImpl, ::org::apache::lucene::util::AttributeImpl, KeywordAttributeImpl, t_KeywordAttributeImpl_init_, 0, 0, t_KeywordAttributeImpl__fields_, 0, 0);

          void t_KeywordAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttributeImpl), module, "KeywordAttributeImpl", 0);
          }

          void t_KeywordAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "class_", make_descriptor(KeywordAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_KeywordAttributeImpl::wrap_Object(KeywordAttributeImpl(((t_KeywordAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            KeywordAttributeImpl object((jobject) NULL);

            INT_CALL(object = KeywordAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *JavaUtilRegexCapabilities::class$ = NULL;
            jmethodID *JavaUtilRegexCapabilities::mids$ = NULL;
            bool JavaUtilRegexCapabilities::live$ = false;
            jint JavaUtilRegexCapabilities::FLAG_CANON_EQ = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_COMMENTS = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_DOTALL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_LITERAL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_MULTILINE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNICODE_CASE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNIX_LINES = (jint) 0;

            jclass JavaUtilRegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                FLAG_CANON_EQ = env->getStaticIntField(cls, "FLAG_CANON_EQ");
                FLAG_CASE_INSENSITIVE = env->getStaticIntField(cls, "FLAG_CASE_INSENSITIVE");
                FLAG_COMMENTS = env->getStaticIntField(cls, "FLAG_COMMENTS");
                FLAG_DOTALL = env->getStaticIntField(cls, "FLAG_DOTALL");
                FLAG_LITERAL = env->getStaticIntField(cls, "FLAG_LITERAL");
                FLAG_MULTILINE = env->getStaticIntField(cls, "FLAG_MULTILINE");
                FLAG_UNICODE_CASE = env->getStaticIntField(cls, "FLAG_UNICODE_CASE");
                FLAG_UNIX_LINES = env->getStaticIntField(cls, "FLAG_UNIX_LINES");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher JavaUtilRegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }

            jboolean JavaUtilRegexCapabilities::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint JavaUtilRegexCapabilities::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args);
            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args);

            static PyMethodDef t_JavaUtilRegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, compile, METH_O),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, equals, METH_VARARGS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities, ::java::lang::Object, JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities_init_, 0, 0, 0, 0, 0);

            void t_JavaUtilRegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(JavaUtilRegexCapabilities), module, "JavaUtilRegexCapabilities", 0);
            }

            void t_JavaUtilRegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "class_", make_descriptor(JavaUtilRegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_JavaUtilRegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JavaUtilRegexCapabilities::initializeClass);
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CANON_EQ", make_descriptor(JavaUtilRegexCapabilities::FLAG_CANON_EQ));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CASE_INSENSITIVE", make_descriptor(JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_COMMENTS", make_descriptor(JavaUtilRegexCapabilities::FLAG_COMMENTS));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_DOTALL", make_descriptor(JavaUtilRegexCapabilities::FLAG_DOTALL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_LITERAL", make_descriptor(JavaUtilRegexCapabilities::FLAG_LITERAL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_MULTILINE", make_descriptor(JavaUtilRegexCapabilities::FLAG_MULTILINE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNICODE_CASE", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNICODE_CASE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNIX_LINES", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNIX_LINES));
            }

            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_JavaUtilRegexCapabilities::wrap_Object(JavaUtilRegexCapabilities(((t_JavaUtilRegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  INT_CALL(object = JavaUtilRegexCapabilities());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = JavaUtilRegexCapabilities(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }

            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragmentsBuilder::class$ = NULL;
          jmethodID *BaseFragmentsBuilder::mids$ = NULL;
          bool BaseFragmentsBuilder::live$ = false;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_POST_TAGS = NULL;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_PRE_TAGS = NULL;

          jclass BaseFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getMultiValuedSeparator_54c6a173] = env->getMethodID(cls, "getMultiValuedSeparator", "()C");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");
              mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a] = env->getMethodID(cls, "isDiscreteMultiValueHighlighting", "()Z");
              mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f] = env->getMethodID(cls, "setDiscreteMultiValueHighlighting", "(Z)V");
              mids$[mid_setMultiValuedSeparator_87fd545a] = env->getMethodID(cls, "setMultiValuedSeparator", "(C)V");
              mids$[mid_getFields_cc0d693c] = env->getMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)[Lorg/apache/lucene/document/Field;");
              mids$[mid_discreteMultiValueHighlighting_d191731d] = env->getMethodID(cls, "discreteMultiValueHighlighting", "(Ljava/util/List;[Lorg/apache/lucene/document/Field;)Ljava/util/List;");
              mids$[mid_makeFragment_b70fa26e] = env->getMethodID(cls, "makeFragment", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getFragmentSourceMSO_a32be9ad] = env->getMethodID(cls, "getFragmentSourceMSO", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II[I)Ljava/lang/String;");
              mids$[mid_getFragmentSource_771056c3] = env->getMethodID(cls, "getFragmentSource", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II)Ljava/lang/String;");
              mids$[mid_getPreTag_64aeb14d] = env->getMethodID(cls, "getPreTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPreTag_141401b3] = env->getMethodID(cls, "getPreTag", "(I)Ljava/lang/String;");
              mids$[mid_getPostTag_64aeb14d] = env->getMethodID(cls, "getPostTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPostTag_141401b3] = env->getMethodID(cls, "getPostTag", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              COLORED_POST_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_POST_TAGS", "[Ljava/lang/String;"));
              COLORED_PRE_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_PRE_TAGS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }

          jchar BaseFragmentsBuilder::getMultiValuedSeparator() const
          {
            return env->callCharMethod(this$, mids$[mid_getMultiValuedSeparator_54c6a173]);
          }

          ::java::util::List BaseFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }

          jboolean BaseFragmentsBuilder::isDiscreteMultiValueHighlighting() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a]);
          }

          void BaseFragmentsBuilder::setDiscreteMultiValueHighlighting(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f], a0);
          }

          void BaseFragmentsBuilder::setMultiValuedSeparator(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiValuedSeparator_87fd545a], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyGetSetDef t_BaseFragmentsBuilder__fields_[] = {
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, discreteMultiValueHighlighting),
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, multiValuedSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BaseFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragments, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getMultiValuedSeparator, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getWeightedFragInfoList, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, isDiscreteMultiValueHighlighting, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setDiscreteMultiValueHighlighting, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setMultiValuedSeparator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragmentsBuilder, t_BaseFragmentsBuilder, ::java::lang::Object, BaseFragmentsBuilder, abstract_init, 0, 0, t_BaseFragmentsBuilder__fields_, 0, 0);

          void t_BaseFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragmentsBuilder), module, "BaseFragmentsBuilder", 0);
          }

          void t_BaseFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "class_", make_descriptor(BaseFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragmentsBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_POST_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_POST_TAGS->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_PRE_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_PRE_TAGS->this$).wrap()));
          }

          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragmentsBuilder::wrap_Object(BaseFragmentsBuilder(((t_BaseFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedFragInfoList", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscreteMultiValueHighlighting(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscreteMultiValueHighlighting", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jchar a0;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(self->object.setMultiValuedSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiValuedSeparator", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(value);
          }
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscreteMultiValueHighlighting(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discreteMultiValueHighlighting", arg);
            return -1;
          }

          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jchar value;
              if (!parseArg(arg, "C", &value))
              {
                INT_CALL(self->object.setMultiValuedSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiValuedSeparator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadTermQuery::class$ = NULL;
          jmethodID *PayloadTermQuery::mids$ = NULL;
          bool PayloadTermQuery::live$ = false;

          jclass PayloadTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c933262d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_init$_dc8be042] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;Z)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_c933262d, a0.this$, a1.this$)) {}

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_dc8be042, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::Weight PayloadTermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args);

          static PyMethodDef t_PayloadTermQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadTermQuery, t_PayloadTermQuery, ::org::apache::lucene::search::spans::SpanTermQuery, PayloadTermQuery, t_PayloadTermQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadTermQuery), module, "PayloadTermQuery", 0);
          }

          void t_PayloadTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "class_", make_descriptor(PayloadTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadTermQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadTermQuery::wrap_Object(PayloadTermQuery(((t_PayloadTermQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                jboolean a2;
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiBits$SubResult.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiBits$SubResult::class$ = NULL;
        jmethodID *MultiBits$SubResult::mids$ = NULL;
        jfieldID *MultiBits$SubResult::fids$ = NULL;
        bool MultiBits$SubResult::live$ = false;

        jclass MultiBits$SubResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiBits$SubResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_matches] = env->getFieldID(cls, "matches", "Z");
            fids$[fid_result] = env->getFieldID(cls, "result", "Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiBits$SubResult::MultiBits$SubResult() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean MultiBits$SubResult::_get_matches() const
        {
          return env->getBooleanField(this$, fids$[fid_matches]);
        }

        void MultiBits$SubResult::_set_matches(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_matches], a0);
        }

        ::org::apache::lucene::util::Bits MultiBits$SubResult::_get_result() const
        {
          return ::org::apache::lucene::util::Bits(env->getObjectField(this$, fids$[fid_result]));
        }

        void MultiBits$SubResult::_set_result(const ::org::apache::lucene::util::Bits & a0) const
        {
          env->setObjectField(this$, fids$[fid_result], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data);
        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data);
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiBits$SubResult__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, matches),
          DECLARE_GETSET_FIELD(t_MultiBits$SubResult, result),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiBits$SubResult__methods_[] = {
          DECLARE_METHOD(t_MultiBits$SubResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits$SubResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiBits$SubResult, t_MultiBits$SubResult, ::java::lang::Object, MultiBits$SubResult, t_MultiBits$SubResult_init_, 0, 0, t_MultiBits$SubResult__fields_, 0, 0);

        void t_MultiBits$SubResult::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiBits$SubResult), module, "MultiBits$SubResult", 0);
        }

        void t_MultiBits$SubResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "class_", make_descriptor(MultiBits$SubResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "wrapfn_", make_descriptor(t_MultiBits$SubResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiBits$SubResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiBits$SubResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiBits$SubResult::initializeClass, 1)))
            return NULL;
          return t_MultiBits$SubResult::wrap_Object(MultiBits$SubResult(((t_MultiBits$SubResult *) arg)->object.this$));
        }
        static PyObject *t_MultiBits$SubResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiBits$SubResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiBits$SubResult_init_(t_MultiBits$SubResult *self, PyObject *args, PyObject *kwds)
        {
          MultiBits$SubResult object((jobject) NULL);

          INT_CALL(object = MultiBits$SubResult());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiBits$SubResult_get__matches(t_MultiBits$SubResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_matches());
          Py_RETURN_BOOL(value);
        }
        static int t_MultiBits$SubResult_set__matches(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_matches(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matches", arg);
          return -1;
        }

        static PyObject *t_MultiBits$SubResult_get__result(t_MultiBits$SubResult *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_result());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
        static int t_MultiBits$SubResult_set__result(t_MultiBits$SubResult *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::Bits::initializeClass, &value))
          {
            INT_CALL(self->object._set_result(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "result", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSet::class$ = NULL;
        jmethodID *DocIdSet::mids$ = NULL;
        bool DocIdSet::live$ = false;
        DocIdSet *DocIdSet::EMPTY = NULL;

        jclass DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new DocIdSet(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/DocIdSet;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSet::DocIdSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Bits DocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jlong DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSet_bits(t_DocIdSet *self);
        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self);
        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self);
        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self);
        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data);
        static PyGetSetDef t_DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdSet__methods_[] = {
          DECLARE_METHOD(t_DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, bits, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, isCacheable, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdSet, t_DocIdSet, ::java::lang::Object, DocIdSet, t_DocIdSet_init_, 0, 0, t_DocIdSet__fields_, 0, 0);

        void t_DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSet), module, "DocIdSet", 0);
        }

        void t_DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "class_", make_descriptor(DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocIdSet).tp_dict, "EMPTY", make_descriptor(t_DocIdSet::wrap_Object(*DocIdSet::EMPTY)));
        }

        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSet::initializeClass, 1)))
            return NULL;
          return t_DocIdSet::wrap_Object(DocIdSet(((t_DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds)
        {
          DocIdSet object((jobject) NULL);

          INT_CALL(object = DocIdSet());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSet_bits(t_DocIdSet *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.bits());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_isCacheable(t_DocIdSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCacheable());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_ramBytesUsed(t_DocIdSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSet_get__cacheable(t_DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts::class$ = NULL;
          jmethodID *PackedInts::mids$ = NULL;
          bool PackedInts::live$ = false;
          ::java::lang::String *PackedInts::CODEC_NAME = NULL;
          jfloat PackedInts::COMPACT = (jfloat) 0;
          jfloat PackedInts::DEFAULT = (jfloat) 0;
          jint PackedInts::DEFAULT_BUFFER_SIZE = (jint) 0;
          jfloat PackedInts::FAST = (jfloat) 0;
          jfloat PackedInts::FASTEST = (jfloat) 0;
          jint PackedInts::VERSION_BYTE_ALIGNED = (jint) 0;
          jint PackedInts::VERSION_CURRENT = (jint) 0;
          jint PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG = (jint) 0;
          jint PackedInts::VERSION_START = (jint) 0;

          jclass PackedInts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_checkVersion_39c7bd3c] = env->getStaticMethodID(cls, "checkVersion", "(I)V");
              mids$[mid_copy_5dfb99d8] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/packed/PackedInts$Reader;ILorg/apache/lucene/util/packed/PackedInts$Mutable;III)V");
              mids$[mid_fastestFormatAndBits_a44dbe2e] = env->getStaticMethodID(cls, "fastestFormatAndBits", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$FormatAndBits;");
              mids$[mid_getDecoder_a1fc44e7] = env->getStaticMethodID(cls, "getDecoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Decoder;");
              mids$[mid_getDirectReader_dd96fa63] = env->getStaticMethodID(cls, "getDirectReader", "(Lorg/apache/lucene/store/IndexInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_6d5658ed] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_185fc68d] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getEncoder_82bbe26f] = env->getStaticMethodID(cls, "getEncoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Encoder;");
              mids$[mid_getMutable_5fda8e82] = env->getStaticMethodID(cls, "getMutable", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getMutable_2ab94ab5] = env->getStaticMethodID(cls, "getMutable", "(IILorg/apache/lucene/util/packed/PackedInts$Format;)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getReader_5e1a18f4] = env->getStaticMethodID(cls, "getReader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderIterator_edd93a0e] = env->getStaticMethodID(cls, "getReaderIterator", "(Lorg/apache/lucene/store/DataInput;I)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderIteratorNoHeader_25f812d4] = env->getStaticMethodID(cls, "getReaderIteratorNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;IIII)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderNoHeader_5f216dfc] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderNoHeader_6f168df2] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getWriter_7e94d221] = env->getStaticMethodID(cls, "getWriter", "(Lorg/apache/lucene/store/DataOutput;IIF)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_getWriterNoHeader_ec8145b0] = env->getStaticMethodID(cls, "getWriterNoHeader", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_maxValue_39c7bd20] = env->getStaticMethodID(cls, "maxValue", "(I)J");
              mids$[mid_readHeader_1e64173a] = env->getStaticMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Header;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
              COMPACT = env->getStaticFloatField(cls, "COMPACT");
              DEFAULT = env->getStaticFloatField(cls, "DEFAULT");
              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              FAST = env->getStaticFloatField(cls, "FAST");
              FASTEST = env->getStaticFloatField(cls, "FASTEST");
              VERSION_BYTE_ALIGNED = env->getStaticIntField(cls, "VERSION_BYTE_ALIGNED");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_MONOTONIC_WITHOUT_ZIGZAG = env->getStaticIntField(cls, "VERSION_MONOTONIC_WITHOUT_ZIGZAG");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts::PackedInts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void PackedInts::checkVersion(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_checkVersion_39c7bd3c], a0);
          }

          void PackedInts::copy(const ::org::apache::lucene::util::packed::PackedInts$Reader & a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Mutable & a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_copy_5dfb99d8], a0.this$, a1, a2.this$, a3, a4, a5);
          }

          ::org::apache::lucene::util::packed::PackedInts$FormatAndBits PackedInts::fastestFormatAndBits(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$FormatAndBits(env->callStaticObjectMethod(cls, mids$[mid_fastestFormatAndBits_a44dbe2e], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Decoder PackedInts::getDecoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Decoder(env->callStaticObjectMethod(cls, mids$[mid_getDecoder_a1fc44e7], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReader(const ::org::apache::lucene::store::IndexInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReader_dd96fa63], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_6d5658ed], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_185fc68d], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Encoder PackedInts::getEncoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Encoder(env->callStaticObjectMethod(cls, mids$[mid_getEncoder_82bbe26f], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_5fda8e82], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Format & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_2ab94ab5], a0, a1, a2.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReader_5e1a18f4], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIterator_edd93a0e], a0.this$, a1));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIteratorNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIteratorNoHeader_25f812d4], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_5f216dfc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_6f168df2], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1, jint a2, jfloat a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriter_7e94d221], a0.this$, a1, a2, a3));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriterNoHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriterNoHeader_ec8145b0], a0.this$, a1.this$, a2, a3, a4));
          }

          jlong PackedInts::maxValue(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_maxValue_39c7bd20], a0);
          }

          ::org::apache::lucene::util::packed::PackedInts$Header PackedInts::readHeader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Header(env->callStaticObjectMethod(cls, mids$[mid_readHeader_1e64173a], a0.this$));
          }

          jint PackedInts::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_PackedInts__methods_[] = {
            DECLARE_METHOD(t_PackedInts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, checkVersion, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, fastestFormatAndBits, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDecoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getEncoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getMutable, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIterator, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIteratorNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriter, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriterNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, maxValue, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, readHeader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts, t_PackedInts, ::java::lang::Object, PackedInts, t_PackedInts_init_, 0, 0, 0, 0, 0);

          void t_PackedInts::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts), module, "PackedInts", 0);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Header", make_descriptor(&PY_TYPE(PackedInts$Header)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Writer", make_descriptor(&PY_TYPE(PackedInts$Writer)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "NullReader", make_descriptor(&PY_TYPE(PackedInts$NullReader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Mutable", make_descriptor(&PY_TYPE(PackedInts$Mutable)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "ReaderIterator", make_descriptor(&PY_TYPE(PackedInts$ReaderIterator)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Reader", make_descriptor(&PY_TYPE(PackedInts$Reader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Encoder", make_descriptor(&PY_TYPE(PackedInts$Encoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Decoder", make_descriptor(&PY_TYPE(PackedInts$Decoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FormatAndBits", make_descriptor(&PY_TYPE(PackedInts$FormatAndBits)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Format", make_descriptor(&PY_TYPE(PackedInts$Format)));
          }

          void t_PackedInts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "class_", make_descriptor(PackedInts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "wrapfn_", make_descriptor(t_PackedInts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "CODEC_NAME", make_descriptor(j2p(*PackedInts::CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "COMPACT", make_descriptor(PackedInts::COMPACT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT", make_descriptor(PackedInts::DEFAULT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(PackedInts::DEFAULT_BUFFER_SIZE));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FAST", make_descriptor(PackedInts::FAST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FASTEST", make_descriptor(PackedInts::FASTEST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_BYTE_ALIGNED", make_descriptor(PackedInts::VERSION_BYTE_ALIGNED));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_CURRENT", make_descriptor(PackedInts::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_MONOTONIC_WITHOUT_ZIGZAG", make_descriptor(PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_START", make_descriptor(PackedInts::VERSION_START));
          }

          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts::initializeClass, 1)))
              return NULL;
            return t_PackedInts::wrap_Object(PackedInts(((t_PackedInts *) arg)->object.this$));
          }
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds)
          {
            PackedInts object((jobject) NULL);

            INT_CALL(object = PackedInts());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::checkVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "checkVersion", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Reader a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$Mutable a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;

            if (!parseArgs(args, "kIkIII", ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Mutable::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::copy(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat a2;
            ::org::apache::lucene::util::packed::PackedInts$FormatAndBits result((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::fastestFormatAndBits(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$FormatAndBits::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fastestFormatAndBits", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Decoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDecoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Decoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDecoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDirectReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getDirectReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Encoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getEncoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Encoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getEncoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::packed::PackedInts$Format a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIK", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getMutable", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIterator(a0, a1));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIterator", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            jint a5;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kKIIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIteratorNoHeader(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIteratorNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            jint a2;
            jfloat a3;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kIIF", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriter(a0, a1, a2, a3));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriter", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriterNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriterNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::maxValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "maxValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Header result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::readHeader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Header::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readHeader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/CompressionTools.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *CompressionTools::class$ = NULL;
        jmethodID *CompressionTools::mids$ = NULL;
        bool CompressionTools::live$ = false;

        jclass CompressionTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/CompressionTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compress_1193226d] = env->getStaticMethodID(cls, "compress", "([B)[B");
            mids$[mid_compress_3d448975] = env->getStaticMethodID(cls, "compress", "([BII)[B");
            mids$[mid_compress_dad27ce1] = env->getStaticMethodID(cls, "compress", "([BIII)[B");
            mids$[mid_compressString_94a731a4] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;)[B");
            mids$[mid_compressString_7bb29782] = env->getStaticMethodID(cls, "compressString", "(Ljava/lang/String;I)[B");
            mids$[mid_decompress_1193226d] = env->getStaticMethodID(cls, "decompress", "([B)[B");
            mids$[mid_decompress_942a4f60] = env->getStaticMethodID(cls, "decompress", "(Lorg/apache/lucene/util/BytesRef;)[B");
            mids$[mid_decompress_3d448975] = env->getStaticMethodID(cls, "decompress", "([BII)[B");
            mids$[mid_decompressString_edfda73b] = env->getStaticMethodID(cls, "decompressString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
            mids$[mid_decompressString_0f6e0f86] = env->getStaticMethodID(cls, "decompressString", "([B)Ljava/lang/String;");
            mids$[mid_decompressString_f7ab0d9e] = env->getStaticMethodID(cls, "decompressString", "([BII)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_3d448975], a0.this$, a1, a2));
        }

        JArray< jbyte > CompressionTools::compress(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compress_dad27ce1], a0.this$, a1, a2, a3));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_94a731a4], a0.this$));
        }

        JArray< jbyte > CompressionTools::compressString(const ::java::lang::String & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_compressString_7bb29782], a0.this$, a1));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_1193226d], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_942a4f60], a0.this$));
        }

        JArray< jbyte > CompressionTools::decompress(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_decompress_3d448975], a0.this$, a1, a2));
        }

        ::java::lang::String CompressionTools::decompressString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_edfda73b], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_0f6e0f86], a0.this$));
        }

        ::java::lang::String CompressionTools::decompressString(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_decompressString_f7ab0d9e], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args);
        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CompressionTools__methods_[] = {
          DECLARE_METHOD(t_CompressionTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, compressString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompress, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CompressionTools, decompressString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompressionTools, t_CompressionTools, ::java::lang::Object, CompressionTools, abstract_init, 0, 0, 0, 0, 0);

        void t_CompressionTools::install(PyObject *module)
        {
          installType(&PY_TYPE(CompressionTools), module, "CompressionTools", 0);
        }

        void t_CompressionTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "class_", make_descriptor(CompressionTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "wrapfn_", make_descriptor(t_CompressionTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompressionTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompressionTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompressionTools::initializeClass, 1)))
            return NULL;
          return t_CompressionTools::wrap_Object(CompressionTools(((t_CompressionTools *) arg)->object.this$));
        }
        static PyObject *t_CompressionTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompressionTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompressionTools_compress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2));
                return result.wrap();
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compress(a0, a1, a2, a3));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_compressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::compressString(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "compressString", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompress(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0));
                return result.wrap();
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompress(a0, a1, a2));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "decompress", args);
          return NULL;
        }

        static PyObject *t_CompressionTools_decompressString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0));
                return j2p(result);
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::CompressionTools::decompressString(a0, a1, a2));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "decompressString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptCompiler.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptCompiler::class$ = NULL;
          jmethodID *JavascriptCompiler::mids$ = NULL;
          bool JavascriptCompiler::live$ = false;

          jclass JavascriptCompiler::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptCompiler");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compile_3f39a74f] = env->getStaticMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/Expression;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::expressions::Expression JavascriptCompiler::compile(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::expressions::Expression(env->callStaticObjectMethod(cls, mids$[mid_compile_3f39a74f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_JavascriptCompiler__methods_[] = {
            DECLARE_METHOD(t_JavascriptCompiler, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, compile, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptCompiler, t_JavascriptCompiler, ::java::lang::Object, JavascriptCompiler, abstract_init, 0, 0, 0, 0, 0);

          void t_JavascriptCompiler::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptCompiler), module, "JavascriptCompiler", 0);
          }

          void t_JavascriptCompiler::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "class_", make_descriptor(JavascriptCompiler::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "wrapfn_", make_descriptor(t_JavascriptCompiler::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptCompiler::initializeClass, 1)))
              return NULL;
            return t_JavascriptCompiler::wrap_Object(JavascriptCompiler(((t_JavascriptCompiler *) arg)->object.this$));
          }
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptCompiler::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::expressions::Expression result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::JavascriptCompiler::compile(a0));
              return ::org::apache::lucene::expressions::t_Expression::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "compile", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramFilterFactory.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramFilterFactory::class$ = NULL;
          jmethodID *NGramFilterFactory::mids$ = NULL;
          bool NGramFilterFactory::live$ = false;

          jclass NGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f78e1f4d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ngram/NGramTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramFilterFactory::NGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ngram::NGramTokenFilter NGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ngram::NGramTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f78e1f4d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_NGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramFilterFactory, t_NGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NGramFilterFactory, t_NGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramFilterFactory), module, "NGramFilterFactory", 0);
          }

          void t_NGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "class_", make_descriptor(NGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NGramFilterFactory::wrap_Object(NGramFilterFactory(((t_NGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ngram::NGramTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ngram::t_NGramTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *OrQuery::class$ = NULL;
            jmethodID *OrQuery::mids$ = NULL;
            bool OrQuery::live$ = false;

            jclass OrQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/OrQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrQuery::OrQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            void OrQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String OrQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query OrQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg);
            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self);
            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args);

            static PyMethodDef t_OrQuery__methods_[] = {
              DECLARE_METHOD(t_OrQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_OrQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_OrQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrQuery, t_OrQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, OrQuery, t_OrQuery_init_, 0, 0, 0, 0, 0);

            void t_OrQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(OrQuery), module, "OrQuery", 0);
            }

            void t_OrQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "class_", make_descriptor(OrQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "wrapfn_", make_descriptor(t_OrQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrQuery::initializeClass, 1)))
                return NULL;
              return t_OrQuery::wrap_Object(OrQuery(((t_OrQuery *) arg)->object.this$));
            }
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              OrQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = OrQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenFilterFactory::class$ = NULL;
          jmethodID *TokenFilterFactory::mids$ = NULL;
          bool TokenFilterFactory::live$ = false;

          jclass TokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenFilters_03e99967] = env->getStaticMethodID(cls, "availableTokenFilters", "()Ljava/util/Set;");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_forName_489c139a] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenFilters_9110048d] = env->getStaticMethodID(cls, "reloadTokenFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenFilterFactory::availableTokenFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenFilters_03e99967]));
          }

          ::org::apache::lucene::analysis::TokenStream TokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          TokenFilterFactory TokenFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_489c139a], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenFilterFactory::reloadTokenFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type);
          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, availableTokenFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, create, METH_O),
            DECLARE_METHOD(t_TokenFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, reloadTokenFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenFilterFactory, t_TokenFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenFilterFactory), module, "TokenFilterFactory", 0);
          }

          void t_TokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "class_", make_descriptor(TokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenFilterFactory::wrap_Object(TokenFilterFactory(((t_TokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::availableTokenFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::forName(a0, a1));
              return t_TokenFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenFilterFactory::reloadTokenFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40DocValuesFormat::class$ = NULL;
          jmethodID *Lucene40DocValuesFormat::mids$ = NULL;
          bool Lucene40DocValuesFormat::live$ = false;
          jint Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene40DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40DocValuesFormat::Lucene40DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40DocValuesFormat, t_Lucene40DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene40DocValuesFormat, t_Lucene40DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40DocValuesFormat), module, "Lucene40DocValuesFormat", 0);
          }

          void t_Lucene40DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene40DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40DocValuesFormat::wrap_Object(Lucene40DocValuesFormat(((t_Lucene40DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene40DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparatorSource.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparatorSource::class$ = NULL;
        jmethodID *PythonFieldComparatorSource::mids$ = NULL;
        bool PythonFieldComparatorSource::live$ = false;

        jclass PythonFieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparatorSource::PythonFieldComparatorSource() : ::org::apache::lucene::search::FieldComparatorSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparatorSource::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparatorSource::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparatorSource::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self);
        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args);
        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3);
        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data);
        static PyGetSetDef t_PythonFieldComparatorSource__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparatorSource, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparatorSource, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparatorSource, t_PythonFieldComparatorSource, ::org::apache::lucene::search::FieldComparatorSource, PythonFieldComparatorSource, t_PythonFieldComparatorSource_init_, 0, 0, t_PythonFieldComparatorSource__fields_, 0, 0);

        void t_PythonFieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparatorSource), module, "PythonFieldComparatorSource", 1);
        }

        void t_PythonFieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "class_", make_descriptor(PythonFieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparatorSource::initializeClass);
          JNINativeMethod methods[] = {
            { "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparatorSource_newComparator0 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparatorSource_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparatorSource::wrap_Object(PythonFieldComparatorSource(((t_PythonFieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFieldComparatorSource_init_(t_PythonFieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparatorSource object((jobject) NULL);

          INT_CALL(object = PythonFieldComparatorSource());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparatorSource_finalize(t_PythonFieldComparatorSource *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparatorSource_pythonExtension(t_PythonFieldComparatorSource *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFieldComparatorSource_newComparator0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jint a2, jboolean a3)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o3 = (a3 ? Py_True : Py_False);
          PyObject *result = PyObject_CallMethod(obj, "newComparator", "OiiO", o0, (int) a1, (int) a2, o3);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("newComparator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparatorSource_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparatorSource::mids$[PythonFieldComparatorSource::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFieldComparatorSource_get__self(t_PythonFieldComparatorSource *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractBlockPackedWriter::class$ = NULL;
          jmethodID *AbstractBlockPackedWriter::mids$ = NULL;
          bool AbstractBlockPackedWriter::live$ = false;

          jclass AbstractBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_27875f57] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeValues_39c7bd3c] = env->getMethodID(cls, "writeValues", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractBlockPackedWriter::AbstractBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void AbstractBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractBlockPackedWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jlong AbstractBlockPackedWriter::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void AbstractBlockPackedWriter::reset(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_27875f57], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg);

          static PyMethodDef t_AbstractBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_AbstractBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, add, METH_O),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, ord, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractBlockPackedWriter, t_AbstractBlockPackedWriter, ::java::lang::Object, AbstractBlockPackedWriter, t_AbstractBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_AbstractBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractBlockPackedWriter), module, "AbstractBlockPackedWriter", 0);
          }

          void t_AbstractBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "class_", make_descriptor(AbstractBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_AbstractBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_AbstractBlockPackedWriter::wrap_Object(AbstractBlockPackedWriter(((t_AbstractBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            AbstractBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
